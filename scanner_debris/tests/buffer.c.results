Line 21: Unrecognized token: 35
Line 21: ID = include
Line 21: <
Line 21: ID = linux
Line 21: /
Line 21: ID = config
Line 21: Unrecognized token: 46
Line 21: ID = h
Line 21: >
Line 22: Unrecognized token: 35
Line 22: ID = include
Line 22: <
Line 22: ID = linux
Line 22: /
Line 22: ID = kernel
Line 22: Unrecognized token: 46
Line 22: ID = h
Line 22: >
Line 23: Unrecognized token: 35
Line 23: ID = include
Line 23: <
Line 23: ID = linux
Line 23: /
Line 23: ID = fs
Line 23: Unrecognized token: 46
Line 23: ID = h
Line 23: >
Line 24: Unrecognized token: 35
Line 24: ID = include
Line 24: <
Line 24: ID = linux
Line 24: /
Line 24: ID = mm
Line 24: Unrecognized token: 46
Line 24: ID = h
Line 24: >
Line 25: Unrecognized token: 35
Line 25: ID = include
Line 25: <
Line 25: ID = linux
Line 25: /
Line 25: ID = percpu
Line 25: Unrecognized token: 46
Line 25: ID = h
Line 25: >
Line 26: Unrecognized token: 35
Line 26: ID = include
Line 26: <
Line 26: ID = linux
Line 26: /
Line 26: ID = slab
Line 26: Unrecognized token: 46
Line 26: ID = h
Line 26: >
Line 27: Unrecognized token: 35
Line 27: ID = include
Line 27: <
Line 27: ID = linux
Line 27: /
Line 27: ID = smp_lock
Line 27: Unrecognized token: 46
Line 27: ID = h
Line 27: >
Line 28: Unrecognized token: 35
Line 28: ID = include
Line 28: <
Line 28: ID = linux
Line 28: /
Line 28: ID = blkdev
Line 28: Unrecognized token: 46
Line 28: ID = h
Line 28: >
Line 29: Unrecognized token: 35
Line 29: ID = include
Line 29: <
Line 29: ID = linux
Line 29: /
Line 29: ID = file
Line 29: Unrecognized token: 46
Line 29: ID = h
Line 29: >
Line 30: Unrecognized token: 35
Line 30: ID = include
Line 30: <
Line 30: ID = linux
Line 30: /
Line 30: ID = quotaops
Line 30: Unrecognized token: 46
Line 30: ID = h
Line 30: >
Line 31: Unrecognized token: 35
Line 31: ID = include
Line 31: <
Line 31: ID = linux
Line 31: /
Line 31: ID = highmem
Line 31: Unrecognized token: 46
Line 31: ID = h
Line 31: >
Line 32: Unrecognized token: 35
Line 32: ID = include
Line 32: <
Line 32: ID = linux
Line 32: /
Line 32: ID = module
Line 32: Unrecognized token: 46
Line 32: ID = h
Line 32: >
Line 33: Unrecognized token: 35
Line 33: ID = include
Line 33: <
Line 33: ID = linux
Line 33: /
Line 33: ID = writeback
Line 33: Unrecognized token: 46
Line 33: ID = h
Line 33: >
Line 34: Unrecognized token: 35
Line 34: ID = include
Line 34: <
Line 34: ID = linux
Line 34: /
Line 34: ID = hash
Line 34: Unrecognized token: 46
Line 34: ID = h
Line 34: >
Line 35: Unrecognized token: 35
Line 35: ID = include
Line 35: <
Line 35: ID = linux
Line 35: /
Line 35: ID = suspend
Line 35: Unrecognized token: 46
Line 35: ID = h
Line 35: >
Line 36: Unrecognized token: 35
Line 36: ID = include
Line 36: <
Line 36: ID = linux
Line 36: /
Line 36: ID = buffer_head
Line 36: Unrecognized token: 46
Line 36: ID = h
Line 36: >
Line 37: Unrecognized token: 35
Line 37: ID = include
Line 37: <
Line 37: ID = linux
Line 37: /
Line 37: ID = bio
Line 37: Unrecognized token: 46
Line 37: ID = h
Line 37: >
Line 38: Unrecognized token: 35
Line 38: ID = include
Line 38: <
Line 38: ID = linux
Line 38: /
Line 38: ID = notifier
Line 38: Unrecognized token: 46
Line 38: ID = h
Line 38: >
Line 39: Unrecognized token: 35
Line 39: ID = include
Line 39: <
Line 39: ID = linux
Line 39: /
Line 39: ID = cpu
Line 39: Unrecognized token: 46
Line 39: ID = h
Line 39: >
Line 40: Unrecognized token: 35
Line 40: ID = include
Line 40: <
Line 40: ID = asm
Line 40: /
Line 40: ID = bitops
Line 40: Unrecognized token: 46
Line 40: ID = h
Line 40: >
Line 42: ID = static
Line 42: void
Line 42: ID = invalidate_bh_lrus
Line 42: (
Line 42: void
Line 42: )
Line 42: ;
Line 44: Unrecognized token: 35
Line 44: ID = define
Line 44: ID = BH_ENTRY
Line 44: (
Line 44: ID = list
Line 44: )
Line 44: ID = list_entry
Line 44: (
Line 44: (
Line 44: ID = list
Line 44: )
Line 44: ,
Line 44: ID = struct
Line 44: ID = buffer_head
Line 44: ,
Line 44: ID = b_assoc_buffers
Line 44: )
Line 46: ID = struct
Line 46: ID = bh_wait_queue
Line 46: {
Line 47: ID = struct
Line 47: ID = buffer_head
Line 47: *
Line 47: ID = bh
Line 47: ;
Line 48: ID = wait_queue_t
Line 48: ID = wait
Line 48: ;
Line 49: }
Line 49: ;
Line 51: Unrecognized token: 35
Line 51: ID = define
Line 51: Unrecognized token: 95
Line 51: Unrecognized token: 95
Line 51: ID = DEFINE_BH_WAIT
Line 51: (
Line 51: ID = name
Line 51: ,
Line 51: ID = b
Line 51: ,
Line 51: ID = f
Line 51: )
Line 51: Unrecognized token: 92
Line 52: ID = struct
Line 52: ID = bh_wait_queue
Line 52: ID = name
Line 52: =
Line 52: {
Line 52: Unrecognized token: 92
Line 53: Unrecognized token: 46
Line 53: ID = bh
Line 53: =
Line 53: ID = b
Line 53: ,
Line 53: Unrecognized token: 92
Line 54: Unrecognized token: 46
Line 54: ID = wait
Line 54: =
Line 54: {
Line 54: Unrecognized token: 92
Line 55: Unrecognized token: 46
Line 55: ID = task
Line 55: =
Line 55: ID = current
Line 55: ,
Line 55: Unrecognized token: 92
Line 56: Unrecognized token: 46
Line 56: ID = flags
Line 56: =
Line 56: ID = f
Line 56: ,
Line 56: Unrecognized token: 92
Line 57: Unrecognized token: 46
Line 57: ID = func
Line 57: =
Line 57: ID = bh_wake_function
Line 57: ,
Line 57: Unrecognized token: 92
Line 58: Unrecognized token: 46
Line 58: ID = task_list
Line 58: =
Line 58: Unrecognized token: 92
Line 59: ID = LIST_HEAD_INIT
Line 59: (
Line 59: ID = name
Line 59: Unrecognized token: 46
Line 59: ID = wait
Line 59: Unrecognized token: 46
Line 59: ID = task_list
Line 59: )
Line 59: ,
Line 59: Unrecognized token: 92
Line 60: }
Line 60: ,
Line 60: Unrecognized token: 92
Line 61: }
Line 62: Unrecognized token: 35
Line 62: ID = define
Line 62: ID = DEFINE_BH_WAIT
Line 62: (
Line 62: ID = name
Line 62: ,
Line 62: ID = bh
Line 62: )
Line 62: Unrecognized token: 95
Line 62: Unrecognized token: 95
Line 62: ID = DEFINE_BH_WAIT
Line 62: (
Line 62: ID = name
Line 62: ,
Line 62: ID = bh
Line 62: ,
Line 62: INTCON = 0
Line 62: )
Line 63: Unrecognized token: 35
Line 63: ID = define
Line 63: ID = DEFINE_BH_WAIT_EXCLUSIVE
Line 63: (
Line 63: ID = name
Line 63: ,
Line 63: ID = bh
Line 63: )
Line 63: Unrecognized token: 92
Line 64: Unrecognized token: 95
Line 64: Unrecognized token: 95
Line 64: ID = DEFINE_BH_WAIT
Line 64: (
Line 64: ID = name
Line 64: ,
Line 64: ID = bh
Line 64: ,
Line 64: ID = WQ_FLAG_EXCLUSIVE
Line 64: )
Line 69: Unrecognized token: 35
Line 69: ID = define
Line 69: ID = BH_WAIT_TABLE_ORDER
Line 69: INTCON = 7
Line 70: ID = static
Line 70: ID = struct
Line 70: ID = bh_wait_queue_head
Line 70: {
Line 71: ID = wait_queue_head_t
Line 71: ID = wqh
Line 71: ;
Line 72: }
Line 72: Unrecognized token: 95
Line 72: Unrecognized token: 95
Line 72: Unrecognized token: 95
Line 72: Unrecognized token: 95
Line 72: ID = cacheline_aligned_in_smp
Line 72: ID = bh_wait_queue_heads
Line 72: [
Line 72: INTCON = 1
Line 72: <
Line 72: <
Line 72: ID = BH_WAIT_TABLE_ORDER
Line 72: ]
Line 72: ;
Line 74: ID = inline
Line 74: void
Line 75: ID = init_buffer
Line 75: (
Line 75: ID = struct
Line 75: ID = buffer_head
Line 75: *
Line 75: ID = bh
Line 75: ,
Line 75: ID = bh_end_io_t
Line 75: *
Line 75: ID = handler
Line 75: ,
Line 75: void
Line 75: *
Line 75: ID = private
Line 75: )
Line 76: {
Line 77: ID = bh
Line 77: -
Line 77: >
Line 77: ID = b_end_io
Line 77: =
Line 77: ID = handler
Line 77: ;
Line 78: ID = bh
Line 78: -
Line 78: >
Line 78: ID = b_private
Line 78: =
Line 78: ID = private
Line 78: ;
Line 79: }
Line 85: ID = wait_queue_head_t
Line 85: *
Line 85: ID = bh_waitq_head
Line 85: (
Line 85: ID = struct
Line 85: ID = buffer_head
Line 85: *
Line 85: ID = bh
Line 85: )
Line 86: {
Line 87: return
Line 87: Unrecognized token: 38
Line 87: ID = bh_wait_queue_heads
Line 87: [
Line 87: ID = hash_ptr
Line 87: (
Line 87: ID = bh
Line 87: ,
Line 87: ID = BH_WAIT_TABLE_ORDER
Line 87: )
Line 87: ]
Line 87: Unrecognized token: 46
Line 87: ID = wqh
Line 87: ;
Line 88: }
Line 89: ID = EXPORT_SYMBOL
Line 89: (
Line 89: ID = bh_waitq_head
Line 89: )
Line 89: ;
Line 91: void
Line 91: ID = wake_up_buffer
Line 91: (
Line 91: ID = struct
Line 91: ID = buffer_head
Line 91: *
Line 91: ID = bh
Line 91: )
Line 92: {
Line 93: ID = wait_queue_head_t
Line 93: *
Line 93: ID = wq
Line 93: =
Line 93: ID = bh_waitq_head
Line 93: (
Line 93: ID = bh
Line 93: )
Line 93: ;
Line 95: ID = smp_mb
Line 95: (
Line 95: )
Line 95: ;
Line 96: if
Line 96: (
Line 96: ID = waitqueue_active
Line 96: (
Line 96: ID = wq
Line 96: )
Line 96: )
Line 97: Unrecognized token: 95
Line 97: Unrecognized token: 95
Line 97: ID = wake_up
Line 97: (
Line 97: ID = wq
Line 97: ,
Line 97: ID = TASK_INTERRUPTIBLE
Line 97: Unrecognized token: 124
Line 97: ID = TASK_UNINTERRUPTIBLE
Line 97: ,
Line 97: INTCON = 1
Line 97: ,
Line 97: ID = bh
Line 97: )
Line 97: ;
Line 98: }
Line 99: ID = EXPORT_SYMBOL
Line 99: (
Line 99: ID = wake_up_buffer
Line 99: )
Line 99: ;
Line 101: ID = static
Line 101: int
Line 101: ID = bh_wake_function
Line 101: (
Line 101: ID = wait_queue_t
Line 101: *
Line 101: ID = wait
Line 101: ,
Line 101: ID = unsigned
Line 101: ID = mode
Line 101: ,
Line 102: int
Line 102: ID = sync
Line 102: ,
Line 102: void
Line 102: *
Line 102: ID = key
Line 102: )
Line 103: {
Line 104: ID = struct
Line 104: ID = buffer_head
Line 104: *
Line 104: ID = bh
Line 104: =
Line 104: ID = key
Line 104: ;
Line 105: ID = struct
Line 105: ID = bh_wait_queue
Line 105: *
Line 105: ID = wq
Line 105: ;
Line 107: ID = wq
Line 107: =
Line 107: ID = container_of
Line 107: (
Line 107: ID = wait
Line 107: ,
Line 107: ID = struct
Line 107: ID = bh_wait_queue
Line 107: ,
Line 107: ID = wait
Line 107: )
Line 107: ;
Line 108: if
Line 108: (
Line 108: ID = wq
Line 108: -
Line 108: >
Line 108: ID = bh
Line 108: !=
Line 108: ID = bh
Line 108: ||
Line 108: ID = buffer_locked
Line 108: (
Line 108: ID = bh
Line 108: )
Line 108: )
Line 109: return
Line 109: INTCON = 0
Line 109: ;
Line 110: else
Line 111: return
Line 111: ID = autoremove_wake_function
Line 111: (
Line 111: ID = wait
Line 111: ,
Line 111: ID = mode
Line 111: ,
Line 111: ID = sync
Line 111: ,
Line 111: ID = key
Line 111: )
Line 111: ;
Line 112: }
Line 114: ID = static
Line 114: void
Line 114: ID = sync_buffer
Line 114: (
Line 114: ID = struct
Line 114: ID = buffer_head
Line 114: *
Line 114: ID = bh
Line 114: )
Line 115: {
Line 116: ID = struct
Line 116: ID = block_device
Line 116: *
Line 116: ID = bd
Line 116: ;
Line 118: ID = smp_mb
Line 118: (
Line 118: )
Line 118: ;
Line 119: ID = bd
Line 119: =
Line 119: ID = bh
Line 119: -
Line 119: >
Line 119: ID = b_bdev
Line 119: ;
Line 120: if
Line 120: (
Line 120: ID = bd
Line 120: )
Line 121: ID = blk_run_address_space
Line 121: (
Line 121: ID = bd
Line 121: -
Line 121: >
Line 121: ID = bd_inode
Line 121: -
Line 121: >
Line 121: ID = i_mapping
Line 121: )
Line 121: ;
Line 122: }
Line 124: void
Line 124: ID = fastcall
Line 124: Unrecognized token: 95
Line 124: Unrecognized token: 95
Line 124: ID = lock_buffer
Line 124: (
Line 124: ID = struct
Line 124: ID = buffer_head
Line 124: *
Line 124: ID = bh
Line 124: )
Line 125: {
Line 126: ID = wait_queue_head_t
Line 126: *
Line 126: ID = wqh
Line 126: =
Line 126: ID = bh_waitq_head
Line 126: (
Line 126: ID = bh
Line 126: )
Line 126: ;
Line 127: ID = DEFINE_BH_WAIT_EXCLUSIVE
Line 127: (
Line 127: ID = wait
Line 127: ,
Line 127: ID = bh
Line 127: )
Line 127: ;
Line 129: ID = do
Line 129: {
Line 130: ID = prepare_to_wait_exclusive
Line 130: (
Line 130: ID = wqh
Line 130: ,
Line 130: Unrecognized token: 38
Line 130: ID = wait
Line 130: Unrecognized token: 46
Line 130: ID = wait
Line 130: ,
Line 131: ID = TASK_UNINTERRUPTIBLE
Line 131: )
Line 131: ;
Line 132: if
Line 132: (
Line 132: ID = buffer_locked
Line 132: (
Line 132: ID = bh
Line 132: )
Line 132: )
Line 132: {
Line 133: ID = sync_buffer
Line 133: (
Line 133: ID = bh
Line 133: )
Line 133: ;
Line 134: ID = io_schedule
Line 134: (
Line 134: )
Line 134: ;
Line 135: }
Line 136: }
Line 136: while
Line 136: (
Line 136: ID = test_set_buffer_locked
Line 136: (
Line 136: ID = bh
Line 136: )
Line 136: )
Line 136: ;
Line 137: ID = finish_wait
Line 137: (
Line 137: ID = wqh
Line 137: ,
Line 137: Unrecognized token: 38
Line 137: ID = wait
Line 137: Unrecognized token: 46
Line 137: ID = wait
Line 137: )
Line 137: ;
Line 138: }
Line 139: ID = EXPORT_SYMBOL
Line 139: (
Line 139: Unrecognized token: 95
Line 139: Unrecognized token: 95
Line 139: ID = lock_buffer
Line 139: )
Line 139: ;
Line 141: void
Line 141: ID = fastcall
Line 141: ID = unlock_buffer
Line 141: (
Line 141: ID = struct
Line 141: ID = buffer_head
Line 141: *
Line 141: ID = bh
Line 141: )
Line 142: {
Line 143: ID = clear_buffer_locked
Line 143: (
Line 143: ID = bh
Line 143: )
Line 143: ;
Line 144: ID = smp_mb__after_clear_bit
Line 144: (
Line 144: )
Line 144: ;
Line 145: ID = wake_up_buffer
Line 145: (
Line 145: ID = bh
Line 145: )
Line 145: ;
Line 146: }
Line 153: void
Line 153: Unrecognized token: 95
Line 153: Unrecognized token: 95
Line 153: ID = wait_on_buffer
Line 153: (
Line 153: ID = struct
Line 153: ID = buffer_head
Line 153: *
Line 153: ID = bh
Line 153: )
Line 154: {
Line 155: ID = wait_queue_head_t
Line 155: *
Line 155: ID = wqh
Line 155: =
Line 155: ID = bh_waitq_head
Line 155: (
Line 155: ID = bh
Line 155: )
Line 155: ;
Line 156: ID = DEFINE_BH_WAIT
Line 156: (
Line 156: ID = wait
Line 156: ,
Line 156: ID = bh
Line 156: )
Line 156: ;
Line 158: ID = do
Line 158: {
Line 159: ID = prepare_to_wait
Line 159: (
Line 159: ID = wqh
Line 159: ,
Line 159: Unrecognized token: 38
Line 159: ID = wait
Line 159: Unrecognized token: 46
Line 159: ID = wait
Line 159: ,
Line 159: ID = TASK_UNINTERRUPTIBLE
Line 159: )
Line 159: ;
Line 160: if
Line 160: (
Line 160: ID = buffer_locked
Line 160: (
Line 160: ID = bh
Line 160: )
Line 160: )
Line 160: {
Line 161: ID = sync_buffer
Line 161: (
Line 161: ID = bh
Line 161: )
Line 161: ;
Line 162: ID = io_schedule
Line 162: (
Line 162: )
Line 162: ;
Line 163: }
Line 164: }
Line 164: while
Line 164: (
Line 164: ID = buffer_locked
Line 164: (
Line 164: ID = bh
Line 164: )
Line 164: )
Line 164: ;
Line 165: ID = finish_wait
Line 165: (
Line 165: ID = wqh
Line 165: ,
Line 165: Unrecognized token: 38
Line 165: ID = wait
Line 165: Unrecognized token: 46
Line 165: ID = wait
Line 165: )
Line 165: ;
Line 166: }
Line 168: ID = static
Line 168: void
Line 169: Unrecognized token: 95
Line 169: Unrecognized token: 95
Line 169: ID = set_page_buffers
Line 169: (
Line 169: ID = struct
Line 169: ID = page
Line 169: *
Line 169: ID = page
Line 169: ,
Line 169: ID = struct
Line 169: ID = buffer_head
Line 169: *
Line 169: ID = head
Line 169: )
Line 170: {
Line 171: ID = page_cache_get
Line 171: (
Line 171: ID = page
Line 171: )
Line 171: ;
Line 172: ID = SetPagePrivate
Line 172: (
Line 172: ID = page
Line 172: )
Line 172: ;
Line 173: ID = page
Line 173: -
Line 173: >
Line 173: ID = private
Line 173: =
Line 173: (
Line 173: ID = unsigned
Line 173: ID = long
Line 173: )
Line 173: ID = head
Line 173: ;
Line 174: }
Line 176: ID = static
Line 176: void
Line 177: Unrecognized token: 95
Line 177: Unrecognized token: 95
Line 177: ID = clear_page_buffers
Line 177: (
Line 177: ID = struct
Line 177: ID = page
Line 177: *
Line 177: ID = page
Line 177: )
Line 178: {
Line 179: ID = ClearPagePrivate
Line 179: (
Line 179: ID = page
Line 179: )
Line 179: ;
Line 180: ID = page
Line 180: -
Line 180: >
Line 180: ID = private
Line 180: =
Line 180: INTCON = 0
Line 180: ;
Line 181: ID = page_cache_release
Line 181: (
Line 181: ID = page
Line 181: )
Line 181: ;
Line 182: }
Line 184: ID = static
Line 184: void
Line 184: ID = buffer_io_error
Line 184: (
Line 184: ID = struct
Line 184: ID = buffer_head
Line 184: *
Line 184: ID = bh
Line 184: )
Line 185: {
Line 186: char
Line 186: ID = b
Line 186: [
Line 186: ID = BDEVNAME_SIZE
Line 186: ]
Line 186: ;
Line 188: ID = printk
Line 188: (
Line 188: ID = KERN_ERR
Line 188: STRINGCON = "Buffer I/O error on device %s, logical block %Lu\n"
Line 188: ,
Line 189: ID = bdevname
Line 189: (
Line 189: ID = bh
Line 189: -
Line 189: >
Line 189: ID = b_bdev
Line 189: ,
Line 189: ID = b
Line 189: )
Line 189: ,
Line 190: (
Line 190: ID = unsigned
Line 190: ID = long
Line 190: ID = long
Line 190: )
Line 190: ID = bh
Line 190: -
Line 190: >
Line 190: ID = b_blocknr
Line 190: )
Line 190: ;
Line 191: }
Line 197: void
Line 197: ID = end_buffer_read_sync
Line 197: (
Line 197: ID = struct
Line 197: ID = buffer_head
Line 197: *
Line 197: ID = bh
Line 197: ,
Line 197: int
Line 197: ID = uptodate
Line 197: )
Line 198: {
Line 199: if
Line 199: (
Line 199: ID = uptodate
Line 199: )
Line 199: {
Line 200: ID = set_buffer_uptodate
Line 200: (
Line 200: ID = bh
Line 200: )
Line 200: ;
Line 201: }
Line 201: else
Line 201: {
Line 203: ID = clear_buffer_uptodate
Line 203: (
Line 203: ID = bh
Line 203: )
Line 203: ;
Line 204: }
Line 205: ID = unlock_buffer
Line 205: (
Line 205: ID = bh
Line 205: )
Line 205: ;
Line 206: ID = put_bh
Line 206: (
Line 206: ID = bh
Line 206: )
Line 206: ;
Line 207: }
Line 209: void
Line 209: ID = end_buffer_write_sync
Line 209: (
Line 209: ID = struct
Line 209: ID = buffer_head
Line 209: *
Line 209: ID = bh
Line 209: ,
Line 209: int
Line 209: ID = uptodate
Line 209: )
Line 210: {
Line 211: char
Line 211: ID = b
Line 211: [
Line 211: ID = BDEVNAME_SIZE
Line 211: ]
Line 211: ;
Line 213: if
Line 213: (
Line 213: ID = uptodate
Line 213: )
Line 213: {
Line 214: ID = set_buffer_uptodate
Line 214: (
Line 214: ID = bh
Line 214: )
Line 214: ;
Line 215: }
Line 215: else
Line 215: {
Line 216: if
Line 216: (
Line 216: ID = printk_ratelimit
Line 216: (
Line 216: )
Line 216: )
Line 216: {
Line 217: ID = buffer_io_error
Line 217: (
Line 217: ID = bh
Line 217: )
Line 217: ;
Line 218: ID = printk
Line 218: (
Line 218: ID = KERN_WARNING
Line 218: STRINGCON = "lost page write due to "
Line 219: STRINGCON = "I/O error on %s\n"
Line 219: ,
Line 220: ID = bdevname
Line 220: (
Line 220: ID = bh
Line 220: -
Line 220: >
Line 220: ID = b_bdev
Line 220: ,
Line 220: ID = b
Line 220: )
Line 220: )
Line 220: ;
Line 221: }
Line 222: ID = set_buffer_write_io_error
Line 222: (
Line 222: ID = bh
Line 222: )
Line 222: ;
Line 223: ID = clear_buffer_uptodate
Line 223: (
Line 223: ID = bh
Line 223: )
Line 223: ;
Line 224: }
Line 225: ID = unlock_buffer
Line 225: (
Line 225: ID = bh
Line 225: )
Line 225: ;
Line 226: ID = put_bh
Line 226: (
Line 226: ID = bh
Line 226: )
Line 226: ;
Line 227: }
Line 233: int
Line 233: ID = sync_blockdev
Line 233: (
Line 233: ID = struct
Line 233: ID = block_device
Line 233: *
Line 233: ID = bdev
Line 233: )
Line 234: {
Line 235: int
Line 235: ID = ret
Line 235: =
Line 235: INTCON = 0
Line 235: ;
Line 237: if
Line 237: (
Line 237: ID = bdev
Line 237: )
Line 237: {
Line 238: int
Line 238: ID = err
Line 238: ;
Line 240: ID = ret
Line 240: =
Line 240: ID = filemap_fdatawrite
Line 240: (
Line 240: ID = bdev
Line 240: -
Line 240: >
Line 240: ID = bd_inode
Line 240: -
Line 240: >
Line 240: ID = i_mapping
Line 240: )
Line 240: ;
Line 241: ID = err
Line 241: =
Line 241: ID = filemap_fdatawait
Line 241: (
Line 241: ID = bdev
Line 241: -
Line 241: >
Line 241: ID = bd_inode
Line 241: -
Line 241: >
Line 241: ID = i_mapping
Line 241: )
Line 241: ;
Line 242: if
Line 242: (
Line 242: !
Line 242: ID = ret
Line 242: )
Line 243: ID = ret
Line 243: =
Line 243: ID = err
Line 243: ;
Line 244: }
Line 245: return
Line 245: ID = ret
Line 245: ;
Line 246: }
Line 247: ID = EXPORT_SYMBOL
Line 247: (
Line 247: ID = sync_blockdev
Line 247: )
Line 247: ;
Line 254: int
Line 254: ID = fsync_super
Line 254: (
Line 254: ID = struct
Line 254: ID = super_block
Line 254: *
Line 254: ID = sb
Line 254: )
Line 255: {
Line 256: ID = sync_inodes_sb
Line 256: (
Line 256: ID = sb
Line 256: ,
Line 256: INTCON = 0
Line 256: )
Line 256: ;
Line 257: ID = DQUOT_SYNC
Line 257: (
Line 257: ID = sb
Line 257: )
Line 257: ;
Line 258: ID = lock_super
Line 258: (
Line 258: ID = sb
Line 258: )
Line 258: ;
Line 259: if
Line 259: (
Line 259: ID = sb
Line 259: -
Line 259: >
Line 259: ID = s_dirt
Line 259: &&
Line 259: ID = sb
Line 259: -
Line 259: >
Line 259: ID = s_op
Line 259: -
Line 259: >
Line 259: ID = write_super
Line 259: )
Line 260: ID = sb
Line 260: -
Line 260: >
Line 260: ID = s_op
Line 260: -
Line 260: >
Line 260: ID = write_super
Line 260: (
Line 260: ID = sb
Line 260: )
Line 260: ;
Line 261: ID = unlock_super
Line 261: (
Line 261: ID = sb
Line 261: )
Line 261: ;
Line 262: if
Line 262: (
Line 262: ID = sb
Line 262: -
Line 262: >
Line 262: ID = s_op
Line 262: -
Line 262: >
Line 262: ID = sync_fs
Line 262: )
Line 263: ID = sb
Line 263: -
Line 263: >
Line 263: ID = s_op
Line 263: -
Line 263: >
Line 263: ID = sync_fs
Line 263: (
Line 263: ID = sb
Line 263: ,
Line 263: INTCON = 1
Line 263: )
Line 263: ;
Line 264: ID = sync_blockdev
Line 264: (
Line 264: ID = sb
Line 264: -
Line 264: >
Line 264: ID = s_bdev
Line 264: )
Line 264: ;
Line 265: ID = sync_inodes_sb
Line 265: (
Line 265: ID = sb
Line 265: ,
Line 265: INTCON = 1
Line 265: )
Line 265: ;
Line 267: return
Line 267: ID = sync_blockdev
Line 267: (
Line 267: ID = sb
Line 267: -
Line 267: >
Line 267: ID = s_bdev
Line 267: )
Line 267: ;
Line 268: }
Line 275: int
Line 275: ID = fsync_bdev
Line 275: (
Line 275: ID = struct
Line 275: ID = block_device
Line 275: *
Line 275: ID = bdev
Line 275: )
Line 276: {
Line 277: ID = struct
Line 277: ID = super_block
Line 277: *
Line 277: ID = sb
Line 277: =
Line 277: ID = get_super
Line 277: (
Line 277: ID = bdev
Line 277: )
Line 277: ;
Line 278: if
Line 278: (
Line 278: ID = sb
Line 278: )
Line 278: {
Line 279: int
Line 279: ID = res
Line 279: =
Line 279: ID = fsync_super
Line 279: (
Line 279: ID = sb
Line 279: )
Line 279: ;
Line 280: ID = drop_super
Line 280: (
Line 280: ID = sb
Line 280: )
Line 280: ;
Line 281: return
Line 281: ID = res
Line 281: ;
Line 282: }
Line 283: return
Line 283: ID = sync_blockdev
Line 283: (
Line 283: ID = bdev
Line 283: )
Line 283: ;
Line 284: }
Line 295: ID = struct
Line 295: ID = super_block
Line 295: *
Line 295: ID = freeze_bdev
Line 295: (
Line 295: ID = struct
Line 295: ID = block_device
Line 295: *
Line 295: ID = bdev
Line 295: )
Line 296: {
Line 297: ID = struct
Line 297: ID = super_block
Line 297: *
Line 297: ID = sb
Line 297: ;
Line 299: ID = down
Line 299: (
Line 299: Unrecognized token: 38
Line 299: ID = bdev
Line 299: -
Line 299: >
Line 299: ID = bd_mount_sem
Line 299: )
Line 299: ;
Line 300: ID = sb
Line 300: =
Line 300: ID = get_super
Line 300: (
Line 300: ID = bdev
Line 300: )
Line 300: ;
Line 301: if
Line 301: (
Line 301: ID = sb
Line 301: &&
Line 301: !
Line 301: (
Line 301: ID = sb
Line 301: -
Line 301: >
Line 301: ID = s_flags
Line 301: Unrecognized token: 38
Line 301: ID = MS_RDONLY
Line 301: )
Line 301: )
Line 301: {
Line 302: ID = sb
Line 302: -
Line 302: >
Line 302: ID = s_frozen
Line 302: =
Line 302: ID = SB_FREEZE_WRITE
Line 302: ;
Line 303: ID = wmb
Line 303: (
Line 303: )
Line 303: ;
Line 305: ID = sync_inodes_sb
Line 305: (
Line 305: ID = sb
Line 305: ,
Line 305: INTCON = 0
Line 305: )
Line 305: ;
Line 306: ID = DQUOT_SYNC
Line 306: (
Line 306: ID = sb
Line 306: )
Line 306: ;
Line 308: ID = lock_super
Line 308: (
Line 308: ID = sb
Line 308: )
Line 308: ;
Line 309: if
Line 309: (
Line 309: ID = sb
Line 309: -
Line 309: >
Line 309: ID = s_dirt
Line 309: &&
Line 309: ID = sb
Line 309: -
Line 309: >
Line 309: ID = s_op
Line 309: -
Line 309: >
Line 309: ID = write_super
Line 309: )
Line 310: ID = sb
Line 310: -
Line 310: >
Line 310: ID = s_op
Line 310: -
Line 310: >
Line 310: ID = write_super
Line 310: (
Line 310: ID = sb
Line 310: )
Line 310: ;
Line 311: ID = unlock_super
Line 311: (
Line 311: ID = sb
Line 311: )
Line 311: ;
Line 313: if
Line 313: (
Line 313: ID = sb
Line 313: -
Line 313: >
Line 313: ID = s_op
Line 313: -
Line 313: >
Line 313: ID = sync_fs
Line 313: )
Line 314: ID = sb
Line 314: -
Line 314: >
Line 314: ID = s_op
Line 314: -
Line 314: >
Line 314: ID = sync_fs
Line 314: (
Line 314: ID = sb
Line 314: ,
Line 314: INTCON = 1
Line 314: )
Line 314: ;
Line 316: ID = sync_blockdev
Line 316: (
Line 316: ID = sb
Line 316: -
Line 316: >
Line 316: ID = s_bdev
Line 316: )
Line 316: ;
Line 317: ID = sync_inodes_sb
Line 317: (
Line 317: ID = sb
Line 317: ,
Line 317: INTCON = 1
Line 317: )
Line 317: ;
Line 319: ID = sb
Line 319: -
Line 319: >
Line 319: ID = s_frozen
Line 319: =
Line 319: ID = SB_FREEZE_TRANS
Line 319: ;
Line 320: ID = wmb
Line 320: (
Line 320: )
Line 320: ;
Line 322: ID = sync_blockdev
Line 322: (
Line 322: ID = sb
Line 322: -
Line 322: >
Line 322: ID = s_bdev
Line 322: )
Line 322: ;
Line 324: if
Line 324: (
Line 324: ID = sb
Line 324: -
Line 324: >
Line 324: ID = s_op
Line 324: -
Line 324: >
Line 324: ID = write_super_lockfs
Line 324: )
Line 325: ID = sb
Line 325: -
Line 325: >
Line 325: ID = s_op
Line 325: -
Line 325: >
Line 325: ID = write_super_lockfs
Line 325: (
Line 325: ID = sb
Line 325: )
Line 325: ;
Line 326: }
Line 328: ID = sync_blockdev
Line 328: (
Line 328: ID = bdev
Line 328: )
Line 328: ;
Line 329: return
Line 329: ID = sb
Line 329: ;
Line 330: }
Line 331: ID = EXPORT_SYMBOL
Line 331: (
Line 331: ID = freeze_bdev
Line 331: )
Line 331: ;
Line 340: void
Line 340: ID = thaw_bdev
Line 340: (
Line 340: ID = struct
Line 340: ID = block_device
Line 340: *
Line 340: ID = bdev
Line 340: ,
Line 340: ID = struct
Line 340: ID = super_block
Line 340: *
Line 340: ID = sb
Line 340: )
Line 341: {
Line 342: if
Line 342: (
Line 342: ID = sb
Line 342: )
Line 342: {
Line 343: ID = BUG_ON
Line 343: (
Line 343: ID = sb
Line 343: -
Line 343: >
Line 343: ID = s_bdev
Line 343: !=
Line 343: ID = bdev
Line 343: )
Line 343: ;
Line 345: if
Line 345: (
Line 345: ID = sb
Line 345: -
Line 345: >
Line 345: ID = s_op
Line 345: -
Line 345: >
Line 345: ID = unlockfs
Line 345: )
Line 346: ID = sb
Line 346: -
Line 346: >
Line 346: ID = s_op
Line 346: -
Line 346: >
Line 346: ID = unlockfs
Line 346: (
Line 346: ID = sb
Line 346: )
Line 346: ;
Line 347: ID = sb
Line 347: -
Line 347: >
Line 347: ID = s_frozen
Line 347: =
Line 347: ID = SB_UNFROZEN
Line 347: ;
Line 348: ID = wmb
Line 348: (
Line 348: )
Line 348: ;
Line 349: ID = wake_up
Line 349: (
Line 349: Unrecognized token: 38
Line 349: ID = sb
Line 349: -
Line 349: >
Line 349: ID = s_wait_unfrozen
Line 349: )
Line 349: ;
Line 350: ID = drop_super
Line 350: (
Line 350: ID = sb
Line 350: )
Line 350: ;
Line 351: }
Line 353: ID = up
Line 353: (
Line 353: Unrecognized token: 38
Line 353: ID = bdev
Line 353: -
Line 353: >
Line 353: ID = bd_mount_sem
Line 353: )
Line 353: ;
Line 354: }
Line 355: ID = EXPORT_SYMBOL
Line 355: (
Line 355: ID = thaw_bdev
Line 355: )
Line 355: ;
Line 361: ID = static
Line 361: void
Line 361: ID = do_sync
Line 361: (
Line 361: ID = unsigned
Line 361: ID = long
Line 361: ID = wait
Line 361: )
Line 362: {
Line 363: ID = wakeup_bdflush
Line 363: (
Line 363: INTCON = 0
Line 363: )
Line 363: ;
Line 364: ID = sync_inodes
Line 364: (
Line 364: INTCON = 0
Line 364: )
Line 364: ;
Line 365: ID = DQUOT_SYNC
Line 365: (
Line 365: ID = NULL
Line 365: )
Line 365: ;
Line 366: ID = sync_supers
Line 366: (
Line 366: )
Line 366: ;
Line 367: ID = sync_filesystems
Line 367: (
Line 367: INTCON = 0
Line 367: )
Line 367: ;
Line 368: ID = sync_filesystems
Line 368: (
Line 368: ID = wait
Line 368: )
Line 368: ;
Line 369: ID = sync_inodes
Line 369: (
Line 369: ID = wait
Line 369: )
Line 369: ;
Line 370: if
Line 370: (
Line 370: !
Line 370: ID = wait
Line 370: )
Line 371: ID = printk
Line 371: (
Line 371: STRINGCON = "Emergency Sync complete\n"
Line 371: )
Line 371: ;
Line 372: if
Line 372: (
Line 372: ID = unlikely
Line 372: (
Line 372: ID = laptop_mode
Line 372: )
Line 372: )
Line 373: ID = laptop_sync_completion
Line 373: (
Line 373: )
Line 373: ;
Line 374: }
Line 376: ID = asmlinkage
Line 376: ID = long
Line 376: ID = sys_sync
Line 376: (
Line 376: void
Line 376: )
Line 377: {
Line 378: ID = do_sync
Line 378: (
Line 378: INTCON = 1
Line 378: )
Line 378: ;
Line 379: return
Line 379: INTCON = 0
Line 379: ;
Line 380: }
Line 382: void
Line 382: ID = emergency_sync
Line 382: (
Line 382: void
Line 382: )
Line 383: {
Line 384: ID = pdflush_operation
Line 384: (
Line 384: ID = do_sync
Line 384: ,
Line 384: INTCON = 0
Line 384: )
Line 384: ;
Line 385: }
Line 393: int
Line 393: ID = file_fsync
Line 393: (
Line 393: ID = struct
Line 393: ID = file
Line 393: *
Line 393: ID = filp
Line 393: ,
Line 393: ID = struct
Line 393: ID = dentry
Line 393: *
Line 393: ID = dentry
Line 393: ,
Line 393: int
Line 393: ID = datasync
Line 393: )
Line 394: {
Line 395: ID = struct
Line 395: ID = inode
Line 395: *
Line 395: ID = inode
Line 395: =
Line 395: ID = dentry
Line 395: -
Line 395: >
Line 395: ID = d_inode
Line 395: ;
Line 396: ID = struct
Line 396: ID = super_block
Line 396: *
Line 396: ID = sb
Line 396: ;
Line 397: int
Line 397: ID = ret
Line 397: ;
Line 400: ID = write_inode_now
Line 400: (
Line 400: ID = inode
Line 400: ,
Line 400: INTCON = 0
Line 400: )
Line 400: ;
Line 403: ID = sb
Line 403: =
Line 403: ID = inode
Line 403: -
Line 403: >
Line 403: ID = i_sb
Line 403: ;
Line 404: ID = lock_super
Line 404: (
Line 404: ID = sb
Line 404: )
Line 404: ;
Line 405: if
Line 405: (
Line 405: ID = sb
Line 405: -
Line 405: >
Line 405: ID = s_op
Line 405: -
Line 405: >
Line 405: ID = write_super
Line 405: )
Line 406: ID = sb
Line 406: -
Line 406: >
Line 406: ID = s_op
Line 406: -
Line 406: >
Line 406: ID = write_super
Line 406: (
Line 406: ID = sb
Line 406: )
Line 406: ;
Line 407: ID = unlock_super
Line 407: (
Line 407: ID = sb
Line 407: )
Line 407: ;
Line 410: ID = ret
Line 410: =
Line 410: ID = sync_blockdev
Line 410: (
Line 410: ID = sb
Line 410: -
Line 410: >
Line 410: ID = s_bdev
Line 410: )
Line 410: ;
Line 411: return
Line 411: ID = ret
Line 411: ;
Line 412: }
Line 414: ID = asmlinkage
Line 414: ID = long
Line 414: ID = sys_fsync
Line 414: (
Line 414: ID = unsigned
Line 414: int
Line 414: ID = fd
Line 414: )
Line 415: {
Line 416: ID = struct
Line 416: ID = file
Line 416: *
Line 416: ID = file
Line 416: ;
Line 417: ID = struct
Line 417: ID = address_space
Line 417: *
Line 417: ID = mapping
Line 417: ;
Line 418: int
Line 418: ID = ret
Line 418: ,
Line 418: ID = err
Line 418: ;
Line 420: ID = ret
Line 420: =
Line 420: -
Line 420: ID = EBADF
Line 420: ;
Line 421: ID = file
Line 421: =
Line 421: ID = fget
Line 421: (
Line 421: ID = fd
Line 421: )
Line 421: ;
Line 422: if
Line 422: (
Line 422: !
Line 422: ID = file
Line 422: )
Line 423: ID = goto
Line 423: ID = out
Line 423: ;
Line 425: ID = mapping
Line 425: =
Line 425: ID = file
Line 425: -
Line 425: >
Line 425: ID = f_mapping
Line 425: ;
Line 427: ID = ret
Line 427: =
Line 427: -
Line 427: ID = EINVAL
Line 427: ;
Line 428: if
Line 428: (
Line 428: !
Line 428: ID = file
Line 428: -
Line 428: >
Line 428: ID = f_op
Line 428: ||
Line 428: !
Line 428: ID = file
Line 428: -
Line 428: >
Line 428: ID = f_op
Line 428: -
Line 428: >
Line 428: ID = fsync
Line 428: )
Line 428: {
Line 430: ID = goto
Line 430: ID = out_putf
Line 430: ;
Line 431: }
Line 434: ID = down
Line 434: (
Line 434: Unrecognized token: 38
Line 434: ID = mapping
Line 434: -
Line 434: >
Line 434: ID = host
Line 434: -
Line 434: >
Line 434: ID = i_sem
Line 434: )
Line 434: ;
Line 435: ID = current
Line 435: -
Line 435: >
Line 435: ID = flags
Line 435: Unrecognized token: 124
Line 435: =
Line 435: ID = PF_SYNCWRITE
Line 435: ;
Line 436: ID = ret
Line 436: =
Line 436: ID = filemap_fdatawrite
Line 436: (
Line 436: ID = mapping
Line 436: )
Line 436: ;
Line 437: ID = err
Line 437: =
Line 437: ID = file
Line 437: -
Line 437: >
Line 437: ID = f_op
Line 437: -
Line 437: >
Line 437: ID = fsync
Line 437: (
Line 437: ID = file
Line 437: ,
Line 437: ID = file
Line 437: -
Line 437: >
Line 437: ID = f_dentry
Line 437: ,
Line 437: INTCON = 0
Line 437: )
Line 437: ;
Line 438: if
Line 438: (
Line 438: !
Line 438: ID = ret
Line 438: )
Line 439: ID = ret
Line 439: =
Line 439: ID = err
Line 439: ;
Line 440: ID = err
Line 440: =
Line 440: ID = filemap_fdatawait
Line 440: (
Line 440: ID = mapping
Line 440: )
Line 440: ;
Line 441: if
Line 441: (
Line 441: !
Line 441: ID = ret
Line 441: )
Line 442: ID = ret
Line 442: =
Line 442: ID = err
Line 442: ;
Line 443: ID = current
Line 443: -
Line 443: >
Line 443: ID = flags
Line 443: Unrecognized token: 38
Line 443: =
Line 443: Unrecognized token: 126
Line 443: ID = PF_SYNCWRITE
Line 443: ;
Line 444: ID = up
Line 444: (
Line 444: Unrecognized token: 38
Line 444: ID = mapping
Line 444: -
Line 444: >
Line 444: ID = host
Line 444: -
Line 444: >
Line 444: ID = i_sem
Line 444: )
Line 444: ;
Line 446: ID = out_putf
Line 446: Unrecognized token: 58
Line 447: ID = fput
Line 447: (
Line 447: ID = file
Line 447: )
Line 447: ;
Line 448: ID = out
Line 448: Unrecognized token: 58
Line 449: return
Line 449: ID = ret
Line 449: ;
Line 450: }
Line 452: ID = asmlinkage
Line 452: ID = long
Line 452: ID = sys_fdatasync
Line 452: (
Line 452: ID = unsigned
Line 452: int
Line 452: ID = fd
Line 452: )
Line 453: {
Line 454: ID = struct
Line 454: ID = file
Line 454: *
Line 454: ID = file
Line 454: ;
Line 455: ID = struct
Line 455: ID = address_space
Line 455: *
Line 455: ID = mapping
Line 455: ;
Line 456: int
Line 456: ID = ret
Line 456: ,
Line 456: ID = err
Line 456: ;
Line 458: ID = ret
Line 458: =
Line 458: -
Line 458: ID = EBADF
Line 458: ;
Line 459: ID = file
Line 459: =
Line 459: ID = fget
Line 459: (
Line 459: ID = fd
Line 459: )
Line 459: ;
Line 460: if
Line 460: (
Line 460: !
Line 460: ID = file
Line 460: )
Line 461: ID = goto
Line 461: ID = out
Line 461: ;
Line 463: ID = ret
Line 463: =
Line 463: -
Line 463: ID = EINVAL
Line 463: ;
Line 464: if
Line 464: (
Line 464: !
Line 464: ID = file
Line 464: -
Line 464: >
Line 464: ID = f_op
Line 464: ||
Line 464: !
Line 464: ID = file
Line 464: -
Line 464: >
Line 464: ID = f_op
Line 464: -
Line 464: >
Line 464: ID = fsync
Line 464: )
Line 465: ID = goto
Line 465: ID = out_putf
Line 465: ;
Line 467: ID = mapping
Line 467: =
Line 467: ID = file
Line 467: -
Line 467: >
Line 467: ID = f_mapping
Line 467: ;
Line 469: ID = down
Line 469: (
Line 469: Unrecognized token: 38
Line 469: ID = mapping
Line 469: -
Line 469: >
Line 469: ID = host
Line 469: -
Line 469: >
Line 469: ID = i_sem
Line 469: )
Line 469: ;
Line 470: ID = current
Line 470: -
Line 470: >
Line 470: ID = flags
Line 470: Unrecognized token: 124
Line 470: =
Line 470: ID = PF_SYNCWRITE
Line 470: ;
Line 471: ID = ret
Line 471: =
Line 471: ID = filemap_fdatawrite
Line 471: (
Line 471: ID = mapping
Line 471: )
Line 471: ;
Line 472: ID = err
Line 472: =
Line 472: ID = file
Line 472: -
Line 472: >
Line 472: ID = f_op
Line 472: -
Line 472: >
Line 472: ID = fsync
Line 472: (
Line 472: ID = file
Line 472: ,
Line 472: ID = file
Line 472: -
Line 472: >
Line 472: ID = f_dentry
Line 472: ,
Line 472: INTCON = 1
Line 472: )
Line 472: ;
Line 473: if
Line 473: (
Line 473: !
Line 473: ID = ret
Line 473: )
Line 474: ID = ret
Line 474: =
Line 474: ID = err
Line 474: ;
Line 475: ID = err
Line 475: =
Line 475: ID = filemap_fdatawait
Line 475: (
Line 475: ID = mapping
Line 475: )
Line 475: ;
Line 476: if
Line 476: (
Line 476: !
Line 476: ID = ret
Line 476: )
Line 477: ID = ret
Line 477: =
Line 477: ID = err
Line 477: ;
Line 478: ID = current
Line 478: -
Line 478: >
Line 478: ID = flags
Line 478: Unrecognized token: 38
Line 478: =
Line 478: Unrecognized token: 126
Line 478: ID = PF_SYNCWRITE
Line 478: ;
Line 479: ID = up
Line 479: (
Line 479: Unrecognized token: 38
Line 479: ID = mapping
Line 479: -
Line 479: >
Line 479: ID = host
Line 479: -
Line 479: >
Line 479: ID = i_sem
Line 479: )
Line 479: ;
Line 481: ID = out_putf
Line 481: Unrecognized token: 58
Line 482: ID = fput
Line 482: (
Line 482: ID = file
Line 482: )
Line 482: ;
Line 483: ID = out
Line 483: Unrecognized token: 58
Line 484: return
Line 484: ID = ret
Line 484: ;
Line 485: }
Line 498: ID = static
Line 498: ID = struct
Line 498: ID = buffer_head
Line 498: *
Line 499: Unrecognized token: 95
Line 499: Unrecognized token: 95
Line 499: ID = find_get_block_slow
Line 499: (
Line 499: ID = struct
Line 499: ID = block_device
Line 499: *
Line 499: ID = bdev
Line 499: ,
Line 499: ID = sector_t
Line 499: ID = block
Line 499: ,
Line 499: int
Line 499: ID = unused
Line 499: )
Line 500: {
Line 501: ID = struct
Line 501: ID = inode
Line 501: *
Line 501: ID = bd_inode
Line 501: =
Line 501: ID = bdev
Line 501: -
Line 501: >
Line 501: ID = bd_inode
Line 501: ;
Line 502: ID = struct
Line 502: ID = address_space
Line 502: *
Line 502: ID = bd_mapping
Line 502: =
Line 502: ID = bd_inode
Line 502: -
Line 502: >
Line 502: ID = i_mapping
Line 502: ;
Line 503: ID = struct
Line 503: ID = buffer_head
Line 503: *
Line 503: ID = ret
Line 503: =
Line 503: ID = NULL
Line 503: ;
Line 504: ID = pgoff_t
Line 504: ID = index
Line 504: ;
Line 505: ID = struct
Line 505: ID = buffer_head
Line 505: *
Line 505: ID = bh
Line 505: ;
Line 506: ID = struct
Line 506: ID = buffer_head
Line 506: *
Line 506: ID = head
Line 506: ;
Line 507: ID = struct
Line 507: ID = page
Line 507: *
Line 507: ID = page
Line 507: ;
Line 509: ID = index
Line 509: =
Line 509: ID = block
Line 509: >
Line 509: >
Line 509: (
Line 509: ID = PAGE_CACHE_SHIFT
Line 509: -
Line 509: ID = bd_inode
Line 509: -
Line 509: >
Line 509: ID = i_blkbits
Line 509: )
Line 509: ;
Line 510: ID = page
Line 510: =
Line 510: ID = find_get_page
Line 510: (
Line 510: ID = bd_mapping
Line 510: ,
Line 510: ID = index
Line 510: )
Line 510: ;
Line 511: if
Line 511: (
Line 511: !
Line 511: ID = page
Line 511: )
Line 512: ID = goto
Line 512: ID = out
Line 512: ;
Line 514: ID = spin_lock
Line 514: (
Line 514: Unrecognized token: 38
Line 514: ID = bd_mapping
Line 514: -
Line 514: >
Line 514: ID = private_lock
Line 514: )
Line 514: ;
Line 515: if
Line 515: (
Line 515: !
Line 515: ID = page_has_buffers
Line 515: (
Line 515: ID = page
Line 515: )
Line 515: )
Line 516: ID = goto
Line 516: ID = out_unlock
Line 516: ;
Line 517: ID = head
Line 517: =
Line 517: ID = page_buffers
Line 517: (
Line 517: ID = page
Line 517: )
Line 517: ;
Line 518: ID = bh
Line 518: =
Line 518: ID = head
Line 518: ;
Line 519: ID = do
Line 519: {
Line 520: if
Line 520: (
Line 520: ID = bh
Line 520: -
Line 520: >
Line 520: ID = b_blocknr
Line 520: ==
Line 520: ID = block
Line 520: )
Line 520: {
Line 521: ID = ret
Line 521: =
Line 521: ID = bh
Line 521: ;
Line 522: ID = get_bh
Line 522: (
Line 522: ID = bh
Line 522: )
Line 522: ;
Line 523: ID = goto
Line 523: ID = out_unlock
Line 523: ;
Line 524: }
Line 525: ID = bh
Line 525: =
Line 525: ID = bh
Line 525: -
Line 525: >
Line 525: ID = b_this_page
Line 525: ;
Line 526: }
Line 526: while
Line 526: (
Line 526: ID = bh
Line 526: !=
Line 526: ID = head
Line 526: )
Line 526: ;
Line 528: ID = printk
Line 528: (
Line 528: STRINGCON = "__find_get_block_slow() failed. "
Line 529: STRINGCON = "block=%llu, b_blocknr=%llu\n"
Line 529: ,
Line 530: (
Line 530: ID = unsigned
Line 530: ID = long
Line 530: ID = long
Line 530: )
Line 530: ID = block
Line 530: ,
Line 530: (
Line 530: ID = unsigned
Line 530: ID = long
Line 530: ID = long
Line 530: )
Line 530: ID = bh
Line 530: -
Line 530: >
Line 530: ID = b_blocknr
Line 530: )
Line 530: ;
Line 531: ID = printk
Line 531: (
Line 531: STRINGCON = "b_state=0x%08lx, b_size=%u\n"
Line 531: ,
Line 531: ID = bh
Line 531: -
Line 531: >
Line 531: ID = b_state
Line 531: ,
Line 531: ID = bh
Line 531: -
Line 531: >
Line 531: ID = b_size
Line 531: )
Line 531: ;
Line 532: ID = printk
Line 532: (
Line 532: STRINGCON = "device blocksize: %d\n"
Line 532: ,
Line 532: INTCON = 1
Line 532: <
Line 532: <
Line 532: ID = bd_inode
Line 532: -
Line 532: >
Line 532: ID = i_blkbits
Line 532: )
Line 532: ;
Line 533: ID = out_unlock
Line 533: Unrecognized token: 58
Line 534: ID = spin_unlock
Line 534: (
Line 534: Unrecognized token: 38
Line 534: ID = bd_mapping
Line 534: -
Line 534: >
Line 534: ID = private_lock
Line 534: )
Line 534: ;
Line 535: ID = page_cache_release
Line 535: (
Line 535: ID = page
Line 535: )
Line 535: ;
Line 536: ID = out
Line 536: Unrecognized token: 58
Line 537: return
Line 537: ID = ret
Line 537: ;
Line 538: }
Line 572: void
Line 572: ID = invalidate_bdev
Line 572: (
Line 572: ID = struct
Line 572: ID = block_device
Line 572: *
Line 572: ID = bdev
Line 572: ,
Line 572: int
Line 572: ID = destroy_dirty_buffers
Line 572: )
Line 573: {
Line 574: ID = invalidate_bh_lrus
Line 574: (
Line 574: )
Line 574: ;
Line 580: ID = invalidate_inode_pages
Line 580: (
Line 580: ID = bdev
Line 580: -
Line 580: >
Line 580: ID = bd_inode
Line 580: -
Line 580: >
Line 580: ID = i_mapping
Line 580: )
Line 580: ;
Line 581: }
Line 586: ID = static
Line 586: void
Line 586: ID = free_more_memory
Line 586: (
Line 586: void
Line 586: )
Line 587: {
Line 588: ID = struct
Line 588: ID = zone
Line 588: *
Line 588: *
Line 588: ID = zones
Line 588: ;
Line 589: ID = pg_data_t
Line 589: *
Line 589: ID = pgdat
Line 589: ;
Line 591: ID = wakeup_bdflush
Line 591: (
Line 591: INTCON = 1024
Line 591: )
Line 591: ;
Line 592: ID = yield
Line 592: (
Line 592: )
Line 592: ;
Line 594: ID = for_each_pgdat
Line 594: (
Line 594: ID = pgdat
Line 594: )
Line 594: {
Line 595: ID = zones
Line 595: =
Line 595: ID = pgdat
Line 595: -
Line 595: >
Line 595: ID = node_zonelists
Line 595: [
Line 595: ID = GFP_NOFS
Line 595: Unrecognized token: 38
Line 595: ID = GFP_ZONEMASK
Line 595: ]
Line 595: Unrecognized token: 46
Line 595: ID = zones
Line 595: ;
Line 596: if
Line 596: (
Line 596: *
Line 596: ID = zones
Line 596: )
Line 597: ID = try_to_free_pages
Line 597: (
Line 597: ID = zones
Line 597: ,
Line 597: ID = GFP_NOFS
Line 597: ,
Line 597: INTCON = 0
Line 597: )
Line 597: ;
Line 598: }
Line 599: }
Line 605: ID = static
Line 605: void
Line 605: ID = end_buffer_async_read
Line 605: (
Line 605: ID = struct
Line 605: ID = buffer_head
Line 605: *
Line 605: ID = bh
Line 605: ,
Line 605: int
Line 605: ID = uptodate
Line 605: )
Line 606: {
Line 607: ID = static
Line 607: ID = spinlock_t
Line 607: ID = page_uptodate_lock
Line 607: =
Line 607: ID = SPIN_LOCK_UNLOCKED
Line 607: ;
Line 608: ID = unsigned
Line 608: ID = long
Line 608: ID = flags
Line 608: ;
Line 609: ID = struct
Line 609: ID = buffer_head
Line 609: *
Line 609: ID = tmp
Line 609: ;
Line 610: ID = struct
Line 610: ID = page
Line 610: *
Line 610: ID = page
Line 610: ;
Line 611: int
Line 611: ID = page_uptodate
Line 611: =
Line 611: INTCON = 1
Line 611: ;
Line 613: ID = BUG_ON
Line 613: (
Line 613: !
Line 613: ID = buffer_async_read
Line 613: (
Line 613: ID = bh
Line 613: )
Line 613: )
Line 613: ;
Line 615: ID = page
Line 615: =
Line 615: ID = bh
Line 615: -
Line 615: >
Line 615: ID = b_page
Line 615: ;
Line 616: if
Line 616: (
Line 616: ID = uptodate
Line 616: )
Line 616: {
Line 617: ID = set_buffer_uptodate
Line 617: (
Line 617: ID = bh
Line 617: )
Line 617: ;
Line 618: }
Line 618: else
Line 618: {
Line 619: ID = clear_buffer_uptodate
Line 619: (
Line 619: ID = bh
Line 619: )
Line 619: ;
Line 620: ID = buffer_io_error
Line 620: (
Line 620: ID = bh
Line 620: )
Line 620: ;
Line 621: ID = SetPageError
Line 621: (
Line 621: ID = page
Line 621: )
Line 621: ;
Line 622: }
Line 629: ID = spin_lock_irqsave
Line 629: (
Line 629: Unrecognized token: 38
Line 629: ID = page_uptodate_lock
Line 629: ,
Line 629: ID = flags
Line 629: )
Line 629: ;
Line 630: ID = clear_buffer_async_read
Line 630: (
Line 630: ID = bh
Line 630: )
Line 630: ;
Line 631: ID = unlock_buffer
Line 631: (
Line 631: ID = bh
Line 631: )
Line 631: ;
Line 632: ID = tmp
Line 632: =
Line 632: ID = bh
Line 632: ;
Line 633: ID = do
Line 633: {
Line 634: if
Line 634: (
Line 634: !
Line 634: ID = buffer_uptodate
Line 634: (
Line 634: ID = tmp
Line 634: )
Line 634: )
Line 635: ID = page_uptodate
Line 635: =
Line 635: INTCON = 0
Line 635: ;
Line 636: if
Line 636: (
Line 636: ID = buffer_async_read
Line 636: (
Line 636: ID = tmp
Line 636: )
Line 636: )
Line 636: {
Line 637: ID = BUG_ON
Line 637: (
Line 637: !
Line 637: ID = buffer_locked
Line 637: (
Line 637: ID = tmp
Line 637: )
Line 637: )
Line 637: ;
Line 638: ID = goto
Line 638: ID = still_busy
Line 638: ;
Line 639: }
Line 640: ID = tmp
Line 640: =
Line 640: ID = tmp
Line 640: -
Line 640: >
Line 640: ID = b_this_page
Line 640: ;
Line 641: }
Line 641: while
Line 641: (
Line 641: ID = tmp
Line 641: !=
Line 641: ID = bh
Line 641: )
Line 641: ;
Line 642: ID = spin_unlock_irqrestore
Line 642: (
Line 642: Unrecognized token: 38
Line 642: ID = page_uptodate_lock
Line 642: ,
Line 642: ID = flags
Line 642: )
Line 642: ;
Line 648: if
Line 648: (
Line 648: ID = page_uptodate
Line 648: &&
Line 648: !
Line 648: ID = PageError
Line 648: (
Line 648: ID = page
Line 648: )
Line 648: )
Line 649: ID = SetPageUptodate
Line 649: (
Line 649: ID = page
Line 649: )
Line 649: ;
Line 650: ID = unlock_page
Line 650: (
Line 650: ID = page
Line 650: )
Line 650: ;
Line 651: return
Line 651: ;
Line 653: ID = still_busy
Line 653: Unrecognized token: 58
Line 654: ID = spin_unlock_irqrestore
Line 654: (
Line 654: Unrecognized token: 38
Line 654: ID = page_uptodate_lock
Line 654: ,
Line 654: ID = flags
Line 654: )
Line 654: ;
Line 655: return
Line 655: ;
Line 656: }
Line 662: void
Line 662: ID = end_buffer_async_write
Line 662: (
Line 662: ID = struct
Line 662: ID = buffer_head
Line 662: *
Line 662: ID = bh
Line 662: ,
Line 662: int
Line 662: ID = uptodate
Line 662: )
Line 663: {
Line 664: char
Line 664: ID = b
Line 664: [
Line 664: ID = BDEVNAME_SIZE
Line 664: ]
Line 664: ;
Line 665: ID = static
Line 665: ID = spinlock_t
Line 665: ID = page_uptodate_lock
Line 665: =
Line 665: ID = SPIN_LOCK_UNLOCKED
Line 665: ;
Line 666: ID = unsigned
Line 666: ID = long
Line 666: ID = flags
Line 666: ;
Line 667: ID = struct
Line 667: ID = buffer_head
Line 667: *
Line 667: ID = tmp
Line 667: ;
Line 668: ID = struct
Line 668: ID = page
Line 668: *
Line 668: ID = page
Line 668: ;
Line 670: ID = BUG_ON
Line 670: (
Line 670: !
Line 670: ID = buffer_async_write
Line 670: (
Line 670: ID = bh
Line 670: )
Line 670: )
Line 670: ;
Line 672: ID = page
Line 672: =
Line 672: ID = bh
Line 672: -
Line 672: >
Line 672: ID = b_page
Line 672: ;
Line 673: if
Line 673: (
Line 673: ID = uptodate
Line 673: )
Line 673: {
Line 674: ID = set_buffer_uptodate
Line 674: (
Line 674: ID = bh
Line 674: )
Line 674: ;
Line 675: }
Line 675: else
Line 675: {
Line 676: if
Line 676: (
Line 676: ID = printk_ratelimit
Line 676: (
Line 676: )
Line 676: )
Line 676: {
Line 677: ID = buffer_io_error
Line 677: (
Line 677: ID = bh
Line 677: )
Line 677: ;
Line 678: ID = printk
Line 678: (
Line 678: ID = KERN_WARNING
Line 678: STRINGCON = "lost page write due to "
Line 679: STRINGCON = "I/O error on %s\n"
Line 679: ,
Line 680: ID = bdevname
Line 680: (
Line 680: ID = bh
Line 680: -
Line 680: >
Line 680: ID = b_bdev
Line 680: ,
Line 680: ID = b
Line 680: )
Line 680: )
Line 680: ;
Line 681: }
Line 682: ID = set_bit
Line 682: (
Line 682: ID = AS_EIO
Line 682: ,
Line 682: Unrecognized token: 38
Line 682: ID = page
Line 682: -
Line 682: >
Line 682: ID = mapping
Line 682: -
Line 682: >
Line 682: ID = flags
Line 682: )
Line 682: ;
Line 683: ID = clear_buffer_uptodate
Line 683: (
Line 683: ID = bh
Line 683: )
Line 683: ;
Line 684: ID = SetPageError
Line 684: (
Line 684: ID = page
Line 684: )
Line 684: ;
Line 685: }
Line 687: ID = spin_lock_irqsave
Line 687: (
Line 687: Unrecognized token: 38
Line 687: ID = page_uptodate_lock
Line 687: ,
Line 687: ID = flags
Line 687: )
Line 687: ;
Line 688: ID = clear_buffer_async_write
Line 688: (
Line 688: ID = bh
Line 688: )
Line 688: ;
Line 689: ID = unlock_buffer
Line 689: (
Line 689: ID = bh
Line 689: )
Line 689: ;
Line 690: ID = tmp
Line 690: =
Line 690: ID = bh
Line 690: -
Line 690: >
Line 690: ID = b_this_page
Line 690: ;
Line 691: while
Line 691: (
Line 691: ID = tmp
Line 691: !=
Line 691: ID = bh
Line 691: )
Line 691: {
Line 692: if
Line 692: (
Line 692: ID = buffer_async_write
Line 692: (
Line 692: ID = tmp
Line 692: )
Line 692: )
Line 692: {
Line 693: ID = BUG_ON
Line 693: (
Line 693: !
Line 693: ID = buffer_locked
Line 693: (
Line 693: ID = tmp
Line 693: )
Line 693: )
Line 693: ;
Line 694: ID = goto
Line 694: ID = still_busy
Line 694: ;
Line 695: }
Line 696: ID = tmp
Line 696: =
Line 696: ID = tmp
Line 696: -
Line 696: >
Line 696: ID = b_this_page
Line 696: ;
Line 697: }
Line 698: ID = spin_unlock_irqrestore
Line 698: (
Line 698: Unrecognized token: 38
Line 698: ID = page_uptodate_lock
Line 698: ,
Line 698: ID = flags
Line 698: )
Line 698: ;
Line 699: ID = end_page_writeback
Line 699: (
Line 699: ID = page
Line 699: )
Line 699: ;
Line 700: return
Line 700: ;
Line 702: ID = still_busy
Line 702: Unrecognized token: 58
Line 703: ID = spin_unlock_irqrestore
Line 703: (
Line 703: Unrecognized token: 38
Line 703: ID = page_uptodate_lock
Line 703: ,
Line 703: ID = flags
Line 703: )
Line 703: ;
Line 704: return
Line 704: ;
Line 705: }
Line 728: void
Line 728: ID = mark_buffer_async_read
Line 728: (
Line 728: ID = struct
Line 728: ID = buffer_head
Line 728: *
Line 728: ID = bh
Line 728: )
Line 729: {
Line 730: ID = bh
Line 730: -
Line 730: >
Line 730: ID = b_end_io
Line 730: =
Line 730: ID = end_buffer_async_read
Line 730: ;
Line 731: ID = set_buffer_async_read
Line 731: (
Line 731: ID = bh
Line 731: )
Line 731: ;
Line 732: }
Line 733: ID = EXPORT_SYMBOL
Line 733: (
Line 733: ID = mark_buffer_async_read
Line 733: )
Line 733: ;
Line 735: void
Line 735: ID = mark_buffer_async_write
Line 735: (
Line 735: ID = struct
Line 735: ID = buffer_head
Line 735: *
Line 735: ID = bh
Line 735: )
Line 736: {
Line 737: ID = bh
Line 737: -
Line 737: >
Line 737: ID = b_end_io
Line 737: =
Line 737: ID = end_buffer_async_write
Line 737: ;
Line 738: ID = set_buffer_async_write
Line 738: (
Line 738: ID = bh
Line 738: )
Line 738: ;
Line 739: }
Line 740: ID = EXPORT_SYMBOL
Line 740: (
Line 740: ID = mark_buffer_async_write
Line 740: )
Line 740: ;
Line 792: void
Line 792: ID = buffer_insert_list
Line 792: (
Line 792: ID = spinlock_t
Line 792: *
Line 792: ID = lock
Line 792: ,
Line 793: ID = struct
Line 793: ID = buffer_head
Line 793: *
Line 793: ID = bh
Line 793: ,
Line 793: ID = struct
Line 793: ID = list_head
Line 793: *
Line 793: ID = list
Line 793: )
Line 794: {
Line 795: ID = spin_lock
Line 795: (
Line 795: ID = lock
Line 795: )
Line 795: ;
Line 796: ID = list_move_tail
Line 796: (
Line 796: Unrecognized token: 38
Line 796: ID = bh
Line 796: -
Line 796: >
Line 796: ID = b_assoc_buffers
Line 796: ,
Line 796: ID = list
Line 796: )
Line 796: ;
Line 797: ID = spin_unlock
Line 797: (
Line 797: ID = lock
Line 797: )
Line 797: ;
Line 798: }
Line 803: ID = static
Line 803: ID = inline
Line 803: void
Line 803: Unrecognized token: 95
Line 803: Unrecognized token: 95
Line 803: ID = remove_assoc_queue
Line 803: (
Line 803: ID = struct
Line 803: ID = buffer_head
Line 803: *
Line 803: ID = bh
Line 803: )
Line 804: {
Line 805: ID = list_del_init
Line 805: (
Line 805: Unrecognized token: 38
Line 805: ID = bh
Line 805: -
Line 805: >
Line 805: ID = b_assoc_buffers
Line 805: )
Line 805: ;
Line 806: }
Line 808: int
Line 808: ID = inode_has_buffers
Line 808: (
Line 808: ID = struct
Line 808: ID = inode
Line 808: *
Line 808: ID = inode
Line 808: )
Line 809: {
Line 810: return
Line 810: !
Line 810: ID = list_empty
Line 810: (
Line 810: Unrecognized token: 38
Line 810: ID = inode
Line 810: -
Line 810: >
Line 810: ID = i_data
Line 810: Unrecognized token: 46
Line 810: ID = private_list
Line 810: )
Line 810: ;
Line 811: }
Line 823: ID = static
Line 823: int
Line 823: ID = osync_buffers_list
Line 823: (
Line 823: ID = spinlock_t
Line 823: *
Line 823: ID = lock
Line 823: ,
Line 823: ID = struct
Line 823: ID = list_head
Line 823: *
Line 823: ID = list
Line 823: )
Line 824: {
Line 825: ID = struct
Line 825: ID = buffer_head
Line 825: *
Line 825: ID = bh
Line 825: ;
Line 826: ID = struct
Line 826: ID = list_head
Line 826: *
Line 826: ID = p
Line 826: ;
Line 827: int
Line 827: ID = err
Line 827: =
Line 827: INTCON = 0
Line 827: ;
Line 829: ID = spin_lock
Line 829: (
Line 829: ID = lock
Line 829: )
Line 829: ;
Line 830: ID = repeat
Line 830: Unrecognized token: 58
Line 831: ID = list_for_each_prev
Line 831: (
Line 831: ID = p
Line 831: ,
Line 831: ID = list
Line 831: )
Line 831: {
Line 832: ID = bh
Line 832: =
Line 832: ID = BH_ENTRY
Line 832: (
Line 832: ID = p
Line 832: )
Line 832: ;
Line 833: if
Line 833: (
Line 833: ID = buffer_locked
Line 833: (
Line 833: ID = bh
Line 833: )
Line 833: )
Line 833: {
Line 834: ID = get_bh
Line 834: (
Line 834: ID = bh
Line 834: )
Line 834: ;
Line 835: ID = spin_unlock
Line 835: (
Line 835: ID = lock
Line 835: )
Line 835: ;
Line 836: ID = wait_on_buffer
Line 836: (
Line 836: ID = bh
Line 836: )
Line 836: ;
Line 837: if
Line 837: (
Line 837: !
Line 837: ID = buffer_uptodate
Line 837: (
Line 837: ID = bh
Line 837: )
Line 837: )
Line 838: ID = err
Line 838: =
Line 838: -
Line 838: ID = EIO
Line 838: ;
Line 839: ID = brelse
Line 839: (
Line 839: ID = bh
Line 839: )
Line 839: ;
Line 840: ID = spin_lock
Line 840: (
Line 840: ID = lock
Line 840: )
Line 840: ;
Line 841: ID = goto
Line 841: ID = repeat
Line 841: ;
Line 842: }
Line 843: }
Line 844: ID = spin_unlock
Line 844: (
Line 844: ID = lock
Line 844: )
Line 844: ;
Line 845: return
Line 845: ID = err
Line 845: ;
Line 846: }
Line 861: int
Line 861: ID = sync_mapping_buffers
Line 861: (
Line 861: ID = struct
Line 861: ID = address_space
Line 861: *
Line 861: ID = mapping
Line 861: )
Line 862: {
Line 863: ID = struct
Line 863: ID = address_space
Line 863: *
Line 863: ID = buffer_mapping
Line 863: =
Line 863: ID = mapping
Line 863: -
Line 863: >
Line 863: ID = assoc_mapping
Line 863: ;
Line 865: if
Line 865: (
Line 865: ID = buffer_mapping
Line 865: ==
Line 865: ID = NULL
Line 865: ||
Line 865: ID = list_empty
Line 865: (
Line 865: Unrecognized token: 38
Line 865: ID = mapping
Line 865: -
Line 865: >
Line 865: ID = private_list
Line 865: )
Line 865: )
Line 866: return
Line 866: INTCON = 0
Line 866: ;
Line 868: return
Line 868: ID = fsync_buffers_list
Line 868: (
Line 868: Unrecognized token: 38
Line 868: ID = buffer_mapping
Line 868: -
Line 868: >
Line 868: ID = private_lock
Line 868: ,
Line 869: Unrecognized token: 38
Line 869: ID = mapping
Line 869: -
Line 869: >
Line 869: ID = private_list
Line 869: )
Line 869: ;
Line 870: }
Line 871: ID = EXPORT_SYMBOL
Line 871: (
Line 871: ID = sync_mapping_buffers
Line 871: )
Line 871: ;
Line 879: void
Line 879: ID = write_boundary_block
Line 879: (
Line 879: ID = struct
Line 879: ID = block_device
Line 879: *
Line 879: ID = bdev
Line 879: ,
Line 880: ID = sector_t
Line 880: ID = bblock
Line 880: ,
Line 880: ID = unsigned
Line 880: ID = blocksize
Line 880: )
Line 881: {
Line 882: ID = struct
Line 882: ID = buffer_head
Line 882: *
Line 882: ID = bh
Line 882: =
Line 882: Unrecognized token: 95
Line 882: Unrecognized token: 95
Line 882: ID = find_get_block
Line 882: (
Line 882: ID = bdev
Line 882: ,
Line 882: ID = bblock
Line 882: +
Line 882: INTCON = 1
Line 882: ,
Line 882: ID = blocksize
Line 882: )
Line 882: ;
Line 883: if
Line 883: (
Line 883: ID = bh
Line 883: )
Line 883: {
Line 884: if
Line 884: (
Line 884: ID = buffer_dirty
Line 884: (
Line 884: ID = bh
Line 884: )
Line 884: )
Line 885: ID = ll_rw_block
Line 885: (
Line 885: ID = WRITE
Line 885: ,
Line 885: INTCON = 1
Line 885: ,
Line 885: Unrecognized token: 38
Line 885: ID = bh
Line 885: )
Line 885: ;
Line 886: ID = put_bh
Line 886: (
Line 886: ID = bh
Line 886: )
Line 886: ;
Line 887: }
Line 888: }
Line 890: void
Line 890: ID = mark_buffer_dirty_inode
Line 890: (
Line 890: ID = struct
Line 890: ID = buffer_head
Line 890: *
Line 890: ID = bh
Line 890: ,
Line 890: ID = struct
Line 890: ID = inode
Line 890: *
Line 890: ID = inode
Line 890: )
Line 891: {
Line 892: ID = struct
Line 892: ID = address_space
Line 892: *
Line 892: ID = mapping
Line 892: =
Line 892: ID = inode
Line 892: -
Line 892: >
Line 892: ID = i_mapping
Line 892: ;
Line 893: ID = struct
Line 893: ID = address_space
Line 893: *
Line 893: ID = buffer_mapping
Line 893: =
Line 893: ID = bh
Line 893: -
Line 893: >
Line 893: ID = b_page
Line 893: -
Line 893: >
Line 893: ID = mapping
Line 893: ;
Line 895: ID = mark_buffer_dirty
Line 895: (
Line 895: ID = bh
Line 895: )
Line 895: ;
Line 896: if
Line 896: (
Line 896: !
Line 896: ID = mapping
Line 896: -
Line 896: >
Line 896: ID = assoc_mapping
Line 896: )
Line 896: {
Line 897: ID = mapping
Line 897: -
Line 897: >
Line 897: ID = assoc_mapping
Line 897: =
Line 897: ID = buffer_mapping
Line 897: ;
Line 898: }
Line 898: else
Line 898: {
Line 899: if
Line 899: (
Line 899: ID = mapping
Line 899: -
Line 899: >
Line 899: ID = assoc_mapping
Line 899: !=
Line 899: ID = buffer_mapping
Line 899: )
Line 900: ID = BUG
Line 900: (
Line 900: )
Line 900: ;
Line 901: }
Line 902: if
Line 902: (
Line 902: ID = list_empty
Line 902: (
Line 902: Unrecognized token: 38
Line 902: ID = bh
Line 902: -
Line 902: >
Line 902: ID = b_assoc_buffers
Line 902: )
Line 902: )
Line 903: ID = buffer_insert_list
Line 903: (
Line 903: Unrecognized token: 38
Line 903: ID = buffer_mapping
Line 903: -
Line 903: >
Line 903: ID = private_lock
Line 903: ,
Line 904: ID = bh
Line 904: ,
Line 904: Unrecognized token: 38
Line 904: ID = mapping
Line 904: -
Line 904: >
Line 904: ID = private_list
Line 904: )
Line 904: ;
Line 905: }
Line 906: ID = EXPORT_SYMBOL
Line 906: (
Line 906: ID = mark_buffer_dirty_inode
Line 906: )
Line 906: ;
Line 933: int
Line 933: Unrecognized token: 95
Line 933: Unrecognized token: 95
Line 933: ID = set_page_dirty_buffers
Line 933: (
Line 933: ID = struct
Line 933: ID = page
Line 933: *
Line 933: ID = page
Line 933: )
Line 934: {
Line 935: ID = struct
Line 935: ID = address_space
Line 935: *
Line 935: ID = const
Line 935: ID = mapping
Line 935: =
Line 935: ID = page
Line 935: -
Line 935: >
Line 935: ID = mapping
Line 935: ;
Line 937: ID = spin_lock
Line 937: (
Line 937: Unrecognized token: 38
Line 937: ID = mapping
Line 937: -
Line 937: >
Line 937: ID = private_lock
Line 937: )
Line 937: ;
Line 938: if
Line 938: (
Line 938: ID = page_has_buffers
Line 938: (
Line 938: ID = page
Line 938: )
Line 938: )
Line 938: {
Line 939: ID = struct
Line 939: ID = buffer_head
Line 939: *
Line 939: ID = head
Line 939: =
Line 939: ID = page_buffers
Line 939: (
Line 939: ID = page
Line 939: )
Line 939: ;
Line 940: ID = struct
Line 940: ID = buffer_head
Line 940: *
Line 940: ID = bh
Line 940: =
Line 940: ID = head
Line 940: ;
Line 942: ID = do
Line 942: {
Line 943: ID = set_buffer_dirty
Line 943: (
Line 943: ID = bh
Line 943: )
Line 943: ;
Line 944: ID = bh
Line 944: =
Line 944: ID = bh
Line 944: -
Line 944: >
Line 944: ID = b_this_page
Line 944: ;
Line 945: }
Line 945: while
Line 945: (
Line 945: ID = bh
Line 945: !=
Line 945: ID = head
Line 945: )
Line 945: ;
Line 946: }
Line 947: ID = spin_unlock
Line 947: (
Line 947: Unrecognized token: 38
Line 947: ID = mapping
Line 947: -
Line 947: >
Line 947: ID = private_lock
Line 947: )
Line 947: ;
Line 949: if
Line 949: (
Line 949: !
Line 949: ID = TestSetPageDirty
Line 949: (
Line 949: ID = page
Line 949: )
Line 949: )
Line 949: {
Line 950: ID = spin_lock_irq
Line 950: (
Line 950: Unrecognized token: 38
Line 950: ID = mapping
Line 950: -
Line 950: >
Line 950: ID = tree_lock
Line 950: )
Line 950: ;
Line 951: if
Line 951: (
Line 951: ID = page
Line 951: -
Line 951: >
Line 951: ID = mapping
Line 951: )
Line 951: {
Line 952: if
Line 952: (
Line 952: !
Line 952: ID = mapping
Line 952: -
Line 952: >
Line 952: ID = backing_dev_info
Line 952: -
Line 952: >
Line 952: ID = memory_backed
Line 952: )
Line 953: ID = inc_page_state
Line 953: (
Line 953: ID = nr_dirty
Line 953: )
Line 953: ;
Line 954: ID = radix_tree_tag_set
Line 954: (
Line 954: Unrecognized token: 38
Line 954: ID = mapping
Line 954: -
Line 954: >
Line 954: ID = page_tree
Line 954: ,
Line 955: ID = page_index
Line 955: (
Line 955: ID = page
Line 955: )
Line 955: ,
Line 956: ID = PAGECACHE_TAG_DIRTY
Line 956: )
Line 956: ;
Line 957: }
Line 958: ID = spin_unlock_irq
Line 958: (
Line 958: Unrecognized token: 38
Line 958: ID = mapping
Line 958: -
Line 958: >
Line 958: ID = tree_lock
Line 958: )
Line 958: ;
Line 959: Unrecognized token: 95
Line 959: Unrecognized token: 95
Line 959: ID = mark_inode_dirty
Line 959: (
Line 959: ID = mapping
Line 959: -
Line 959: >
Line 959: ID = host
Line 959: ,
Line 959: ID = I_DIRTY_PAGES
Line 959: )
Line 959: ;
Line 960: }
Line 962: return
Line 962: INTCON = 0
Line 962: ;
Line 963: }
Line 964: ID = EXPORT_SYMBOL
Line 964: (
Line 964: Unrecognized token: 95
Line 964: Unrecognized token: 95
Line 964: ID = set_page_dirty_buffers
Line 964: )
Line 964: ;
Line 985: int
Line 985: ID = fsync_buffers_list
Line 985: (
Line 985: ID = spinlock_t
Line 985: *
Line 985: ID = lock
Line 985: ,
Line 985: ID = struct
Line 985: ID = list_head
Line 985: *
Line 985: ID = list
Line 985: )
Line 986: {
Line 987: ID = struct
Line 987: ID = buffer_head
Line 987: *
Line 987: ID = bh
Line 987: ;
Line 988: ID = struct
Line 988: ID = list_head
Line 988: ID = tmp
Line 988: ;
Line 989: int
Line 989: ID = err
Line 989: =
Line 989: INTCON = 0
Line 989: ,
Line 989: ID = err2
Line 989: ;
Line 991: ID = INIT_LIST_HEAD
Line 991: (
Line 991: Unrecognized token: 38
Line 991: ID = tmp
Line 991: )
Line 991: ;
Line 993: ID = spin_lock
Line 993: (
Line 993: ID = lock
Line 993: )
Line 993: ;
Line 994: while
Line 994: (
Line 994: !
Line 994: ID = list_empty
Line 994: (
Line 994: ID = list
Line 994: )
Line 994: )
Line 994: {
Line 995: ID = bh
Line 995: =
Line 995: ID = BH_ENTRY
Line 995: (
Line 995: ID = list
Line 995: -
Line 995: >
Line 995: ID = next
Line 995: )
Line 995: ;
Line 996: ID = list_del_init
Line 996: (
Line 996: Unrecognized token: 38
Line 996: ID = bh
Line 996: -
Line 996: >
Line 996: ID = b_assoc_buffers
Line 996: )
Line 996: ;
Line 997: if
Line 997: (
Line 997: ID = buffer_dirty
Line 997: (
Line 997: ID = bh
Line 997: )
Line 997: ||
Line 997: ID = buffer_locked
Line 997: (
Line 997: ID = bh
Line 997: )
Line 997: )
Line 997: {
Line 998: ID = list_add
Line 998: (
Line 998: Unrecognized token: 38
Line 998: ID = bh
Line 998: -
Line 998: >
Line 998: ID = b_assoc_buffers
Line 998: ,
Line 998: Unrecognized token: 38
Line 998: ID = tmp
Line 998: )
Line 998: ;
Line 999: if
Line 999: (
Line 999: ID = buffer_dirty
Line 999: (
Line 999: ID = bh
Line 999: )
Line 999: )
Line 999: {
Line 1000: ID = get_bh
Line 1000: (
Line 1000: ID = bh
Line 1000: )
Line 1000: ;
Line 1001: ID = spin_unlock
Line 1001: (
Line 1001: ID = lock
Line 1001: )
Line 1001: ;
Line 1008: ID = wait_on_buffer
Line 1008: (
Line 1008: ID = bh
Line 1008: )
Line 1008: ;
Line 1009: ID = ll_rw_block
Line 1009: (
Line 1009: ID = WRITE
Line 1009: ,
Line 1009: INTCON = 1
Line 1009: ,
Line 1009: Unrecognized token: 38
Line 1009: ID = bh
Line 1009: )
Line 1009: ;
Line 1010: ID = brelse
Line 1010: (
Line 1010: ID = bh
Line 1010: )
Line 1010: ;
Line 1011: ID = spin_lock
Line 1011: (
Line 1011: ID = lock
Line 1011: )
Line 1011: ;
Line 1012: }
Line 1013: }
Line 1014: }
Line 1016: while
Line 1016: (
Line 1016: !
Line 1016: ID = list_empty
Line 1016: (
Line 1016: Unrecognized token: 38
Line 1016: ID = tmp
Line 1016: )
Line 1016: )
Line 1016: {
Line 1017: ID = bh
Line 1017: =
Line 1017: ID = BH_ENTRY
Line 1017: (
Line 1017: ID = tmp
Line 1017: Unrecognized token: 46
Line 1017: ID = prev
Line 1017: )
Line 1017: ;
Line 1018: Unrecognized token: 95
Line 1018: Unrecognized token: 95
Line 1018: ID = remove_assoc_queue
Line 1018: (
Line 1018: ID = bh
Line 1018: )
Line 1018: ;
Line 1019: ID = get_bh
Line 1019: (
Line 1019: ID = bh
Line 1019: )
Line 1019: ;
Line 1020: ID = spin_unlock
Line 1020: (
Line 1020: ID = lock
Line 1020: )
Line 1020: ;
Line 1021: ID = wait_on_buffer
Line 1021: (
Line 1021: ID = bh
Line 1021: )
Line 1021: ;
Line 1022: if
Line 1022: (
Line 1022: !
Line 1022: ID = buffer_uptodate
Line 1022: (
Line 1022: ID = bh
Line 1022: )
Line 1022: )
Line 1023: ID = err
Line 1023: =
Line 1023: -
Line 1023: ID = EIO
Line 1023: ;
Line 1024: ID = brelse
Line 1024: (
Line 1024: ID = bh
Line 1024: )
Line 1024: ;
Line 1025: ID = spin_lock
Line 1025: (
Line 1025: ID = lock
Line 1025: )
Line 1025: ;
Line 1026: }
Line 1028: ID = spin_unlock
Line 1028: (
Line 1028: ID = lock
Line 1028: )
Line 1028: ;
Line 1029: ID = err2
Line 1029: =
Line 1029: ID = osync_buffers_list
Line 1029: (
Line 1029: ID = lock
Line 1029: ,
Line 1029: ID = list
Line 1029: )
Line 1029: ;
Line 1030: if
Line 1030: (
Line 1030: ID = err
Line 1030: )
Line 1031: return
Line 1031: ID = err
Line 1031: ;
Line 1032: else
Line 1033: return
Line 1033: ID = err2
Line 1033: ;
Line 1034: }
Line 1045: void
Line 1045: ID = invalidate_inode_buffers
Line 1045: (
Line 1045: ID = struct
Line 1045: ID = inode
Line 1045: *
Line 1045: ID = inode
Line 1045: )
Line 1046: {
Line 1047: if
Line 1047: (
Line 1047: ID = inode_has_buffers
Line 1047: (
Line 1047: ID = inode
Line 1047: )
Line 1047: )
Line 1047: {
Line 1048: ID = struct
Line 1048: ID = address_space
Line 1048: *
Line 1048: ID = mapping
Line 1048: =
Line 1048: Unrecognized token: 38
Line 1048: ID = inode
Line 1048: -
Line 1048: >
Line 1048: ID = i_data
Line 1048: ;
Line 1049: ID = struct
Line 1049: ID = list_head
Line 1049: *
Line 1049: ID = list
Line 1049: =
Line 1049: Unrecognized token: 38
Line 1049: ID = mapping
Line 1049: -
Line 1049: >
Line 1049: ID = private_list
Line 1049: ;
Line 1050: ID = struct
Line 1050: ID = address_space
Line 1050: *
Line 1050: ID = buffer_mapping
Line 1050: =
Line 1050: ID = mapping
Line 1050: -
Line 1050: >
Line 1050: ID = assoc_mapping
Line 1050: ;
Line 1052: ID = spin_lock
Line 1052: (
Line 1052: Unrecognized token: 38
Line 1052: ID = buffer_mapping
Line 1052: -
Line 1052: >
Line 1052: ID = private_lock
Line 1052: )
Line 1052: ;
Line 1053: while
Line 1053: (
Line 1053: !
Line 1053: ID = list_empty
Line 1053: (
Line 1053: ID = list
Line 1053: )
Line 1053: )
Line 1054: Unrecognized token: 95
Line 1054: Unrecognized token: 95
Line 1054: ID = remove_assoc_queue
Line 1054: (
Line 1054: ID = BH_ENTRY
Line 1054: (
Line 1054: ID = list
Line 1054: -
Line 1054: >
Line 1054: ID = next
Line 1054: )
Line 1054: )
Line 1054: ;
Line 1055: ID = spin_unlock
Line 1055: (
Line 1055: Unrecognized token: 38
Line 1055: ID = buffer_mapping
Line 1055: -
Line 1055: >
Line 1055: ID = private_lock
Line 1055: )
Line 1055: ;
Line 1056: }
Line 1057: }
Line 1065: int
Line 1065: ID = remove_inode_buffers
Line 1065: (
Line 1065: ID = struct
Line 1065: ID = inode
Line 1065: *
Line 1065: ID = inode
Line 1065: )
Line 1066: {
Line 1067: int
Line 1067: ID = ret
Line 1067: =
Line 1067: INTCON = 1
Line 1067: ;
Line 1069: if
Line 1069: (
Line 1069: ID = inode_has_buffers
Line 1069: (
Line 1069: ID = inode
Line 1069: )
Line 1069: )
Line 1069: {
Line 1070: ID = struct
Line 1070: ID = address_space
Line 1070: *
Line 1070: ID = mapping
Line 1070: =
Line 1070: Unrecognized token: 38
Line 1070: ID = inode
Line 1070: -
Line 1070: >
Line 1070: ID = i_data
Line 1070: ;
Line 1071: ID = struct
Line 1071: ID = list_head
Line 1071: *
Line 1071: ID = list
Line 1071: =
Line 1071: Unrecognized token: 38
Line 1071: ID = mapping
Line 1071: -
Line 1071: >
Line 1071: ID = private_list
Line 1071: ;
Line 1072: ID = struct
Line 1072: ID = address_space
Line 1072: *
Line 1072: ID = buffer_mapping
Line 1072: =
Line 1072: ID = mapping
Line 1072: -
Line 1072: >
Line 1072: ID = assoc_mapping
Line 1072: ;
Line 1074: ID = spin_lock
Line 1074: (
Line 1074: Unrecognized token: 38
Line 1074: ID = buffer_mapping
Line 1074: -
Line 1074: >
Line 1074: ID = private_lock
Line 1074: )
Line 1074: ;
Line 1075: while
Line 1075: (
Line 1075: !
Line 1075: ID = list_empty
Line 1075: (
Line 1075: ID = list
Line 1075: )
Line 1075: )
Line 1075: {
Line 1076: ID = struct
Line 1076: ID = buffer_head
Line 1076: *
Line 1076: ID = bh
Line 1076: =
Line 1076: ID = BH_ENTRY
Line 1076: (
Line 1076: ID = list
Line 1076: -
Line 1076: >
Line 1076: ID = next
Line 1076: )
Line 1076: ;
Line 1077: if
Line 1077: (
Line 1077: ID = buffer_dirty
Line 1077: (
Line 1077: ID = bh
Line 1077: )
Line 1077: )
Line 1077: {
Line 1078: ID = ret
Line 1078: =
Line 1078: INTCON = 0
Line 1078: ;
Line 1079: ID = break
Line 1079: ;
Line 1080: }
Line 1081: Unrecognized token: 95
Line 1081: Unrecognized token: 95
Line 1081: ID = remove_assoc_queue
Line 1081: (
Line 1081: ID = bh
Line 1081: )
Line 1081: ;
Line 1082: }
Line 1083: ID = spin_unlock
Line 1083: (
Line 1083: Unrecognized token: 38
Line 1083: ID = buffer_mapping
Line 1083: -
Line 1083: >
Line 1083: ID = private_lock
Line 1083: )
Line 1083: ;
Line 1084: }
Line 1085: return
Line 1085: ID = ret
Line 1085: ;
Line 1086: }
Line 1097: ID = static
Line 1097: ID = struct
Line 1097: ID = buffer_head
Line 1097: *
Line 1098: ID = create_buffers
Line 1098: (
Line 1098: ID = struct
Line 1098: ID = page
Line 1098: *
Line 1098: ID = page
Line 1098: ,
Line 1098: ID = unsigned
Line 1098: ID = long
Line 1098: ID = size
Line 1098: ,
Line 1098: int
Line 1098: ID = retry
Line 1098: )
Line 1099: {
Line 1100: ID = struct
Line 1100: ID = buffer_head
Line 1100: *
Line 1100: ID = bh
Line 1100: ,
Line 1100: *
Line 1100: ID = head
Line 1100: ;
Line 1101: ID = long
Line 1101: ID = offset
Line 1101: ;
Line 1103: ID = try_again
Line 1103: Unrecognized token: 58
Line 1104: ID = head
Line 1104: =
Line 1104: ID = NULL
Line 1104: ;
Line 1105: ID = offset
Line 1105: =
Line 1105: ID = PAGE_SIZE
Line 1105: ;
Line 1106: while
Line 1106: (
Line 1106: (
Line 1106: ID = offset
Line 1106: -
Line 1106: =
Line 1106: ID = size
Line 1106: )
Line 1106: >=
Line 1106: INTCON = 0
Line 1106: )
Line 1106: {
Line 1107: ID = bh
Line 1107: =
Line 1107: ID = alloc_buffer_head
Line 1107: (
Line 1107: ID = GFP_NOFS
Line 1107: )
Line 1107: ;
Line 1108: if
Line 1108: (
Line 1108: !
Line 1108: ID = bh
Line 1108: )
Line 1109: ID = goto
Line 1109: ID = no_grow
Line 1109: ;
Line 1111: ID = bh
Line 1111: -
Line 1111: >
Line 1111: ID = b_bdev
Line 1111: =
Line 1111: ID = NULL
Line 1111: ;
Line 1112: ID = bh
Line 1112: -
Line 1112: >
Line 1112: ID = b_this_page
Line 1112: =
Line 1112: ID = head
Line 1112: ;
Line 1113: ID = bh
Line 1113: -
Line 1113: >
Line 1113: ID = b_blocknr
Line 1113: =
Line 1113: -
Line 1113: INTCON = 1
Line 1113: ;
Line 1114: ID = head
Line 1114: =
Line 1114: ID = bh
Line 1114: ;
Line 1116: ID = bh
Line 1116: -
Line 1116: >
Line 1116: ID = b_state
Line 1116: =
Line 1116: INTCON = 0
Line 1116: ;
Line 1117: ID = atomic_set
Line 1117: (
Line 1117: Unrecognized token: 38
Line 1117: ID = bh
Line 1117: -
Line 1117: >
Line 1117: ID = b_count
Line 1117: ,
Line 1117: INTCON = 0
Line 1117: )
Line 1117: ;
Line 1118: ID = bh
Line 1118: -
Line 1118: >
Line 1118: ID = b_size
Line 1118: =
Line 1118: ID = size
Line 1118: ;
Line 1121: ID = set_bh_page
Line 1121: (
Line 1121: ID = bh
Line 1121: ,
Line 1121: ID = page
Line 1121: ,
Line 1121: ID = offset
Line 1121: )
Line 1121: ;
Line 1123: ID = bh
Line 1123: -
Line 1123: >
Line 1123: ID = b_end_io
Line 1123: =
Line 1123: ID = NULL
Line 1123: ;
Line 1124: }
Line 1125: return
Line 1125: ID = head
Line 1125: ;
Line 1129: ID = no_grow
Line 1129: Unrecognized token: 58
Line 1130: if
Line 1130: (
Line 1130: ID = head
Line 1130: )
Line 1130: {
Line 1131: ID = do
Line 1131: {
Line 1132: ID = bh
Line 1132: =
Line 1132: ID = head
Line 1132: ;
Line 1133: ID = head
Line 1133: =
Line 1133: ID = head
Line 1133: -
Line 1133: >
Line 1133: ID = b_this_page
Line 1133: ;
Line 1134: ID = free_buffer_head
Line 1134: (
Line 1134: ID = bh
Line 1134: )
Line 1134: ;
Line 1135: }
Line 1135: while
Line 1135: (
Line 1135: ID = head
Line 1135: )
Line 1135: ;
Line 1136: }
Line 1144: if
Line 1144: (
Line 1144: !
Line 1144: ID = retry
Line 1144: )
Line 1145: return
Line 1145: ID = NULL
Line 1145: ;
Line 1153: ID = free_more_memory
Line 1153: (
Line 1153: )
Line 1153: ;
Line 1154: ID = goto
Line 1154: ID = try_again
Line 1154: ;
Line 1155: }
Line 1157: ID = static
Line 1157: ID = inline
Line 1157: void
Line 1158: ID = link_dev_buffers
Line 1158: (
Line 1158: ID = struct
Line 1158: ID = page
Line 1158: *
Line 1158: ID = page
Line 1158: ,
Line 1158: ID = struct
Line 1158: ID = buffer_head
Line 1158: *
Line 1158: ID = head
Line 1158: )
Line 1159: {
Line 1160: ID = struct
Line 1160: ID = buffer_head
Line 1160: *
Line 1160: ID = bh
Line 1160: ,
Line 1160: *
Line 1160: ID = tail
Line 1160: ;
Line 1162: ID = bh
Line 1162: =
Line 1162: ID = head
Line 1162: ;
Line 1163: ID = do
Line 1163: {
Line 1164: ID = tail
Line 1164: =
Line 1164: ID = bh
Line 1164: ;
Line 1165: ID = bh
Line 1165: =
Line 1165: ID = bh
Line 1165: -
Line 1165: >
Line 1165: ID = b_this_page
Line 1165: ;
Line 1166: }
Line 1166: while
Line 1166: (
Line 1166: ID = bh
Line 1166: )
Line 1166: ;
Line 1167: ID = tail
Line 1167: -
Line 1167: >
Line 1167: ID = b_this_page
Line 1167: =
Line 1167: ID = head
Line 1167: ;
Line 1168: Unrecognized token: 95
Line 1168: Unrecognized token: 95
Line 1168: ID = set_page_buffers
Line 1168: (
Line 1168: ID = page
Line 1168: ,
Line 1168: ID = head
Line 1168: )
Line 1168: ;
Line 1169: }
Line 1174: ID = static
Line 1174: void
Line 1175: ID = init_page_buffers
Line 1175: (
Line 1175: ID = struct
Line 1175: ID = page
Line 1175: *
Line 1175: ID = page
Line 1175: ,
Line 1175: ID = struct
Line 1175: ID = block_device
Line 1175: *
Line 1175: ID = bdev
Line 1175: ,
Line 1176: ID = sector_t
Line 1176: ID = block
Line 1176: ,
Line 1176: int
Line 1176: ID = size
Line 1176: )
Line 1177: {
Line 1178: ID = struct
Line 1178: ID = buffer_head
Line 1178: *
Line 1178: ID = head
Line 1178: =
Line 1178: ID = page_buffers
Line 1178: (
Line 1178: ID = page
Line 1178: )
Line 1178: ;
Line 1179: ID = struct
Line 1179: ID = buffer_head
Line 1179: *
Line 1179: ID = bh
Line 1179: =
Line 1179: ID = head
Line 1179: ;
Line 1180: ID = unsigned
Line 1180: int
Line 1180: ID = b_state
Line 1180: ;
Line 1182: ID = b_state
Line 1182: =
Line 1182: INTCON = 1
Line 1182: <
Line 1182: <
Line 1182: ID = BH_Mapped
Line 1182: ;
Line 1183: if
Line 1183: (
Line 1183: ID = PageUptodate
Line 1183: (
Line 1183: ID = page
Line 1183: )
Line 1183: )
Line 1184: ID = b_state
Line 1184: Unrecognized token: 124
Line 1184: =
Line 1184: INTCON = 1
Line 1184: <
Line 1184: <
Line 1184: ID = BH_Uptodate
Line 1184: ;
Line 1186: ID = do
Line 1186: {
Line 1187: if
Line 1187: (
Line 1187: !
Line 1187: (
Line 1187: ID = bh
Line 1187: -
Line 1187: >
Line 1187: ID = b_state
Line 1187: Unrecognized token: 38
Line 1187: (
Line 1187: INTCON = 1
Line 1187: <
Line 1187: <
Line 1187: ID = BH_Mapped
Line 1187: )
Line 1187: )
Line 1187: )
Line 1187: {
Line 1188: ID = init_buffer
Line 1188: (
Line 1188: ID = bh
Line 1188: ,
Line 1188: ID = NULL
Line 1188: ,
Line 1188: ID = NULL
Line 1188: )
Line 1188: ;
Line 1189: ID = bh
Line 1189: -
Line 1189: >
Line 1189: ID = b_bdev
Line 1189: =
Line 1189: ID = bdev
Line 1189: ;
Line 1190: ID = bh
Line 1190: -
Line 1190: >
Line 1190: ID = b_blocknr
Line 1190: =
Line 1190: ID = block
Line 1190: ;
Line 1191: ID = bh
Line 1191: -
Line 1191: >
Line 1191: ID = b_state
Line 1191: =
Line 1191: ID = b_state
Line 1191: ;
Line 1192: }
Line 1193: ID = block
Line 1193: +
Line 1193: +
Line 1193: ;
Line 1194: ID = bh
Line 1194: =
Line 1194: ID = bh
Line 1194: -
Line 1194: >
Line 1194: ID = b_this_page
Line 1194: ;
Line 1195: }
Line 1195: while
Line 1195: (
Line 1195: ID = bh
Line 1195: !=
Line 1195: ID = head
Line 1195: )
Line 1195: ;
Line 1196: }
Line 1203: ID = static
Line 1203: ID = struct
Line 1203: ID = page
Line 1203: *
Line 1204: ID = grow_dev_page
Line 1204: (
Line 1204: ID = struct
Line 1204: ID = block_device
Line 1204: *
Line 1204: ID = bdev
Line 1204: ,
Line 1204: ID = sector_t
Line 1204: ID = block
Line 1204: ,
Line 1205: ID = pgoff_t
Line 1205: ID = index
Line 1205: ,
Line 1205: int
Line 1205: ID = size
Line 1205: )
Line 1206: {
Line 1207: ID = struct
Line 1207: ID = inode
Line 1207: *
Line 1207: ID = inode
Line 1207: =
Line 1207: ID = bdev
Line 1207: -
Line 1207: >
Line 1207: ID = bd_inode
Line 1207: ;
Line 1208: ID = struct
Line 1208: ID = page
Line 1208: *
Line 1208: ID = page
Line 1208: ;
Line 1209: ID = struct
Line 1209: ID = buffer_head
Line 1209: *
Line 1209: ID = bh
Line 1209: ;
Line 1211: ID = page
Line 1211: =
Line 1211: ID = find_or_create_page
Line 1211: (
Line 1211: ID = inode
Line 1211: -
Line 1211: >
Line 1211: ID = i_mapping
Line 1211: ,
Line 1211: ID = index
Line 1211: ,
Line 1211: ID = GFP_NOFS
Line 1211: )
Line 1211: ;
Line 1212: if
Line 1212: (
Line 1212: !
Line 1212: ID = page
Line 1212: )
Line 1213: return
Line 1213: ID = NULL
Line 1213: ;
Line 1215: if
Line 1215: (
Line 1215: !
Line 1215: ID = PageLocked
Line 1215: (
Line 1215: ID = page
Line 1215: )
Line 1215: )
Line 1216: ID = BUG
Line 1216: (
Line 1216: )
Line 1216: ;
Line 1218: if
Line 1218: (
Line 1218: ID = page_has_buffers
Line 1218: (
Line 1218: ID = page
Line 1218: )
Line 1218: )
Line 1218: {
Line 1219: ID = bh
Line 1219: =
Line 1219: ID = page_buffers
Line 1219: (
Line 1219: ID = page
Line 1219: )
Line 1219: ;
Line 1220: if
Line 1220: (
Line 1220: ID = bh
Line 1220: -
Line 1220: >
Line 1220: ID = b_size
Line 1220: ==
Line 1220: ID = size
Line 1220: )
Line 1221: return
Line 1221: ID = page
Line 1221: ;
Line 1222: if
Line 1222: (
Line 1222: !
Line 1222: ID = try_to_free_buffers
Line 1222: (
Line 1222: ID = page
Line 1222: )
Line 1222: )
Line 1223: ID = goto
Line 1223: ID = failed
Line 1223: ;
Line 1224: }
Line 1229: ID = bh
Line 1229: =
Line 1229: ID = create_buffers
Line 1229: (
Line 1229: ID = page
Line 1229: ,
Line 1229: ID = size
Line 1229: ,
Line 1229: INTCON = 0
Line 1229: )
Line 1229: ;
Line 1230: if
Line 1230: (
Line 1230: !
Line 1230: ID = bh
Line 1230: )
Line 1231: ID = goto
Line 1231: ID = failed
Line 1231: ;
Line 1238: ID = spin_lock
Line 1238: (
Line 1238: Unrecognized token: 38
Line 1238: ID = inode
Line 1238: -
Line 1238: >
Line 1238: ID = i_mapping
Line 1238: -
Line 1238: >
Line 1238: ID = private_lock
Line 1238: )
Line 1238: ;
Line 1239: ID = link_dev_buffers
Line 1239: (
Line 1239: ID = page
Line 1239: ,
Line 1239: ID = bh
Line 1239: )
Line 1239: ;
Line 1240: ID = init_page_buffers
Line 1240: (
Line 1240: ID = page
Line 1240: ,
Line 1240: ID = bdev
Line 1240: ,
Line 1240: ID = block
Line 1240: ,
Line 1240: ID = size
Line 1240: )
Line 1240: ;
Line 1241: ID = spin_unlock
Line 1241: (
Line 1241: Unrecognized token: 38
Line 1241: ID = inode
Line 1241: -
Line 1241: >
Line 1241: ID = i_mapping
Line 1241: -
Line 1241: >
Line 1241: ID = private_lock
Line 1241: )
Line 1241: ;
Line 1242: return
Line 1242: ID = page
Line 1242: ;
Line 1244: ID = failed
Line 1244: Unrecognized token: 58
Line 1245: ID = BUG
Line 1245: (
Line 1245: )
Line 1245: ;
Line 1246: ID = unlock_page
Line 1246: (
Line 1246: ID = page
Line 1246: )
Line 1246: ;
Line 1247: ID = page_cache_release
Line 1247: (
Line 1247: ID = page
Line 1247: )
Line 1247: ;
Line 1248: return
Line 1248: ID = NULL
Line 1248: ;
Line 1249: }
Line 1260: ID = static
Line 1260: ID = inline
Line 1260: int
Line 1261: ID = grow_buffers
Line 1261: (
Line 1261: ID = struct
Line 1261: ID = block_device
Line 1261: *
Line 1261: ID = bdev
Line 1261: ,
Line 1261: ID = sector_t
Line 1261: ID = block
Line 1261: ,
Line 1261: int
Line 1261: ID = size
Line 1261: )
Line 1262: {
Line 1263: ID = struct
Line 1263: ID = page
Line 1263: *
Line 1263: ID = page
Line 1263: ;
Line 1264: ID = pgoff_t
Line 1264: ID = index
Line 1264: ;
Line 1265: int
Line 1265: ID = sizebits
Line 1265: ;
Line 1267: ID = sizebits
Line 1267: =
Line 1267: -
Line 1267: INTCON = 1
Line 1267: ;
Line 1268: ID = do
Line 1268: {
Line 1269: ID = sizebits
Line 1269: +
Line 1269: +
Line 1269: ;
Line 1270: }
Line 1270: while
Line 1270: (
Line 1270: (
Line 1270: ID = size
Line 1270: <
Line 1270: <
Line 1270: ID = sizebits
Line 1270: )
Line 1270: <
Line 1270: ID = PAGE_SIZE
Line 1270: )
Line 1270: ;
Line 1272: ID = index
Line 1272: =
Line 1272: ID = block
Line 1272: >
Line 1272: >
Line 1272: ID = sizebits
Line 1272: ;
Line 1273: ID = block
Line 1273: =
Line 1273: ID = index
Line 1273: <
Line 1273: <
Line 1273: ID = sizebits
Line 1273: ;
Line 1276: ID = page
Line 1276: =
Line 1276: ID = grow_dev_page
Line 1276: (
Line 1276: ID = bdev
Line 1276: ,
Line 1276: ID = block
Line 1276: ,
Line 1276: ID = index
Line 1276: ,
Line 1276: ID = size
Line 1276: )
Line 1276: ;
Line 1277: if
Line 1277: (
Line 1277: !
Line 1277: ID = page
Line 1277: )
Line 1278: return
Line 1278: INTCON = 0
Line 1278: ;
Line 1279: ID = unlock_page
Line 1279: (
Line 1279: ID = page
Line 1279: )
Line 1279: ;
Line 1280: ID = page_cache_release
Line 1280: (
Line 1280: ID = page
Line 1280: )
Line 1280: ;
Line 1281: return
Line 1281: INTCON = 1
Line 1281: ;
Line 1282: }
Line 1284: ID = struct
Line 1284: ID = buffer_head
Line 1284: *
Line 1285: Unrecognized token: 95
Line 1285: Unrecognized token: 95
Line 1285: ID = getblk_slow
Line 1285: (
Line 1285: ID = struct
Line 1285: ID = block_device
Line 1285: *
Line 1285: ID = bdev
Line 1285: ,
Line 1285: ID = sector_t
Line 1285: ID = block
Line 1285: ,
Line 1285: int
Line 1285: ID = size
Line 1285: )
Line 1286: {
Line 1288: if
Line 1288: (
Line 1288: ID = unlikely
Line 1288: (
Line 1288: ID = size
Line 1288: Unrecognized token: 38
Line 1288: (
Line 1288: ID = bdev_hardsect_size
Line 1288: (
Line 1288: ID = bdev
Line 1288: )
Line 1288: -
Line 1288: INTCON = 1
Line 1288: )
Line 1288: ||
Line 1289: (
Line 1289: ID = size
Line 1289: <
Line 1289: INTCON = 512
Line 1289: ||
Line 1289: ID = size
Line 1289: >
Line 1289: ID = PAGE_SIZE
Line 1289: )
Line 1289: )
Line 1289: )
Line 1289: {
Line 1290: ID = printk
Line 1290: (
Line 1290: ID = KERN_ERR
Line 1290: STRINGCON = "getblk(): invalid block size %d requested\n"
Line 1290: ,
Line 1291: ID = size
Line 1291: )
Line 1291: ;
Line 1292: ID = printk
Line 1292: (
Line 1292: ID = KERN_ERR
Line 1292: STRINGCON = "hardsect size: %d\n"
Line 1292: ,
Line 1293: ID = bdev_hardsect_size
Line 1293: (
Line 1293: ID = bdev
Line 1293: )
Line 1293: )
Line 1293: ;
Line 1295: ID = dump_stack
Line 1295: (
Line 1295: )
Line 1295: ;
Line 1296: return
Line 1296: ID = NULL
Line 1296: ;
Line 1297: }
Line 1299: for
Line 1299: (
Line 1299: ;
Line 1299: ;
Line 1299: )
Line 1299: {
Line 1300: ID = struct
Line 1300: ID = buffer_head
Line 1300: *
Line 1300: ID = bh
Line 1300: ;
Line 1302: ID = bh
Line 1302: =
Line 1302: Unrecognized token: 95
Line 1302: Unrecognized token: 95
Line 1302: ID = find_get_block
Line 1302: (
Line 1302: ID = bdev
Line 1302: ,
Line 1302: ID = block
Line 1302: ,
Line 1302: ID = size
Line 1302: )
Line 1302: ;
Line 1303: if
Line 1303: (
Line 1303: ID = bh
Line 1303: )
Line 1304: return
Line 1304: ID = bh
Line 1304: ;
Line 1306: if
Line 1306: (
Line 1306: !
Line 1306: ID = grow_buffers
Line 1306: (
Line 1306: ID = bdev
Line 1306: ,
Line 1306: ID = block
Line 1306: ,
Line 1306: ID = size
Line 1306: )
Line 1306: )
Line 1307: ID = free_more_memory
Line 1307: (
Line 1307: )
Line 1307: ;
Line 1308: }
Line 1309: }
Line 1345: void
Line 1345: ID = fastcall
Line 1345: ID = mark_buffer_dirty
Line 1345: (
Line 1345: ID = struct
Line 1345: ID = buffer_head
Line 1345: *
Line 1345: ID = bh
Line 1345: )
Line 1346: {
Line 1347: if
Line 1347: (
Line 1347: !
Line 1347: ID = buffer_dirty
Line 1347: (
Line 1347: ID = bh
Line 1347: )
Line 1347: &&
Line 1347: !
Line 1347: ID = test_set_buffer_dirty
Line 1347: (
Line 1347: ID = bh
Line 1347: )
Line 1347: )
Line 1348: Unrecognized token: 95
Line 1348: Unrecognized token: 95
Line 1348: ID = set_page_dirty_nobuffers
Line 1348: (
Line 1348: ID = bh
Line 1348: -
Line 1348: >
Line 1348: ID = b_page
Line 1348: )
Line 1348: ;
Line 1349: }
Line 1358: void
Line 1358: Unrecognized token: 95
Line 1358: Unrecognized token: 95
Line 1358: ID = brelse
Line 1358: (
Line 1358: ID = struct
Line 1358: ID = buffer_head
Line 1358: *
Line 1358: ID = buf
Line 1358: )
Line 1359: {
Line 1360: if
Line 1360: (
Line 1360: ID = atomic_read
Line 1360: (
Line 1360: Unrecognized token: 38
Line 1360: ID = buf
Line 1360: -
Line 1360: >
Line 1360: ID = b_count
Line 1360: )
Line 1360: )
Line 1360: {
Line 1361: ID = put_bh
Line 1361: (
Line 1361: ID = buf
Line 1361: )
Line 1361: ;
Line 1362: return
Line 1362: ;
Line 1363: }
Line 1364: ID = printk
Line 1364: (
Line 1364: ID = KERN_ERR
Line 1364: STRINGCON = "VFS: brelse: Trying to free free buffer\n"
Line 1364: )
Line 1364: ;
Line 1365: ID = WARN_ON
Line 1365: (
Line 1365: INTCON = 1
Line 1365: )
Line 1365: ;
Line 1366: }
Line 1372: void
Line 1372: Unrecognized token: 95
Line 1372: Unrecognized token: 95
Line 1372: ID = bforget
Line 1372: (
Line 1372: ID = struct
Line 1372: ID = buffer_head
Line 1372: *
Line 1372: ID = bh
Line 1372: )
Line 1373: {
Line 1374: ID = clear_buffer_dirty
Line 1374: (
Line 1374: ID = bh
Line 1374: )
Line 1374: ;
Line 1375: if
Line 1375: (
Line 1375: !
Line 1375: ID = list_empty
Line 1375: (
Line 1375: Unrecognized token: 38
Line 1375: ID = bh
Line 1375: -
Line 1375: >
Line 1375: ID = b_assoc_buffers
Line 1375: )
Line 1375: )
Line 1375: {
Line 1376: ID = struct
Line 1376: ID = address_space
Line 1376: *
Line 1376: ID = buffer_mapping
Line 1376: =
Line 1376: ID = bh
Line 1376: -
Line 1376: >
Line 1376: ID = b_page
Line 1376: -
Line 1376: >
Line 1376: ID = mapping
Line 1376: ;
Line 1378: ID = spin_lock
Line 1378: (
Line 1378: Unrecognized token: 38
Line 1378: ID = buffer_mapping
Line 1378: -
Line 1378: >
Line 1378: ID = private_lock
Line 1378: )
Line 1378: ;
Line 1379: ID = list_del_init
Line 1379: (
Line 1379: Unrecognized token: 38
Line 1379: ID = bh
Line 1379: -
Line 1379: >
Line 1379: ID = b_assoc_buffers
Line 1379: )
Line 1379: ;
Line 1380: ID = spin_unlock
Line 1380: (
Line 1380: Unrecognized token: 38
Line 1380: ID = buffer_mapping
Line 1380: -
Line 1380: >
Line 1380: ID = private_lock
Line 1380: )
Line 1380: ;
Line 1381: }
Line 1382: Unrecognized token: 95
Line 1382: Unrecognized token: 95
Line 1382: ID = brelse
Line 1382: (
Line 1382: ID = bh
Line 1382: )
Line 1382: ;
Line 1383: }
Line 1385: ID = static
Line 1385: ID = struct
Line 1385: ID = buffer_head
Line 1385: *
Line 1385: Unrecognized token: 95
Line 1385: Unrecognized token: 95
Line 1385: ID = bread_slow
Line 1385: (
Line 1385: ID = struct
Line 1385: ID = buffer_head
Line 1385: *
Line 1385: ID = bh
Line 1385: )
Line 1386: {
Line 1387: ID = lock_buffer
Line 1387: (
Line 1387: ID = bh
Line 1387: )
Line 1387: ;
Line 1388: if
Line 1388: (
Line 1388: ID = buffer_uptodate
Line 1388: (
Line 1388: ID = bh
Line 1388: )
Line 1388: )
Line 1388: {
Line 1389: ID = unlock_buffer
Line 1389: (
Line 1389: ID = bh
Line 1389: )
Line 1389: ;
Line 1390: return
Line 1390: ID = bh
Line 1390: ;
Line 1391: }
Line 1391: else
Line 1391: {
Line 1392: ID = get_bh
Line 1392: (
Line 1392: ID = bh
Line 1392: )
Line 1392: ;
Line 1393: ID = bh
Line 1393: -
Line 1393: >
Line 1393: ID = b_end_io
Line 1393: =
Line 1393: ID = end_buffer_read_sync
Line 1393: ;
Line 1394: ID = submit_bh
Line 1394: (
Line 1394: ID = READ
Line 1394: ,
Line 1394: ID = bh
Line 1394: )
Line 1394: ;
Line 1395: ID = wait_on_buffer
Line 1395: (
Line 1395: ID = bh
Line 1395: )
Line 1395: ;
Line 1396: if
Line 1396: (
Line 1396: ID = buffer_uptodate
Line 1396: (
Line 1396: ID = bh
Line 1396: )
Line 1396: )
Line 1397: return
Line 1397: ID = bh
Line 1397: ;
Line 1398: }
Line 1399: ID = brelse
Line 1399: (
Line 1399: ID = bh
Line 1399: )
Line 1399: ;
Line 1400: return
Line 1400: ID = NULL
Line 1400: ;
Line 1401: }
Line 1417: Unrecognized token: 35
Line 1417: ID = define
Line 1417: ID = BH_LRU_SIZE
Line 1417: INTCON = 8
Line 1419: ID = struct
Line 1419: ID = bh_lru
Line 1419: {
Line 1420: ID = struct
Line 1420: ID = buffer_head
Line 1420: *
Line 1420: ID = bhs
Line 1420: [
Line 1420: ID = BH_LRU_SIZE
Line 1420: ]
Line 1420: ;
Line 1421: }
Line 1421: ;
Line 1423: ID = static
Line 1423: ID = DEFINE_PER_CPU
Line 1423: (
Line 1423: ID = struct
Line 1423: ID = bh_lru
Line 1423: ,
Line 1423: ID = bh_lrus
Line 1423: )
Line 1423: =
Line 1423: {
Line 1423: {
Line 1423: ID = NULL
Line 1423: }
Line 1423: }
Line 1423: ;
Line 1425: Unrecognized token: 35
Line 1425: ID = ifdef
Line 1425: ID = CONFIG_SMP
Line 1426: Unrecognized token: 35
Line 1426: ID = define
Line 1426: ID = bh_lru_lock
Line 1426: (
Line 1426: )
Line 1426: ID = local_irq_disable
Line 1426: (
Line 1426: )
Line 1427: Unrecognized token: 35
Line 1427: ID = define
Line 1427: ID = bh_lru_unlock
Line 1427: (
Line 1427: )
Line 1427: ID = local_irq_enable
Line 1427: (
Line 1427: )
Line 1428: Unrecognized token: 35
Line 1428: else
Line 1429: Unrecognized token: 35
Line 1429: ID = define
Line 1429: ID = bh_lru_lock
Line 1429: (
Line 1429: )
Line 1429: ID = preempt_disable
Line 1429: (
Line 1429: )
Line 1430: Unrecognized token: 35
Line 1430: ID = define
Line 1430: ID = bh_lru_unlock
Line 1430: (
Line 1430: )
Line 1430: ID = preempt_enable
Line 1430: (
Line 1430: )
Line 1431: Unrecognized token: 35
Line 1431: ID = endif
Line 1433: ID = static
Line 1433: ID = inline
Line 1433: void
Line 1433: ID = check_irqs_on
Line 1433: (
Line 1433: void
Line 1433: )
Line 1434: {
Line 1435: Unrecognized token: 35
Line 1435: ID = ifdef
Line 1435: ID = irqs_disabled
Line 1436: ID = BUG_ON
Line 1436: (
Line 1436: ID = irqs_disabled
Line 1436: (
Line 1436: )
Line 1436: )
Line 1436: ;
Line 1437: Unrecognized token: 35
Line 1437: ID = endif
Line 1438: }
Line 1443: ID = static
Line 1443: void
Line 1443: ID = bh_lru_install
Line 1443: (
Line 1443: ID = struct
Line 1443: ID = buffer_head
Line 1443: *
Line 1443: ID = bh
Line 1443: )
Line 1444: {
Line 1445: ID = struct
Line 1445: ID = buffer_head
Line 1445: *
Line 1445: ID = evictee
Line 1445: =
Line 1445: ID = NULL
Line 1445: ;
Line 1446: ID = struct
Line 1446: ID = bh_lru
Line 1446: *
Line 1446: ID = lru
Line 1446: ;
Line 1448: ID = check_irqs_on
Line 1448: (
Line 1448: )
Line 1448: ;
Line 1449: ID = bh_lru_lock
Line 1449: (
Line 1449: )
Line 1449: ;
Line 1450: ID = lru
Line 1450: =
Line 1450: Unrecognized token: 38
Line 1450: Unrecognized token: 95
Line 1450: Unrecognized token: 95
Line 1450: ID = get_cpu_var
Line 1450: (
Line 1450: ID = bh_lrus
Line 1450: )
Line 1450: ;
Line 1451: if
Line 1451: (
Line 1451: ID = lru
Line 1451: -
Line 1451: >
Line 1451: ID = bhs
Line 1451: [
Line 1451: INTCON = 0
Line 1451: ]
Line 1451: !=
Line 1451: ID = bh
Line 1451: )
Line 1451: {
Line 1452: ID = struct
Line 1452: ID = buffer_head
Line 1452: *
Line 1452: ID = bhs
Line 1452: [
Line 1452: ID = BH_LRU_SIZE
Line 1452: ]
Line 1452: ;
Line 1453: int
Line 1453: ID = in
Line 1453: ;
Line 1454: int
Line 1454: ID = out
Line 1454: =
Line 1454: INTCON = 0
Line 1454: ;
Line 1456: ID = get_bh
Line 1456: (
Line 1456: ID = bh
Line 1456: )
Line 1456: ;
Line 1457: ID = bhs
Line 1457: [
Line 1457: ID = out
Line 1457: +
Line 1457: +
Line 1457: ]
Line 1457: =
Line 1457: ID = bh
Line 1457: ;
Line 1458: for
Line 1458: (
Line 1458: ID = in
Line 1458: =
Line 1458: INTCON = 0
Line 1458: ;
Line 1458: ID = in
Line 1458: <
Line 1458: ID = BH_LRU_SIZE
Line 1458: ;
Line 1458: ID = in
Line 1458: +
Line 1458: +
Line 1458: )
Line 1458: {
Line 1459: ID = struct
Line 1459: ID = buffer_head
Line 1459: *
Line 1459: ID = bh2
Line 1459: =
Line 1459: ID = lru
Line 1459: -
Line 1459: >
Line 1459: ID = bhs
Line 1459: [
Line 1459: ID = in
Line 1459: ]
Line 1459: ;
Line 1461: if
Line 1461: (
Line 1461: ID = bh2
Line 1461: ==
Line 1461: ID = bh
Line 1461: )
Line 1461: {
Line 1462: Unrecognized token: 95
Line 1462: Unrecognized token: 95
Line 1462: ID = brelse
Line 1462: (
Line 1462: ID = bh2
Line 1462: )
Line 1462: ;
Line 1463: }
Line 1463: else
Line 1463: {
Line 1464: if
Line 1464: (
Line 1464: ID = out
Line 1464: >=
Line 1464: ID = BH_LRU_SIZE
Line 1464: )
Line 1464: {
Line 1465: ID = BUG_ON
Line 1465: (
Line 1465: ID = evictee
Line 1465: !=
Line 1465: ID = NULL
Line 1465: )
Line 1465: ;
Line 1466: ID = evictee
Line 1466: =
Line 1466: ID = bh2
Line 1466: ;
Line 1467: }
Line 1467: else
Line 1467: {
Line 1468: ID = bhs
Line 1468: [
Line 1468: ID = out
Line 1468: +
Line 1468: +
Line 1468: ]
Line 1468: =
Line 1468: ID = bh2
Line 1468: ;
Line 1469: }
Line 1470: }
Line 1471: }
Line 1472: while
Line 1472: (
Line 1472: ID = out
Line 1472: <
Line 1472: ID = BH_LRU_SIZE
Line 1472: )
Line 1473: ID = bhs
Line 1473: [
Line 1473: ID = out
Line 1473: +
Line 1473: +
Line 1473: ]
Line 1473: =
Line 1473: ID = NULL
Line 1473: ;
Line 1474: ID = memcpy
Line 1474: (
Line 1474: ID = lru
Line 1474: -
Line 1474: >
Line 1474: ID = bhs
Line 1474: ,
Line 1474: ID = bhs
Line 1474: ,
Line 1474: ID = sizeof
Line 1474: (
Line 1474: ID = bhs
Line 1474: )
Line 1474: )
Line 1474: ;
Line 1475: }
Line 1476: ID = bh_lru_unlock
Line 1476: (
Line 1476: )
Line 1476: ;
Line 1478: if
Line 1478: (
Line 1478: ID = evictee
Line 1478: )
Line 1479: Unrecognized token: 95
Line 1479: Unrecognized token: 95
Line 1479: ID = brelse
Line 1479: (
Line 1479: ID = evictee
Line 1479: )
Line 1479: ;
Line 1480: }
Line 1485: ID = static
Line 1485: ID = inline
Line 1485: ID = struct
Line 1485: ID = buffer_head
Line 1485: *
Line 1486: ID = lookup_bh_lru
Line 1486: (
Line 1486: ID = struct
Line 1486: ID = block_device
Line 1486: *
Line 1486: ID = bdev
Line 1486: ,
Line 1486: ID = sector_t
Line 1486: ID = block
Line 1486: ,
Line 1486: int
Line 1486: ID = size
Line 1486: )
Line 1487: {
Line 1488: ID = struct
Line 1488: ID = buffer_head
Line 1488: *
Line 1488: ID = ret
Line 1488: =
Line 1488: ID = NULL
Line 1488: ;
Line 1489: ID = struct
Line 1489: ID = bh_lru
Line 1489: *
Line 1489: ID = lru
Line 1489: ;
Line 1490: int
Line 1490: ID = i
Line 1490: ;
Line 1492: ID = check_irqs_on
Line 1492: (
Line 1492: )
Line 1492: ;
Line 1493: ID = bh_lru_lock
Line 1493: (
Line 1493: )
Line 1493: ;
Line 1494: ID = lru
Line 1494: =
Line 1494: Unrecognized token: 38
Line 1494: Unrecognized token: 95
Line 1494: Unrecognized token: 95
Line 1494: ID = get_cpu_var
Line 1494: (
Line 1494: ID = bh_lrus
Line 1494: )
Line 1494: ;
Line 1495: for
Line 1495: (
Line 1495: ID = i
Line 1495: =
Line 1495: INTCON = 0
Line 1495: ;
Line 1495: ID = i
Line 1495: <
Line 1495: ID = BH_LRU_SIZE
Line 1495: ;
Line 1495: ID = i
Line 1495: +
Line 1495: +
Line 1495: )
Line 1495: {
Line 1496: ID = struct
Line 1496: ID = buffer_head
Line 1496: *
Line 1496: ID = bh
Line 1496: =
Line 1496: ID = lru
Line 1496: -
Line 1496: >
Line 1496: ID = bhs
Line 1496: [
Line 1496: ID = i
Line 1496: ]
Line 1496: ;
Line 1498: if
Line 1498: (
Line 1498: ID = bh
Line 1498: &&
Line 1498: ID = bh
Line 1498: -
Line 1498: >
Line 1498: ID = b_bdev
Line 1498: ==
Line 1498: ID = bdev
Line 1498: &&
Line 1499: ID = bh
Line 1499: -
Line 1499: >
Line 1499: ID = b_blocknr
Line 1499: ==
Line 1499: ID = block
Line 1499: &&
Line 1499: ID = bh
Line 1499: -
Line 1499: >
Line 1499: ID = b_size
Line 1499: ==
Line 1499: ID = size
Line 1499: )
Line 1499: {
Line 1500: if
Line 1500: (
Line 1500: ID = i
Line 1500: )
Line 1500: {
Line 1501: while
Line 1501: (
Line 1501: ID = i
Line 1501: )
Line 1501: {
Line 1502: ID = lru
Line 1502: -
Line 1502: >
Line 1502: ID = bhs
Line 1502: [
Line 1502: ID = i
Line 1502: ]
Line 1502: =
Line 1502: ID = lru
Line 1502: -
Line 1502: >
Line 1502: ID = bhs
Line 1502: [
Line 1502: ID = i
Line 1502: -
Line 1502: INTCON = 1
Line 1502: ]
Line 1502: ;
Line 1503: ID = i
Line 1503: -
Line 1503: -
Line 1503: ;
Line 1504: }
Line 1505: ID = lru
Line 1505: -
Line 1505: >
Line 1505: ID = bhs
Line 1505: [
Line 1505: INTCON = 0
Line 1505: ]
Line 1505: =
Line 1505: ID = bh
Line 1505: ;
Line 1506: }
Line 1507: ID = get_bh
Line 1507: (
Line 1507: ID = bh
Line 1507: )
Line 1507: ;
Line 1508: ID = ret
Line 1508: =
Line 1508: ID = bh
Line 1508: ;
Line 1509: ID = break
Line 1509: ;
Line 1510: }
Line 1511: }
Line 1512: ID = bh_lru_unlock
Line 1512: (
Line 1512: )
Line 1512: ;
Line 1513: return
Line 1513: ID = ret
Line 1513: ;
Line 1514: }
Line 1521: ID = struct
Line 1521: ID = buffer_head
Line 1521: *
Line 1522: Unrecognized token: 95
Line 1522: Unrecognized token: 95
Line 1522: ID = find_get_block
Line 1522: (
Line 1522: ID = struct
Line 1522: ID = block_device
Line 1522: *
Line 1522: ID = bdev
Line 1522: ,
Line 1522: ID = sector_t
Line 1522: ID = block
Line 1522: ,
Line 1522: int
Line 1522: ID = size
Line 1522: )
Line 1523: {
Line 1524: ID = struct
Line 1524: ID = buffer_head
Line 1524: *
Line 1524: ID = bh
Line 1524: =
Line 1524: ID = lookup_bh_lru
Line 1524: (
Line 1524: ID = bdev
Line 1524: ,
Line 1524: ID = block
Line 1524: ,
Line 1524: ID = size
Line 1524: )
Line 1524: ;
Line 1526: if
Line 1526: (
Line 1526: ID = bh
Line 1526: ==
Line 1526: ID = NULL
Line 1526: )
Line 1526: {
Line 1527: ID = bh
Line 1527: =
Line 1527: Unrecognized token: 95
Line 1527: Unrecognized token: 95
Line 1527: ID = find_get_block_slow
Line 1527: (
Line 1527: ID = bdev
Line 1527: ,
Line 1527: ID = block
Line 1527: ,
Line 1527: ID = size
Line 1527: )
Line 1527: ;
Line 1528: if
Line 1528: (
Line 1528: ID = bh
Line 1528: )
Line 1529: ID = bh_lru_install
Line 1529: (
Line 1529: ID = bh
Line 1529: )
Line 1529: ;
Line 1530: }
Line 1531: if
Line 1531: (
Line 1531: ID = bh
Line 1531: )
Line 1532: ID = touch_buffer
Line 1532: (
Line 1532: ID = bh
Line 1532: )
Line 1532: ;
Line 1533: return
Line 1533: ID = bh
Line 1533: ;
Line 1534: }
Line 1535: ID = EXPORT_SYMBOL
Line 1535: (
Line 1535: Unrecognized token: 95
Line 1535: Unrecognized token: 95
Line 1535: ID = find_get_block
Line 1535: )
Line 1535: ;
Line 1549: ID = struct
Line 1549: ID = buffer_head
Line 1549: *
Line 1550: Unrecognized token: 95
Line 1550: Unrecognized token: 95
Line 1550: ID = getblk
Line 1550: (
Line 1550: ID = struct
Line 1550: ID = block_device
Line 1550: *
Line 1550: ID = bdev
Line 1550: ,
Line 1550: ID = sector_t
Line 1550: ID = block
Line 1550: ,
Line 1550: int
Line 1550: ID = size
Line 1550: )
Line 1551: {
Line 1552: ID = struct
Line 1552: ID = buffer_head
Line 1552: *
Line 1552: ID = bh
Line 1552: =
Line 1552: Unrecognized token: 95
Line 1552: Unrecognized token: 95
Line 1552: ID = find_get_block
Line 1552: (
Line 1552: ID = bdev
Line 1552: ,
Line 1552: ID = block
Line 1552: ,
Line 1552: ID = size
Line 1552: )
Line 1552: ;
Line 1554: if
Line 1554: (
Line 1554: ID = bh
Line 1554: ==
Line 1554: ID = NULL
Line 1554: )
Line 1555: ID = bh
Line 1555: =
Line 1555: Unrecognized token: 95
Line 1555: Unrecognized token: 95
Line 1555: ID = getblk_slow
Line 1555: (
Line 1555: ID = bdev
Line 1555: ,
Line 1555: ID = block
Line 1555: ,
Line 1555: ID = size
Line 1555: )
Line 1555: ;
Line 1556: return
Line 1556: ID = bh
Line 1556: ;
Line 1557: }
Line 1558: ID = EXPORT_SYMBOL
Line 1558: (
Line 1558: Unrecognized token: 95
Line 1558: Unrecognized token: 95
Line 1558: ID = getblk
Line 1558: )
Line 1558: ;
Line 1563: void
Line 1563: Unrecognized token: 95
Line 1563: Unrecognized token: 95
Line 1563: ID = breadahead
Line 1563: (
Line 1563: ID = struct
Line 1563: ID = block_device
Line 1563: *
Line 1563: ID = bdev
Line 1563: ,
Line 1563: ID = sector_t
Line 1563: ID = block
Line 1563: ,
Line 1563: int
Line 1563: ID = size
Line 1563: )
Line 1564: {
Line 1565: ID = struct
Line 1565: ID = buffer_head
Line 1565: *
Line 1565: ID = bh
Line 1565: =
Line 1565: Unrecognized token: 95
Line 1565: Unrecognized token: 95
Line 1565: ID = getblk
Line 1565: (
Line 1565: ID = bdev
Line 1565: ,
Line 1565: ID = block
Line 1565: ,
Line 1565: ID = size
Line 1565: )
Line 1565: ;
Line 1566: ID = ll_rw_block
Line 1566: (
Line 1566: ID = READA
Line 1566: ,
Line 1566: INTCON = 1
Line 1566: ,
Line 1566: Unrecognized token: 38
Line 1566: ID = bh
Line 1566: )
Line 1566: ;
Line 1567: ID = brelse
Line 1567: (
Line 1567: ID = bh
Line 1567: )
Line 1567: ;
Line 1568: }
Line 1569: ID = EXPORT_SYMBOL
Line 1569: (
Line 1569: Unrecognized token: 95
Line 1569: Unrecognized token: 95
Line 1569: ID = breadahead
Line 1569: )
Line 1569: ;
Line 1579: ID = struct
Line 1579: ID = buffer_head
Line 1579: *
Line 1580: Unrecognized token: 95
Line 1580: Unrecognized token: 95
Line 1580: ID = bread
Line 1580: (
Line 1580: ID = struct
Line 1580: ID = block_device
Line 1580: *
Line 1580: ID = bdev
Line 1580: ,
Line 1580: ID = sector_t
Line 1580: ID = block
Line 1580: ,
Line 1580: int
Line 1580: ID = size
Line 1580: )
Line 1581: {
Line 1582: ID = struct
Line 1582: ID = buffer_head
Line 1582: *
Line 1582: ID = bh
Line 1582: =
Line 1582: Unrecognized token: 95
Line 1582: Unrecognized token: 95
Line 1582: ID = getblk
Line 1582: (
Line 1582: ID = bdev
Line 1582: ,
Line 1582: ID = block
Line 1582: ,
Line 1582: ID = size
Line 1582: )
Line 1582: ;
Line 1584: if
Line 1584: (
Line 1584: !
Line 1584: ID = buffer_uptodate
Line 1584: (
Line 1584: ID = bh
Line 1584: )
Line 1584: )
Line 1585: ID = bh
Line 1585: =
Line 1585: Unrecognized token: 95
Line 1585: Unrecognized token: 95
Line 1585: ID = bread_slow
Line 1585: (
Line 1585: ID = bh
Line 1585: )
Line 1585: ;
Line 1586: return
Line 1586: ID = bh
Line 1586: ;
Line 1587: }
Line 1588: ID = EXPORT_SYMBOL
Line 1588: (
Line 1588: Unrecognized token: 95
Line 1588: Unrecognized token: 95
Line 1588: ID = bread
Line 1588: )
Line 1588: ;
Line 1595: ID = static
Line 1595: void
Line 1595: ID = invalidate_bh_lru
Line 1595: (
Line 1595: void
Line 1595: *
Line 1595: ID = arg
Line 1595: )
Line 1596: {
Line 1597: ID = struct
Line 1597: ID = bh_lru
Line 1597: *
Line 1597: ID = b
Line 1597: =
Line 1597: Unrecognized token: 38
Line 1597: ID = get_cpu_var
Line 1597: (
Line 1597: ID = bh_lrus
Line 1597: )
Line 1597: ;
Line 1598: int
Line 1598: ID = i
Line 1598: ;
Line 1600: for
Line 1600: (
Line 1600: ID = i
Line 1600: =
Line 1600: INTCON = 0
Line 1600: ;
Line 1600: ID = i
Line 1600: <
Line 1600: ID = BH_LRU_SIZE
Line 1600: ;
Line 1600: ID = i
Line 1600: +
Line 1600: +
Line 1600: )
Line 1600: {
Line 1601: ID = brelse
Line 1601: (
Line 1601: ID = b
Line 1601: -
Line 1601: >
Line 1601: ID = bhs
Line 1601: [
Line 1601: ID = i
Line 1601: ]
Line 1601: )
Line 1601: ;
Line 1602: ID = b
Line 1602: -
Line 1602: >
Line 1602: ID = bhs
Line 1602: [
Line 1602: ID = i
Line 1602: ]
Line 1602: =
Line 1602: ID = NULL
Line 1602: ;
Line 1603: }
Line 1604: ID = put_cpu_var
Line 1604: (
Line 1604: ID = bh_lrus
Line 1604: )
Line 1604: ;
Line 1605: }
Line 1607: ID = static
Line 1607: void
Line 1607: ID = invalidate_bh_lrus
Line 1607: (
Line 1607: void
Line 1607: )
Line 1608: {
Line 1609: ID = on_each_cpu
Line 1609: (
Line 1609: ID = invalidate_bh_lru
Line 1609: ,
Line 1609: ID = NULL
Line 1609: ,
Line 1609: INTCON = 1
Line 1609: ,
Line 1609: INTCON = 1
Line 1609: )
Line 1609: ;
Line 1610: }
Line 1612: void
Line 1612: ID = set_bh_page
Line 1612: (
Line 1612: ID = struct
Line 1612: ID = buffer_head
Line 1612: *
Line 1612: ID = bh
Line 1612: ,
Line 1613: ID = struct
Line 1613: ID = page
Line 1613: *
Line 1613: ID = page
Line 1613: ,
Line 1613: ID = unsigned
Line 1613: ID = long
Line 1613: ID = offset
Line 1613: )
Line 1614: {
Line 1615: ID = bh
Line 1615: -
Line 1615: >
Line 1615: ID = b_page
Line 1615: =
Line 1615: ID = page
Line 1615: ;
Line 1616: if
Line 1616: (
Line 1616: ID = offset
Line 1616: >=
Line 1616: ID = PAGE_SIZE
Line 1616: )
Line 1617: ID = BUG
Line 1617: (
Line 1617: )
Line 1617: ;
Line 1618: if
Line 1618: (
Line 1618: ID = PageHighMem
Line 1618: (
Line 1618: ID = page
Line 1618: )
Line 1618: )
Line 1622: ID = bh
Line 1622: -
Line 1622: >
Line 1622: ID = b_data
Line 1622: =
Line 1622: (
Line 1622: char
Line 1622: *
Line 1622: )
Line 1622: (
Line 1622: INTCON = 0
Line 1622: +
Line 1622: ID = offset
Line 1622: )
Line 1622: ;
Line 1623: else
Line 1624: ID = bh
Line 1624: -
Line 1624: >
Line 1624: ID = b_data
Line 1624: =
Line 1624: ID = page_address
Line 1624: (
Line 1624: ID = page
Line 1624: )
Line 1624: +
Line 1624: ID = offset
Line 1624: ;
Line 1625: }
Line 1626: ID = EXPORT_SYMBOL
Line 1626: (
Line 1626: ID = set_bh_page
Line 1626: )
Line 1626: ;
Line 1631: ID = static
Line 1631: ID = inline
Line 1631: void
Line 1631: ID = discard_buffer
Line 1631: (
Line 1631: ID = struct
Line 1631: ID = buffer_head
Line 1631: *
Line 1631: ID = bh
Line 1631: )
Line 1632: {
Line 1633: ID = lock_buffer
Line 1633: (
Line 1633: ID = bh
Line 1633: )
Line 1633: ;
Line 1634: ID = clear_buffer_dirty
Line 1634: (
Line 1634: ID = bh
Line 1634: )
Line 1634: ;
Line 1635: ID = bh
Line 1635: -
Line 1635: >
Line 1635: ID = b_bdev
Line 1635: =
Line 1635: ID = NULL
Line 1635: ;
Line 1636: ID = clear_buffer_mapped
Line 1636: (
Line 1636: ID = bh
Line 1636: )
Line 1636: ;
Line 1637: ID = clear_buffer_req
Line 1637: (
Line 1637: ID = bh
Line 1637: )
Line 1637: ;
Line 1638: ID = clear_buffer_new
Line 1638: (
Line 1638: ID = bh
Line 1638: )
Line 1638: ;
Line 1639: ID = clear_buffer_delay
Line 1639: (
Line 1639: ID = bh
Line 1639: )
Line 1639: ;
Line 1640: ID = unlock_buffer
Line 1640: (
Line 1640: ID = bh
Line 1640: )
Line 1640: ;
Line 1641: }
Line 1658: int
Line 1658: ID = try_to_release_page
Line 1658: (
Line 1658: ID = struct
Line 1658: ID = page
Line 1658: *
Line 1658: ID = page
Line 1658: ,
Line 1658: int
Line 1658: ID = gfp_mask
Line 1658: )
Line 1659: {
Line 1660: ID = struct
Line 1660: ID = address_space
Line 1660: *
Line 1660: ID = const
Line 1660: ID = mapping
Line 1660: =
Line 1660: ID = page
Line 1660: -
Line 1660: >
Line 1660: ID = mapping
Line 1660: ;
Line 1662: ID = BUG_ON
Line 1662: (
Line 1662: !
Line 1662: ID = PageLocked
Line 1662: (
Line 1662: ID = page
Line 1662: )
Line 1662: )
Line 1662: ;
Line 1663: if
Line 1663: (
Line 1663: ID = PageWriteback
Line 1663: (
Line 1663: ID = page
Line 1663: )
Line 1663: )
Line 1664: return
Line 1664: INTCON = 0
Line 1664: ;
Line 1666: if
Line 1666: (
Line 1666: ID = mapping
Line 1666: &&
Line 1666: ID = mapping
Line 1666: -
Line 1666: >
Line 1666: ID = a_ops
Line 1666: -
Line 1666: >
Line 1666: ID = releasepage
Line 1666: )
Line 1667: return
Line 1667: ID = mapping
Line 1667: -
Line 1667: >
Line 1667: ID = a_ops
Line 1667: -
Line 1667: >
Line 1667: ID = releasepage
Line 1667: (
Line 1667: ID = page
Line 1667: ,
Line 1667: ID = gfp_mask
Line 1667: )
Line 1667: ;
Line 1668: return
Line 1668: ID = try_to_free_buffers
Line 1668: (
Line 1668: ID = page
Line 1668: )
Line 1668: ;
Line 1669: }
Line 1670: ID = EXPORT_SYMBOL
Line 1670: (
Line 1670: ID = try_to_release_page
Line 1670: )
Line 1670: ;
Line 1687: int
Line 1687: ID = block_invalidatepage
Line 1687: (
Line 1687: ID = struct
Line 1687: ID = page
Line 1687: *
Line 1687: ID = page
Line 1687: ,
Line 1687: ID = unsigned
Line 1687: ID = long
Line 1687: ID = offset
Line 1687: )
Line 1688: {
Line 1689: ID = struct
Line 1689: ID = buffer_head
Line 1689: *
Line 1689: ID = head
Line 1689: ,
Line 1689: *
Line 1689: ID = bh
Line 1689: ,
Line 1689: *
Line 1689: ID = next
Line 1689: ;
Line 1690: ID = unsigned
Line 1690: int
Line 1690: ID = curr_off
Line 1690: =
Line 1690: INTCON = 0
Line 1690: ;
Line 1691: int
Line 1691: ID = ret
Line 1691: =
Line 1691: INTCON = 1
Line 1691: ;
Line 1693: ID = BUG_ON
Line 1693: (
Line 1693: !
Line 1693: ID = PageLocked
Line 1693: (
Line 1693: ID = page
Line 1693: )
Line 1693: )
Line 1693: ;
Line 1694: if
Line 1694: (
Line 1694: !
Line 1694: ID = page_has_buffers
Line 1694: (
Line 1694: ID = page
Line 1694: )
Line 1694: )
Line 1695: ID = goto
Line 1695: ID = out
Line 1695: ;
Line 1697: ID = head
Line 1697: =
Line 1697: ID = page_buffers
Line 1697: (
Line 1697: ID = page
Line 1697: )
Line 1697: ;
Line 1698: ID = bh
Line 1698: =
Line 1698: ID = head
Line 1698: ;
Line 1699: ID = do
Line 1699: {
Line 1700: ID = unsigned
Line 1700: int
Line 1700: ID = next_off
Line 1700: =
Line 1700: ID = curr_off
Line 1700: +
Line 1700: ID = bh
Line 1700: -
Line 1700: >
Line 1700: ID = b_size
Line 1700: ;
Line 1701: ID = next
Line 1701: =
Line 1701: ID = bh
Line 1701: -
Line 1701: >
Line 1701: ID = b_this_page
Line 1701: ;
Line 1706: if
Line 1706: (
Line 1706: ID = offset
Line 1706: <=
Line 1706: ID = curr_off
Line 1706: )
Line 1707: ID = discard_buffer
Line 1707: (
Line 1707: ID = bh
Line 1707: )
Line 1707: ;
Line 1708: ID = curr_off
Line 1708: =
Line 1708: ID = next_off
Line 1708: ;
Line 1709: ID = bh
Line 1709: =
Line 1709: ID = next
Line 1709: ;
Line 1710: }
Line 1710: while
Line 1710: (
Line 1710: ID = bh
Line 1710: !=
Line 1710: ID = head
Line 1710: )
Line 1710: ;
Line 1717: if
Line 1717: (
Line 1717: ID = offset
Line 1717: ==
Line 1717: INTCON = 0
Line 1717: )
Line 1718: ID = ret
Line 1718: =
Line 1718: ID = try_to_release_page
Line 1718: (
Line 1718: ID = page
Line 1718: ,
Line 1718: INTCON = 0
Line 1718: )
Line 1718: ;
Line 1719: ID = out
Line 1719: Unrecognized token: 58
Line 1720: return
Line 1720: ID = ret
Line 1720: ;
Line 1721: }
Line 1722: ID = EXPORT_SYMBOL
Line 1722: (
Line 1722: ID = block_invalidatepage
Line 1722: )
Line 1722: ;
Line 1729: void
Line 1729: ID = create_empty_buffers
Line 1729: (
Line 1729: ID = struct
Line 1729: ID = page
Line 1729: *
Line 1729: ID = page
Line 1729: ,
Line 1730: ID = unsigned
Line 1730: ID = long
Line 1730: ID = blocksize
Line 1730: ,
Line 1730: ID = unsigned
Line 1730: ID = long
Line 1730: ID = b_state
Line 1730: )
Line 1731: {
Line 1732: ID = struct
Line 1732: ID = buffer_head
Line 1732: *
Line 1732: ID = bh
Line 1732: ,
Line 1732: *
Line 1732: ID = head
Line 1732: ,
Line 1732: *
Line 1732: ID = tail
Line 1732: ;
Line 1734: ID = head
Line 1734: =
Line 1734: ID = create_buffers
Line 1734: (
Line 1734: ID = page
Line 1734: ,
Line 1734: ID = blocksize
Line 1734: ,
Line 1734: INTCON = 1
Line 1734: )
Line 1734: ;
Line 1735: ID = bh
Line 1735: =
Line 1735: ID = head
Line 1735: ;
Line 1736: ID = do
Line 1736: {
Line 1737: ID = bh
Line 1737: -
Line 1737: >
Line 1737: ID = b_state
Line 1737: Unrecognized token: 124
Line 1737: =
Line 1737: ID = b_state
Line 1737: ;
Line 1738: ID = tail
Line 1738: =
Line 1738: ID = bh
Line 1738: ;
Line 1739: ID = bh
Line 1739: =
Line 1739: ID = bh
Line 1739: -
Line 1739: >
Line 1739: ID = b_this_page
Line 1739: ;
Line 1740: }
Line 1740: while
Line 1740: (
Line 1740: ID = bh
Line 1740: )
Line 1740: ;
Line 1741: ID = tail
Line 1741: -
Line 1741: >
Line 1741: ID = b_this_page
Line 1741: =
Line 1741: ID = head
Line 1741: ;
Line 1743: ID = spin_lock
Line 1743: (
Line 1743: Unrecognized token: 38
Line 1743: ID = page
Line 1743: -
Line 1743: >
Line 1743: ID = mapping
Line 1743: -
Line 1743: >
Line 1743: ID = private_lock
Line 1743: )
Line 1743: ;
Line 1744: if
Line 1744: (
Line 1744: ID = PageUptodate
Line 1744: (
Line 1744: ID = page
Line 1744: )
Line 1744: ||
Line 1744: ID = PageDirty
Line 1744: (
Line 1744: ID = page
Line 1744: )
Line 1744: )
Line 1744: {
Line 1745: ID = bh
Line 1745: =
Line 1745: ID = head
Line 1745: ;
Line 1746: ID = do
Line 1746: {
Line 1747: if
Line 1747: (
Line 1747: ID = PageDirty
Line 1747: (
Line 1747: ID = page
Line 1747: )
Line 1747: )
Line 1748: ID = set_buffer_dirty
Line 1748: (
Line 1748: ID = bh
Line 1748: )
Line 1748: ;
Line 1749: if
Line 1749: (
Line 1749: ID = PageUptodate
Line 1749: (
Line 1749: ID = page
Line 1749: )
Line 1749: )
Line 1750: ID = set_buffer_uptodate
Line 1750: (
Line 1750: ID = bh
Line 1750: )
Line 1750: ;
Line 1751: ID = bh
Line 1751: =
Line 1751: ID = bh
Line 1751: -
Line 1751: >
Line 1751: ID = b_this_page
Line 1751: ;
Line 1752: }
Line 1752: while
Line 1752: (
Line 1752: ID = bh
Line 1752: !=
Line 1752: ID = head
Line 1752: )
Line 1752: ;
Line 1753: }
Line 1754: Unrecognized token: 95
Line 1754: Unrecognized token: 95
Line 1754: ID = set_page_buffers
Line 1754: (
Line 1754: ID = page
Line 1754: ,
Line 1754: ID = head
Line 1754: )
Line 1754: ;
Line 1755: ID = spin_unlock
Line 1755: (
Line 1755: Unrecognized token: 38
Line 1755: ID = page
Line 1755: -
Line 1755: >
Line 1755: ID = mapping
Line 1755: -
Line 1755: >
Line 1755: ID = private_lock
Line 1755: )
Line 1755: ;
Line 1756: }
Line 1757: ID = EXPORT_SYMBOL
Line 1757: (
Line 1757: ID = create_empty_buffers
Line 1757: )
Line 1757: ;
Line 1775: void
Line 1775: ID = unmap_underlying_metadata
Line 1775: (
Line 1775: ID = struct
Line 1775: ID = block_device
Line 1775: *
Line 1775: ID = bdev
Line 1775: ,
Line 1775: ID = sector_t
Line 1775: ID = block
Line 1775: )
Line 1776: {
Line 1777: ID = struct
Line 1777: ID = buffer_head
Line 1777: *
Line 1777: ID = old_bh
Line 1777: ;
Line 1779: ID = old_bh
Line 1779: =
Line 1779: Unrecognized token: 95
Line 1779: Unrecognized token: 95
Line 1779: ID = find_get_block_slow
Line 1779: (
Line 1779: ID = bdev
Line 1779: ,
Line 1779: ID = block
Line 1779: ,
Line 1779: INTCON = 0
Line 1779: )
Line 1779: ;
Line 1780: if
Line 1780: (
Line 1780: ID = old_bh
Line 1780: )
Line 1780: {
Line 1781: ID = clear_buffer_dirty
Line 1781: (
Line 1781: ID = old_bh
Line 1781: )
Line 1781: ;
Line 1782: ID = wait_on_buffer
Line 1782: (
Line 1782: ID = old_bh
Line 1782: )
Line 1782: ;
Line 1783: ID = clear_buffer_req
Line 1783: (
Line 1783: ID = old_bh
Line 1783: )
Line 1783: ;
Line 1784: Unrecognized token: 95
Line 1784: Unrecognized token: 95
Line 1784: ID = brelse
Line 1784: (
Line 1784: ID = old_bh
Line 1784: )
Line 1784: ;
Line 1785: }
Line 1786: }
Line 1787: ID = EXPORT_SYMBOL
Line 1787: (
Line 1787: ID = unmap_underlying_metadata
Line 1787: )
Line 1787: ;
Line 1814: ID = static
Line 1814: int
Line 1814: Unrecognized token: 95
Line 1814: Unrecognized token: 95
Line 1814: ID = block_write_full_page
Line 1814: (
Line 1814: ID = struct
Line 1814: ID = inode
Line 1814: *
Line 1814: ID = inode
Line 1814: ,
Line 1814: ID = struct
Line 1814: ID = page
Line 1814: *
Line 1814: ID = page
Line 1814: ,
Line 1815: ID = get_block_t
Line 1815: *
Line 1815: ID = get_block
Line 1815: ,
Line 1815: ID = struct
Line 1815: ID = writeback_control
Line 1815: *
Line 1815: ID = wbc
Line 1815: )
Line 1816: {
Line 1817: int
Line 1817: ID = err
Line 1817: ;
Line 1818: ID = sector_t
Line 1818: ID = block
Line 1818: ;
Line 1819: ID = sector_t
Line 1819: ID = last_block
Line 1819: ;
Line 1820: ID = struct
Line 1820: ID = buffer_head
Line 1820: *
Line 1820: ID = bh
Line 1820: ,
Line 1820: *
Line 1820: ID = head
Line 1820: ;
Line 1821: int
Line 1821: ID = nr_underway
Line 1821: =
Line 1821: INTCON = 0
Line 1821: ;
Line 1823: ID = BUG_ON
Line 1823: (
Line 1823: !
Line 1823: ID = PageLocked
Line 1823: (
Line 1823: ID = page
Line 1823: )
Line 1823: )
Line 1823: ;
Line 1825: ID = last_block
Line 1825: =
Line 1825: (
Line 1825: ID = i_size_read
Line 1825: (
Line 1825: ID = inode
Line 1825: )
Line 1825: -
Line 1825: INTCON = 1
Line 1825: )
Line 1825: >
Line 1825: >
Line 1825: ID = inode
Line 1825: -
Line 1825: >
Line 1825: ID = i_blkbits
Line 1825: ;
Line 1827: if
Line 1827: (
Line 1827: !
Line 1827: ID = page_has_buffers
Line 1827: (
Line 1827: ID = page
Line 1827: )
Line 1827: )
Line 1827: {
Line 1828: ID = create_empty_buffers
Line 1828: (
Line 1828: ID = page
Line 1828: ,
Line 1828: INTCON = 1
Line 1828: <
Line 1828: <
Line 1828: ID = inode
Line 1828: -
Line 1828: >
Line 1828: ID = i_blkbits
Line 1828: ,
Line 1829: (
Line 1829: INTCON = 1
Line 1829: <
Line 1829: <
Line 1829: ID = BH_Dirty
Line 1829: )
Line 1829: Unrecognized token: 124
Line 1829: (
Line 1829: INTCON = 1
Line 1829: <
Line 1829: <
Line 1829: ID = BH_Uptodate
Line 1829: )
Line 1829: )
Line 1829: ;
Line 1830: }
Line 1842: ID = block
Line 1842: =
Line 1842: ID = page
Line 1842: -
Line 1842: >
Line 1842: ID = index
Line 1842: <
Line 1842: <
Line 1842: (
Line 1842: ID = PAGE_CACHE_SHIFT
Line 1842: -
Line 1842: ID = inode
Line 1842: -
Line 1842: >
Line 1842: ID = i_blkbits
Line 1842: )
Line 1842: ;
Line 1843: ID = head
Line 1843: =
Line 1843: ID = page_buffers
Line 1843: (
Line 1843: ID = page
Line 1843: )
Line 1843: ;
Line 1844: ID = bh
Line 1844: =
Line 1844: ID = head
Line 1844: ;
Line 1850: ID = do
Line 1850: {
Line 1851: if
Line 1851: (
Line 1851: ID = block
Line 1851: >
Line 1851: ID = last_block
Line 1851: )
Line 1851: {
Line 1860: ID = clear_buffer_dirty
Line 1860: (
Line 1860: ID = bh
Line 1860: )
Line 1860: ;
Line 1861: ID = set_buffer_uptodate
Line 1861: (
Line 1861: ID = bh
Line 1861: )
Line 1861: ;
Line 1862: }
Line 1862: else
Line 1862: if
Line 1862: (
Line 1862: !
Line 1862: ID = buffer_mapped
Line 1862: (
Line 1862: ID = bh
Line 1862: )
Line 1862: &&
Line 1862: ID = buffer_dirty
Line 1862: (
Line 1862: ID = bh
Line 1862: )
Line 1862: )
Line 1862: {
Line 1863: ID = err
Line 1863: =
Line 1863: ID = get_block
Line 1863: (
Line 1863: ID = inode
Line 1863: ,
Line 1863: ID = block
Line 1863: ,
Line 1863: ID = bh
Line 1863: ,
Line 1863: INTCON = 1
Line 1863: )
Line 1863: ;
Line 1864: if
Line 1864: (
Line 1864: ID = err
Line 1864: )
Line 1865: ID = goto
Line 1865: ID = recover
Line 1865: ;
Line 1866: if
Line 1866: (
Line 1866: ID = buffer_new
Line 1866: (
Line 1866: ID = bh
Line 1866: )
Line 1866: )
Line 1866: {
Line 1868: ID = clear_buffer_new
Line 1868: (
Line 1868: ID = bh
Line 1868: )
Line 1868: ;
Line 1869: ID = unmap_underlying_metadata
Line 1869: (
Line 1869: ID = bh
Line 1869: -
Line 1869: >
Line 1869: ID = b_bdev
Line 1869: ,
Line 1870: ID = bh
Line 1870: -
Line 1870: >
Line 1870: ID = b_blocknr
Line 1870: )
Line 1870: ;
Line 1871: }
Line 1872: }
Line 1873: ID = bh
Line 1873: =
Line 1873: ID = bh
Line 1873: -
Line 1873: >
Line 1873: ID = b_this_page
Line 1873: ;
Line 1874: ID = block
Line 1874: +
Line 1874: +
Line 1874: ;
Line 1875: }
Line 1875: while
Line 1875: (
Line 1875: ID = bh
Line 1875: !=
Line 1875: ID = head
Line 1875: )
Line 1875: ;
Line 1877: ID = do
Line 1877: {
Line 1878: ID = get_bh
Line 1878: (
Line 1878: ID = bh
Line 1878: )
Line 1878: ;
Line 1879: if
Line 1879: (
Line 1879: !
Line 1879: ID = buffer_mapped
Line 1879: (
Line 1879: ID = bh
Line 1879: )
Line 1879: )
Line 1880: ID = continue
Line 1880: ;
Line 1888: if
Line 1888: (
Line 1888: ID = wbc
Line 1888: -
Line 1888: >
Line 1888: ID = sync_mode
Line 1888: !=
Line 1888: ID = WB_SYNC_NONE
Line 1888: ||
Line 1888: !
Line 1888: ID = wbc
Line 1888: -
Line 1888: >
Line 1888: ID = nonblocking
Line 1888: )
Line 1888: {
Line 1889: ID = lock_buffer
Line 1889: (
Line 1889: ID = bh
Line 1889: )
Line 1889: ;
Line 1890: }
Line 1890: else
Line 1890: if
Line 1890: (
Line 1890: ID = test_set_buffer_locked
Line 1890: (
Line 1890: ID = bh
Line 1890: )
Line 1890: )
Line 1890: {
Line 1891: ID = redirty_page_for_writepage
Line 1891: (
Line 1891: ID = wbc
Line 1891: ,
Line 1891: ID = page
Line 1891: )
Line 1891: ;
Line 1892: ID = continue
Line 1892: ;
Line 1893: }
Line 1894: if
Line 1894: (
Line 1894: ID = test_clear_buffer_dirty
Line 1894: (
Line 1894: ID = bh
Line 1894: )
Line 1894: )
Line 1894: {
Line 1895: ID = mark_buffer_async_write
Line 1895: (
Line 1895: ID = bh
Line 1895: )
Line 1895: ;
Line 1896: }
Line 1896: else
Line 1896: {
Line 1897: ID = unlock_buffer
Line 1897: (
Line 1897: ID = bh
Line 1897: )
Line 1897: ;
Line 1898: }
Line 1899: }
Line 1899: while
Line 1899: (
Line 1899: (
Line 1899: ID = bh
Line 1899: =
Line 1899: ID = bh
Line 1899: -
Line 1899: >
Line 1899: ID = b_this_page
Line 1899: )
Line 1899: !=
Line 1899: ID = head
Line 1899: )
Line 1899: ;
Line 1905: ID = BUG_ON
Line 1905: (
Line 1905: ID = PageWriteback
Line 1905: (
Line 1905: ID = page
Line 1905: )
Line 1905: )
Line 1905: ;
Line 1906: ID = set_page_writeback
Line 1906: (
Line 1906: ID = page
Line 1906: )
Line 1906: ;
Line 1907: ID = unlock_page
Line 1907: (
Line 1907: ID = page
Line 1907: )
Line 1907: ;
Line 1909: ID = do
Line 1909: {
Line 1910: ID = struct
Line 1910: ID = buffer_head
Line 1910: *
Line 1910: ID = next
Line 1910: =
Line 1910: ID = bh
Line 1910: -
Line 1910: >
Line 1910: ID = b_this_page
Line 1910: ;
Line 1911: if
Line 1911: (
Line 1911: ID = buffer_async_write
Line 1911: (
Line 1911: ID = bh
Line 1911: )
Line 1911: )
Line 1911: {
Line 1912: ID = submit_bh
Line 1912: (
Line 1912: ID = WRITE
Line 1912: ,
Line 1912: ID = bh
Line 1912: )
Line 1912: ;
Line 1913: ID = nr_underway
Line 1913: +
Line 1913: +
Line 1913: ;
Line 1914: }
Line 1915: ID = put_bh
Line 1915: (
Line 1915: ID = bh
Line 1915: )
Line 1915: ;
Line 1916: ID = bh
Line 1916: =
Line 1916: ID = next
Line 1916: ;
Line 1917: }
Line 1917: while
Line 1917: (
Line 1917: ID = bh
Line 1917: !=
Line 1917: ID = head
Line 1917: )
Line 1917: ;
Line 1919: ID = err
Line 1919: =
Line 1919: INTCON = 0
Line 1919: ;
Line 1920: ID = done
Line 1920: Unrecognized token: 58
Line 1921: if
Line 1921: (
Line 1921: ID = nr_underway
Line 1921: ==
Line 1921: INTCON = 0
Line 1921: )
Line 1921: {
Line 1927: int
Line 1927: ID = uptodate
Line 1927: =
Line 1927: INTCON = 1
Line 1927: ;
Line 1928: ID = do
Line 1928: {
Line 1929: if
Line 1929: (
Line 1929: !
Line 1929: ID = buffer_uptodate
Line 1929: (
Line 1929: ID = bh
Line 1929: )
Line 1929: )
Line 1929: {
Line 1930: ID = uptodate
Line 1930: =
Line 1930: INTCON = 0
Line 1930: ;
Line 1931: ID = break
Line 1931: ;
Line 1932: }
Line 1933: ID = bh
Line 1933: =
Line 1933: ID = bh
Line 1933: -
Line 1933: >
Line 1933: ID = b_this_page
Line 1933: ;
Line 1934: }
Line 1934: while
Line 1934: (
Line 1934: ID = bh
Line 1934: !=
Line 1934: ID = head
Line 1934: )
Line 1934: ;
Line 1935: if
Line 1935: (
Line 1935: ID = uptodate
Line 1935: )
Line 1936: ID = SetPageUptodate
Line 1936: (
Line 1936: ID = page
Line 1936: )
Line 1936: ;
Line 1937: ID = end_page_writeback
Line 1937: (
Line 1937: ID = page
Line 1937: )
Line 1937: ;
Line 1942: ID = wbc
Line 1942: -
Line 1942: >
Line 1942: ID = pages_skipped
Line 1942: +
Line 1942: +
Line 1942: ;
Line 1943: }
Line 1944: return
Line 1944: ID = err
Line 1944: ;
Line 1946: ID = recover
Line 1946: Unrecognized token: 58
Line 1953: ID = bh
Line 1953: =
Line 1953: ID = head
Line 1953: ;
Line 1955: ID = do
Line 1955: {
Line 1956: ID = get_bh
Line 1956: (
Line 1956: ID = bh
Line 1956: )
Line 1956: ;
Line 1957: if
Line 1957: (
Line 1957: ID = buffer_mapped
Line 1957: (
Line 1957: ID = bh
Line 1957: )
Line 1957: &&
Line 1957: ID = buffer_dirty
Line 1957: (
Line 1957: ID = bh
Line 1957: )
Line 1957: )
Line 1957: {
Line 1958: ID = lock_buffer
Line 1958: (
Line 1958: ID = bh
Line 1958: )
Line 1958: ;
Line 1959: ID = mark_buffer_async_write
Line 1959: (
Line 1959: ID = bh
Line 1959: )
Line 1959: ;
Line 1960: }
Line 1960: else
Line 1960: {
Line 1965: ID = clear_buffer_dirty
Line 1965: (
Line 1965: ID = bh
Line 1965: )
Line 1965: ;
Line 1966: }
Line 1967: }
Line 1967: while
Line 1967: (
Line 1967: (
Line 1967: ID = bh
Line 1967: =
Line 1967: ID = bh
Line 1967: -
Line 1967: >
Line 1967: ID = b_this_page
Line 1967: )
Line 1967: !=
Line 1967: ID = head
Line 1967: )
Line 1967: ;
Line 1968: ID = SetPageError
Line 1968: (
Line 1968: ID = page
Line 1968: )
Line 1968: ;
Line 1969: ID = BUG_ON
Line 1969: (
Line 1969: ID = PageWriteback
Line 1969: (
Line 1969: ID = page
Line 1969: )
Line 1969: )
Line 1969: ;
Line 1970: ID = set_page_writeback
Line 1970: (
Line 1970: ID = page
Line 1970: )
Line 1970: ;
Line 1971: ID = unlock_page
Line 1971: (
Line 1971: ID = page
Line 1971: )
Line 1971: ;
Line 1972: ID = do
Line 1972: {
Line 1973: ID = struct
Line 1973: ID = buffer_head
Line 1973: *
Line 1973: ID = next
Line 1973: =
Line 1973: ID = bh
Line 1973: -
Line 1973: >
Line 1973: ID = b_this_page
Line 1973: ;
Line 1974: if
Line 1974: (
Line 1974: ID = buffer_async_write
Line 1974: (
Line 1974: ID = bh
Line 1974: )
Line 1974: )
Line 1974: {
Line 1975: ID = clear_buffer_dirty
Line 1975: (
Line 1975: ID = bh
Line 1975: )
Line 1975: ;
Line 1976: ID = submit_bh
Line 1976: (
Line 1976: ID = WRITE
Line 1976: ,
Line 1976: ID = bh
Line 1976: )
Line 1976: ;
Line 1977: ID = nr_underway
Line 1977: +
Line 1977: +
Line 1977: ;
Line 1978: }
Line 1979: ID = put_bh
Line 1979: (
Line 1979: ID = bh
Line 1979: )
Line 1979: ;
Line 1980: ID = bh
Line 1980: =
Line 1980: ID = next
Line 1980: ;
Line 1981: }
Line 1981: while
Line 1981: (
Line 1981: ID = bh
Line 1981: !=
Line 1981: ID = head
Line 1981: )
Line 1981: ;
Line 1982: ID = goto
Line 1982: ID = done
Line 1982: ;
Line 1983: }
Line 1985: ID = static
Line 1985: int
Line 1985: Unrecognized token: 95
Line 1985: Unrecognized token: 95
Line 1985: ID = block_prepare_write
Line 1985: (
Line 1985: ID = struct
Line 1985: ID = inode
Line 1985: *
Line 1985: ID = inode
Line 1985: ,
Line 1985: ID = struct
Line 1985: ID = page
Line 1985: *
Line 1985: ID = page
Line 1985: ,
Line 1986: ID = unsigned
Line 1986: ID = from
Line 1986: ,
Line 1986: ID = unsigned
Line 1986: ID = to
Line 1986: ,
Line 1986: ID = get_block_t
Line 1986: *
Line 1986: ID = get_block
Line 1986: )
Line 1987: {
Line 1988: ID = unsigned
Line 1988: ID = block_start
Line 1988: ,
Line 1988: ID = block_end
Line 1988: ;
Line 1989: ID = sector_t
Line 1989: ID = block
Line 1989: ;
Line 1990: int
Line 1990: ID = err
Line 1990: =
Line 1990: INTCON = 0
Line 1990: ;
Line 1991: ID = unsigned
Line 1991: ID = blocksize
Line 1991: ,
Line 1991: ID = bbits
Line 1991: ;
Line 1992: ID = struct
Line 1992: ID = buffer_head
Line 1992: *
Line 1992: ID = bh
Line 1992: ,
Line 1992: *
Line 1992: ID = head
Line 1992: ,
Line 1992: *
Line 1992: ID = wait
Line 1992: [
Line 1992: INTCON = 2
Line 1992: ]
Line 1992: ,
Line 1992: *
Line 1992: *
Line 1992: ID = wait_bh
Line 1992: =
Line 1992: ID = wait
Line 1992: ;
Line 1994: ID = BUG_ON
Line 1994: (
Line 1994: !
Line 1994: ID = PageLocked
Line 1994: (
Line 1994: ID = page
Line 1994: )
Line 1994: )
Line 1994: ;
Line 1995: ID = BUG_ON
Line 1995: (
Line 1995: ID = from
Line 1995: >
Line 1995: ID = PAGE_CACHE_SIZE
Line 1995: )
Line 1995: ;
Line 1996: ID = BUG_ON
Line 1996: (
Line 1996: ID = to
Line 1996: >
Line 1996: ID = PAGE_CACHE_SIZE
Line 1996: )
Line 1996: ;
Line 1997: ID = BUG_ON
Line 1997: (
Line 1997: ID = from
Line 1997: >
Line 1997: ID = to
Line 1997: )
Line 1997: ;
Line 1999: ID = blocksize
Line 1999: =
Line 1999: INTCON = 1
Line 1999: <
Line 1999: <
Line 1999: ID = inode
Line 1999: -
Line 1999: >
Line 1999: ID = i_blkbits
Line 1999: ;
Line 2000: if
Line 2000: (
Line 2000: !
Line 2000: ID = page_has_buffers
Line 2000: (
Line 2000: ID = page
Line 2000: )
Line 2000: )
Line 2001: ID = create_empty_buffers
Line 2001: (
Line 2001: ID = page
Line 2001: ,
Line 2001: ID = blocksize
Line 2001: ,
Line 2001: INTCON = 0
Line 2001: )
Line 2001: ;
Line 2002: ID = head
Line 2002: =
Line 2002: ID = page_buffers
Line 2002: (
Line 2002: ID = page
Line 2002: )
Line 2002: ;
Line 2004: ID = bbits
Line 2004: =
Line 2004: ID = inode
Line 2004: -
Line 2004: >
Line 2004: ID = i_blkbits
Line 2004: ;
Line 2005: ID = block
Line 2005: =
Line 2005: (
Line 2005: ID = sector_t
Line 2005: )
Line 2005: ID = page
Line 2005: -
Line 2005: >
Line 2005: ID = index
Line 2005: <
Line 2005: <
Line 2005: (
Line 2005: ID = PAGE_CACHE_SHIFT
Line 2005: -
Line 2005: ID = bbits
Line 2005: )
Line 2005: ;
Line 2007: for
Line 2007: (
Line 2007: ID = bh
Line 2007: =
Line 2007: ID = head
Line 2007: ,
Line 2007: ID = block_start
Line 2007: =
Line 2007: INTCON = 0
Line 2007: ;
Line 2007: ID = bh
Line 2007: !=
Line 2007: ID = head
Line 2007: ||
Line 2007: !
Line 2007: ID = block_start
Line 2007: ;
Line 2008: ID = block
Line 2008: +
Line 2008: +
Line 2008: ,
Line 2008: ID = block_start
Line 2008: =
Line 2008: ID = block_end
Line 2008: ,
Line 2008: ID = bh
Line 2008: =
Line 2008: ID = bh
Line 2008: -
Line 2008: >
Line 2008: ID = b_this_page
Line 2008: )
Line 2008: {
Line 2009: ID = block_end
Line 2009: =
Line 2009: ID = block_start
Line 2009: +
Line 2009: ID = blocksize
Line 2009: ;
Line 2010: if
Line 2010: (
Line 2010: ID = block_end
Line 2010: <=
Line 2010: ID = from
Line 2010: ||
Line 2010: ID = block_start
Line 2010: >=
Line 2010: ID = to
Line 2010: )
Line 2010: {
Line 2011: if
Line 2011: (
Line 2011: ID = PageUptodate
Line 2011: (
Line 2011: ID = page
Line 2011: )
Line 2011: )
Line 2011: {
Line 2012: if
Line 2012: (
Line 2012: !
Line 2012: ID = buffer_uptodate
Line 2012: (
Line 2012: ID = bh
Line 2012: )
Line 2012: )
Line 2013: ID = set_buffer_uptodate
Line 2013: (
Line 2013: ID = bh
Line 2013: )
Line 2013: ;
Line 2014: }
Line 2015: ID = continue
Line 2015: ;
Line 2016: }
Line 2017: if
Line 2017: (
Line 2017: ID = buffer_new
Line 2017: (
Line 2017: ID = bh
Line 2017: )
Line 2017: )
Line 2018: ID = clear_buffer_new
Line 2018: (
Line 2018: ID = bh
Line 2018: )
Line 2018: ;
Line 2019: if
Line 2019: (
Line 2019: !
Line 2019: ID = buffer_mapped
Line 2019: (
Line 2019: ID = bh
Line 2019: )
Line 2019: )
Line 2019: {
Line 2020: ID = err
Line 2020: =
Line 2020: ID = get_block
Line 2020: (
Line 2020: ID = inode
Line 2020: ,
Line 2020: ID = block
Line 2020: ,
Line 2020: ID = bh
Line 2020: ,
Line 2020: INTCON = 1
Line 2020: )
Line 2020: ;
Line 2021: if
Line 2021: (
Line 2021: ID = err
Line 2021: )
Line 2022: ID = goto
Line 2022: ID = out
Line 2022: ;
Line 2023: if
Line 2023: (
Line 2023: ID = buffer_new
Line 2023: (
Line 2023: ID = bh
Line 2023: )
Line 2023: )
Line 2023: {
Line 2024: ID = clear_buffer_new
Line 2024: (
Line 2024: ID = bh
Line 2024: )
Line 2024: ;
Line 2025: ID = unmap_underlying_metadata
Line 2025: (
Line 2025: ID = bh
Line 2025: -
Line 2025: >
Line 2025: ID = b_bdev
Line 2025: ,
Line 2026: ID = bh
Line 2026: -
Line 2026: >
Line 2026: ID = b_blocknr
Line 2026: )
Line 2026: ;
Line 2027: if
Line 2027: (
Line 2027: ID = PageUptodate
Line 2027: (
Line 2027: ID = page
Line 2027: )
Line 2027: )
Line 2027: {
Line 2028: ID = set_buffer_uptodate
Line 2028: (
Line 2028: ID = bh
Line 2028: )
Line 2028: ;
Line 2029: ID = continue
Line 2029: ;
Line 2030: }
Line 2031: if
Line 2031: (
Line 2031: ID = block_end
Line 2031: >
Line 2031: ID = to
Line 2031: ||
Line 2031: ID = block_start
Line 2031: <
Line 2031: ID = from
Line 2031: )
Line 2031: {
Line 2032: void
Line 2032: *
Line 2032: ID = kaddr
Line 2032: ;
Line 2034: ID = kaddr
Line 2034: =
Line 2034: ID = kmap_atomic
Line 2034: (
Line 2034: ID = page
Line 2034: ,
Line 2034: ID = KM_USER0
Line 2034: )
Line 2034: ;
Line 2035: if
Line 2035: (
Line 2035: ID = block_end
Line 2035: >
Line 2035: ID = to
Line 2035: )
Line 2036: ID = memset
Line 2036: (
Line 2036: ID = kaddr
Line 2036: +
Line 2036: ID = to
Line 2036: ,
Line 2036: INTCON = 0
Line 2036: ,
Line 2037: ID = block_end
Line 2037: -
Line 2037: ID = to
Line 2037: )
Line 2037: ;
Line 2038: if
Line 2038: (
Line 2038: ID = block_start
Line 2038: <
Line 2038: ID = from
Line 2038: )
Line 2039: ID = memset
Line 2039: (
Line 2039: ID = kaddr
Line 2039: +
Line 2039: ID = block_start
Line 2039: ,
Line 2040: INTCON = 0
Line 2040: ,
Line 2040: ID = from
Line 2040: -
Line 2040: ID = block_start
Line 2040: )
Line 2040: ;
Line 2041: ID = flush_dcache_page
Line 2041: (
Line 2041: ID = page
Line 2041: )
Line 2041: ;
Line 2042: ID = kunmap_atomic
Line 2042: (
Line 2042: ID = kaddr
Line 2042: ,
Line 2042: ID = KM_USER0
Line 2042: )
Line 2042: ;
Line 2043: }
Line 2044: ID = continue
Line 2044: ;
Line 2045: }
Line 2046: }
Line 2047: if
Line 2047: (
Line 2047: ID = PageUptodate
Line 2047: (
Line 2047: ID = page
Line 2047: )
Line 2047: )
Line 2047: {
Line 2048: if
Line 2048: (
Line 2048: !
Line 2048: ID = buffer_uptodate
Line 2048: (
Line 2048: ID = bh
Line 2048: )
Line 2048: )
Line 2049: ID = set_buffer_uptodate
Line 2049: (
Line 2049: ID = bh
Line 2049: )
Line 2049: ;
Line 2050: ID = continue
Line 2050: ;
Line 2051: }
Line 2052: if
Line 2052: (
Line 2052: !
Line 2052: ID = buffer_uptodate
Line 2052: (
Line 2052: ID = bh
Line 2052: )
Line 2052: &&
Line 2052: !
Line 2052: ID = buffer_delay
Line 2052: (
Line 2052: ID = bh
Line 2052: )
Line 2052: &&
Line 2053: (
Line 2053: ID = block_start
Line 2053: <
Line 2053: ID = from
Line 2053: ||
Line 2053: ID = block_end
Line 2053: >
Line 2053: ID = to
Line 2053: )
Line 2053: )
Line 2053: {
Line 2054: ID = ll_rw_block
Line 2054: (
Line 2054: ID = READ
Line 2054: ,
Line 2054: INTCON = 1
Line 2054: ,
Line 2054: Unrecognized token: 38
Line 2054: ID = bh
Line 2054: )
Line 2054: ;
Line 2055: *
Line 2055: ID = wait_bh
Line 2055: +
Line 2055: +
Line 2055: =
Line 2055: ID = bh
Line 2055: ;
Line 2056: }
Line 2057: }
Line 2061: while
Line 2061: (
Line 2061: ID = wait_bh
Line 2061: >
Line 2061: ID = wait
Line 2061: )
Line 2061: {
Line 2062: ID = wait_on_buffer
Line 2062: (
Line 2062: *
Line 2062: -
Line 2062: -
Line 2062: ID = wait_bh
Line 2062: )
Line 2062: ;
Line 2063: if
Line 2063: (
Line 2063: !
Line 2063: ID = buffer_uptodate
Line 2063: (
Line 2063: *
Line 2063: ID = wait_bh
Line 2063: )
Line 2063: )
Line 2064: return
Line 2064: -
Line 2064: ID = EIO
Line 2064: ;
Line 2065: }
Line 2066: return
Line 2066: INTCON = 0
Line 2066: ;
Line 2067: ID = out
Line 2067: Unrecognized token: 58
Line 2073: ID = bh
Line 2073: =
Line 2073: ID = head
Line 2073: ;
Line 2074: ID = block_start
Line 2074: =
Line 2074: INTCON = 0
Line 2074: ;
Line 2075: ID = do
Line 2075: {
Line 2076: ID = block_end
Line 2076: =
Line 2076: ID = block_start
Line 2076: +
Line 2076: ID = blocksize
Line 2076: ;
Line 2077: if
Line 2077: (
Line 2077: ID = block_end
Line 2077: <=
Line 2077: ID = from
Line 2077: )
Line 2078: ID = goto
Line 2078: ID = next_bh
Line 2078: ;
Line 2079: if
Line 2079: (
Line 2079: ID = block_start
Line 2079: >=
Line 2079: ID = to
Line 2079: )
Line 2080: ID = break
Line 2080: ;
Line 2081: if
Line 2081: (
Line 2081: ID = buffer_new
Line 2081: (
Line 2081: ID = bh
Line 2081: )
Line 2081: )
Line 2081: {
Line 2082: void
Line 2082: *
Line 2082: ID = kaddr
Line 2082: ;
Line 2084: ID = clear_buffer_new
Line 2084: (
Line 2084: ID = bh
Line 2084: )
Line 2084: ;
Line 2085: ID = kaddr
Line 2085: =
Line 2085: ID = kmap_atomic
Line 2085: (
Line 2085: ID = page
Line 2085: ,
Line 2085: ID = KM_USER0
Line 2085: )
Line 2085: ;
Line 2086: ID = memset
Line 2086: (
Line 2086: ID = kaddr
Line 2086: +
Line 2086: ID = block_start
Line 2086: ,
Line 2086: INTCON = 0
Line 2086: ,
Line 2086: ID = bh
Line 2086: -
Line 2086: >
Line 2086: ID = b_size
Line 2086: )
Line 2086: ;
Line 2087: ID = kunmap_atomic
Line 2087: (
Line 2087: ID = kaddr
Line 2087: ,
Line 2087: ID = KM_USER0
Line 2087: )
Line 2087: ;
Line 2088: ID = set_buffer_uptodate
Line 2088: (
Line 2088: ID = bh
Line 2088: )
Line 2088: ;
Line 2089: ID = mark_buffer_dirty
Line 2089: (
Line 2089: ID = bh
Line 2089: )
Line 2089: ;
Line 2090: }
Line 2091: ID = next_bh
Line 2091: Unrecognized token: 58
Line 2092: ID = block_start
Line 2092: =
Line 2092: ID = block_end
Line 2092: ;
Line 2093: ID = bh
Line 2093: =
Line 2093: ID = bh
Line 2093: -
Line 2093: >
Line 2093: ID = b_this_page
Line 2093: ;
Line 2094: }
Line 2094: while
Line 2094: (
Line 2094: ID = bh
Line 2094: !=
Line 2094: ID = head
Line 2094: )
Line 2094: ;
Line 2095: return
Line 2095: ID = err
Line 2095: ;
Line 2096: }
Line 2098: ID = static
Line 2098: int
Line 2098: Unrecognized token: 95
Line 2098: Unrecognized token: 95
Line 2098: ID = block_commit_write
Line 2098: (
Line 2098: ID = struct
Line 2098: ID = inode
Line 2098: *
Line 2098: ID = inode
Line 2098: ,
Line 2098: ID = struct
Line 2098: ID = page
Line 2098: *
Line 2098: ID = page
Line 2098: ,
Line 2099: ID = unsigned
Line 2099: ID = from
Line 2099: ,
Line 2099: ID = unsigned
Line 2099: ID = to
Line 2099: )
Line 2100: {
Line 2101: ID = unsigned
Line 2101: ID = block_start
Line 2101: ,
Line 2101: ID = block_end
Line 2101: ;
Line 2102: int
Line 2102: ID = partial
Line 2102: =
Line 2102: INTCON = 0
Line 2102: ;
Line 2103: ID = unsigned
Line 2103: ID = blocksize
Line 2103: ;
Line 2104: ID = struct
Line 2104: ID = buffer_head
Line 2104: *
Line 2104: ID = bh
Line 2104: ,
Line 2104: *
Line 2104: ID = head
Line 2104: ;
Line 2106: ID = blocksize
Line 2106: =
Line 2106: INTCON = 1
Line 2106: <
Line 2106: <
Line 2106: ID = inode
Line 2106: -
Line 2106: >
Line 2106: ID = i_blkbits
Line 2106: ;
Line 2108: for
Line 2108: (
Line 2108: ID = bh
Line 2108: =
Line 2108: ID = head
Line 2108: =
Line 2108: ID = page_buffers
Line 2108: (
Line 2108: ID = page
Line 2108: )
Line 2108: ,
Line 2108: ID = block_start
Line 2108: =
Line 2108: INTCON = 0
Line 2108: ;
Line 2109: ID = bh
Line 2109: !=
Line 2109: ID = head
Line 2109: ||
Line 2109: !
Line 2109: ID = block_start
Line 2109: ;
Line 2110: ID = block_start
Line 2110: =
Line 2110: ID = block_end
Line 2110: ,
Line 2110: ID = bh
Line 2110: =
Line 2110: ID = bh
Line 2110: -
Line 2110: >
Line 2110: ID = b_this_page
Line 2110: )
Line 2110: {
Line 2111: ID = block_end
Line 2111: =
Line 2111: ID = block_start
Line 2111: +
Line 2111: ID = blocksize
Line 2111: ;
Line 2112: if
Line 2112: (
Line 2112: ID = block_end
Line 2112: <=
Line 2112: ID = from
Line 2112: ||
Line 2112: ID = block_start
Line 2112: >=
Line 2112: ID = to
Line 2112: )
Line 2112: {
Line 2113: if
Line 2113: (
Line 2113: !
Line 2113: ID = buffer_uptodate
Line 2113: (
Line 2113: ID = bh
Line 2113: )
Line 2113: )
Line 2114: ID = partial
Line 2114: =
Line 2114: INTCON = 1
Line 2114: ;
Line 2115: }
Line 2115: else
Line 2115: {
Line 2116: ID = set_buffer_uptodate
Line 2116: (
Line 2116: ID = bh
Line 2116: )
Line 2116: ;
Line 2117: ID = mark_buffer_dirty
Line 2117: (
Line 2117: ID = bh
Line 2117: )
Line 2117: ;
Line 2118: }
Line 2119: }
Line 2127: if
Line 2127: (
Line 2127: !
Line 2127: ID = partial
Line 2127: )
Line 2128: ID = SetPageUptodate
Line 2128: (
Line 2128: ID = page
Line 2128: )
Line 2128: ;
Line 2129: return
Line 2129: INTCON = 0
Line 2129: ;
Line 2130: }
Line 2139: int
Line 2139: ID = block_read_full_page
Line 2139: (
Line 2139: ID = struct
Line 2139: ID = page
Line 2139: *
Line 2139: ID = page
Line 2139: ,
Line 2139: ID = get_block_t
Line 2139: *
Line 2139: ID = get_block
Line 2139: )
Line 2140: {
Line 2141: ID = struct
Line 2141: ID = inode
Line 2141: *
Line 2141: ID = inode
Line 2141: =
Line 2141: ID = page
Line 2141: -
Line 2141: >
Line 2141: ID = mapping
Line 2141: -
Line 2141: >
Line 2141: ID = host
Line 2141: ;
Line 2142: ID = sector_t
Line 2142: ID = iblock
Line 2142: ,
Line 2142: ID = lblock
Line 2142: ;
Line 2143: ID = struct
Line 2143: ID = buffer_head
Line 2143: *
Line 2143: ID = bh
Line 2143: ,
Line 2143: *
Line 2143: ID = head
Line 2143: ,
Line 2143: *
Line 2143: ID = arr
Line 2143: [
Line 2143: ID = MAX_BUF_PER_PAGE
Line 2143: ]
Line 2143: ;
Line 2144: ID = unsigned
Line 2144: int
Line 2144: ID = blocksize
Line 2144: ;
Line 2145: int
Line 2145: ID = nr
Line 2145: ,
Line 2145: ID = i
Line 2145: ;
Line 2146: int
Line 2146: ID = fully_mapped
Line 2146: =
Line 2146: INTCON = 1
Line 2146: ;
Line 2148: if
Line 2148: (
Line 2148: !
Line 2148: ID = PageLocked
Line 2148: (
Line 2148: ID = page
Line 2148: )
Line 2148: )
Line 2149: ID = PAGE_BUG
Line 2149: (
Line 2149: ID = page
Line 2149: )
Line 2149: ;
Line 2150: ID = blocksize
Line 2150: =
Line 2150: INTCON = 1
Line 2150: <
Line 2150: <
Line 2150: ID = inode
Line 2150: -
Line 2150: >
Line 2150: ID = i_blkbits
Line 2150: ;
Line 2151: if
Line 2151: (
Line 2151: !
Line 2151: ID = page_has_buffers
Line 2151: (
Line 2151: ID = page
Line 2151: )
Line 2151: )
Line 2152: ID = create_empty_buffers
Line 2152: (
Line 2152: ID = page
Line 2152: ,
Line 2152: ID = blocksize
Line 2152: ,
Line 2152: INTCON = 0
Line 2152: )
Line 2152: ;
Line 2153: ID = head
Line 2153: =
Line 2153: ID = page_buffers
Line 2153: (
Line 2153: ID = page
Line 2153: )
Line 2153: ;
Line 2155: ID = iblock
Line 2155: =
Line 2155: (
Line 2155: ID = sector_t
Line 2155: )
Line 2155: ID = page
Line 2155: -
Line 2155: >
Line 2155: ID = index
Line 2155: <
Line 2155: <
Line 2155: (
Line 2155: ID = PAGE_CACHE_SHIFT
Line 2155: -
Line 2155: ID = inode
Line 2155: -
Line 2155: >
Line 2155: ID = i_blkbits
Line 2155: )
Line 2155: ;
Line 2156: ID = lblock
Line 2156: =
Line 2156: (
Line 2156: ID = i_size_read
Line 2156: (
Line 2156: ID = inode
Line 2156: )
Line 2156: +
Line 2156: ID = blocksize
Line 2156: -
Line 2156: INTCON = 1
Line 2156: )
Line 2156: >
Line 2156: >
Line 2156: ID = inode
Line 2156: -
Line 2156: >
Line 2156: ID = i_blkbits
Line 2156: ;
Line 2157: ID = bh
Line 2157: =
Line 2157: ID = head
Line 2157: ;
Line 2158: ID = nr
Line 2158: =
Line 2158: INTCON = 0
Line 2158: ;
Line 2159: ID = i
Line 2159: =
Line 2159: INTCON = 0
Line 2159: ;
Line 2161: ID = do
Line 2161: {
Line 2162: if
Line 2162: (
Line 2162: ID = buffer_uptodate
Line 2162: (
Line 2162: ID = bh
Line 2162: )
Line 2162: )
Line 2163: ID = continue
Line 2163: ;
Line 2165: if
Line 2165: (
Line 2165: !
Line 2165: ID = buffer_mapped
Line 2165: (
Line 2165: ID = bh
Line 2165: )
Line 2165: )
Line 2165: {
Line 2166: ID = fully_mapped
Line 2166: =
Line 2166: INTCON = 0
Line 2166: ;
Line 2167: if
Line 2167: (
Line 2167: ID = iblock
Line 2167: <
Line 2167: ID = lblock
Line 2167: )
Line 2167: {
Line 2168: if
Line 2168: (
Line 2168: ID = get_block
Line 2168: (
Line 2168: ID = inode
Line 2168: ,
Line 2168: ID = iblock
Line 2168: ,
Line 2168: ID = bh
Line 2168: ,
Line 2168: INTCON = 0
Line 2168: )
Line 2168: )
Line 2169: ID = SetPageError
Line 2169: (
Line 2169: ID = page
Line 2169: )
Line 2169: ;
Line 2170: }
Line 2171: if
Line 2171: (
Line 2171: !
Line 2171: ID = buffer_mapped
Line 2171: (
Line 2171: ID = bh
Line 2171: )
Line 2171: )
Line 2171: {
Line 2172: void
Line 2172: *
Line 2172: ID = kaddr
Line 2172: =
Line 2172: ID = kmap_atomic
Line 2172: (
Line 2172: ID = page
Line 2172: ,
Line 2172: ID = KM_USER0
Line 2172: )
Line 2172: ;
Line 2173: ID = memset
Line 2173: (
Line 2173: ID = kaddr
Line 2173: +
Line 2173: ID = i
Line 2173: *
Line 2173: ID = blocksize
Line 2173: ,
Line 2173: INTCON = 0
Line 2173: ,
Line 2173: ID = blocksize
Line 2173: )
Line 2173: ;
Line 2174: ID = flush_dcache_page
Line 2174: (
Line 2174: ID = page
Line 2174: )
Line 2174: ;
Line 2175: ID = kunmap_atomic
Line 2175: (
Line 2175: ID = kaddr
Line 2175: ,
Line 2175: ID = KM_USER0
Line 2175: )
Line 2175: ;
Line 2176: ID = set_buffer_uptodate
Line 2176: (
Line 2176: ID = bh
Line 2176: )
Line 2176: ;
Line 2177: ID = continue
Line 2177: ;
Line 2178: }
Line 2183: if
Line 2183: (
Line 2183: ID = buffer_uptodate
Line 2183: (
Line 2183: ID = bh
Line 2183: )
Line 2183: )
Line 2184: ID = continue
Line 2184: ;
Line 2185: }
Line 2186: ID = arr
Line 2186: [
Line 2186: ID = nr
Line 2186: +
Line 2186: +
Line 2186: ]
Line 2186: =
Line 2186: ID = bh
Line 2186: ;
Line 2187: }
Line 2187: while
Line 2187: (
Line 2187: ID = i
Line 2187: +
Line 2187: +
Line 2187: ,
Line 2187: ID = iblock
Line 2187: +
Line 2187: +
Line 2187: ,
Line 2187: (
Line 2187: ID = bh
Line 2187: =
Line 2187: ID = bh
Line 2187: -
Line 2187: >
Line 2187: ID = b_this_page
Line 2187: )
Line 2187: !=
Line 2187: ID = head
Line 2187: )
Line 2187: ;
Line 2189: if
Line 2189: (
Line 2189: ID = fully_mapped
Line 2189: )
Line 2190: ID = SetPageMappedToDisk
Line 2190: (
Line 2190: ID = page
Line 2190: )
Line 2190: ;
Line 2192: if
Line 2192: (
Line 2192: !
Line 2192: ID = nr
Line 2192: )
Line 2192: {
Line 2197: if
Line 2197: (
Line 2197: !
Line 2197: ID = PageError
Line 2197: (
Line 2197: ID = page
Line 2197: )
Line 2197: )
Line 2198: ID = SetPageUptodate
Line 2198: (
Line 2198: ID = page
Line 2198: )
Line 2198: ;
Line 2199: ID = unlock_page
Line 2199: (
Line 2199: ID = page
Line 2199: )
Line 2199: ;
Line 2200: return
Line 2200: INTCON = 0
Line 2200: ;
Line 2201: }
Line 2204: for
Line 2204: (
Line 2204: ID = i
Line 2204: =
Line 2204: INTCON = 0
Line 2204: ;
Line 2204: ID = i
Line 2204: <
Line 2204: ID = nr
Line 2204: ;
Line 2204: ID = i
Line 2204: +
Line 2204: +
Line 2204: )
Line 2204: {
Line 2205: ID = bh
Line 2205: =
Line 2205: ID = arr
Line 2205: [
Line 2205: ID = i
Line 2205: ]
Line 2205: ;
Line 2206: ID = lock_buffer
Line 2206: (
Line 2206: ID = bh
Line 2206: )
Line 2206: ;
Line 2207: ID = mark_buffer_async_read
Line 2207: (
Line 2207: ID = bh
Line 2207: )
Line 2207: ;
Line 2208: }
Line 2215: for
Line 2215: (
Line 2215: ID = i
Line 2215: =
Line 2215: INTCON = 0
Line 2215: ;
Line 2215: ID = i
Line 2215: <
Line 2215: ID = nr
Line 2215: ;
Line 2215: ID = i
Line 2215: +
Line 2215: +
Line 2215: )
Line 2215: {
Line 2216: ID = bh
Line 2216: =
Line 2216: ID = arr
Line 2216: [
Line 2216: ID = i
Line 2216: ]
Line 2216: ;
Line 2217: if
Line 2217: (
Line 2217: ID = buffer_uptodate
Line 2217: (
Line 2217: ID = bh
Line 2217: )
Line 2217: )
Line 2218: ID = end_buffer_async_read
Line 2218: (
Line 2218: ID = bh
Line 2218: ,
Line 2218: INTCON = 1
Line 2218: )
Line 2218: ;
Line 2219: else
Line 2220: ID = submit_bh
Line 2220: (
Line 2220: ID = READ
Line 2220: ,
Line 2220: ID = bh
Line 2220: )
Line 2220: ;
Line 2221: }
Line 2222: return
Line 2222: INTCON = 0
Line 2222: ;
Line 2223: }
Line 2229: int
Line 2229: ID = generic_cont_expand
Line 2229: (
Line 2229: ID = struct
Line 2229: ID = inode
Line 2229: *
Line 2229: ID = inode
Line 2229: ,
Line 2229: ID = loff_t
Line 2229: ID = size
Line 2229: )
Line 2230: {
Line 2231: ID = struct
Line 2231: ID = address_space
Line 2231: *
Line 2231: ID = mapping
Line 2231: =
Line 2231: ID = inode
Line 2231: -
Line 2231: >
Line 2231: ID = i_mapping
Line 2231: ;
Line 2232: ID = struct
Line 2232: ID = page
Line 2232: *
Line 2232: ID = page
Line 2232: ;
Line 2233: ID = unsigned
Line 2233: ID = long
Line 2233: ID = index
Line 2233: ,
Line 2233: ID = offset
Line 2233: ,
Line 2233: ID = limit
Line 2233: ;
Line 2234: int
Line 2234: ID = err
Line 2234: ;
Line 2236: ID = err
Line 2236: =
Line 2236: -
Line 2236: ID = EFBIG
Line 2236: ;
Line 2237: ID = limit
Line 2237: =
Line 2237: ID = current
Line 2237: -
Line 2237: >
Line 2237: ID = rlim
Line 2237: [
Line 2237: ID = RLIMIT_FSIZE
Line 2237: ]
Line 2237: Unrecognized token: 46
Line 2237: ID = rlim_cur
Line 2237: ;
Line 2238: if
Line 2238: (
Line 2238: ID = limit
Line 2238: !=
Line 2238: ID = RLIM_INFINITY
Line 2238: &&
Line 2238: ID = size
Line 2238: >
Line 2238: (
Line 2238: ID = loff_t
Line 2238: )
Line 2238: ID = limit
Line 2238: )
Line 2238: {
Line 2239: ID = send_sig
Line 2239: (
Line 2239: ID = SIGXFSZ
Line 2239: ,
Line 2239: ID = current
Line 2239: ,
Line 2239: INTCON = 0
Line 2239: )
Line 2239: ;
Line 2240: ID = goto
Line 2240: ID = out
Line 2240: ;
Line 2241: }
Line 2242: if
Line 2242: (
Line 2242: ID = size
Line 2242: >
Line 2242: ID = inode
Line 2242: -
Line 2242: >
Line 2242: ID = i_sb
Line 2242: -
Line 2242: >
Line 2242: ID = s_maxbytes
Line 2242: )
Line 2243: ID = goto
Line 2243: ID = out
Line 2243: ;
Line 2245: ID = offset
Line 2245: =
Line 2245: (
Line 2245: ID = size
Line 2245: Unrecognized token: 38
Line 2245: (
Line 2245: ID = PAGE_CACHE_SIZE
Line 2245: -
Line 2245: INTCON = 1
Line 2245: )
Line 2245: )
Line 2245: ;
Line 2251: if
Line 2251: (
Line 2251: (
Line 2251: ID = offset
Line 2251: Unrecognized token: 38
Line 2251: (
Line 2251: ID = inode
Line 2251: -
Line 2251: >
Line 2251: ID = i_sb
Line 2251: -
Line 2251: >
Line 2251: ID = s_blocksize
Line 2251: -
Line 2251: INTCON = 1
Line 2251: )
Line 2251: )
Line 2251: ==
Line 2251: INTCON = 0
Line 2251: )
Line 2251: {
Line 2252: ID = offset
Line 2252: +
Line 2252: +
Line 2252: ;
Line 2253: }
Line 2254: ID = index
Line 2254: =
Line 2254: ID = size
Line 2254: >
Line 2254: >
Line 2254: ID = PAGE_CACHE_SHIFT
Line 2254: ;
Line 2255: ID = err
Line 2255: =
Line 2255: -
Line 2255: ID = ENOMEM
Line 2255: ;
Line 2256: ID = page
Line 2256: =
Line 2256: ID = grab_cache_page
Line 2256: (
Line 2256: ID = mapping
Line 2256: ,
Line 2256: ID = index
Line 2256: )
Line 2256: ;
Line 2257: if
Line 2257: (
Line 2257: !
Line 2257: ID = page
Line 2257: )
Line 2258: ID = goto
Line 2258: ID = out
Line 2258: ;
Line 2259: ID = err
Line 2259: =
Line 2259: ID = mapping
Line 2259: -
Line 2259: >
Line 2259: ID = a_ops
Line 2259: -
Line 2259: >
Line 2259: ID = prepare_write
Line 2259: (
Line 2259: ID = NULL
Line 2259: ,
Line 2259: ID = page
Line 2259: ,
Line 2259: ID = offset
Line 2259: ,
Line 2259: ID = offset
Line 2259: )
Line 2259: ;
Line 2260: if
Line 2260: (
Line 2260: !
Line 2260: ID = err
Line 2260: )
Line 2260: {
Line 2261: ID = err
Line 2261: =
Line 2261: ID = mapping
Line 2261: -
Line 2261: >
Line 2261: ID = a_ops
Line 2261: -
Line 2261: >
Line 2261: ID = commit_write
Line 2261: (
Line 2261: ID = NULL
Line 2261: ,
Line 2261: ID = page
Line 2261: ,
Line 2261: ID = offset
Line 2261: ,
Line 2261: ID = offset
Line 2261: )
Line 2261: ;
Line 2262: }
Line 2263: ID = unlock_page
Line 2263: (
Line 2263: ID = page
Line 2263: )
Line 2263: ;
Line 2264: ID = page_cache_release
Line 2264: (
Line 2264: ID = page
Line 2264: )
Line 2264: ;
Line 2265: if
Line 2265: (
Line 2265: ID = err
Line 2265: >
Line 2265: INTCON = 0
Line 2265: )
Line 2266: ID = err
Line 2266: =
Line 2266: INTCON = 0
Line 2266: ;
Line 2267: ID = out
Line 2267: Unrecognized token: 58
Line 2268: return
Line 2268: ID = err
Line 2268: ;
Line 2269: }
Line 2276: int
Line 2276: ID = cont_prepare_write
Line 2276: (
Line 2276: ID = struct
Line 2276: ID = page
Line 2276: *
Line 2276: ID = page
Line 2276: ,
Line 2276: ID = unsigned
Line 2276: ID = offset
Line 2276: ,
Line 2277: ID = unsigned
Line 2277: ID = to
Line 2277: ,
Line 2277: ID = get_block_t
Line 2277: *
Line 2277: ID = get_block
Line 2277: ,
Line 2277: ID = loff_t
Line 2277: *
Line 2277: ID = bytes
Line 2277: )
Line 2278: {
Line 2279: ID = struct
Line 2279: ID = address_space
Line 2279: *
Line 2279: ID = mapping
Line 2279: =
Line 2279: ID = page
Line 2279: -
Line 2279: >
Line 2279: ID = mapping
Line 2279: ;
Line 2280: ID = struct
Line 2280: ID = inode
Line 2280: *
Line 2280: ID = inode
Line 2280: =
Line 2280: ID = mapping
Line 2280: -
Line 2280: >
Line 2280: ID = host
Line 2280: ;
Line 2281: ID = struct
Line 2281: ID = page
Line 2281: *
Line 2281: ID = new_page
Line 2281: ;
Line 2282: ID = pgoff_t
Line 2282: ID = pgpos
Line 2282: ;
Line 2283: ID = long
Line 2283: ID = status
Line 2283: ;
Line 2284: ID = unsigned
Line 2284: ID = zerofrom
Line 2284: ;
Line 2285: ID = unsigned
Line 2285: ID = blocksize
Line 2285: =
Line 2285: INTCON = 1
Line 2285: <
Line 2285: <
Line 2285: ID = inode
Line 2285: -
Line 2285: >
Line 2285: ID = i_blkbits
Line 2285: ;
Line 2286: void
Line 2286: *
Line 2286: ID = kaddr
Line 2286: ;
Line 2288: while
Line 2288: (
Line 2288: ID = page
Line 2288: -
Line 2288: >
Line 2288: ID = index
Line 2288: >
Line 2288: (
Line 2288: ID = pgpos
Line 2288: =
Line 2288: *
Line 2288: ID = bytes
Line 2288: >
Line 2288: >
Line 2288: ID = PAGE_CACHE_SHIFT
Line 2288: )
Line 2288: )
Line 2288: {
Line 2289: ID = status
Line 2289: =
Line 2289: -
Line 2289: ID = ENOMEM
Line 2289: ;
Line 2290: ID = new_page
Line 2290: =
Line 2290: ID = grab_cache_page
Line 2290: (
Line 2290: ID = mapping
Line 2290: ,
Line 2290: ID = pgpos
Line 2290: )
Line 2290: ;
Line 2291: if
Line 2291: (
Line 2291: !
Line 2291: ID = new_page
Line 2291: )
Line 2292: ID = goto
Line 2292: ID = out
Line 2292: ;
Line 2294: if
Line 2294: (
Line 2294: *
Line 2294: ID = bytes
Line 2294: >
Line 2294: >
Line 2294: ID = PAGE_CACHE_SHIFT
Line 2294: !=
Line 2294: ID = pgpos
Line 2294: )
Line 2294: {
Line 2295: ID = unlock_page
Line 2295: (
Line 2295: ID = new_page
Line 2295: )
Line 2295: ;
Line 2296: ID = page_cache_release
Line 2296: (
Line 2296: ID = new_page
Line 2296: )
Line 2296: ;
Line 2297: ID = continue
Line 2297: ;
Line 2298: }
Line 2299: ID = zerofrom
Line 2299: =
Line 2299: *
Line 2299: ID = bytes
Line 2299: Unrecognized token: 38
Line 2299: Unrecognized token: 126
Line 2299: ID = PAGE_CACHE_MASK
Line 2299: ;
Line 2300: if
Line 2300: (
Line 2300: ID = zerofrom
Line 2300: Unrecognized token: 38
Line 2300: (
Line 2300: ID = blocksize
Line 2300: -
Line 2300: INTCON = 1
Line 2300: )
Line 2300: )
Line 2300: {
Line 2301: *
Line 2301: ID = bytes
Line 2301: Unrecognized token: 124
Line 2301: =
Line 2301: (
Line 2301: ID = blocksize
Line 2301: -
Line 2301: INTCON = 1
Line 2301: )
Line 2301: ;
Line 2302: (
Line 2302: *
Line 2302: ID = bytes
Line 2302: )
Line 2302: +
Line 2302: +
Line 2302: ;
Line 2303: }
Line 2304: ID = status
Line 2304: =
Line 2304: Unrecognized token: 95
Line 2304: Unrecognized token: 95
Line 2304: ID = block_prepare_write
Line 2304: (
Line 2304: ID = inode
Line 2304: ,
Line 2304: ID = new_page
Line 2304: ,
Line 2304: ID = zerofrom
Line 2304: ,
Line 2305: ID = PAGE_CACHE_SIZE
Line 2305: ,
Line 2305: ID = get_block
Line 2305: )
Line 2305: ;
Line 2306: if
Line 2306: (
Line 2306: ID = status
Line 2306: )
Line 2307: ID = goto
Line 2307: ID = out_unmap
Line 2307: ;
Line 2308: ID = kaddr
Line 2308: =
Line 2308: ID = kmap_atomic
Line 2308: (
Line 2308: ID = new_page
Line 2308: ,
Line 2308: ID = KM_USER0
Line 2308: )
Line 2308: ;
Line 2309: ID = memset
Line 2309: (
Line 2309: ID = kaddr
Line 2309: +
Line 2309: ID = zerofrom
Line 2309: ,
Line 2309: INTCON = 0
Line 2309: ,
Line 2309: ID = PAGE_CACHE_SIZE
Line 2309: -
Line 2309: ID = zerofrom
Line 2309: )
Line 2309: ;
Line 2310: ID = flush_dcache_page
Line 2310: (
Line 2310: ID = new_page
Line 2310: )
Line 2310: ;
Line 2311: ID = kunmap_atomic
Line 2311: (
Line 2311: ID = kaddr
Line 2311: ,
Line 2311: ID = KM_USER0
Line 2311: )
Line 2311: ;
Line 2312: Unrecognized token: 95
Line 2312: Unrecognized token: 95
Line 2312: ID = block_commit_write
Line 2312: (
Line 2312: ID = inode
Line 2312: ,
Line 2312: ID = new_page
Line 2312: ,
Line 2313: ID = zerofrom
Line 2313: ,
Line 2313: ID = PAGE_CACHE_SIZE
Line 2313: )
Line 2313: ;
Line 2314: ID = unlock_page
Line 2314: (
Line 2314: ID = new_page
Line 2314: )
Line 2314: ;
Line 2315: ID = page_cache_release
Line 2315: (
Line 2315: ID = new_page
Line 2315: )
Line 2315: ;
Line 2316: }
Line 2318: if
Line 2318: (
Line 2318: ID = page
Line 2318: -
Line 2318: >
Line 2318: ID = index
Line 2318: <
Line 2318: ID = pgpos
Line 2318: )
Line 2318: {
Line 2320: ID = zerofrom
Line 2320: =
Line 2320: ID = offset
Line 2320: ;
Line 2321: }
Line 2321: else
Line 2321: {
Line 2323: ID = zerofrom
Line 2323: =
Line 2323: *
Line 2323: ID = bytes
Line 2323: Unrecognized token: 38
Line 2323: Unrecognized token: 126
Line 2323: ID = PAGE_CACHE_MASK
Line 2323: ;
Line 2326: if
Line 2326: (
Line 2326: ID = to
Line 2326: >
Line 2326: ID = zerofrom
Line 2326: &&
Line 2326: (
Line 2326: ID = zerofrom
Line 2326: Unrecognized token: 38
Line 2326: (
Line 2326: ID = blocksize
Line 2326: -
Line 2326: INTCON = 1
Line 2326: )
Line 2326: )
Line 2326: )
Line 2326: {
Line 2327: *
Line 2327: ID = bytes
Line 2327: Unrecognized token: 124
Line 2327: =
Line 2327: (
Line 2327: ID = blocksize
Line 2327: -
Line 2327: INTCON = 1
Line 2327: )
Line 2327: ;
Line 2328: (
Line 2328: *
Line 2328: ID = bytes
Line 2328: )
Line 2328: +
Line 2328: +
Line 2328: ;
Line 2329: }
Line 2332: if
Line 2332: (
Line 2332: ID = offset
Line 2332: <=
Line 2332: ID = zerofrom
Line 2332: )
Line 2333: ID = zerofrom
Line 2333: =
Line 2333: ID = offset
Line 2333: ;
Line 2334: }
Line 2335: ID = status
Line 2335: =
Line 2335: Unrecognized token: 95
Line 2335: Unrecognized token: 95
Line 2335: ID = block_prepare_write
Line 2335: (
Line 2335: ID = inode
Line 2335: ,
Line 2335: ID = page
Line 2335: ,
Line 2335: ID = zerofrom
Line 2335: ,
Line 2335: ID = to
Line 2335: ,
Line 2335: ID = get_block
Line 2335: )
Line 2335: ;
Line 2336: if
Line 2336: (
Line 2336: ID = status
Line 2336: )
Line 2337: ID = goto
Line 2337: ID = out1
Line 2337: ;
Line 2338: if
Line 2338: (
Line 2338: ID = zerofrom
Line 2338: <
Line 2338: ID = offset
Line 2338: )
Line 2338: {
Line 2339: ID = kaddr
Line 2339: =
Line 2339: ID = kmap_atomic
Line 2339: (
Line 2339: ID = page
Line 2339: ,
Line 2339: ID = KM_USER0
Line 2339: )
Line 2339: ;
Line 2340: ID = memset
Line 2340: (
Line 2340: ID = kaddr
Line 2340: +
Line 2340: ID = zerofrom
Line 2340: ,
Line 2340: INTCON = 0
Line 2340: ,
Line 2340: ID = offset
Line 2340: -
Line 2340: ID = zerofrom
Line 2340: )
Line 2340: ;
Line 2341: ID = flush_dcache_page
Line 2341: (
Line 2341: ID = page
Line 2341: )
Line 2341: ;
Line 2342: ID = kunmap_atomic
Line 2342: (
Line 2342: ID = kaddr
Line 2342: ,
Line 2342: ID = KM_USER0
Line 2342: )
Line 2342: ;
Line 2343: Unrecognized token: 95
Line 2343: Unrecognized token: 95
Line 2343: ID = block_commit_write
Line 2343: (
Line 2343: ID = inode
Line 2343: ,
Line 2343: ID = page
Line 2343: ,
Line 2343: ID = zerofrom
Line 2343: ,
Line 2343: ID = offset
Line 2343: )
Line 2343: ;
Line 2344: }
Line 2345: return
Line 2345: INTCON = 0
Line 2345: ;
Line 2346: ID = out1
Line 2346: Unrecognized token: 58
Line 2347: ID = ClearPageUptodate
Line 2347: (
Line 2347: ID = page
Line 2347: )
Line 2347: ;
Line 2348: return
Line 2348: ID = status
Line 2348: ;
Line 2350: ID = out_unmap
Line 2350: Unrecognized token: 58
Line 2351: ID = ClearPageUptodate
Line 2351: (
Line 2351: ID = new_page
Line 2351: )
Line 2351: ;
Line 2352: ID = unlock_page
Line 2352: (
Line 2352: ID = new_page
Line 2352: )
Line 2352: ;
Line 2353: ID = page_cache_release
Line 2353: (
Line 2353: ID = new_page
Line 2353: )
Line 2353: ;
Line 2354: ID = out
Line 2354: Unrecognized token: 58
Line 2355: return
Line 2355: ID = status
Line 2355: ;
Line 2356: }
Line 2358: int
Line 2358: ID = block_prepare_write
Line 2358: (
Line 2358: ID = struct
Line 2358: ID = page
Line 2358: *
Line 2358: ID = page
Line 2358: ,
Line 2358: ID = unsigned
Line 2358: ID = from
Line 2358: ,
Line 2358: ID = unsigned
Line 2358: ID = to
Line 2358: ,
Line 2359: ID = get_block_t
Line 2359: *
Line 2359: ID = get_block
Line 2359: )
Line 2360: {
Line 2361: ID = struct
Line 2361: ID = inode
Line 2361: *
Line 2361: ID = inode
Line 2361: =
Line 2361: ID = page
Line 2361: -
Line 2361: >
Line 2361: ID = mapping
Line 2361: -
Line 2361: >
Line 2361: ID = host
Line 2361: ;
Line 2362: int
Line 2362: ID = err
Line 2362: =
Line 2362: Unrecognized token: 95
Line 2362: Unrecognized token: 95
Line 2362: ID = block_prepare_write
Line 2362: (
Line 2362: ID = inode
Line 2362: ,
Line 2362: ID = page
Line 2362: ,
Line 2362: ID = from
Line 2362: ,
Line 2362: ID = to
Line 2362: ,
Line 2362: ID = get_block
Line 2362: )
Line 2362: ;
Line 2363: if
Line 2363: (
Line 2363: ID = err
Line 2363: )
Line 2364: ID = ClearPageUptodate
Line 2364: (
Line 2364: ID = page
Line 2364: )
Line 2364: ;
Line 2365: return
Line 2365: ID = err
Line 2365: ;
Line 2366: }
Line 2368: int
Line 2368: ID = block_commit_write
Line 2368: (
Line 2368: ID = struct
Line 2368: ID = page
Line 2368: *
Line 2368: ID = page
Line 2368: ,
Line 2368: ID = unsigned
Line 2368: ID = from
Line 2368: ,
Line 2368: ID = unsigned
Line 2368: ID = to
Line 2368: )
Line 2369: {
Line 2370: ID = struct
Line 2370: ID = inode
Line 2370: *
Line 2370: ID = inode
Line 2370: =
Line 2370: ID = page
Line 2370: -
Line 2370: >
Line 2370: ID = mapping
Line 2370: -
Line 2370: >
Line 2370: ID = host
Line 2370: ;
Line 2371: Unrecognized token: 95
Line 2371: Unrecognized token: 95
Line 2371: ID = block_commit_write
Line 2371: (
Line 2371: ID = inode
Line 2371: ,
Line 2371: ID = page
Line 2371: ,
Line 2371: ID = from
Line 2371: ,
Line 2371: ID = to
Line 2371: )
Line 2371: ;
Line 2372: return
Line 2372: INTCON = 0
Line 2372: ;
Line 2373: }
Line 2375: int
Line 2375: ID = generic_commit_write
Line 2375: (
Line 2375: ID = struct
Line 2375: ID = file
Line 2375: *
Line 2375: ID = file
Line 2375: ,
Line 2375: ID = struct
Line 2375: ID = page
Line 2375: *
Line 2375: ID = page
Line 2375: ,
Line 2376: ID = unsigned
Line 2376: ID = from
Line 2376: ,
Line 2376: ID = unsigned
Line 2376: ID = to
Line 2376: )
Line 2377: {
Line 2378: ID = struct
Line 2378: ID = inode
Line 2378: *
Line 2378: ID = inode
Line 2378: =
Line 2378: ID = page
Line 2378: -
Line 2378: >
Line 2378: ID = mapping
Line 2378: -
Line 2378: >
Line 2378: ID = host
Line 2378: ;
Line 2379: ID = loff_t
Line 2379: ID = pos
Line 2379: =
Line 2379: (
Line 2379: (
Line 2379: ID = loff_t
Line 2379: )
Line 2379: ID = page
Line 2379: -
Line 2379: >
Line 2379: ID = index
Line 2379: <
Line 2379: <
Line 2379: ID = PAGE_CACHE_SHIFT
Line 2379: )
Line 2379: +
Line 2379: ID = to
Line 2379: ;
Line 2380: Unrecognized token: 95
Line 2380: Unrecognized token: 95
Line 2380: ID = block_commit_write
Line 2380: (
Line 2380: ID = inode
Line 2380: ,
Line 2380: ID = page
Line 2380: ,
Line 2380: ID = from
Line 2380: ,
Line 2380: ID = to
Line 2380: )
Line 2380: ;
Line 2385: if
Line 2385: (
Line 2385: ID = pos
Line 2385: >
Line 2385: ID = inode
Line 2385: -
Line 2385: >
Line 2385: ID = i_size
Line 2385: )
Line 2385: {
Line 2386: ID = i_size_write
Line 2386: (
Line 2386: ID = inode
Line 2386: ,
Line 2386: ID = pos
Line 2386: )
Line 2386: ;
Line 2387: ID = mark_inode_dirty
Line 2387: (
Line 2387: ID = inode
Line 2387: )
Line 2387: ;
Line 2388: }
Line 2389: return
Line 2389: INTCON = 0
Line 2389: ;
Line 2390: }
Line 2403: ID = static
Line 2403: void
Line 2403: ID = end_buffer_read_nobh
Line 2403: (
Line 2403: ID = struct
Line 2403: ID = buffer_head
Line 2403: *
Line 2403: ID = bh
Line 2403: ,
Line 2403: int
Line 2403: ID = uptodate
Line 2403: )
Line 2404: {
Line 2405: if
Line 2405: (
Line 2405: ID = uptodate
Line 2405: )
Line 2405: {
Line 2406: ID = set_buffer_uptodate
Line 2406: (
Line 2406: ID = bh
Line 2406: )
Line 2406: ;
Line 2407: }
Line 2407: else
Line 2407: {
Line 2409: ID = clear_buffer_uptodate
Line 2409: (
Line 2409: ID = bh
Line 2409: )
Line 2409: ;
Line 2410: }
Line 2411: ID = unlock_buffer
Line 2411: (
Line 2411: ID = bh
Line 2411: )
Line 2411: ;
Line 2412: }
Line 2418: int
Line 2418: ID = nobh_prepare_write
Line 2418: (
Line 2418: ID = struct
Line 2418: ID = page
Line 2418: *
Line 2418: ID = page
Line 2418: ,
Line 2418: ID = unsigned
Line 2418: ID = from
Line 2418: ,
Line 2418: ID = unsigned
Line 2418: ID = to
Line 2418: ,
Line 2419: ID = get_block_t
Line 2419: *
Line 2419: ID = get_block
Line 2419: )
Line 2420: {
Line 2421: ID = struct
Line 2421: ID = inode
Line 2421: *
Line 2421: ID = inode
Line 2421: =
Line 2421: ID = page
Line 2421: -
Line 2421: >
Line 2421: ID = mapping
Line 2421: -
Line 2421: >
Line 2421: ID = host
Line 2421: ;
Line 2422: ID = const
Line 2422: ID = unsigned
Line 2422: ID = blkbits
Line 2422: =
Line 2422: ID = inode
Line 2422: -
Line 2422: >
Line 2422: ID = i_blkbits
Line 2422: ;
Line 2423: ID = const
Line 2423: ID = unsigned
Line 2423: ID = blocksize
Line 2423: =
Line 2423: INTCON = 1
Line 2423: <
Line 2423: <
Line 2423: ID = blkbits
Line 2423: ;
Line 2424: ID = struct
Line 2424: ID = buffer_head
Line 2424: ID = map_bh
Line 2424: ;
Line 2425: ID = struct
Line 2425: ID = buffer_head
Line 2425: *
Line 2425: ID = read_bh
Line 2425: [
Line 2425: ID = MAX_BUF_PER_PAGE
Line 2425: ]
Line 2425: ;
Line 2426: ID = unsigned
Line 2426: ID = block_in_page
Line 2426: ;
Line 2427: ID = unsigned
Line 2427: ID = block_start
Line 2427: ;
Line 2428: ID = sector_t
Line 2428: ID = block_in_file
Line 2428: ;
Line 2429: char
Line 2429: *
Line 2429: ID = kaddr
Line 2429: ;
Line 2430: int
Line 2430: ID = nr_reads
Line 2430: =
Line 2430: INTCON = 0
Line 2430: ;
Line 2431: int
Line 2431: ID = i
Line 2431: ;
Line 2432: int
Line 2432: ID = ret
Line 2432: =
Line 2432: INTCON = 0
Line 2432: ;
Line 2433: int
Line 2433: ID = is_mapped_to_disk
Line 2433: =
Line 2433: INTCON = 1
Line 2433: ;
Line 2434: int
Line 2434: ID = dirtied_it
Line 2434: =
Line 2434: INTCON = 0
Line 2434: ;
Line 2436: if
Line 2436: (
Line 2436: ID = PageMappedToDisk
Line 2436: (
Line 2436: ID = page
Line 2436: )
Line 2436: )
Line 2437: return
Line 2437: INTCON = 0
Line 2437: ;
Line 2439: ID = block_in_file
Line 2439: =
Line 2439: (
Line 2439: ID = sector_t
Line 2439: )
Line 2439: ID = page
Line 2439: -
Line 2439: >
Line 2439: ID = index
Line 2439: <
Line 2439: <
Line 2439: (
Line 2439: ID = PAGE_CACHE_SHIFT
Line 2439: -
Line 2439: ID = blkbits
Line 2439: )
Line 2439: ;
Line 2440: ID = map_bh
Line 2440: Unrecognized token: 46
Line 2440: ID = b_page
Line 2440: =
Line 2440: ID = page
Line 2440: ;
Line 2447: for
Line 2447: (
Line 2447: ID = block_start
Line 2447: =
Line 2447: INTCON = 0
Line 2447: ,
Line 2447: ID = block_in_page
Line 2447: =
Line 2447: INTCON = 0
Line 2447: ;
Line 2448: ID = block_start
Line 2448: <
Line 2448: ID = PAGE_CACHE_SIZE
Line 2448: ;
Line 2449: ID = block_in_page
Line 2449: +
Line 2449: +
Line 2449: ,
Line 2449: ID = block_start
Line 2449: +
Line 2449: =
Line 2449: ID = blocksize
Line 2449: )
Line 2449: {
Line 2450: ID = unsigned
Line 2450: ID = block_end
Line 2450: =
Line 2450: ID = block_start
Line 2450: +
Line 2450: ID = blocksize
Line 2450: ;
Line 2451: int
Line 2451: ID = create
Line 2451: ;
Line 2453: ID = map_bh
Line 2453: Unrecognized token: 46
Line 2453: ID = b_state
Line 2453: =
Line 2453: INTCON = 0
Line 2453: ;
Line 2454: ID = create
Line 2454: =
Line 2454: INTCON = 1
Line 2454: ;
Line 2455: if
Line 2455: (
Line 2455: ID = block_start
Line 2455: >=
Line 2455: ID = to
Line 2455: )
Line 2456: ID = create
Line 2456: =
Line 2456: INTCON = 0
Line 2456: ;
Line 2457: ID = ret
Line 2457: =
Line 2457: ID = get_block
Line 2457: (
Line 2457: ID = inode
Line 2457: ,
Line 2457: ID = block_in_file
Line 2457: +
Line 2457: ID = block_in_page
Line 2457: ,
Line 2458: Unrecognized token: 38
Line 2458: ID = map_bh
Line 2458: ,
Line 2458: ID = create
Line 2458: )
Line 2458: ;
Line 2459: if
Line 2459: (
Line 2459: ID = ret
Line 2459: )
Line 2460: ID = goto
Line 2460: ID = failed
Line 2460: ;
Line 2461: if
Line 2461: (
Line 2461: !
Line 2461: ID = buffer_mapped
Line 2461: (
Line 2461: Unrecognized token: 38
Line 2461: ID = map_bh
Line 2461: )
Line 2461: )
Line 2462: ID = is_mapped_to_disk
Line 2462: =
Line 2462: INTCON = 0
Line 2462: ;
Line 2463: if
Line 2463: (
Line 2463: ID = buffer_new
Line 2463: (
Line 2463: Unrecognized token: 38
Line 2463: ID = map_bh
Line 2463: )
Line 2463: )
Line 2464: ID = unmap_underlying_metadata
Line 2464: (
Line 2464: ID = map_bh
Line 2464: Unrecognized token: 46
Line 2464: ID = b_bdev
Line 2464: ,
Line 2465: ID = map_bh
Line 2465: Unrecognized token: 46
Line 2465: ID = b_blocknr
Line 2465: )
Line 2465: ;
Line 2466: if
Line 2466: (
Line 2466: ID = PageUptodate
Line 2466: (
Line 2466: ID = page
Line 2466: )
Line 2466: )
Line 2467: ID = continue
Line 2467: ;
Line 2468: if
Line 2468: (
Line 2468: ID = buffer_new
Line 2468: (
Line 2468: Unrecognized token: 38
Line 2468: ID = map_bh
Line 2468: )
Line 2468: ||
Line 2468: !
Line 2468: ID = buffer_mapped
Line 2468: (
Line 2468: Unrecognized token: 38
Line 2468: ID = map_bh
Line 2468: )
Line 2468: )
Line 2468: {
Line 2469: ID = kaddr
Line 2469: =
Line 2469: ID = kmap_atomic
Line 2469: (
Line 2469: ID = page
Line 2469: ,
Line 2469: ID = KM_USER0
Line 2469: )
Line 2469: ;
Line 2470: if
Line 2470: (
Line 2470: ID = block_start
Line 2470: <
Line 2470: ID = from
Line 2470: )
Line 2470: {
Line 2471: ID = memset
Line 2471: (
Line 2471: ID = kaddr
Line 2471: +
Line 2471: ID = block_start
Line 2471: ,
Line 2471: INTCON = 0
Line 2471: ,
Line 2471: ID = from
Line 2471: -
Line 2471: ID = block_start
Line 2471: )
Line 2471: ;
Line 2472: ID = dirtied_it
Line 2472: =
Line 2472: INTCON = 1
Line 2472: ;
Line 2473: }
Line 2474: if
Line 2474: (
Line 2474: ID = block_end
Line 2474: >
Line 2474: ID = to
Line 2474: )
Line 2474: {
Line 2475: ID = memset
Line 2475: (
Line 2475: ID = kaddr
Line 2475: +
Line 2475: ID = to
Line 2475: ,
Line 2475: INTCON = 0
Line 2475: ,
Line 2475: ID = block_end
Line 2475: -
Line 2475: ID = to
Line 2475: )
Line 2475: ;
Line 2476: ID = dirtied_it
Line 2476: =
Line 2476: INTCON = 1
Line 2476: ;
Line 2477: }
Line 2478: ID = flush_dcache_page
Line 2478: (
Line 2478: ID = page
Line 2478: )
Line 2478: ;
Line 2479: ID = kunmap_atomic
Line 2479: (
Line 2479: ID = kaddr
Line 2479: ,
Line 2479: ID = KM_USER0
Line 2479: )
Line 2479: ;
Line 2480: ID = continue
Line 2480: ;
Line 2481: }
Line 2482: if
Line 2482: (
Line 2482: ID = buffer_uptodate
Line 2482: (
Line 2482: Unrecognized token: 38
Line 2482: ID = map_bh
Line 2482: )
Line 2482: )
Line 2483: ID = continue
Line 2483: ;
Line 2484: if
Line 2484: (
Line 2484: ID = block_start
Line 2484: <
Line 2484: ID = from
Line 2484: ||
Line 2484: ID = block_end
Line 2484: >
Line 2484: ID = to
Line 2484: )
Line 2484: {
Line 2485: ID = struct
Line 2485: ID = buffer_head
Line 2485: *
Line 2485: ID = bh
Line 2485: =
Line 2485: ID = alloc_buffer_head
Line 2485: (
Line 2485: ID = GFP_NOFS
Line 2485: )
Line 2485: ;
Line 2487: if
Line 2487: (
Line 2487: !
Line 2487: ID = bh
Line 2487: )
Line 2487: {
Line 2488: ID = ret
Line 2488: =
Line 2488: -
Line 2488: ID = ENOMEM
Line 2488: ;
Line 2489: ID = goto
Line 2489: ID = failed
Line 2489: ;
Line 2490: }
Line 2491: ID = bh
Line 2491: -
Line 2491: >
Line 2491: ID = b_state
Line 2491: =
Line 2491: ID = map_bh
Line 2491: Unrecognized token: 46
Line 2491: ID = b_state
Line 2491: ;
Line 2492: ID = atomic_set
Line 2492: (
Line 2492: Unrecognized token: 38
Line 2492: ID = bh
Line 2492: -
Line 2492: >
Line 2492: ID = b_count
Line 2492: ,
Line 2492: INTCON = 0
Line 2492: )
Line 2492: ;
Line 2493: ID = bh
Line 2493: -
Line 2493: >
Line 2493: ID = b_this_page
Line 2493: =
Line 2493: ID = NULL
Line 2493: ;
Line 2494: ID = bh
Line 2494: -
Line 2494: >
Line 2494: ID = b_page
Line 2494: =
Line 2494: ID = page
Line 2494: ;
Line 2495: ID = bh
Line 2495: -
Line 2495: >
Line 2495: ID = b_blocknr
Line 2495: =
Line 2495: ID = map_bh
Line 2495: Unrecognized token: 46
Line 2495: ID = b_blocknr
Line 2495: ;
Line 2496: ID = bh
Line 2496: -
Line 2496: >
Line 2496: ID = b_size
Line 2496: =
Line 2496: ID = blocksize
Line 2496: ;
Line 2497: ID = bh
Line 2497: -
Line 2497: >
Line 2497: ID = b_data
Line 2497: =
Line 2497: (
Line 2497: char
Line 2497: *
Line 2497: )
Line 2497: (
Line 2497: ID = long
Line 2497: )
Line 2497: ID = block_start
Line 2497: ;
Line 2498: ID = bh
Line 2498: -
Line 2498: >
Line 2498: ID = b_bdev
Line 2498: =
Line 2498: ID = map_bh
Line 2498: Unrecognized token: 46
Line 2498: ID = b_bdev
Line 2498: ;
Line 2499: ID = bh
Line 2499: -
Line 2499: >
Line 2499: ID = b_private
Line 2499: =
Line 2499: ID = NULL
Line 2499: ;
Line 2500: ID = read_bh
Line 2500: [
Line 2500: ID = nr_reads
Line 2500: +
Line 2500: +
Line 2500: ]
Line 2500: =
Line 2500: ID = bh
Line 2500: ;
Line 2501: }
Line 2502: }
Line 2504: if
Line 2504: (
Line 2504: ID = nr_reads
Line 2504: )
Line 2504: {
Line 2505: ID = struct
Line 2505: ID = buffer_head
Line 2505: *
Line 2505: ID = bh
Line 2505: ;
Line 2512: for
Line 2512: (
Line 2512: ID = i
Line 2512: =
Line 2512: INTCON = 0
Line 2512: ;
Line 2512: ID = i
Line 2512: <
Line 2512: ID = nr_reads
Line 2512: ;
Line 2512: ID = i
Line 2512: +
Line 2512: +
Line 2512: )
Line 2512: {
Line 2513: ID = bh
Line 2513: =
Line 2513: ID = read_bh
Line 2513: [
Line 2513: ID = i
Line 2513: ]
Line 2513: ;
Line 2514: ID = lock_buffer
Line 2514: (
Line 2514: ID = bh
Line 2514: )
Line 2514: ;
Line 2515: ID = bh
Line 2515: -
Line 2515: >
Line 2515: ID = b_end_io
Line 2515: =
Line 2515: ID = end_buffer_read_nobh
Line 2515: ;
Line 2516: ID = submit_bh
Line 2516: (
Line 2516: ID = READ
Line 2516: ,
Line 2516: ID = bh
Line 2516: )
Line 2516: ;
Line 2517: }
Line 2518: for
Line 2518: (
Line 2518: ID = i
Line 2518: =
Line 2518: INTCON = 0
Line 2518: ;
Line 2518: ID = i
Line 2518: <
Line 2518: ID = nr_reads
Line 2518: ;
Line 2518: ID = i
Line 2518: +
Line 2518: +
Line 2518: )
Line 2518: {
Line 2519: ID = bh
Line 2519: =
Line 2519: ID = read_bh
Line 2519: [
Line 2519: ID = i
Line 2519: ]
Line 2519: ;
Line 2520: ID = wait_on_buffer
Line 2520: (
Line 2520: ID = bh
Line 2520: )
Line 2520: ;
Line 2521: if
Line 2521: (
Line 2521: !
Line 2521: ID = buffer_uptodate
Line 2521: (
Line 2521: ID = bh
Line 2521: )
Line 2521: )
Line 2522: ID = ret
Line 2522: =
Line 2522: -
Line 2522: ID = EIO
Line 2522: ;
Line 2523: ID = free_buffer_head
Line 2523: (
Line 2523: ID = bh
Line 2523: )
Line 2523: ;
Line 2524: ID = read_bh
Line 2524: [
Line 2524: ID = i
Line 2524: ]
Line 2524: =
Line 2524: ID = NULL
Line 2524: ;
Line 2525: }
Line 2526: if
Line 2526: (
Line 2526: ID = ret
Line 2526: )
Line 2527: ID = goto
Line 2527: ID = failed
Line 2527: ;
Line 2528: }
Line 2530: if
Line 2530: (
Line 2530: ID = is_mapped_to_disk
Line 2530: )
Line 2531: ID = SetPageMappedToDisk
Line 2531: (
Line 2531: ID = page
Line 2531: )
Line 2531: ;
Line 2532: ID = SetPageUptodate
Line 2532: (
Line 2532: ID = page
Line 2532: )
Line 2532: ;
Line 2541: if
Line 2541: (
Line 2541: ID = dirtied_it
Line 2541: )
Line 2542: ID = set_page_dirty
Line 2542: (
Line 2542: ID = page
Line 2542: )
Line 2542: ;
Line 2544: return
Line 2544: INTCON = 0
Line 2544: ;
Line 2546: ID = failed
Line 2546: Unrecognized token: 58
Line 2547: for
Line 2547: (
Line 2547: ID = i
Line 2547: =
Line 2547: INTCON = 0
Line 2547: ;
Line 2547: ID = i
Line 2547: <
Line 2547: ID = nr_reads
Line 2547: ;
Line 2547: ID = i
Line 2547: +
Line 2547: +
Line 2547: )
Line 2547: {
Line 2548: if
Line 2548: (
Line 2548: ID = read_bh
Line 2548: [
Line 2548: ID = i
Line 2548: ]
Line 2548: )
Line 2549: ID = free_buffer_head
Line 2549: (
Line 2549: ID = read_bh
Line 2549: [
Line 2549: ID = i
Line 2549: ]
Line 2549: )
Line 2549: ;
Line 2550: }
Line 2556: ID = kaddr
Line 2556: =
Line 2556: ID = kmap_atomic
Line 2556: (
Line 2556: ID = page
Line 2556: ,
Line 2556: ID = KM_USER0
Line 2556: )
Line 2556: ;
Line 2557: ID = memset
Line 2557: (
Line 2557: ID = kaddr
Line 2557: ,
Line 2557: INTCON = 0
Line 2557: ,
Line 2557: ID = PAGE_CACHE_SIZE
Line 2557: )
Line 2557: ;
Line 2558: ID = kunmap_atomic
Line 2558: (
Line 2558: ID = kaddr
Line 2558: ,
Line 2558: ID = KM_USER0
Line 2558: )
Line 2558: ;
Line 2559: ID = SetPageUptodate
Line 2559: (
Line 2559: ID = page
Line 2559: )
Line 2559: ;
Line 2560: ID = set_page_dirty
Line 2560: (
Line 2560: ID = page
Line 2560: )
Line 2560: ;
Line 2561: return
Line 2561: ID = ret
Line 2561: ;
Line 2562: }
Line 2563: ID = EXPORT_SYMBOL
Line 2563: (
Line 2563: ID = nobh_prepare_write
Line 2563: )
Line 2563: ;
Line 2565: int
Line 2565: ID = nobh_commit_write
Line 2565: (
Line 2565: ID = struct
Line 2565: ID = file
Line 2565: *
Line 2565: ID = file
Line 2565: ,
Line 2565: ID = struct
Line 2565: ID = page
Line 2565: *
Line 2565: ID = page
Line 2565: ,
Line 2566: ID = unsigned
Line 2566: ID = from
Line 2566: ,
Line 2566: ID = unsigned
Line 2566: ID = to
Line 2566: )
Line 2567: {
Line 2568: ID = struct
Line 2568: ID = inode
Line 2568: *
Line 2568: ID = inode
Line 2568: =
Line 2568: ID = page
Line 2568: -
Line 2568: >
Line 2568: ID = mapping
Line 2568: -
Line 2568: >
Line 2568: ID = host
Line 2568: ;
Line 2569: ID = loff_t
Line 2569: ID = pos
Line 2569: =
Line 2569: (
Line 2569: (
Line 2569: ID = loff_t
Line 2569: )
Line 2569: ID = page
Line 2569: -
Line 2569: >
Line 2569: ID = index
Line 2569: <
Line 2569: <
Line 2569: ID = PAGE_CACHE_SHIFT
Line 2569: )
Line 2569: +
Line 2569: ID = to
Line 2569: ;
Line 2571: ID = set_page_dirty
Line 2571: (
Line 2571: ID = page
Line 2571: )
Line 2571: ;
Line 2572: if
Line 2572: (
Line 2572: ID = pos
Line 2572: >
Line 2572: ID = inode
Line 2572: -
Line 2572: >
Line 2572: ID = i_size
Line 2572: )
Line 2572: {
Line 2573: ID = i_size_write
Line 2573: (
Line 2573: ID = inode
Line 2573: ,
Line 2573: ID = pos
Line 2573: )
Line 2573: ;
Line 2574: ID = mark_inode_dirty
Line 2574: (
Line 2574: ID = inode
Line 2574: )
Line 2574: ;
Line 2575: }
Line 2576: return
Line 2576: INTCON = 0
Line 2576: ;
Line 2577: }
Line 2578: ID = EXPORT_SYMBOL
Line 2578: (
Line 2578: ID = nobh_commit_write
Line 2578: )
Line 2578: ;
Line 2583: int
Line 2583: ID = nobh_truncate_page
Line 2583: (
Line 2583: ID = struct
Line 2583: ID = address_space
Line 2583: *
Line 2583: ID = mapping
Line 2583: ,
Line 2583: ID = loff_t
Line 2583: ID = from
Line 2583: )
Line 2584: {
Line 2585: ID = struct
Line 2585: ID = inode
Line 2585: *
Line 2585: ID = inode
Line 2585: =
Line 2585: ID = mapping
Line 2585: -
Line 2585: >
Line 2585: ID = host
Line 2585: ;
Line 2586: ID = unsigned
Line 2586: ID = blocksize
Line 2586: =
Line 2586: INTCON = 1
Line 2586: <
Line 2586: <
Line 2586: ID = inode
Line 2586: -
Line 2586: >
Line 2586: ID = i_blkbits
Line 2586: ;
Line 2587: ID = pgoff_t
Line 2587: ID = index
Line 2587: =
Line 2587: ID = from
Line 2587: >
Line 2587: >
Line 2587: ID = PAGE_CACHE_SHIFT
Line 2587: ;
Line 2588: ID = unsigned
Line 2588: ID = offset
Line 2588: =
Line 2588: ID = from
Line 2588: Unrecognized token: 38
Line 2588: (
Line 2588: ID = PAGE_CACHE_SIZE
Line 2588: -
Line 2588: INTCON = 1
Line 2588: )
Line 2588: ;
Line 2589: ID = unsigned
Line 2589: ID = to
Line 2589: ;
Line 2590: ID = struct
Line 2590: ID = page
Line 2590: *
Line 2590: ID = page
Line 2590: ;
Line 2591: ID = struct
Line 2591: ID = address_space_operations
Line 2591: *
Line 2591: ID = a_ops
Line 2591: =
Line 2591: ID = mapping
Line 2591: -
Line 2591: >
Line 2591: ID = a_ops
Line 2591: ;
Line 2592: char
Line 2592: *
Line 2592: ID = kaddr
Line 2592: ;
Line 2593: int
Line 2593: ID = ret
Line 2593: =
Line 2593: INTCON = 0
Line 2593: ;
Line 2595: if
Line 2595: (
Line 2595: (
Line 2595: ID = offset
Line 2595: Unrecognized token: 38
Line 2595: (
Line 2595: ID = blocksize
Line 2595: -
Line 2595: INTCON = 1
Line 2595: )
Line 2595: )
Line 2595: ==
Line 2595: INTCON = 0
Line 2595: )
Line 2596: ID = goto
Line 2596: ID = out
Line 2596: ;
Line 2598: ID = ret
Line 2598: =
Line 2598: -
Line 2598: ID = ENOMEM
Line 2598: ;
Line 2599: ID = page
Line 2599: =
Line 2599: ID = grab_cache_page
Line 2599: (
Line 2599: ID = mapping
Line 2599: ,
Line 2599: ID = index
Line 2599: )
Line 2599: ;
Line 2600: if
Line 2600: (
Line 2600: !
Line 2600: ID = page
Line 2600: )
Line 2601: ID = goto
Line 2601: ID = out
Line 2601: ;
Line 2603: ID = to
Line 2603: =
Line 2603: (
Line 2603: ID = offset
Line 2603: +
Line 2603: ID = blocksize
Line 2603: )
Line 2603: Unrecognized token: 38
Line 2603: Unrecognized token: 126
Line 2603: (
Line 2603: ID = blocksize
Line 2603: -
Line 2603: INTCON = 1
Line 2603: )
Line 2603: ;
Line 2604: ID = ret
Line 2604: =
Line 2604: ID = a_ops
Line 2604: -
Line 2604: >
Line 2604: ID = prepare_write
Line 2604: (
Line 2604: ID = NULL
Line 2604: ,
Line 2604: ID = page
Line 2604: ,
Line 2604: ID = offset
Line 2604: ,
Line 2604: ID = to
Line 2604: )
Line 2604: ;
Line 2605: if
Line 2605: (
Line 2605: ID = ret
Line 2605: ==
Line 2605: INTCON = 0
Line 2605: )
Line 2605: {
Line 2606: ID = kaddr
Line 2606: =
Line 2606: ID = kmap_atomic
Line 2606: (
Line 2606: ID = page
Line 2606: ,
Line 2606: ID = KM_USER0
Line 2606: )
Line 2606: ;
Line 2607: ID = memset
Line 2607: (
Line 2607: ID = kaddr
Line 2607: +
Line 2607: ID = offset
Line 2607: ,
Line 2607: INTCON = 0
Line 2607: ,
Line 2607: ID = PAGE_CACHE_SIZE
Line 2607: -
Line 2607: ID = offset
Line 2607: )
Line 2607: ;
Line 2608: ID = flush_dcache_page
Line 2608: (
Line 2608: ID = page
Line 2608: )
Line 2608: ;
Line 2609: ID = kunmap_atomic
Line 2609: (
Line 2609: ID = kaddr
Line 2609: ,
Line 2609: ID = KM_USER0
Line 2609: )
Line 2609: ;
Line 2610: ID = set_page_dirty
Line 2610: (
Line 2610: ID = page
Line 2610: )
Line 2610: ;
Line 2611: }
Line 2612: ID = unlock_page
Line 2612: (
Line 2612: ID = page
Line 2612: )
Line 2612: ;
Line 2613: ID = page_cache_release
Line 2613: (
Line 2613: ID = page
Line 2613: )
Line 2613: ;
Line 2614: ID = out
Line 2614: Unrecognized token: 58
Line 2615: return
Line 2615: ID = ret
Line 2615: ;
Line 2616: }
Line 2617: ID = EXPORT_SYMBOL
Line 2617: (
Line 2617: ID = nobh_truncate_page
Line 2617: )
Line 2617: ;
Line 2619: int
Line 2619: ID = block_truncate_page
Line 2619: (
Line 2619: ID = struct
Line 2619: ID = address_space
Line 2619: *
Line 2619: ID = mapping
Line 2619: ,
Line 2620: ID = loff_t
Line 2620: ID = from
Line 2620: ,
Line 2620: ID = get_block_t
Line 2620: *
Line 2620: ID = get_block
Line 2620: )
Line 2621: {
Line 2622: ID = pgoff_t
Line 2622: ID = index
Line 2622: =
Line 2622: ID = from
Line 2622: >
Line 2622: >
Line 2622: ID = PAGE_CACHE_SHIFT
Line 2622: ;
Line 2623: ID = unsigned
Line 2623: ID = offset
Line 2623: =
Line 2623: ID = from
Line 2623: Unrecognized token: 38
Line 2623: (
Line 2623: ID = PAGE_CACHE_SIZE
Line 2623: -
Line 2623: INTCON = 1
Line 2623: )
Line 2623: ;
Line 2624: ID = unsigned
Line 2624: ID = blocksize
Line 2624: ;
Line 2625: ID = pgoff_t
Line 2625: ID = iblock
Line 2625: ;
Line 2626: ID = unsigned
Line 2626: ID = length
Line 2626: ,
Line 2626: ID = pos
Line 2626: ;
Line 2627: ID = struct
Line 2627: ID = inode
Line 2627: *
Line 2627: ID = inode
Line 2627: =
Line 2627: ID = mapping
Line 2627: -
Line 2627: >
Line 2627: ID = host
Line 2627: ;
Line 2628: ID = struct
Line 2628: ID = page
Line 2628: *
Line 2628: ID = page
Line 2628: ;
Line 2629: ID = struct
Line 2629: ID = buffer_head
Line 2629: *
Line 2629: ID = bh
Line 2629: ;
Line 2630: void
Line 2630: *
Line 2630: ID = kaddr
Line 2630: ;
Line 2631: int
Line 2631: ID = err
Line 2631: ;
Line 2633: ID = blocksize
Line 2633: =
Line 2633: INTCON = 1
Line 2633: <
Line 2633: <
Line 2633: ID = inode
Line 2633: -
Line 2633: >
Line 2633: ID = i_blkbits
Line 2633: ;
Line 2634: ID = length
Line 2634: =
Line 2634: ID = offset
Line 2634: Unrecognized token: 38
Line 2634: (
Line 2634: ID = blocksize
Line 2634: -
Line 2634: INTCON = 1
Line 2634: )
Line 2634: ;
Line 2637: if
Line 2637: (
Line 2637: !
Line 2637: ID = length
Line 2637: )
Line 2638: return
Line 2638: INTCON = 0
Line 2638: ;
Line 2640: ID = length
Line 2640: =
Line 2640: ID = blocksize
Line 2640: -
Line 2640: ID = length
Line 2640: ;
Line 2641: ID = iblock
Line 2641: =
Line 2641: ID = index
Line 2641: <
Line 2641: <
Line 2641: (
Line 2641: ID = PAGE_CACHE_SHIFT
Line 2641: -
Line 2641: ID = inode
Line 2641: -
Line 2641: >
Line 2641: ID = i_blkbits
Line 2641: )
Line 2641: ;
Line 2643: ID = page
Line 2643: =
Line 2643: ID = grab_cache_page
Line 2643: (
Line 2643: ID = mapping
Line 2643: ,
Line 2643: ID = index
Line 2643: )
Line 2643: ;
Line 2644: ID = err
Line 2644: =
Line 2644: -
Line 2644: ID = ENOMEM
Line 2644: ;
Line 2645: if
Line 2645: (
Line 2645: !
Line 2645: ID = page
Line 2645: )
Line 2646: ID = goto
Line 2646: ID = out
Line 2646: ;
Line 2648: if
Line 2648: (
Line 2648: !
Line 2648: ID = page_has_buffers
Line 2648: (
Line 2648: ID = page
Line 2648: )
Line 2648: )
Line 2649: ID = create_empty_buffers
Line 2649: (
Line 2649: ID = page
Line 2649: ,
Line 2649: ID = blocksize
Line 2649: ,
Line 2649: INTCON = 0
Line 2649: )
Line 2649: ;
Line 2652: ID = bh
Line 2652: =
Line 2652: ID = page_buffers
Line 2652: (
Line 2652: ID = page
Line 2652: )
Line 2652: ;
Line 2653: ID = pos
Line 2653: =
Line 2653: ID = blocksize
Line 2653: ;
Line 2654: while
Line 2654: (
Line 2654: ID = offset
Line 2654: >=
Line 2654: ID = pos
Line 2654: )
Line 2654: {
Line 2655: ID = bh
Line 2655: =
Line 2655: ID = bh
Line 2655: -
Line 2655: >
Line 2655: ID = b_this_page
Line 2655: ;
Line 2656: ID = iblock
Line 2656: +
Line 2656: +
Line 2656: ;
Line 2657: ID = pos
Line 2657: +
Line 2657: =
Line 2657: ID = blocksize
Line 2657: ;
Line 2658: }
Line 2660: ID = err
Line 2660: =
Line 2660: INTCON = 0
Line 2660: ;
Line 2661: if
Line 2661: (
Line 2661: !
Line 2661: ID = buffer_mapped
Line 2661: (
Line 2661: ID = bh
Line 2661: )
Line 2661: )
Line 2661: {
Line 2662: ID = err
Line 2662: =
Line 2662: ID = get_block
Line 2662: (
Line 2662: ID = inode
Line 2662: ,
Line 2662: ID = iblock
Line 2662: ,
Line 2662: ID = bh
Line 2662: ,
Line 2662: INTCON = 0
Line 2662: )
Line 2662: ;
Line 2663: if
Line 2663: (
Line 2663: ID = err
Line 2663: )
Line 2664: ID = goto
Line 2664: ID = unlock
Line 2664: ;
Line 2666: if
Line 2666: (
Line 2666: !
Line 2666: ID = buffer_mapped
Line 2666: (
Line 2666: ID = bh
Line 2666: )
Line 2666: )
Line 2667: ID = goto
Line 2667: ID = unlock
Line 2667: ;
Line 2668: }
Line 2671: if
Line 2671: (
Line 2671: ID = PageUptodate
Line 2671: (
Line 2671: ID = page
Line 2671: )
Line 2671: )
Line 2672: ID = set_buffer_uptodate
Line 2672: (
Line 2672: ID = bh
Line 2672: )
Line 2672: ;
Line 2674: if
Line 2674: (
Line 2674: !
Line 2674: ID = buffer_uptodate
Line 2674: (
Line 2674: ID = bh
Line 2674: )
Line 2674: &&
Line 2674: !
Line 2674: ID = buffer_delay
Line 2674: (
Line 2674: ID = bh
Line 2674: )
Line 2674: )
Line 2674: {
Line 2675: ID = err
Line 2675: =
Line 2675: -
Line 2675: ID = EIO
Line 2675: ;
Line 2676: ID = ll_rw_block
Line 2676: (
Line 2676: ID = READ
Line 2676: ,
Line 2676: INTCON = 1
Line 2676: ,
Line 2676: Unrecognized token: 38
Line 2676: ID = bh
Line 2676: )
Line 2676: ;
Line 2677: ID = wait_on_buffer
Line 2677: (
Line 2677: ID = bh
Line 2677: )
Line 2677: ;
Line 2679: if
Line 2679: (
Line 2679: !
Line 2679: ID = buffer_uptodate
Line 2679: (
Line 2679: ID = bh
Line 2679: )
Line 2679: )
Line 2680: ID = goto
Line 2680: ID = unlock
Line 2680: ;
Line 2681: }
Line 2683: ID = kaddr
Line 2683: =
Line 2683: ID = kmap_atomic
Line 2683: (
Line 2683: ID = page
Line 2683: ,
Line 2683: ID = KM_USER0
Line 2683: )
Line 2683: ;
Line 2684: ID = memset
Line 2684: (
Line 2684: ID = kaddr
Line 2684: +
Line 2684: ID = offset
Line 2684: ,
Line 2684: INTCON = 0
Line 2684: ,
Line 2684: ID = length
Line 2684: )
Line 2684: ;
Line 2685: ID = flush_dcache_page
Line 2685: (
Line 2685: ID = page
Line 2685: )
Line 2685: ;
Line 2686: ID = kunmap_atomic
Line 2686: (
Line 2686: ID = kaddr
Line 2686: ,
Line 2686: ID = KM_USER0
Line 2686: )
Line 2686: ;
Line 2688: ID = mark_buffer_dirty
Line 2688: (
Line 2688: ID = bh
Line 2688: )
Line 2688: ;
Line 2689: ID = err
Line 2689: =
Line 2689: INTCON = 0
Line 2689: ;
Line 2691: ID = unlock
Line 2691: Unrecognized token: 58
Line 2692: ID = unlock_page
Line 2692: (
Line 2692: ID = page
Line 2692: )
Line 2692: ;
Line 2693: ID = page_cache_release
Line 2693: (
Line 2693: ID = page
Line 2693: )
Line 2693: ;
Line 2694: ID = out
Line 2694: Unrecognized token: 58
Line 2695: return
Line 2695: ID = err
Line 2695: ;
Line 2696: }
Line 2701: int
Line 2701: ID = block_write_full_page
Line 2701: (
Line 2701: ID = struct
Line 2701: ID = page
Line 2701: *
Line 2701: ID = page
Line 2701: ,
Line 2701: ID = get_block_t
Line 2701: *
Line 2701: ID = get_block
Line 2701: ,
Line 2702: ID = struct
Line 2702: ID = writeback_control
Line 2702: *
Line 2702: ID = wbc
Line 2702: )
Line 2703: {
Line 2704: ID = struct
Line 2704: ID = inode
Line 2704: *
Line 2704: ID = const
Line 2704: ID = inode
Line 2704: =
Line 2704: ID = page
Line 2704: -
Line 2704: >
Line 2704: ID = mapping
Line 2704: -
Line 2704: >
Line 2704: ID = host
Line 2704: ;
Line 2705: ID = loff_t
Line 2705: ID = i_size
Line 2705: =
Line 2705: ID = i_size_read
Line 2705: (
Line 2705: ID = inode
Line 2705: )
Line 2705: ;
Line 2706: ID = const
Line 2706: ID = pgoff_t
Line 2706: ID = end_index
Line 2706: =
Line 2706: ID = i_size
Line 2706: >
Line 2706: >
Line 2706: ID = PAGE_CACHE_SHIFT
Line 2706: ;
Line 2707: ID = unsigned
Line 2707: ID = offset
Line 2707: ;
Line 2708: void
Line 2708: *
Line 2708: ID = kaddr
Line 2708: ;
Line 2711: if
Line 2711: (
Line 2711: ID = page
Line 2711: -
Line 2711: >
Line 2711: ID = index
Line 2711: <
Line 2711: ID = end_index
Line 2711: )
Line 2712: return
Line 2712: Unrecognized token: 95
Line 2712: Unrecognized token: 95
Line 2712: ID = block_write_full_page
Line 2712: (
Line 2712: ID = inode
Line 2712: ,
Line 2712: ID = page
Line 2712: ,
Line 2712: ID = get_block
Line 2712: ,
Line 2712: ID = wbc
Line 2712: )
Line 2712: ;
Line 2715: ID = offset
Line 2715: =
Line 2715: ID = i_size
Line 2715: Unrecognized token: 38
Line 2715: (
Line 2715: ID = PAGE_CACHE_SIZE
Line 2715: -
Line 2715: INTCON = 1
Line 2715: )
Line 2715: ;
Line 2716: if
Line 2716: (
Line 2716: ID = page
Line 2716: -
Line 2716: >
Line 2716: ID = index
Line 2716: >=
Line 2716: ID = end_index
Line 2716: +
Line 2716: INTCON = 1
Line 2716: ||
Line 2716: !
Line 2716: ID = offset
Line 2716: )
Line 2716: {
Line 2722: ID = block_invalidatepage
Line 2722: (
Line 2722: ID = page
Line 2722: ,
Line 2722: INTCON = 0
Line 2722: )
Line 2722: ;
Line 2723: ID = unlock_page
Line 2723: (
Line 2723: ID = page
Line 2723: )
Line 2723: ;
Line 2724: return
Line 2724: INTCON = 0
Line 2724: ;
Line 2725: }
Line 2734: ID = kaddr
Line 2734: =
Line 2734: ID = kmap_atomic
Line 2734: (
Line 2734: ID = page
Line 2734: ,
Line 2734: ID = KM_USER0
Line 2734: )
Line 2734: ;
Line 2735: ID = memset
Line 2735: (
Line 2735: ID = kaddr
Line 2735: +
Line 2735: ID = offset
Line 2735: ,
Line 2735: INTCON = 0
Line 2735: ,
Line 2735: ID = PAGE_CACHE_SIZE
Line 2735: -
Line 2735: ID = offset
Line 2735: )
Line 2735: ;
Line 2736: ID = flush_dcache_page
Line 2736: (
Line 2736: ID = page
Line 2736: )
Line 2736: ;
Line 2737: ID = kunmap_atomic
Line 2737: (
Line 2737: ID = kaddr
Line 2737: ,
Line 2737: ID = KM_USER0
Line 2737: )
Line 2737: ;
Line 2738: return
Line 2738: Unrecognized token: 95
Line 2738: Unrecognized token: 95
Line 2738: ID = block_write_full_page
Line 2738: (
Line 2738: ID = inode
Line 2738: ,
Line 2738: ID = page
Line 2738: ,
Line 2738: ID = get_block
Line 2738: ,
Line 2738: ID = wbc
Line 2738: )
Line 2738: ;
Line 2739: }
Line 2741: ID = sector_t
Line 2741: ID = generic_block_bmap
Line 2741: (
Line 2741: ID = struct
Line 2741: ID = address_space
Line 2741: *
Line 2741: ID = mapping
Line 2741: ,
Line 2741: ID = sector_t
Line 2741: ID = block
Line 2741: ,
Line 2742: ID = get_block_t
Line 2742: *
Line 2742: ID = get_block
Line 2742: )
Line 2743: {
Line 2744: ID = struct
Line 2744: ID = buffer_head
Line 2744: ID = tmp
Line 2744: ;
Line 2745: ID = struct
Line 2745: ID = inode
Line 2745: *
Line 2745: ID = inode
Line 2745: =
Line 2745: ID = mapping
Line 2745: -
Line 2745: >
Line 2745: ID = host
Line 2745: ;
Line 2746: ID = tmp
Line 2746: Unrecognized token: 46
Line 2746: ID = b_state
Line 2746: =
Line 2746: INTCON = 0
Line 2746: ;
Line 2747: ID = tmp
Line 2747: Unrecognized token: 46
Line 2747: ID = b_blocknr
Line 2747: =
Line 2747: INTCON = 0
Line 2747: ;
Line 2748: ID = get_block
Line 2748: (
Line 2748: ID = inode
Line 2748: ,
Line 2748: ID = block
Line 2748: ,
Line 2748: Unrecognized token: 38
Line 2748: ID = tmp
Line 2748: ,
Line 2748: INTCON = 0
Line 2748: )
Line 2748: ;
Line 2749: return
Line 2749: ID = tmp
Line 2749: Unrecognized token: 46
Line 2749: ID = b_blocknr
Line 2749: ;
Line 2750: }
Line 2752: ID = static
Line 2752: int
Line 2752: ID = end_bio_bh_io_sync
Line 2752: (
Line 2752: ID = struct
Line 2752: ID = bio
Line 2752: *
Line 2752: ID = bio
Line 2752: ,
Line 2752: ID = unsigned
Line 2752: int
Line 2752: ID = bytes_done
Line 2752: ,
Line 2752: int
Line 2752: ID = err
Line 2752: )
Line 2753: {
Line 2754: ID = struct
Line 2754: ID = buffer_head
Line 2754: *
Line 2754: ID = bh
Line 2754: =
Line 2754: ID = bio
Line 2754: -
Line 2754: >
Line 2754: ID = bi_private
Line 2754: ;
Line 2756: if
Line 2756: (
Line 2756: ID = bio
Line 2756: -
Line 2756: >
Line 2756: ID = bi_size
Line 2756: )
Line 2757: return
Line 2757: INTCON = 1
Line 2757: ;
Line 2759: ID = bh
Line 2759: -
Line 2759: >
Line 2759: ID = b_end_io
Line 2759: (
Line 2759: ID = bh
Line 2759: ,
Line 2759: ID = test_bit
Line 2759: (
Line 2759: ID = BIO_UPTODATE
Line 2759: ,
Line 2759: Unrecognized token: 38
Line 2759: ID = bio
Line 2759: -
Line 2759: >
Line 2759: ID = bi_flags
Line 2759: )
Line 2759: )
Line 2759: ;
Line 2760: ID = bio_put
Line 2760: (
Line 2760: ID = bio
Line 2760: )
Line 2760: ;
Line 2761: return
Line 2761: INTCON = 0
Line 2761: ;
Line 2762: }
Line 2764: void
Line 2764: ID = submit_bh
Line 2764: (
Line 2764: int
Line 2764: ID = rw
Line 2764: ,
Line 2764: ID = struct
Line 2764: ID = buffer_head
Line 2764: *
Line 2764: ID = bh
Line 2764: )
Line 2765: {
Line 2766: ID = struct
Line 2766: ID = bio
Line 2766: *
Line 2766: ID = bio
Line 2766: ;
Line 2768: ID = BUG_ON
Line 2768: (
Line 2768: !
Line 2768: ID = buffer_locked
Line 2768: (
Line 2768: ID = bh
Line 2768: )
Line 2768: )
Line 2768: ;
Line 2769: ID = BUG_ON
Line 2769: (
Line 2769: !
Line 2769: ID = buffer_mapped
Line 2769: (
Line 2769: ID = bh
Line 2769: )
Line 2769: )
Line 2769: ;
Line 2770: ID = BUG_ON
Line 2770: (
Line 2770: !
Line 2770: ID = bh
Line 2770: -
Line 2770: >
Line 2770: ID = b_end_io
Line 2770: )
Line 2770: ;
Line 2773: if
Line 2773: (
Line 2773: ID = test_set_buffer_req
Line 2773: (
Line 2773: ID = bh
Line 2773: )
Line 2773: &&
Line 2773: ID = rw
Line 2773: ==
Line 2773: ID = WRITE
Line 2773: )
Line 2774: ID = clear_buffer_write_io_error
Line 2774: (
Line 2774: ID = bh
Line 2774: )
Line 2774: ;
Line 2780: ID = bio
Line 2780: =
Line 2780: ID = bio_alloc
Line 2780: (
Line 2780: ID = GFP_NOIO
Line 2780: ,
Line 2780: INTCON = 1
Line 2780: )
Line 2780: ;
Line 2782: ID = bio
Line 2782: -
Line 2782: >
Line 2782: ID = bi_sector
Line 2782: =
Line 2782: ID = bh
Line 2782: -
Line 2782: >
Line 2782: ID = b_blocknr
Line 2782: *
Line 2782: (
Line 2782: ID = bh
Line 2782: -
Line 2782: >
Line 2782: ID = b_size
Line 2782: >
Line 2782: >
Line 2782: INTCON = 9
Line 2782: )
Line 2782: ;
Line 2783: ID = bio
Line 2783: -
Line 2783: >
Line 2783: ID = bi_bdev
Line 2783: =
Line 2783: ID = bh
Line 2783: -
Line 2783: >
Line 2783: ID = b_bdev
Line 2783: ;
Line 2784: ID = bio
Line 2784: -
Line 2784: >
Line 2784: ID = bi_io_vec
Line 2784: [
Line 2784: INTCON = 0
Line 2784: ]
Line 2784: Unrecognized token: 46
Line 2784: ID = bv_page
Line 2784: =
Line 2784: ID = bh
Line 2784: -
Line 2784: >
Line 2784: ID = b_page
Line 2784: ;
Line 2785: ID = bio
Line 2785: -
Line 2785: >
Line 2785: ID = bi_io_vec
Line 2785: [
Line 2785: INTCON = 0
Line 2785: ]
Line 2785: Unrecognized token: 46
Line 2785: ID = bv_len
Line 2785: =
Line 2785: ID = bh
Line 2785: -
Line 2785: >
Line 2785: ID = b_size
Line 2785: ;
Line 2786: ID = bio
Line 2786: -
Line 2786: >
Line 2786: ID = bi_io_vec
Line 2786: [
Line 2786: INTCON = 0
Line 2786: ]
Line 2786: Unrecognized token: 46
Line 2786: ID = bv_offset
Line 2786: =
Line 2786: ID = bh_offset
Line 2786: (
Line 2786: ID = bh
Line 2786: )
Line 2786: ;
Line 2788: ID = bio
Line 2788: -
Line 2788: >
Line 2788: ID = bi_vcnt
Line 2788: =
Line 2788: INTCON = 1
Line 2788: ;
Line 2789: ID = bio
Line 2789: -
Line 2789: >
Line 2789: ID = bi_idx
Line 2789: =
Line 2789: INTCON = 0
Line 2789: ;
Line 2790: ID = bio
Line 2790: -
Line 2790: >
Line 2790: ID = bi_size
Line 2790: =
Line 2790: ID = bh
Line 2790: -
Line 2790: >
Line 2790: ID = b_size
Line 2790: ;
Line 2792: ID = bio
Line 2792: -
Line 2792: >
Line 2792: ID = bi_end_io
Line 2792: =
Line 2792: ID = end_bio_bh_io_sync
Line 2792: ;
Line 2793: ID = bio
Line 2793: -
Line 2793: >
Line 2793: ID = bi_private
Line 2793: =
Line 2793: ID = bh
Line 2793: ;
Line 2795: ID = submit_bio
Line 2795: (
Line 2795: ID = rw
Line 2795: ,
Line 2795: ID = bio
Line 2795: )
Line 2795: ;
Line 2796: }
Line 2823: void
Line 2823: ID = ll_rw_block
Line 2823: (
Line 2823: int
Line 2823: ID = rw
Line 2823: ,
Line 2823: int
Line 2823: ID = nr
Line 2823: ,
Line 2823: ID = struct
Line 2823: ID = buffer_head
Line 2823: *
Line 2823: ID = bhs
Line 2823: [
Line 2823: ]
Line 2823: )
Line 2824: {
Line 2825: int
Line 2825: ID = i
Line 2825: ;
Line 2827: for
Line 2827: (
Line 2827: ID = i
Line 2827: =
Line 2827: INTCON = 0
Line 2827: ;
Line 2827: ID = i
Line 2827: <
Line 2827: ID = nr
Line 2827: ;
Line 2827: ID = i
Line 2827: +
Line 2827: +
Line 2827: )
Line 2827: {
Line 2828: ID = struct
Line 2828: ID = buffer_head
Line 2828: *
Line 2828: ID = bh
Line 2828: =
Line 2828: ID = bhs
Line 2828: [
Line 2828: ID = i
Line 2828: ]
Line 2828: ;
Line 2830: if
Line 2830: (
Line 2830: ID = test_set_buffer_locked
Line 2830: (
Line 2830: ID = bh
Line 2830: )
Line 2830: )
Line 2831: ID = continue
Line 2831: ;
Line 2833: ID = get_bh
Line 2833: (
Line 2833: ID = bh
Line 2833: )
Line 2833: ;
Line 2834: if
Line 2834: (
Line 2834: ID = rw
Line 2834: ==
Line 2834: ID = WRITE
Line 2834: )
Line 2834: {
Line 2835: ID = bh
Line 2835: -
Line 2835: >
Line 2835: ID = b_end_io
Line 2835: =
Line 2835: ID = end_buffer_write_sync
Line 2835: ;
Line 2836: if
Line 2836: (
Line 2836: ID = test_clear_buffer_dirty
Line 2836: (
Line 2836: ID = bh
Line 2836: )
Line 2836: )
Line 2836: {
Line 2837: ID = submit_bh
Line 2837: (
Line 2837: ID = WRITE
Line 2837: ,
Line 2837: ID = bh
Line 2837: )
Line 2837: ;
Line 2838: ID = continue
Line 2838: ;
Line 2839: }
Line 2840: }
Line 2840: else
Line 2840: {
Line 2841: ID = bh
Line 2841: -
Line 2841: >
Line 2841: ID = b_end_io
Line 2841: =
Line 2841: ID = end_buffer_read_sync
Line 2841: ;
Line 2842: if
Line 2842: (
Line 2842: !
Line 2842: ID = buffer_uptodate
Line 2842: (
Line 2842: ID = bh
Line 2842: )
Line 2842: )
Line 2842: {
Line 2843: ID = submit_bh
Line 2843: (
Line 2843: ID = rw
Line 2843: ,
Line 2843: ID = bh
Line 2843: )
Line 2843: ;
Line 2844: ID = continue
Line 2844: ;
Line 2845: }
Line 2846: }
Line 2847: ID = unlock_buffer
Line 2847: (
Line 2847: ID = bh
Line 2847: )
Line 2847: ;
Line 2848: ID = put_bh
Line 2848: (
Line 2848: ID = bh
Line 2848: )
Line 2848: ;
Line 2849: }
Line 2850: }
Line 2856: void
Line 2856: ID = sync_dirty_buffer
Line 2856: (
Line 2856: ID = struct
Line 2856: ID = buffer_head
Line 2856: *
Line 2856: ID = bh
Line 2856: )
Line 2857: {
Line 2858: ID = WARN_ON
Line 2858: (
Line 2858: ID = atomic_read
Line 2858: (
Line 2858: Unrecognized token: 38
Line 2858: ID = bh
Line 2858: -
Line 2858: >
Line 2858: ID = b_count
Line 2858: )
Line 2858: <
Line 2858: INTCON = 1
Line 2858: )
Line 2858: ;
Line 2859: ID = lock_buffer
Line 2859: (
Line 2859: ID = bh
Line 2859: )
Line 2859: ;
Line 2860: if
Line 2860: (
Line 2860: ID = test_clear_buffer_dirty
Line 2860: (
Line 2860: ID = bh
Line 2860: )
Line 2860: )
Line 2860: {
Line 2861: ID = get_bh
Line 2861: (
Line 2861: ID = bh
Line 2861: )
Line 2861: ;
Line 2862: ID = bh
Line 2862: -
Line 2862: >
Line 2862: ID = b_end_io
Line 2862: =
Line 2862: ID = end_buffer_write_sync
Line 2862: ;
Line 2863: ID = submit_bh
Line 2863: (
Line 2863: ID = WRITE
Line 2863: ,
Line 2863: ID = bh
Line 2863: )
Line 2863: ;
Line 2864: ID = wait_on_buffer
Line 2864: (
Line 2864: ID = bh
Line 2864: )
Line 2864: ;
Line 2865: }
Line 2865: else
Line 2865: {
Line 2866: ID = unlock_buffer
Line 2866: (
Line 2866: ID = bh
Line 2866: )
Line 2866: ;
Line 2867: }
Line 2868: }
Line 2890: ID = static
Line 2890: ID = inline
Line 2890: int
Line 2890: ID = buffer_busy
Line 2890: (
Line 2890: ID = struct
Line 2890: ID = buffer_head
Line 2890: *
Line 2890: ID = bh
Line 2890: )
Line 2891: {
Line 2892: return
Line 2892: ID = atomic_read
Line 2892: (
Line 2892: Unrecognized token: 38
Line 2892: ID = bh
Line 2892: -
Line 2892: >
Line 2892: ID = b_count
Line 2892: )
Line 2892: Unrecognized token: 124
Line 2893: (
Line 2893: ID = bh
Line 2893: -
Line 2893: >
Line 2893: ID = b_state
Line 2893: Unrecognized token: 38
Line 2893: (
Line 2893: (
Line 2893: INTCON = 1
Line 2893: <
Line 2893: <
Line 2893: ID = BH_Dirty
Line 2893: )
Line 2893: Unrecognized token: 124
Line 2893: (
Line 2893: INTCON = 1
Line 2893: <
Line 2893: <
Line 2893: ID = BH_Lock
Line 2893: )
Line 2893: )
Line 2893: )
Line 2893: ;
Line 2894: }
Line 2896: ID = static
Line 2896: int
Line 2897: ID = drop_buffers
Line 2897: (
Line 2897: ID = struct
Line 2897: ID = page
Line 2897: *
Line 2897: ID = page
Line 2897: ,
Line 2897: ID = struct
Line 2897: ID = buffer_head
Line 2897: *
Line 2897: *
Line 2897: ID = buffers_to_free
Line 2897: )
Line 2898: {
Line 2899: ID = struct
Line 2899: ID = buffer_head
Line 2899: *
Line 2899: ID = head
Line 2899: =
Line 2899: ID = page_buffers
Line 2899: (
Line 2899: ID = page
Line 2899: )
Line 2899: ;
Line 2900: ID = struct
Line 2900: ID = buffer_head
Line 2900: *
Line 2900: ID = bh
Line 2900: ;
Line 2902: ID = bh
Line 2902: =
Line 2902: ID = head
Line 2902: ;
Line 2903: ID = do
Line 2903: {
Line 2904: if
Line 2904: (
Line 2904: ID = buffer_write_io_error
Line 2904: (
Line 2904: ID = bh
Line 2904: )
Line 2904: )
Line 2905: ID = set_bit
Line 2905: (
Line 2905: ID = AS_EIO
Line 2905: ,
Line 2905: Unrecognized token: 38
Line 2905: ID = page
Line 2905: -
Line 2905: >
Line 2905: ID = mapping
Line 2905: -
Line 2905: >
Line 2905: ID = flags
Line 2905: )
Line 2905: ;
Line 2906: if
Line 2906: (
Line 2906: ID = buffer_busy
Line 2906: (
Line 2906: ID = bh
Line 2906: )
Line 2906: )
Line 2907: ID = goto
Line 2907: ID = failed
Line 2907: ;
Line 2908: ID = bh
Line 2908: =
Line 2908: ID = bh
Line 2908: -
Line 2908: >
Line 2908: ID = b_this_page
Line 2908: ;
Line 2909: }
Line 2909: while
Line 2909: (
Line 2909: ID = bh
Line 2909: !=
Line 2909: ID = head
Line 2909: )
Line 2909: ;
Line 2911: ID = do
Line 2911: {
Line 2912: ID = struct
Line 2912: ID = buffer_head
Line 2912: *
Line 2912: ID = next
Line 2912: =
Line 2912: ID = bh
Line 2912: -
Line 2912: >
Line 2912: ID = b_this_page
Line 2912: ;
Line 2914: if
Line 2914: (
Line 2914: !
Line 2914: ID = list_empty
Line 2914: (
Line 2914: Unrecognized token: 38
Line 2914: ID = bh
Line 2914: -
Line 2914: >
Line 2914: ID = b_assoc_buffers
Line 2914: )
Line 2914: )
Line 2915: Unrecognized token: 95
Line 2915: Unrecognized token: 95
Line 2915: ID = remove_assoc_queue
Line 2915: (
Line 2915: ID = bh
Line 2915: )
Line 2915: ;
Line 2916: ID = bh
Line 2916: =
Line 2916: ID = next
Line 2916: ;
Line 2917: }
Line 2917: while
Line 2917: (
Line 2917: ID = bh
Line 2917: !=
Line 2917: ID = head
Line 2917: )
Line 2917: ;
Line 2918: *
Line 2918: ID = buffers_to_free
Line 2918: =
Line 2918: ID = head
Line 2918: ;
Line 2919: Unrecognized token: 95
Line 2919: Unrecognized token: 95
Line 2919: ID = clear_page_buffers
Line 2919: (
Line 2919: ID = page
Line 2919: )
Line 2919: ;
Line 2920: return
Line 2920: INTCON = 1
Line 2920: ;
Line 2921: ID = failed
Line 2921: Unrecognized token: 58
Line 2922: return
Line 2922: INTCON = 0
Line 2922: ;
Line 2923: }
Line 2925: int
Line 2925: ID = try_to_free_buffers
Line 2925: (
Line 2925: ID = struct
Line 2925: ID = page
Line 2925: *
Line 2925: ID = page
Line 2925: )
Line 2926: {
Line 2927: ID = struct
Line 2927: ID = address_space
Line 2927: *
Line 2927: ID = const
Line 2927: ID = mapping
Line 2927: =
Line 2927: ID = page
Line 2927: -
Line 2927: >
Line 2927: ID = mapping
Line 2927: ;
Line 2928: ID = struct
Line 2928: ID = buffer_head
Line 2928: *
Line 2928: ID = buffers_to_free
Line 2928: =
Line 2928: ID = NULL
Line 2928: ;
Line 2929: int
Line 2929: ID = ret
Line 2929: =
Line 2929: INTCON = 0
Line 2929: ;
Line 2931: ID = BUG_ON
Line 2931: (
Line 2931: !
Line 2931: ID = PageLocked
Line 2931: (
Line 2931: ID = page
Line 2931: )
Line 2931: )
Line 2931: ;
Line 2932: if
Line 2932: (
Line 2932: ID = PageWriteback
Line 2932: (
Line 2932: ID = page
Line 2932: )
Line 2932: )
Line 2933: return
Line 2933: INTCON = 0
Line 2933: ;
Line 2935: if
Line 2935: (
Line 2935: ID = mapping
Line 2935: ==
Line 2935: ID = NULL
Line 2935: )
Line 2935: {
Line 2936: ID = ret
Line 2936: =
Line 2936: ID = drop_buffers
Line 2936: (
Line 2936: ID = page
Line 2936: ,
Line 2936: Unrecognized token: 38
Line 2936: ID = buffers_to_free
Line 2936: )
Line 2936: ;
Line 2937: ID = goto
Line 2937: ID = out
Line 2937: ;
Line 2938: }
Line 2940: ID = spin_lock
Line 2940: (
Line 2940: Unrecognized token: 38
Line 2940: ID = mapping
Line 2940: -
Line 2940: >
Line 2940: ID = private_lock
Line 2940: )
Line 2940: ;
Line 2941: ID = ret
Line 2941: =
Line 2941: ID = drop_buffers
Line 2941: (
Line 2941: ID = page
Line 2941: ,
Line 2941: Unrecognized token: 38
Line 2941: ID = buffers_to_free
Line 2941: )
Line 2941: ;
Line 2942: if
Line 2942: (
Line 2942: ID = ret
Line 2942: )
Line 2942: {
Line 2951: ID = clear_page_dirty
Line 2951: (
Line 2951: ID = page
Line 2951: )
Line 2951: ;
Line 2952: }
Line 2953: ID = spin_unlock
Line 2953: (
Line 2953: Unrecognized token: 38
Line 2953: ID = mapping
Line 2953: -
Line 2953: >
Line 2953: ID = private_lock
Line 2953: )
Line 2953: ;
Line 2954: ID = out
Line 2954: Unrecognized token: 58
Line 2955: if
Line 2955: (
Line 2955: ID = buffers_to_free
Line 2955: )
Line 2955: {
Line 2956: ID = struct
Line 2956: ID = buffer_head
Line 2956: *
Line 2956: ID = bh
Line 2956: =
Line 2956: ID = buffers_to_free
Line 2956: ;
Line 2958: ID = do
Line 2958: {
Line 2959: ID = struct
Line 2959: ID = buffer_head
Line 2959: *
Line 2959: ID = next
Line 2959: =
Line 2959: ID = bh
Line 2959: -
Line 2959: >
Line 2959: ID = b_this_page
Line 2959: ;
Line 2960: ID = free_buffer_head
Line 2960: (
Line 2960: ID = bh
Line 2960: )
Line 2960: ;
Line 2961: ID = bh
Line 2961: =
Line 2961: ID = next
Line 2961: ;
Line 2962: }
Line 2962: while
Line 2962: (
Line 2962: ID = bh
Line 2962: !=
Line 2962: ID = buffers_to_free
Line 2962: )
Line 2962: ;
Line 2963: }
Line 2964: return
Line 2964: ID = ret
Line 2964: ;
Line 2965: }
Line 2966: ID = EXPORT_SYMBOL
Line 2966: (
Line 2966: ID = try_to_free_buffers
Line 2966: )
Line 2966: ;
Line 2968: int
Line 2968: ID = block_sync_page
Line 2968: (
Line 2968: ID = struct
Line 2968: ID = page
Line 2968: *
Line 2968: ID = page
Line 2968: )
Line 2969: {
Line 2970: ID = struct
Line 2970: ID = address_space
Line 2970: *
Line 2970: ID = mapping
Line 2970: ;
Line 2972: ID = smp_mb
Line 2972: (
Line 2972: )
Line 2972: ;
Line 2973: ID = mapping
Line 2973: =
Line 2973: ID = page_mapping
Line 2973: (
Line 2973: ID = page
Line 2973: )
Line 2973: ;
Line 2974: if
Line 2974: (
Line 2974: ID = mapping
Line 2974: )
Line 2975: ID = blk_run_backing_dev
Line 2975: (
Line 2975: ID = mapping
Line 2975: -
Line 2975: >
Line 2975: ID = backing_dev_info
Line 2975: ,
Line 2975: ID = page
Line 2975: )
Line 2975: ;
Line 2976: return
Line 2976: INTCON = 0
Line 2976: ;
Line 2977: }
Line 2986: ID = asmlinkage
Line 2986: ID = long
Line 2986: ID = sys_bdflush
Line 2986: (
Line 2986: int
Line 2986: ID = func
Line 2986: ,
Line 2986: ID = long
Line 2986: ID = data
Line 2986: )
Line 2987: {
Line 2988: ID = static
Line 2988: int
Line 2988: ID = msg_count
Line 2988: ;
Line 2990: if
Line 2990: (
Line 2990: !
Line 2990: ID = capable
Line 2990: (
Line 2990: ID = CAP_SYS_ADMIN
Line 2990: )
Line 2990: )
Line 2991: return
Line 2991: -
Line 2991: ID = EPERM
Line 2991: ;
Line 2993: if
Line 2993: (
Line 2993: ID = msg_count
Line 2993: <
Line 2993: INTCON = 5
Line 2993: )
Line 2993: {
Line 2994: ID = msg_count
Line 2994: +
Line 2994: +
Line 2994: ;
Line 2995: ID = printk
Line 2995: (
Line 2995: ID = KERN_INFO
Line 2996: STRINGCON = "warning: process `%s' used the obsolete bdflush"
Line 2997: STRINGCON = " system call\n"
Line 2997: ,
Line 2997: ID = current
Line 2997: -
Line 2997: >
Line 2997: ID = comm
Line 2997: )
Line 2997: ;
Line 2998: ID = printk
Line 2998: (
Line 2998: ID = KERN_INFO
Line 2998: STRINGCON = "Fix your initscripts?\n"
Line 2998: )
Line 2998: ;
Line 2999: }
Line 3001: if
Line 3001: (
Line 3001: ID = func
Line 3001: ==
Line 3001: INTCON = 1
Line 3001: )
Line 3002: ID = do_exit
Line 3002: (
Line 3002: INTCON = 0
Line 3002: )
Line 3002: ;
Line 3003: return
Line 3003: INTCON = 0
Line 3003: ;
Line 3004: }
Line 3009: ID = static
Line 3009: ID = kmem_cache_t
Line 3009: *
Line 3009: ID = bh_cachep
Line 3009: ;
Line 3015: ID = static
Line 3015: int
Line 3015: ID = max_buffer_heads
Line 3015: ;
Line 3017: int
Line 3017: ID = buffer_heads_over_limit
Line 3017: ;
Line 3019: ID = struct
Line 3019: ID = bh_accounting
Line 3019: {
Line 3020: int
Line 3020: ID = nr
Line 3020: ;
Line 3021: int
Line 3021: ID = ratelimit
Line 3021: ;
Line 3022: }
Line 3022: ;
Line 3024: ID = static
Line 3024: ID = DEFINE_PER_CPU
Line 3024: (
Line 3024: ID = struct
Line 3024: ID = bh_accounting
Line 3024: ,
Line 3024: ID = bh_accounting
Line 3024: )
Line 3024: =
Line 3024: {
Line 3024: INTCON = 0
Line 3024: ,
Line 3024: INTCON = 0
Line 3024: }
Line 3024: ;
Line 3026: ID = static
Line 3026: void
Line 3026: ID = recalc_bh_state
Line 3026: (
Line 3026: void
Line 3026: )
Line 3027: {
Line 3028: int
Line 3028: ID = i
Line 3028: ;
Line 3029: int
Line 3029: ID = tot
Line 3029: =
Line 3029: INTCON = 0
Line 3029: ;
Line 3031: if
Line 3031: (
Line 3031: Unrecognized token: 95
Line 3031: Unrecognized token: 95
Line 3031: ID = get_cpu_var
Line 3031: (
Line 3031: ID = bh_accounting
Line 3031: )
Line 3031: Unrecognized token: 46
Line 3031: ID = ratelimit
Line 3031: +
Line 3031: +
Line 3031: <
Line 3031: INTCON = 4096
Line 3031: )
Line 3032: return
Line 3032: ;
Line 3033: Unrecognized token: 95
Line 3033: Unrecognized token: 95
Line 3033: ID = get_cpu_var
Line 3033: (
Line 3033: ID = bh_accounting
Line 3033: )
Line 3033: Unrecognized token: 46
Line 3033: ID = ratelimit
Line 3033: =
Line 3033: INTCON = 0
Line 3033: ;
Line 3034: ID = for_each_cpu
Line 3034: (
Line 3034: ID = i
Line 3034: )
Line 3035: ID = tot
Line 3035: +
Line 3035: =
Line 3035: ID = per_cpu
Line 3035: (
Line 3035: ID = bh_accounting
Line 3035: ,
Line 3035: ID = i
Line 3035: )
Line 3035: Unrecognized token: 46
Line 3035: ID = nr
Line 3035: ;
Line 3036: ID = buffer_heads_over_limit
Line 3036: =
Line 3036: (
Line 3036: ID = tot
Line 3036: >
Line 3036: ID = max_buffer_heads
Line 3036: )
Line 3036: ;
Line 3037: }
Line 3039: ID = struct
Line 3039: ID = buffer_head
Line 3039: *
Line 3039: ID = alloc_buffer_head
Line 3039: (
Line 3039: int
Line 3039: ID = gfp_flags
Line 3039: )
Line 3040: {
Line 3041: ID = struct
Line 3041: ID = buffer_head
Line 3041: *
Line 3041: ID = ret
Line 3041: =
Line 3041: ID = kmem_cache_alloc
Line 3041: (
Line 3041: ID = bh_cachep
Line 3041: ,
Line 3041: ID = gfp_flags
Line 3041: )
Line 3041: ;
Line 3042: if
Line 3042: (
Line 3042: ID = ret
Line 3042: )
Line 3042: {
Line 3043: ID = preempt_disable
Line 3043: (
Line 3043: )
Line 3043: ;
Line 3044: Unrecognized token: 95
Line 3044: Unrecognized token: 95
Line 3044: ID = get_cpu_var
Line 3044: (
Line 3044: ID = bh_accounting
Line 3044: )
Line 3044: Unrecognized token: 46
Line 3044: ID = nr
Line 3044: +
Line 3044: +
Line 3044: ;
Line 3045: ID = recalc_bh_state
Line 3045: (
Line 3045: )
Line 3045: ;
Line 3046: ID = preempt_enable
Line 3046: (
Line 3046: )
Line 3046: ;
Line 3047: }
Line 3048: return
Line 3048: ID = ret
Line 3048: ;
Line 3049: }
Line 3050: ID = EXPORT_SYMBOL
Line 3050: (
Line 3050: ID = alloc_buffer_head
Line 3050: )
Line 3050: ;
Line 3052: void
Line 3052: ID = free_buffer_head
Line 3052: (
Line 3052: ID = struct
Line 3052: ID = buffer_head
Line 3052: *
Line 3052: ID = bh
Line 3052: )
Line 3053: {
Line 3054: ID = BUG_ON
Line 3054: (
Line 3054: !
Line 3054: ID = list_empty
Line 3054: (
Line 3054: Unrecognized token: 38
Line 3054: ID = bh
Line 3054: -
Line 3054: >
Line 3054: ID = b_assoc_buffers
Line 3054: )
Line 3054: )
Line 3054: ;
Line 3055: ID = kmem_cache_free
Line 3055: (
Line 3055: ID = bh_cachep
Line 3055: ,
Line 3055: ID = bh
Line 3055: )
Line 3055: ;
Line 3056: ID = preempt_disable
Line 3056: (
Line 3056: )
Line 3056: ;
Line 3057: Unrecognized token: 95
Line 3057: Unrecognized token: 95
Line 3057: ID = get_cpu_var
Line 3057: (
Line 3057: ID = bh_accounting
Line 3057: )
Line 3057: Unrecognized token: 46
Line 3057: ID = nr
Line 3057: -
Line 3057: -
Line 3057: ;
Line 3058: ID = recalc_bh_state
Line 3058: (
Line 3058: )
Line 3058: ;
Line 3059: ID = preempt_enable
Line 3059: (
Line 3059: )
Line 3059: ;
Line 3060: }
Line 3061: ID = EXPORT_SYMBOL
Line 3061: (
Line 3061: ID = free_buffer_head
Line 3061: )
Line 3061: ;
Line 3063: ID = static
Line 3063: void
Line 3064: ID = init_buffer_head
Line 3064: (
Line 3064: void
Line 3064: *
Line 3064: ID = data
Line 3064: ,
Line 3064: ID = kmem_cache_t
Line 3064: *
Line 3064: ID = cachep
Line 3064: ,
Line 3064: ID = unsigned
Line 3064: ID = long
Line 3064: ID = flags
Line 3064: )
Line 3065: {
Line 3066: if
Line 3066: (
Line 3066: (
Line 3066: ID = flags
Line 3066: Unrecognized token: 38
Line 3066: (
Line 3066: ID = SLAB_CTOR_VERIFY
Line 3066: Unrecognized token: 124
Line 3066: ID = SLAB_CTOR_CONSTRUCTOR
Line 3066: )
Line 3066: )
Line 3066: ==
Line 3067: ID = SLAB_CTOR_CONSTRUCTOR
Line 3067: )
Line 3067: {
Line 3068: ID = struct
Line 3068: ID = buffer_head
Line 3068: *
Line 3068: ID = bh
Line 3068: =
Line 3068: (
Line 3068: ID = struct
Line 3068: ID = buffer_head
Line 3068: *
Line 3068: )
Line 3068: ID = data
Line 3068: ;
Line 3070: ID = memset
Line 3070: (
Line 3070: ID = bh
Line 3070: ,
Line 3070: INTCON = 0
Line 3070: ,
Line 3070: ID = sizeof
Line 3070: (
Line 3070: *
Line 3070: ID = bh
Line 3070: )
Line 3070: )
Line 3070: ;
Line 3071: ID = INIT_LIST_HEAD
Line 3071: (
Line 3071: Unrecognized token: 38
Line 3071: ID = bh
Line 3071: -
Line 3071: >
Line 3071: ID = b_assoc_buffers
Line 3071: )
Line 3071: ;
Line 3072: }
Line 3073: }
Line 3075: Unrecognized token: 35
Line 3075: ID = ifdef
Line 3075: ID = CONFIG_HOTPLUG_CPU
Line 3076: ID = static
Line 3076: void
Line 3076: ID = buffer_exit_cpu
Line 3076: (
Line 3076: int
Line 3076: ID = cpu
Line 3076: )
Line 3077: {
Line 3078: int
Line 3078: ID = i
Line 3078: ;
Line 3079: ID = struct
Line 3079: ID = bh_lru
Line 3079: *
Line 3079: ID = b
Line 3079: =
Line 3079: Unrecognized token: 38
Line 3079: ID = per_cpu
Line 3079: (
Line 3079: ID = bh_lrus
Line 3079: ,
Line 3079: ID = cpu
Line 3079: )
Line 3079: ;
Line 3081: for
Line 3081: (
Line 3081: ID = i
Line 3081: =
Line 3081: INTCON = 0
Line 3081: ;
Line 3081: ID = i
Line 3081: <
Line 3081: ID = BH_LRU_SIZE
Line 3081: ;
Line 3081: ID = i
Line 3081: +
Line 3081: +
Line 3081: )
Line 3081: {
Line 3082: ID = brelse
Line 3082: (
Line 3082: ID = b
Line 3082: -
Line 3082: >
Line 3082: ID = bhs
Line 3082: [
Line 3082: ID = i
Line 3082: ]
Line 3082: )
Line 3082: ;
Line 3083: ID = b
Line 3083: -
Line 3083: >
Line 3083: ID = bhs
Line 3083: [
Line 3083: ID = i
Line 3083: ]
Line 3083: =
Line 3083: ID = NULL
Line 3083: ;
Line 3084: }
Line 3085: }
Line 3087: ID = static
Line 3087: int
Line 3087: ID = buffer_cpu_notify
Line 3087: (
Line 3087: ID = struct
Line 3087: ID = notifier_block
Line 3087: *
Line 3087: ID = self
Line 3087: ,
Line 3088: ID = unsigned
Line 3088: ID = long
Line 3088: ID = action
Line 3088: ,
Line 3088: void
Line 3088: *
Line 3088: ID = hcpu
Line 3088: )
Line 3089: {
Line 3090: if
Line 3090: (
Line 3090: ID = action
Line 3090: ==
Line 3090: ID = CPU_DEAD
Line 3090: )
Line 3091: ID = buffer_exit_cpu
Line 3091: (
Line 3091: (
Line 3091: ID = unsigned
Line 3091: ID = long
Line 3091: )
Line 3091: ID = hcpu
Line 3091: )
Line 3091: ;
Line 3092: return
Line 3092: ID = NOTIFY_OK
Line 3092: ;
Line 3093: }
Line 3094: Unrecognized token: 35
Line 3094: ID = endif
Line 3096: void
Line 3096: Unrecognized token: 95
Line 3096: Unrecognized token: 95
Line 3096: ID = init
Line 3096: ID = buffer_init
Line 3096: (
Line 3096: void
Line 3096: )
Line 3097: {
Line 3098: int
Line 3098: ID = i
Line 3098: ;
Line 3099: int
Line 3099: ID = nrpages
Line 3099: ;
Line 3101: ID = bh_cachep
Line 3101: =
Line 3101: ID = kmem_cache_create
Line 3101: (
Line 3101: STRINGCON = "buffer_head"
Line 3101: ,
Line 3102: ID = sizeof
Line 3102: (
Line 3102: ID = struct
Line 3102: ID = buffer_head
Line 3102: )
Line 3102: ,
Line 3102: INTCON = 0
Line 3102: ,
Line 3103: ID = SLAB_PANIC
Line 3103: ,
Line 3103: ID = init_buffer_head
Line 3103: ,
Line 3103: ID = NULL
Line 3103: )
Line 3103: ;
Line 3104: for
Line 3104: (
Line 3104: ID = i
Line 3104: =
Line 3104: INTCON = 0
Line 3104: ;
Line 3104: ID = i
Line 3104: <
Line 3104: ID = ARRAY_SIZE
Line 3104: (
Line 3104: ID = bh_wait_queue_heads
Line 3104: )
Line 3104: ;
Line 3104: ID = i
Line 3104: +
Line 3104: +
Line 3104: )
Line 3105: ID = init_waitqueue_head
Line 3105: (
Line 3105: Unrecognized token: 38
Line 3105: ID = bh_wait_queue_heads
Line 3105: [
Line 3105: ID = i
Line 3105: ]
Line 3105: Unrecognized token: 46
Line 3105: ID = wqh
Line 3105: )
Line 3105: ;
Line 3110: ID = nrpages
Line 3110: =
Line 3110: (
Line 3110: ID = nr_free_buffer_pages
Line 3110: (
Line 3110: )
Line 3110: *
Line 3110: INTCON = 10
Line 3110: )
Line 3110: /
Line 3110: INTCON = 100
Line 3110: ;
Line 3111: ID = max_buffer_heads
Line 3111: =
Line 3111: ID = nrpages
Line 3111: *
Line 3111: (
Line 3111: ID = PAGE_SIZE
Line 3111: /
Line 3111: ID = sizeof
Line 3111: (
Line 3111: ID = struct
Line 3111: ID = buffer_head
Line 3111: )
Line 3111: )
Line 3111: ;
Line 3112: ID = hotcpu_notifier
Line 3112: (
Line 3112: ID = buffer_cpu_notify
Line 3112: ,
Line 3112: INTCON = 0
Line 3112: )
Line 3112: ;
Line 3113: }
Line 3115: ID = EXPORT_SYMBOL
Line 3115: (
Line 3115: Unrecognized token: 95
Line 3115: Unrecognized token: 95
Line 3115: ID = bforget
Line 3115: )
Line 3115: ;
Line 3116: ID = EXPORT_SYMBOL
Line 3116: (
Line 3116: Unrecognized token: 95
Line 3116: Unrecognized token: 95
Line 3116: ID = brelse
Line 3116: )
Line 3116: ;
Line 3117: ID = EXPORT_SYMBOL
Line 3117: (
Line 3117: Unrecognized token: 95
Line 3117: Unrecognized token: 95
Line 3117: ID = wait_on_buffer
Line 3117: )
Line 3117: ;
Line 3118: ID = EXPORT_SYMBOL
Line 3118: (
Line 3118: ID = block_commit_write
Line 3118: )
Line 3118: ;
Line 3119: ID = EXPORT_SYMBOL
Line 3119: (
Line 3119: ID = block_prepare_write
Line 3119: )
Line 3119: ;
Line 3120: ID = EXPORT_SYMBOL
Line 3120: (
Line 3120: ID = block_read_full_page
Line 3120: )
Line 3120: ;
Line 3121: ID = EXPORT_SYMBOL
Line 3121: (
Line 3121: ID = block_sync_page
Line 3121: )
Line 3121: ;
Line 3122: ID = EXPORT_SYMBOL
Line 3122: (
Line 3122: ID = block_truncate_page
Line 3122: )
Line 3122: ;
Line 3123: ID = EXPORT_SYMBOL
Line 3123: (
Line 3123: ID = block_write_full_page
Line 3123: )
Line 3123: ;
Line 3124: ID = EXPORT_SYMBOL
Line 3124: (
Line 3124: ID = buffer_insert_list
Line 3124: )
Line 3124: ;
Line 3125: ID = EXPORT_SYMBOL
Line 3125: (
Line 3125: ID = cont_prepare_write
Line 3125: )
Line 3125: ;
Line 3126: ID = EXPORT_SYMBOL
Line 3126: (
Line 3126: ID = end_buffer_async_write
Line 3126: )
Line 3126: ;
Line 3127: ID = EXPORT_SYMBOL
Line 3127: (
Line 3127: ID = end_buffer_read_sync
Line 3127: )
Line 3127: ;
Line 3128: ID = EXPORT_SYMBOL
Line 3128: (
Line 3128: ID = end_buffer_write_sync
Line 3128: )
Line 3128: ;
Line 3129: ID = EXPORT_SYMBOL
Line 3129: (
Line 3129: ID = file_fsync
Line 3129: )
Line 3129: ;
Line 3130: ID = EXPORT_SYMBOL
Line 3130: (
Line 3130: ID = fsync_bdev
Line 3130: )
Line 3130: ;
Line 3131: ID = EXPORT_SYMBOL
Line 3131: (
Line 3131: ID = fsync_buffers_list
Line 3131: )
Line 3131: ;
Line 3132: ID = EXPORT_SYMBOL
Line 3132: (
Line 3132: ID = generic_block_bmap
Line 3132: )
Line 3132: ;
Line 3133: ID = EXPORT_SYMBOL
Line 3133: (
Line 3133: ID = generic_commit_write
Line 3133: )
Line 3133: ;
Line 3134: ID = EXPORT_SYMBOL
Line 3134: (
Line 3134: ID = generic_cont_expand
Line 3134: )
Line 3134: ;
Line 3135: ID = EXPORT_SYMBOL
Line 3135: (
Line 3135: ID = init_buffer
Line 3135: )
Line 3135: ;
Line 3136: ID = EXPORT_SYMBOL
Line 3136: (
Line 3136: ID = invalidate_bdev
Line 3136: )
Line 3136: ;
Line 3137: ID = EXPORT_SYMBOL
Line 3137: (
Line 3137: ID = ll_rw_block
Line 3137: )
Line 3137: ;
Line 3138: ID = EXPORT_SYMBOL
Line 3138: (
Line 3138: ID = mark_buffer_dirty
Line 3138: )
Line 3138: ;
Line 3139: ID = EXPORT_SYMBOL
Line 3139: (
Line 3139: ID = submit_bh
Line 3139: )
Line 3139: ;
Line 3140: ID = EXPORT_SYMBOL
Line 3140: (
Line 3140: ID = sync_dirty_buffer
Line 3140: )
Line 3140: ;
Line 3141: ID = EXPORT_SYMBOL
Line 3141: (
Line 3141: ID = unlock_buffer
Line 3141: )
Line 3141: ;
Line 3142: -EOF-

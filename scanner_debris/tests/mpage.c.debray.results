Line 15: Unrecognized token: 35
Line 15: ID = include
Line 15: <
Line 15: ID = linux
Line 15: /
Line 15: ID = kernel
Line 15: Unrecognized token: 46
Line 15: ID = h
Line 15: >
Line 16: Unrecognized token: 35
Line 16: ID = include
Line 16: <
Line 16: ID = linux
Line 16: /
Line 16: ID = module
Line 16: Unrecognized token: 46
Line 16: ID = h
Line 16: >
Line 17: Unrecognized token: 35
Line 17: ID = include
Line 17: <
Line 17: ID = linux
Line 17: /
Line 17: ID = mm
Line 17: Unrecognized token: 46
Line 17: ID = h
Line 17: >
Line 18: Unrecognized token: 35
Line 18: ID = include
Line 18: <
Line 18: ID = linux
Line 18: /
Line 18: ID = kdev_t
Line 18: Unrecognized token: 46
Line 18: ID = h
Line 18: >
Line 19: Unrecognized token: 35
Line 19: ID = include
Line 19: <
Line 19: ID = linux
Line 19: /
Line 19: ID = bio
Line 19: Unrecognized token: 46
Line 19: ID = h
Line 19: >
Line 20: Unrecognized token: 35
Line 20: ID = include
Line 20: <
Line 20: ID = linux
Line 20: /
Line 20: ID = fs
Line 20: Unrecognized token: 46
Line 20: ID = h
Line 20: >
Line 21: Unrecognized token: 35
Line 21: ID = include
Line 21: <
Line 21: ID = linux
Line 21: /
Line 21: ID = buffer_head
Line 21: Unrecognized token: 46
Line 21: ID = h
Line 21: >
Line 22: Unrecognized token: 35
Line 22: ID = include
Line 22: <
Line 22: ID = linux
Line 22: /
Line 22: ID = blkdev
Line 22: Unrecognized token: 46
Line 22: ID = h
Line 22: >
Line 23: Unrecognized token: 35
Line 23: ID = include
Line 23: <
Line 23: ID = linux
Line 23: /
Line 23: ID = highmem
Line 23: Unrecognized token: 46
Line 23: ID = h
Line 23: >
Line 24: Unrecognized token: 35
Line 24: ID = include
Line 24: <
Line 24: ID = linux
Line 24: /
Line 24: ID = prefetch
Line 24: Unrecognized token: 46
Line 24: ID = h
Line 24: >
Line 25: Unrecognized token: 35
Line 25: ID = include
Line 25: <
Line 25: ID = linux
Line 25: /
Line 25: ID = mpage
Line 25: Unrecognized token: 46
Line 25: ID = h
Line 25: >
Line 26: Unrecognized token: 35
Line 26: ID = include
Line 26: <
Line 26: ID = linux
Line 26: /
Line 26: ID = writeback
Line 26: Unrecognized token: 46
Line 26: ID = h
Line 26: >
Line 27: Unrecognized token: 35
Line 27: ID = include
Line 27: <
Line 27: ID = linux
Line 27: /
Line 27: ID = backing
Line 27: -
Line 27: ID = dev
Line 27: Unrecognized token: 46
Line 27: ID = h
Line 27: >
Line 28: Unrecognized token: 35
Line 28: ID = include
Line 28: <
Line 28: ID = linux
Line 28: /
Line 28: ID = pagevec
Line 28: Unrecognized token: 46
Line 28: ID = h
Line 28: >
Line 42: ID = static
Line 42: int
Line 42: ID = mpage_end_io_read
Line 42: (
Line 42: ID = struct
Line 42: ID = bio
Line 42: *
Line 42: ID = bio
Line 42: ,
Line 42: ID = unsigned
Line 42: int
Line 42: ID = bytes_done
Line 42: ,
Line 42: int
Line 42: ID = err
Line 42: )
Line 43: {
Line 44: ID = const
Line 44: int
Line 44: ID = uptodate
Line 44: =
Line 44: ID = test_bit
Line 44: (
Line 44: ID = BIO_UPTODATE
Line 44: ,
Line 44: Unrecognized token: 38
Line 44: ID = bio
Line 44: -
Line 44: >
Line 44: ID = bi_flags
Line 44: )
Line 44: ;
Line 45: ID = struct
Line 45: ID = bio_vec
Line 45: *
Line 45: ID = bvec
Line 45: =
Line 45: ID = bio
Line 45: -
Line 45: >
Line 45: ID = bi_io_vec
Line 45: +
Line 45: ID = bio
Line 45: -
Line 45: >
Line 45: ID = bi_vcnt
Line 45: -
Line 45: INTCON = 1
Line 45: ;
Line 47: if
Line 47: (
Line 47: ID = bio
Line 47: -
Line 47: >
Line 47: ID = bi_size
Line 47: )
Line 48: return
Line 48: INTCON = 1
Line 48: ;
Line 50: ID = do
Line 50: {
Line 51: ID = struct
Line 51: ID = page
Line 51: *
Line 51: ID = page
Line 51: =
Line 51: ID = bvec
Line 51: -
Line 51: >
Line 51: ID = bv_page
Line 51: ;
Line 53: if
Line 53: (
Line 53: -
Line 53: -
Line 53: ID = bvec
Line 53: >=
Line 53: ID = bio
Line 53: -
Line 53: >
Line 53: ID = bi_io_vec
Line 53: )
Line 54: ID = prefetchw
Line 54: (
Line 54: Unrecognized token: 38
Line 54: ID = bvec
Line 54: -
Line 54: >
Line 54: ID = bv_page
Line 54: -
Line 54: >
Line 54: ID = flags
Line 54: )
Line 54: ;
Line 56: if
Line 56: (
Line 56: ID = uptodate
Line 56: )
Line 56: {
Line 57: ID = SetPageUptodate
Line 57: (
Line 57: ID = page
Line 57: )
Line 57: ;
Line 58: }
Line 58: else
Line 58: {
Line 59: ID = ClearPageUptodate
Line 59: (
Line 59: ID = page
Line 59: )
Line 59: ;
Line 60: ID = SetPageError
Line 60: (
Line 60: ID = page
Line 60: )
Line 60: ;
Line 61: }
Line 62: ID = unlock_page
Line 62: (
Line 62: ID = page
Line 62: )
Line 62: ;
Line 63: }
Line 63: while
Line 63: (
Line 63: ID = bvec
Line 63: >=
Line 63: ID = bio
Line 63: -
Line 63: >
Line 63: ID = bi_io_vec
Line 63: )
Line 63: ;
Line 64: ID = bio_put
Line 64: (
Line 64: ID = bio
Line 64: )
Line 64: ;
Line 65: return
Line 65: INTCON = 0
Line 65: ;
Line 66: }
Line 68: ID = static
Line 68: int
Line 68: ID = mpage_end_io_write
Line 68: (
Line 68: ID = struct
Line 68: ID = bio
Line 68: *
Line 68: ID = bio
Line 68: ,
Line 68: ID = unsigned
Line 68: int
Line 68: ID = bytes_done
Line 68: ,
Line 68: int
Line 68: ID = err
Line 68: )
Line 69: {
Line 70: ID = const
Line 70: int
Line 70: ID = uptodate
Line 70: =
Line 70: ID = test_bit
Line 70: (
Line 70: ID = BIO_UPTODATE
Line 70: ,
Line 70: Unrecognized token: 38
Line 70: ID = bio
Line 70: -
Line 70: >
Line 70: ID = bi_flags
Line 70: )
Line 70: ;
Line 71: ID = struct
Line 71: ID = bio_vec
Line 71: *
Line 71: ID = bvec
Line 71: =
Line 71: ID = bio
Line 71: -
Line 71: >
Line 71: ID = bi_io_vec
Line 71: +
Line 71: ID = bio
Line 71: -
Line 71: >
Line 71: ID = bi_vcnt
Line 71: -
Line 71: INTCON = 1
Line 71: ;
Line 73: if
Line 73: (
Line 73: ID = bio
Line 73: -
Line 73: >
Line 73: ID = bi_size
Line 73: )
Line 74: return
Line 74: INTCON = 1
Line 74: ;
Line 76: ID = do
Line 76: {
Line 77: ID = struct
Line 77: ID = page
Line 77: *
Line 77: ID = page
Line 77: =
Line 77: ID = bvec
Line 77: -
Line 77: >
Line 77: ID = bv_page
Line 77: ;
Line 79: if
Line 79: (
Line 79: -
Line 79: -
Line 79: ID = bvec
Line 79: >=
Line 79: ID = bio
Line 79: -
Line 79: >
Line 79: ID = bi_io_vec
Line 79: )
Line 80: ID = prefetchw
Line 80: (
Line 80: Unrecognized token: 38
Line 80: ID = bvec
Line 80: -
Line 80: >
Line 80: ID = bv_page
Line 80: -
Line 80: >
Line 80: ID = flags
Line 80: )
Line 80: ;
Line 82: if
Line 82: (
Line 82: !
Line 82: ID = uptodate
Line 82: )
Line 83: ID = SetPageError
Line 83: (
Line 83: ID = page
Line 83: )
Line 83: ;
Line 84: ID = end_page_writeback
Line 84: (
Line 84: ID = page
Line 84: )
Line 84: ;
Line 85: }
Line 85: while
Line 85: (
Line 85: ID = bvec
Line 85: >=
Line 85: ID = bio
Line 85: -
Line 85: >
Line 85: ID = bi_io_vec
Line 85: )
Line 85: ;
Line 86: ID = bio_put
Line 86: (
Line 86: ID = bio
Line 86: )
Line 86: ;
Line 87: return
Line 87: INTCON = 0
Line 87: ;
Line 88: }
Line 90: ID = struct
Line 90: ID = bio
Line 90: *
Line 90: ID = mpage_bio_submit
Line 90: (
Line 90: int
Line 90: ID = rw
Line 90: ,
Line 90: ID = struct
Line 90: ID = bio
Line 90: *
Line 90: ID = bio
Line 90: )
Line 91: {
Line 92: ID = bio
Line 92: -
Line 92: >
Line 92: ID = bi_end_io
Line 92: =
Line 92: ID = mpage_end_io_read
Line 92: ;
Line 93: if
Line 93: (
Line 93: ID = rw
Line 93: ==
Line 93: ID = WRITE
Line 93: )
Line 94: ID = bio
Line 94: -
Line 94: >
Line 94: ID = bi_end_io
Line 94: =
Line 94: ID = mpage_end_io_write
Line 94: ;
Line 95: ID = submit_bio
Line 95: (
Line 95: ID = rw
Line 95: ,
Line 95: ID = bio
Line 95: )
Line 95: ;
Line 96: return
Line 96: ID = NULL
Line 96: ;
Line 97: }
Line 99: ID = static
Line 99: ID = struct
Line 99: ID = bio
Line 99: *
Line 100: ID = mpage_alloc
Line 100: (
Line 100: ID = struct
Line 100: ID = block_device
Line 100: *
Line 100: ID = bdev
Line 100: ,
Line 101: ID = sector_t
Line 101: ID = first_sector
Line 101: ,
Line 101: int
Line 101: ID = nr_vecs
Line 101: ,
Line 101: int
Line 101: ID = gfp_flags
Line 101: )
Line 102: {
Line 103: ID = struct
Line 103: ID = bio
Line 103: *
Line 103: ID = bio
Line 103: ;
Line 105: ID = bio
Line 105: =
Line 105: ID = bio_alloc
Line 105: (
Line 105: ID = gfp_flags
Line 105: ,
Line 105: ID = nr_vecs
Line 105: )
Line 105: ;
Line 107: if
Line 107: (
Line 107: ID = bio
Line 107: ==
Line 107: ID = NULL
Line 107: &&
Line 107: (
Line 107: ID = current
Line 107: -
Line 107: >
Line 107: ID = flags
Line 107: Unrecognized token: 38
Line 107: ID = PF_MEMALLOC
Line 107: )
Line 107: )
Line 107: {
Line 108: while
Line 108: (
Line 108: !
Line 108: ID = bio
Line 108: &&
Line 108: (
Line 108: ID = nr_vecs
Line 108: /
Line 108: =
Line 108: INTCON = 2
Line 108: )
Line 108: )
Line 109: ID = bio
Line 109: =
Line 109: ID = bio_alloc
Line 109: (
Line 109: ID = gfp_flags
Line 109: ,
Line 109: ID = nr_vecs
Line 109: )
Line 109: ;
Line 110: }
Line 112: if
Line 112: (
Line 112: ID = bio
Line 112: )
Line 112: {
Line 113: ID = bio
Line 113: -
Line 113: >
Line 113: ID = bi_bdev
Line 113: =
Line 113: ID = bdev
Line 113: ;
Line 114: ID = bio
Line 114: -
Line 114: >
Line 114: ID = bi_sector
Line 114: =
Line 114: ID = first_sector
Line 114: ;
Line 115: }
Line 116: return
Line 116: ID = bio
Line 116: ;
Line 117: }
Line 129: ID = static
Line 129: void
Line 130: ID = map_buffer_to_page
Line 130: (
Line 130: ID = struct
Line 130: ID = page
Line 130: *
Line 130: ID = page
Line 130: ,
Line 130: ID = struct
Line 130: ID = buffer_head
Line 130: *
Line 130: ID = bh
Line 130: ,
Line 130: int
Line 130: ID = page_block
Line 130: )
Line 131: {
Line 132: ID = struct
Line 132: ID = inode
Line 132: *
Line 132: ID = inode
Line 132: =
Line 132: ID = page
Line 132: -
Line 132: >
Line 132: ID = mapping
Line 132: -
Line 132: >
Line 132: ID = host
Line 132: ;
Line 133: ID = struct
Line 133: ID = buffer_head
Line 133: *
Line 133: ID = page_bh
Line 133: ,
Line 133: *
Line 133: ID = head
Line 133: ;
Line 134: int
Line 134: ID = block
Line 134: =
Line 134: INTCON = 0
Line 134: ;
Line 136: if
Line 136: (
Line 136: !
Line 136: ID = page_has_buffers
Line 136: (
Line 136: ID = page
Line 136: )
Line 136: )
Line 136: {
Line 141: if
Line 141: (
Line 141: ID = inode
Line 141: -
Line 141: >
Line 141: ID = i_blkbits
Line 141: ==
Line 141: ID = PAGE_CACHE_SHIFT
Line 141: &&
Line 142: ID = buffer_uptodate
Line 142: (
Line 142: ID = bh
Line 142: )
Line 142: )
Line 142: {
Line 143: ID = SetPageUptodate
Line 143: (
Line 143: ID = page
Line 143: )
Line 143: ;
Line 144: return
Line 144: ;
Line 145: }
Line 146: ID = create_empty_buffers
Line 146: (
Line 146: ID = page
Line 146: ,
Line 146: INTCON = 1
Line 146: <
Line 146: <
Line 146: ID = inode
Line 146: -
Line 146: >
Line 146: ID = i_blkbits
Line 146: ,
Line 146: INTCON = 0
Line 146: )
Line 146: ;
Line 147: }
Line 148: ID = head
Line 148: =
Line 148: ID = page_buffers
Line 148: (
Line 148: ID = page
Line 148: )
Line 148: ;
Line 149: ID = page_bh
Line 149: =
Line 149: ID = head
Line 149: ;
Line 150: ID = do
Line 150: {
Line 151: if
Line 151: (
Line 151: ID = block
Line 151: ==
Line 151: ID = page_block
Line 151: )
Line 151: {
Line 152: ID = page_bh
Line 152: -
Line 152: >
Line 152: ID = b_state
Line 152: =
Line 152: ID = bh
Line 152: -
Line 152: >
Line 152: ID = b_state
Line 152: ;
Line 153: ID = page_bh
Line 153: -
Line 153: >
Line 153: ID = b_bdev
Line 153: =
Line 153: ID = bh
Line 153: -
Line 153: >
Line 153: ID = b_bdev
Line 153: ;
Line 154: ID = page_bh
Line 154: -
Line 154: >
Line 154: ID = b_blocknr
Line 154: =
Line 154: ID = bh
Line 154: -
Line 154: >
Line 154: ID = b_blocknr
Line 154: ;
Line 155: ID = break
Line 155: ;
Line 156: }
Line 157: ID = page_bh
Line 157: =
Line 157: ID = page_bh
Line 157: -
Line 157: >
Line 157: ID = b_this_page
Line 157: ;
Line 158: ID = block
Line 158: +
Line 158: +
Line 158: ;
Line 159: }
Line 159: while
Line 159: (
Line 159: ID = page_bh
Line 159: !=
Line 159: ID = head
Line 159: )
Line 159: ;
Line 160: }
Line 208: ID = static
Line 208: ID = struct
Line 208: ID = bio
Line 208: *
Line 209: ID = do_mpage_readpage
Line 209: (
Line 209: ID = struct
Line 209: ID = bio
Line 209: *
Line 209: ID = bio
Line 209: ,
Line 209: ID = struct
Line 209: ID = page
Line 209: *
Line 209: ID = page
Line 209: ,
Line 209: ID = unsigned
Line 209: ID = nr_pages
Line 209: ,
Line 210: ID = sector_t
Line 210: *
Line 210: ID = last_block_in_bio
Line 210: ,
Line 210: ID = get_block_t
Line 210: ID = get_block
Line 210: )
Line 211: {
Line 212: ID = struct
Line 212: ID = inode
Line 212: *
Line 212: ID = inode
Line 212: =
Line 212: ID = page
Line 212: -
Line 212: >
Line 212: ID = mapping
Line 212: -
Line 212: >
Line 212: ID = host
Line 212: ;
Line 213: ID = const
Line 213: ID = unsigned
Line 213: ID = blkbits
Line 213: =
Line 213: ID = inode
Line 213: -
Line 213: >
Line 213: ID = i_blkbits
Line 213: ;
Line 214: ID = const
Line 214: ID = unsigned
Line 214: ID = blocks_per_page
Line 214: =
Line 214: ID = PAGE_CACHE_SIZE
Line 214: >
Line 214: >
Line 214: ID = blkbits
Line 214: ;
Line 215: ID = const
Line 215: ID = unsigned
Line 215: ID = blocksize
Line 215: =
Line 215: INTCON = 1
Line 215: <
Line 215: <
Line 215: ID = blkbits
Line 215: ;
Line 216: ID = sector_t
Line 216: ID = block_in_file
Line 216: ;
Line 217: ID = sector_t
Line 217: ID = last_block
Line 217: ;
Line 218: ID = sector_t
Line 218: ID = blocks
Line 218: [
Line 218: ID = MAX_BUF_PER_PAGE
Line 218: ]
Line 218: ;
Line 219: ID = unsigned
Line 219: ID = page_block
Line 219: ;
Line 220: ID = unsigned
Line 220: ID = first_hole
Line 220: =
Line 220: ID = blocks_per_page
Line 220: ;
Line 221: ID = struct
Line 221: ID = block_device
Line 221: *
Line 221: ID = bdev
Line 221: =
Line 221: ID = NULL
Line 221: ;
Line 222: ID = struct
Line 222: ID = buffer_head
Line 222: ID = bh
Line 222: ;
Line 223: int
Line 223: ID = length
Line 223: ;
Line 224: int
Line 224: ID = fully_mapped
Line 224: =
Line 224: INTCON = 1
Line 224: ;
Line 226: if
Line 226: (
Line 226: ID = page_has_buffers
Line 226: (
Line 226: ID = page
Line 226: )
Line 226: )
Line 227: ID = goto
Line 227: ID = confused
Line 227: ;
Line 229: ID = block_in_file
Line 229: =
Line 229: ID = page
Line 229: -
Line 229: >
Line 229: ID = index
Line 229: <
Line 229: <
Line 229: (
Line 229: ID = PAGE_CACHE_SHIFT
Line 229: -
Line 229: ID = blkbits
Line 229: )
Line 229: ;
Line 230: ID = last_block
Line 230: =
Line 230: (
Line 230: ID = i_size_read
Line 230: (
Line 230: ID = inode
Line 230: )
Line 230: +
Line 230: ID = blocksize
Line 230: -
Line 230: INTCON = 1
Line 230: )
Line 230: >
Line 230: >
Line 230: ID = blkbits
Line 230: ;
Line 232: ID = bh
Line 232: Unrecognized token: 46
Line 232: ID = b_page
Line 232: =
Line 232: ID = page
Line 232: ;
Line 233: for
Line 233: (
Line 233: ID = page_block
Line 233: =
Line 233: INTCON = 0
Line 233: ;
Line 233: ID = page_block
Line 233: <
Line 233: ID = blocks_per_page
Line 233: ;
Line 234: ID = page_block
Line 234: +
Line 234: +
Line 234: ,
Line 234: ID = block_in_file
Line 234: +
Line 234: +
Line 234: )
Line 234: {
Line 235: ID = bh
Line 235: Unrecognized token: 46
Line 235: ID = b_state
Line 235: =
Line 235: INTCON = 0
Line 235: ;
Line 236: if
Line 236: (
Line 236: ID = block_in_file
Line 236: <
Line 236: ID = last_block
Line 236: )
Line 236: {
Line 237: if
Line 237: (
Line 237: ID = get_block
Line 237: (
Line 237: ID = inode
Line 237: ,
Line 237: ID = block_in_file
Line 237: ,
Line 237: Unrecognized token: 38
Line 237: ID = bh
Line 237: ,
Line 237: INTCON = 0
Line 237: )
Line 237: )
Line 238: ID = goto
Line 238: ID = confused
Line 238: ;
Line 239: }
Line 241: if
Line 241: (
Line 241: !
Line 241: ID = buffer_mapped
Line 241: (
Line 241: Unrecognized token: 38
Line 241: ID = bh
Line 241: )
Line 241: )
Line 241: {
Line 242: ID = fully_mapped
Line 242: =
Line 242: INTCON = 0
Line 242: ;
Line 243: if
Line 243: (
Line 243: ID = first_hole
Line 243: ==
Line 243: ID = blocks_per_page
Line 243: )
Line 244: ID = first_hole
Line 244: =
Line 244: ID = page_block
Line 244: ;
Line 245: ID = continue
Line 245: ;
Line 246: }
Line 254: if
Line 254: (
Line 254: ID = buffer_uptodate
Line 254: (
Line 254: Unrecognized token: 38
Line 254: ID = bh
Line 254: )
Line 254: )
Line 254: {
Line 255: ID = map_buffer_to_page
Line 255: (
Line 255: ID = page
Line 255: ,
Line 255: Unrecognized token: 38
Line 255: ID = bh
Line 255: ,
Line 255: ID = page_block
Line 255: )
Line 255: ;
Line 256: ID = goto
Line 256: ID = confused
Line 256: ;
Line 257: }
Line 259: if
Line 259: (
Line 259: ID = first_hole
Line 259: !=
Line 259: ID = blocks_per_page
Line 259: )
Line 260: ID = goto
Line 260: ID = confused
Line 260: ;
Line 263: if
Line 263: (
Line 263: ID = page_block
Line 263: &&
Line 263: ID = blocks
Line 263: [
Line 263: ID = page_block
Line 263: -
Line 263: INTCON = 1
Line 263: ]
Line 263: !=
Line 263: ID = bh
Line 263: Unrecognized token: 46
Line 263: ID = b_blocknr
Line 263: -
Line 263: INTCON = 1
Line 263: )
Line 264: ID = goto
Line 264: ID = confused
Line 264: ;
Line 265: ID = blocks
Line 265: [
Line 265: ID = page_block
Line 265: ]
Line 265: =
Line 265: ID = bh
Line 265: Unrecognized token: 46
Line 265: ID = b_blocknr
Line 265: ;
Line 266: ID = bdev
Line 266: =
Line 266: ID = bh
Line 266: Unrecognized token: 46
Line 266: ID = b_bdev
Line 266: ;
Line 267: }
Line 269: if
Line 269: (
Line 269: ID = first_hole
Line 269: !=
Line 269: ID = blocks_per_page
Line 269: )
Line 269: {
Line 270: char
Line 270: *
Line 270: ID = kaddr
Line 270: =
Line 270: ID = kmap_atomic
Line 270: (
Line 270: ID = page
Line 270: ,
Line 270: ID = KM_USER0
Line 270: )
Line 270: ;
Line 271: ID = memset
Line 271: (
Line 271: ID = kaddr
Line 271: +
Line 271: (
Line 271: ID = first_hole
Line 271: <
Line 271: <
Line 271: ID = blkbits
Line 271: )
Line 271: ,
Line 271: INTCON = 0
Line 271: ,
Line 272: ID = PAGE_CACHE_SIZE
Line 272: -
Line 272: (
Line 272: ID = first_hole
Line 272: <
Line 272: <
Line 272: ID = blkbits
Line 272: )
Line 272: )
Line 272: ;
Line 273: ID = flush_dcache_page
Line 273: (
Line 273: ID = page
Line 273: )
Line 273: ;
Line 274: ID = kunmap_atomic
Line 274: (
Line 274: ID = kaddr
Line 274: ,
Line 274: ID = KM_USER0
Line 274: )
Line 274: ;
Line 275: if
Line 275: (
Line 275: ID = first_hole
Line 275: ==
Line 275: INTCON = 0
Line 275: )
Line 275: {
Line 276: ID = SetPageUptodate
Line 276: (
Line 276: ID = page
Line 276: )
Line 276: ;
Line 277: ID = unlock_page
Line 277: (
Line 277: ID = page
Line 277: )
Line 277: ;
Line 278: ID = goto
Line 278: ID = out
Line 278: ;
Line 279: }
Line 280: }
Line 280: else
Line 280: if
Line 280: (
Line 280: ID = fully_mapped
Line 280: )
Line 280: {
Line 281: ID = SetPageMappedToDisk
Line 281: (
Line 281: ID = page
Line 281: )
Line 281: ;
Line 282: }
Line 287: if
Line 287: (
Line 287: ID = bio
Line 287: &&
Line 287: (
Line 287: *
Line 287: ID = last_block_in_bio
Line 287: !=
Line 287: ID = blocks
Line 287: [
Line 287: INTCON = 0
Line 287: ]
Line 287: -
Line 287: INTCON = 1
Line 287: )
Line 287: )
Line 288: ID = bio
Line 288: =
Line 288: ID = mpage_bio_submit
Line 288: (
Line 288: ID = READ
Line 288: ,
Line 288: ID = bio
Line 288: )
Line 288: ;
Line 290: ID = alloc_new
Line 290: Unrecognized token: 58
Line 291: if
Line 291: (
Line 291: ID = bio
Line 291: ==
Line 291: ID = NULL
Line 291: )
Line 291: {
Line 292: ID = bio
Line 292: =
Line 292: ID = mpage_alloc
Line 292: (
Line 292: ID = bdev
Line 292: ,
Line 292: ID = blocks
Line 292: [
Line 292: INTCON = 0
Line 292: ]
Line 292: <
Line 292: <
Line 292: (
Line 292: ID = blkbits
Line 292: -
Line 292: INTCON = 9
Line 292: )
Line 292: ,
Line 293: ID = nr_pages
Line 293: ,
Line 293: ID = GFP_KERNEL
Line 293: )
Line 293: ;
Line 294: if
Line 294: (
Line 294: ID = bio
Line 294: ==
Line 294: ID = NULL
Line 294: )
Line 295: ID = goto
Line 295: ID = confused
Line 295: ;
Line 296: }
Line 298: ID = length
Line 298: =
Line 298: ID = first_hole
Line 298: <
Line 298: <
Line 298: ID = blkbits
Line 298: ;
Line 299: if
Line 299: (
Line 299: ID = bio_add_page
Line 299: (
Line 299: ID = bio
Line 299: ,
Line 299: ID = page
Line 299: ,
Line 299: ID = length
Line 299: ,
Line 299: INTCON = 0
Line 299: )
Line 299: <
Line 299: ID = length
Line 299: )
Line 299: {
Line 300: ID = bio
Line 300: =
Line 300: ID = mpage_bio_submit
Line 300: (
Line 300: ID = READ
Line 300: ,
Line 300: ID = bio
Line 300: )
Line 300: ;
Line 301: ID = goto
Line 301: ID = alloc_new
Line 301: ;
Line 302: }
Line 304: if
Line 304: (
Line 304: ID = buffer_boundary
Line 304: (
Line 304: Unrecognized token: 38
Line 304: ID = bh
Line 304: )
Line 304: ||
Line 304: (
Line 304: ID = first_hole
Line 304: !=
Line 304: ID = blocks_per_page
Line 304: )
Line 304: )
Line 305: ID = bio
Line 305: =
Line 305: ID = mpage_bio_submit
Line 305: (
Line 305: ID = READ
Line 305: ,
Line 305: ID = bio
Line 305: )
Line 305: ;
Line 306: else
Line 307: *
Line 307: ID = last_block_in_bio
Line 307: =
Line 307: ID = blocks
Line 307: [
Line 307: ID = blocks_per_page
Line 307: -
Line 307: INTCON = 1
Line 307: ]
Line 307: ;
Line 308: ID = out
Line 308: Unrecognized token: 58
Line 309: return
Line 309: ID = bio
Line 309: ;
Line 311: ID = confused
Line 311: Unrecognized token: 58
Line 312: if
Line 312: (
Line 312: ID = bio
Line 312: )
Line 313: ID = bio
Line 313: =
Line 313: ID = mpage_bio_submit
Line 313: (
Line 313: ID = READ
Line 313: ,
Line 313: ID = bio
Line 313: )
Line 313: ;
Line 314: if
Line 314: (
Line 314: !
Line 314: ID = PageUptodate
Line 314: (
Line 314: ID = page
Line 314: )
Line 314: )
Line 315: ID = block_read_full_page
Line 315: (
Line 315: ID = page
Line 315: ,
Line 315: ID = get_block
Line 315: )
Line 315: ;
Line 316: else
Line 317: ID = unlock_page
Line 317: (
Line 317: ID = page
Line 317: )
Line 317: ;
Line 318: ID = goto
Line 318: ID = out
Line 318: ;
Line 319: }
Line 321: int
Line 322: ID = mpage_readpages
Line 322: (
Line 322: ID = struct
Line 322: ID = address_space
Line 322: *
Line 322: ID = mapping
Line 322: ,
Line 322: ID = struct
Line 322: ID = list_head
Line 322: *
Line 322: ID = pages
Line 322: ,
Line 323: ID = unsigned
Line 323: ID = nr_pages
Line 323: ,
Line 323: ID = get_block_t
Line 323: ID = get_block
Line 323: )
Line 324: {
Line 325: ID = struct
Line 325: ID = bio
Line 325: *
Line 325: ID = bio
Line 325: =
Line 325: ID = NULL
Line 325: ;
Line 326: ID = unsigned
Line 326: ID = page_idx
Line 326: ;
Line 327: ID = sector_t
Line 327: ID = last_block_in_bio
Line 327: =
Line 327: INTCON = 0
Line 327: ;
Line 328: ID = struct
Line 328: ID = pagevec
Line 328: ID = lru_pvec
Line 328: ;
Line 330: ID = pagevec_init
Line 330: (
Line 330: Unrecognized token: 38
Line 330: ID = lru_pvec
Line 330: ,
Line 330: INTCON = 0
Line 330: )
Line 330: ;
Line 331: for
Line 331: (
Line 331: ID = page_idx
Line 331: =
Line 331: INTCON = 0
Line 331: ;
Line 331: ID = page_idx
Line 331: <
Line 331: ID = nr_pages
Line 331: ;
Line 331: ID = page_idx
Line 331: +
Line 331: +
Line 331: )
Line 331: {
Line 332: ID = struct
Line 332: ID = page
Line 332: *
Line 332: ID = page
Line 332: =
Line 332: ID = list_entry
Line 332: (
Line 332: ID = pages
Line 332: -
Line 332: >
Line 332: ID = prev
Line 332: ,
Line 332: ID = struct
Line 332: ID = page
Line 332: ,
Line 332: ID = lru
Line 332: )
Line 332: ;
Line 334: ID = prefetchw
Line 334: (
Line 334: Unrecognized token: 38
Line 334: ID = page
Line 334: -
Line 334: >
Line 334: ID = flags
Line 334: )
Line 334: ;
Line 335: ID = list_del
Line 335: (
Line 335: Unrecognized token: 38
Line 335: ID = page
Line 335: -
Line 335: >
Line 335: ID = lru
Line 335: )
Line 335: ;
Line 336: if
Line 336: (
Line 336: !
Line 336: ID = add_to_page_cache
Line 336: (
Line 336: ID = page
Line 336: ,
Line 336: ID = mapping
Line 336: ,
Line 337: ID = page
Line 337: -
Line 337: >
Line 337: ID = index
Line 337: ,
Line 337: ID = GFP_KERNEL
Line 337: )
Line 337: )
Line 337: {
Line 338: ID = bio
Line 338: =
Line 338: ID = do_mpage_readpage
Line 338: (
Line 338: ID = bio
Line 338: ,
Line 338: ID = page
Line 338: ,
Line 339: ID = nr_pages
Line 339: -
Line 339: ID = page_idx
Line 339: ,
Line 340: Unrecognized token: 38
Line 340: ID = last_block_in_bio
Line 340: ,
Line 340: ID = get_block
Line 340: )
Line 340: ;
Line 341: if
Line 341: (
Line 341: !
Line 341: ID = pagevec_add
Line 341: (
Line 341: Unrecognized token: 38
Line 341: ID = lru_pvec
Line 341: ,
Line 341: ID = page
Line 341: )
Line 341: )
Line 342: Unrecognized token: 95
Line 342: Unrecognized token: 95
Line 342: ID = pagevec_lru_add
Line 342: (
Line 342: Unrecognized token: 38
Line 342: ID = lru_pvec
Line 342: )
Line 342: ;
Line 343: }
Line 343: else
Line 343: {
Line 344: ID = page_cache_release
Line 344: (
Line 344: ID = page
Line 344: )
Line 344: ;
Line 345: }
Line 346: }
Line 347: ID = pagevec_lru_add
Line 347: (
Line 347: Unrecognized token: 38
Line 347: ID = lru_pvec
Line 347: )
Line 347: ;
Line 348: ID = BUG_ON
Line 348: (
Line 348: !
Line 348: ID = list_empty
Line 348: (
Line 348: ID = pages
Line 348: )
Line 348: )
Line 348: ;
Line 349: if
Line 349: (
Line 349: ID = bio
Line 349: )
Line 350: ID = mpage_bio_submit
Line 350: (
Line 350: ID = READ
Line 350: ,
Line 350: ID = bio
Line 350: )
Line 350: ;
Line 351: return
Line 351: INTCON = 0
Line 351: ;
Line 352: }
Line 353: ID = EXPORT_SYMBOL
Line 353: (
Line 353: ID = mpage_readpages
Line 353: )
Line 353: ;
Line 358: int
Line 358: ID = mpage_readpage
Line 358: (
Line 358: ID = struct
Line 358: ID = page
Line 358: *
Line 358: ID = page
Line 358: ,
Line 358: ID = get_block_t
Line 358: ID = get_block
Line 358: )
Line 359: {
Line 360: ID = struct
Line 360: ID = bio
Line 360: *
Line 360: ID = bio
Line 360: =
Line 360: ID = NULL
Line 360: ;
Line 361: ID = sector_t
Line 361: ID = last_block_in_bio
Line 361: =
Line 361: INTCON = 0
Line 361: ;
Line 363: ID = bio
Line 363: =
Line 363: ID = do_mpage_readpage
Line 363: (
Line 363: ID = bio
Line 363: ,
Line 363: ID = page
Line 363: ,
Line 363: INTCON = 1
Line 363: ,
Line 364: Unrecognized token: 38
Line 364: ID = last_block_in_bio
Line 364: ,
Line 364: ID = get_block
Line 364: )
Line 364: ;
Line 365: if
Line 365: (
Line 365: ID = bio
Line 365: )
Line 366: ID = mpage_bio_submit
Line 366: (
Line 366: ID = READ
Line 366: ,
Line 366: ID = bio
Line 366: )
Line 366: ;
Line 367: return
Line 367: INTCON = 0
Line 367: ;
Line 368: }
Line 369: ID = EXPORT_SYMBOL
Line 369: (
Line 369: ID = mpage_readpage
Line 369: )
Line 369: ;
Line 387: ID = static
Line 387: ID = struct
Line 387: ID = bio
Line 387: *
Line 388: ID = mpage_writepage
Line 388: (
Line 388: ID = struct
Line 388: ID = bio
Line 388: *
Line 388: ID = bio
Line 388: ,
Line 388: ID = struct
Line 388: ID = page
Line 388: *
Line 388: ID = page
Line 388: ,
Line 388: ID = get_block_t
Line 388: ID = get_block
Line 388: ,
Line 389: ID = sector_t
Line 389: *
Line 389: ID = last_block_in_bio
Line 389: ,
Line 389: int
Line 389: *
Line 389: ID = ret
Line 389: ,
Line 389: ID = struct
Line 389: ID = writeback_control
Line 389: *
Line 389: ID = wbc
Line 389: )
Line 390: {
Line 391: ID = struct
Line 391: ID = address_space
Line 391: *
Line 391: ID = mapping
Line 391: =
Line 391: ID = page
Line 391: -
Line 391: >
Line 391: ID = mapping
Line 391: ;
Line 392: ID = struct
Line 392: ID = inode
Line 392: *
Line 392: ID = inode
Line 392: =
Line 392: ID = page
Line 392: -
Line 392: >
Line 392: ID = mapping
Line 392: -
Line 392: >
Line 392: ID = host
Line 392: ;
Line 393: ID = const
Line 393: ID = unsigned
Line 393: ID = blkbits
Line 393: =
Line 393: ID = inode
Line 393: -
Line 393: >
Line 393: ID = i_blkbits
Line 393: ;
Line 394: ID = unsigned
Line 394: ID = long
Line 394: ID = end_index
Line 394: ;
Line 395: ID = const
Line 395: ID = unsigned
Line 395: ID = blocks_per_page
Line 395: =
Line 395: ID = PAGE_CACHE_SIZE
Line 395: >
Line 395: >
Line 395: ID = blkbits
Line 395: ;
Line 396: ID = sector_t
Line 396: ID = last_block
Line 396: ;
Line 397: ID = sector_t
Line 397: ID = block_in_file
Line 397: ;
Line 398: ID = sector_t
Line 398: ID = blocks
Line 398: [
Line 398: ID = MAX_BUF_PER_PAGE
Line 398: ]
Line 398: ;
Line 399: ID = unsigned
Line 399: ID = page_block
Line 399: ;
Line 400: ID = unsigned
Line 400: ID = first_unmapped
Line 400: =
Line 400: ID = blocks_per_page
Line 400: ;
Line 401: ID = struct
Line 401: ID = block_device
Line 401: *
Line 401: ID = bdev
Line 401: =
Line 401: ID = NULL
Line 401: ;
Line 402: int
Line 402: ID = boundary
Line 402: =
Line 402: INTCON = 0
Line 402: ;
Line 403: ID = sector_t
Line 403: ID = boundary_block
Line 403: =
Line 403: INTCON = 0
Line 403: ;
Line 404: ID = struct
Line 404: ID = block_device
Line 404: *
Line 404: ID = boundary_bdev
Line 404: =
Line 404: ID = NULL
Line 404: ;
Line 405: int
Line 405: ID = length
Line 405: ;
Line 406: ID = struct
Line 406: ID = buffer_head
Line 406: ID = map_bh
Line 406: ;
Line 407: ID = loff_t
Line 407: ID = i_size
Line 407: =
Line 407: ID = i_size_read
Line 407: (
Line 407: ID = inode
Line 407: )
Line 407: ;
Line 409: if
Line 409: (
Line 409: ID = page_has_buffers
Line 409: (
Line 409: ID = page
Line 409: )
Line 409: )
Line 409: {
Line 410: ID = struct
Line 410: ID = buffer_head
Line 410: *
Line 410: ID = head
Line 410: =
Line 410: ID = page_buffers
Line 410: (
Line 410: ID = page
Line 410: )
Line 410: ;
Line 411: ID = struct
Line 411: ID = buffer_head
Line 411: *
Line 411: ID = bh
Line 411: =
Line 411: ID = head
Line 411: ;
Line 414: ID = page_block
Line 414: =
Line 414: INTCON = 0
Line 414: ;
Line 415: ID = do
Line 415: {
Line 416: ID = BUG_ON
Line 416: (
Line 416: ID = buffer_locked
Line 416: (
Line 416: ID = bh
Line 416: )
Line 416: )
Line 416: ;
Line 417: if
Line 417: (
Line 417: !
Line 417: ID = buffer_mapped
Line 417: (
Line 417: ID = bh
Line 417: )
Line 417: )
Line 417: {
Line 422: if
Line 422: (
Line 422: ID = buffer_dirty
Line 422: (
Line 422: ID = bh
Line 422: )
Line 422: )
Line 423: ID = goto
Line 423: ID = confused
Line 423: ;
Line 424: if
Line 424: (
Line 424: ID = first_unmapped
Line 424: ==
Line 424: ID = blocks_per_page
Line 424: )
Line 425: ID = first_unmapped
Line 425: =
Line 425: ID = page_block
Line 425: ;
Line 426: ID = continue
Line 426: ;
Line 427: }
Line 429: if
Line 429: (
Line 429: ID = first_unmapped
Line 429: !=
Line 429: ID = blocks_per_page
Line 429: )
Line 430: ID = goto
Line 430: ID = confused
Line 430: ;
Line 432: if
Line 432: (
Line 432: !
Line 432: ID = buffer_dirty
Line 432: (
Line 432: ID = bh
Line 432: )
Line 432: ||
Line 432: !
Line 432: ID = buffer_uptodate
Line 432: (
Line 432: ID = bh
Line 432: )
Line 432: )
Line 433: ID = goto
Line 433: ID = confused
Line 433: ;
Line 434: if
Line 434: (
Line 434: ID = page_block
Line 434: )
Line 434: {
Line 435: if
Line 435: (
Line 435: ID = bh
Line 435: -
Line 435: >
Line 435: ID = b_blocknr
Line 435: !=
Line 435: ID = blocks
Line 435: [
Line 435: ID = page_block
Line 435: -
Line 435: INTCON = 1
Line 435: ]
Line 435: +
Line 435: INTCON = 1
Line 435: )
Line 436: ID = goto
Line 436: ID = confused
Line 436: ;
Line 437: }
Line 438: ID = blocks
Line 438: [
Line 438: ID = page_block
Line 438: +
Line 438: +
Line 438: ]
Line 438: =
Line 438: ID = bh
Line 438: -
Line 438: >
Line 438: ID = b_blocknr
Line 438: ;
Line 439: ID = boundary
Line 439: =
Line 439: ID = buffer_boundary
Line 439: (
Line 439: ID = bh
Line 439: )
Line 439: ;
Line 440: if
Line 440: (
Line 440: ID = boundary
Line 440: )
Line 440: {
Line 441: ID = boundary_block
Line 441: =
Line 441: ID = bh
Line 441: -
Line 441: >
Line 441: ID = b_blocknr
Line 441: ;
Line 442: ID = boundary_bdev
Line 442: =
Line 442: ID = bh
Line 442: -
Line 442: >
Line 442: ID = b_bdev
Line 442: ;
Line 443: }
Line 444: ID = bdev
Line 444: =
Line 444: ID = bh
Line 444: -
Line 444: >
Line 444: ID = b_bdev
Line 444: ;
Line 445: }
Line 445: while
Line 445: (
Line 445: (
Line 445: ID = bh
Line 445: =
Line 445: ID = bh
Line 445: -
Line 445: >
Line 445: ID = b_this_page
Line 445: )
Line 445: !=
Line 445: ID = head
Line 445: )
Line 445: ;
Line 447: if
Line 447: (
Line 447: ID = first_unmapped
Line 447: )
Line 448: ID = goto
Line 448: ID = page_is_mapped
Line 448: ;
Line 456: ID = goto
Line 456: ID = confused
Line 456: ;
Line 457: }
Line 462: ID = BUG_ON
Line 462: (
Line 462: !
Line 462: ID = PageUptodate
Line 462: (
Line 462: ID = page
Line 462: )
Line 462: )
Line 462: ;
Line 463: ID = block_in_file
Line 463: =
Line 463: ID = page
Line 463: -
Line 463: >
Line 463: ID = index
Line 463: <
Line 463: <
Line 463: (
Line 463: ID = PAGE_CACHE_SHIFT
Line 463: -
Line 463: ID = blkbits
Line 463: )
Line 463: ;
Line 464: ID = last_block
Line 464: =
Line 464: (
Line 464: ID = i_size
Line 464: -
Line 464: INTCON = 1
Line 464: )
Line 464: >
Line 464: >
Line 464: ID = blkbits
Line 464: ;
Line 465: ID = map_bh
Line 465: Unrecognized token: 46
Line 465: ID = b_page
Line 465: =
Line 465: ID = page
Line 465: ;
Line 466: for
Line 466: (
Line 466: ID = page_block
Line 466: =
Line 466: INTCON = 0
Line 466: ;
Line 466: ID = page_block
Line 466: <
Line 466: ID = blocks_per_page
Line 466: ;
Line 466: )
Line 466: {
Line 468: ID = map_bh
Line 468: Unrecognized token: 46
Line 468: ID = b_state
Line 468: =
Line 468: INTCON = 0
Line 468: ;
Line 469: if
Line 469: (
Line 469: ID = get_block
Line 469: (
Line 469: ID = inode
Line 469: ,
Line 469: ID = block_in_file
Line 469: ,
Line 469: Unrecognized token: 38
Line 469: ID = map_bh
Line 469: ,
Line 469: INTCON = 1
Line 469: )
Line 469: )
Line 470: ID = goto
Line 470: ID = confused
Line 470: ;
Line 471: if
Line 471: (
Line 471: ID = buffer_new
Line 471: (
Line 471: Unrecognized token: 38
Line 471: ID = map_bh
Line 471: )
Line 471: )
Line 472: ID = unmap_underlying_metadata
Line 472: (
Line 472: ID = map_bh
Line 472: Unrecognized token: 46
Line 472: ID = b_bdev
Line 472: ,
Line 473: ID = map_bh
Line 473: Unrecognized token: 46
Line 473: ID = b_blocknr
Line 473: )
Line 473: ;
Line 474: if
Line 474: (
Line 474: ID = buffer_boundary
Line 474: (
Line 474: Unrecognized token: 38
Line 474: ID = map_bh
Line 474: )
Line 474: )
Line 474: {
Line 475: ID = boundary_block
Line 475: =
Line 475: ID = map_bh
Line 475: Unrecognized token: 46
Line 475: ID = b_blocknr
Line 475: ;
Line 476: ID = boundary_bdev
Line 476: =
Line 476: ID = map_bh
Line 476: Unrecognized token: 46
Line 476: ID = b_bdev
Line 476: ;
Line 477: }
Line 478: if
Line 478: (
Line 478: ID = page_block
Line 478: )
Line 478: {
Line 479: if
Line 479: (
Line 479: ID = map_bh
Line 479: Unrecognized token: 46
Line 479: ID = b_blocknr
Line 479: !=
Line 479: ID = blocks
Line 479: [
Line 479: ID = page_block
Line 479: -
Line 479: INTCON = 1
Line 479: ]
Line 479: +
Line 479: INTCON = 1
Line 479: )
Line 480: ID = goto
Line 480: ID = confused
Line 480: ;
Line 481: }
Line 482: ID = blocks
Line 482: [
Line 482: ID = page_block
Line 482: +
Line 482: +
Line 482: ]
Line 482: =
Line 482: ID = map_bh
Line 482: Unrecognized token: 46
Line 482: ID = b_blocknr
Line 482: ;
Line 483: ID = boundary
Line 483: =
Line 483: ID = buffer_boundary
Line 483: (
Line 483: Unrecognized token: 38
Line 483: ID = map_bh
Line 483: )
Line 483: ;
Line 484: ID = bdev
Line 484: =
Line 484: ID = map_bh
Line 484: Unrecognized token: 46
Line 484: ID = b_bdev
Line 484: ;
Line 485: if
Line 485: (
Line 485: ID = block_in_file
Line 485: ==
Line 485: ID = last_block
Line 485: )
Line 486: ID = break
Line 486: ;
Line 487: ID = block_in_file
Line 487: +
Line 487: +
Line 487: ;
Line 488: }
Line 489: ID = BUG_ON
Line 489: (
Line 489: ID = page_block
Line 489: ==
Line 489: INTCON = 0
Line 489: )
Line 489: ;
Line 491: ID = first_unmapped
Line 491: =
Line 491: ID = page_block
Line 491: ;
Line 493: ID = page_is_mapped
Line 493: Unrecognized token: 58
Line 494: ID = end_index
Line 494: =
Line 494: ID = i_size
Line 494: >
Line 494: >
Line 494: ID = PAGE_CACHE_SHIFT
Line 494: ;
Line 495: if
Line 495: (
Line 495: ID = page
Line 495: -
Line 495: >
Line 495: ID = index
Line 495: >=
Line 495: ID = end_index
Line 495: )
Line 495: {
Line 504: ID = unsigned
Line 504: ID = offset
Line 504: =
Line 504: ID = i_size
Line 504: Unrecognized token: 38
Line 504: (
Line 504: ID = PAGE_CACHE_SIZE
Line 504: -
Line 504: INTCON = 1
Line 504: )
Line 504: ;
Line 505: char
Line 505: *
Line 505: ID = kaddr
Line 505: ;
Line 507: if
Line 507: (
Line 507: ID = page
Line 507: -
Line 507: >
Line 507: ID = index
Line 507: >
Line 507: ID = end_index
Line 507: ||
Line 507: !
Line 507: ID = offset
Line 507: )
Line 508: ID = goto
Line 508: ID = confused
Line 508: ;
Line 509: ID = kaddr
Line 509: =
Line 509: ID = kmap_atomic
Line 509: (
Line 509: ID = page
Line 509: ,
Line 509: ID = KM_USER0
Line 509: )
Line 509: ;
Line 510: ID = memset
Line 510: (
Line 510: ID = kaddr
Line 510: +
Line 510: ID = offset
Line 510: ,
Line 510: INTCON = 0
Line 510: ,
Line 510: ID = PAGE_CACHE_SIZE
Line 510: -
Line 510: ID = offset
Line 510: )
Line 510: ;
Line 511: ID = flush_dcache_page
Line 511: (
Line 511: ID = page
Line 511: )
Line 511: ;
Line 512: ID = kunmap_atomic
Line 512: (
Line 512: ID = kaddr
Line 512: ,
Line 512: ID = KM_USER0
Line 512: )
Line 512: ;
Line 513: }
Line 518: if
Line 518: (
Line 518: ID = bio
Line 518: &&
Line 518: *
Line 518: ID = last_block_in_bio
Line 518: !=
Line 518: ID = blocks
Line 518: [
Line 518: INTCON = 0
Line 518: ]
Line 518: -
Line 518: INTCON = 1
Line 518: )
Line 519: ID = bio
Line 519: =
Line 519: ID = mpage_bio_submit
Line 519: (
Line 519: ID = WRITE
Line 519: ,
Line 519: ID = bio
Line 519: )
Line 519: ;
Line 521: ID = alloc_new
Line 521: Unrecognized token: 58
Line 522: if
Line 522: (
Line 522: ID = bio
Line 522: ==
Line 522: ID = NULL
Line 522: )
Line 522: {
Line 523: ID = bio
Line 523: =
Line 523: ID = mpage_alloc
Line 523: (
Line 523: ID = bdev
Line 523: ,
Line 523: ID = blocks
Line 523: [
Line 523: INTCON = 0
Line 523: ]
Line 523: <
Line 523: <
Line 523: (
Line 523: ID = blkbits
Line 523: -
Line 523: INTCON = 9
Line 523: )
Line 523: ,
Line 524: ID = bio_get_nr_vecs
Line 524: (
Line 524: ID = bdev
Line 524: )
Line 524: ,
Line 524: ID = GFP_NOFS
Line 524: Unrecognized token: 124
Line 524: Unrecognized token: 95
Line 524: Unrecognized token: 95
Line 524: ID = GFP_HIGH
Line 524: )
Line 524: ;
Line 525: if
Line 525: (
Line 525: ID = bio
Line 525: ==
Line 525: ID = NULL
Line 525: )
Line 526: ID = goto
Line 526: ID = confused
Line 526: ;
Line 527: }
Line 534: ID = length
Line 534: =
Line 534: ID = first_unmapped
Line 534: <
Line 534: <
Line 534: ID = blkbits
Line 534: ;
Line 535: if
Line 535: (
Line 535: ID = bio_add_page
Line 535: (
Line 535: ID = bio
Line 535: ,
Line 535: ID = page
Line 535: ,
Line 535: ID = length
Line 535: ,
Line 535: INTCON = 0
Line 535: )
Line 535: <
Line 535: ID = length
Line 535: )
Line 535: {
Line 536: ID = bio
Line 536: =
Line 536: ID = mpage_bio_submit
Line 536: (
Line 536: ID = WRITE
Line 536: ,
Line 536: ID = bio
Line 536: )
Line 536: ;
Line 537: ID = goto
Line 537: ID = alloc_new
Line 537: ;
Line 538: }
Line 544: if
Line 544: (
Line 544: ID = page_has_buffers
Line 544: (
Line 544: ID = page
Line 544: )
Line 544: )
Line 544: {
Line 545: ID = struct
Line 545: ID = buffer_head
Line 545: *
Line 545: ID = head
Line 545: =
Line 545: ID = page_buffers
Line 545: (
Line 545: ID = page
Line 545: )
Line 545: ;
Line 546: ID = struct
Line 546: ID = buffer_head
Line 546: *
Line 546: ID = bh
Line 546: =
Line 546: ID = head
Line 546: ;
Line 547: ID = unsigned
Line 547: ID = buffer_counter
Line 547: =
Line 547: INTCON = 0
Line 547: ;
Line 549: ID = do
Line 549: {
Line 550: if
Line 550: (
Line 550: ID = buffer_counter
Line 550: +
Line 550: +
Line 550: ==
Line 550: ID = first_unmapped
Line 550: )
Line 551: ID = break
Line 551: ;
Line 552: ID = clear_buffer_dirty
Line 552: (
Line 552: ID = bh
Line 552: )
Line 552: ;
Line 553: ID = bh
Line 553: =
Line 553: ID = bh
Line 553: -
Line 553: >
Line 553: ID = b_this_page
Line 553: ;
Line 554: }
Line 554: while
Line 554: (
Line 554: ID = bh
Line 554: !=
Line 554: ID = head
Line 554: )
Line 554: ;
Line 561: if
Line 561: (
Line 561: ID = buffer_heads_over_limit
Line 561: &&
Line 561: ID = PageUptodate
Line 561: (
Line 561: ID = page
Line 561: )
Line 561: )
Line 562: ID = try_to_free_buffers
Line 562: (
Line 562: ID = page
Line 562: )
Line 562: ;
Line 563: }
Line 565: ID = BUG_ON
Line 565: (
Line 565: ID = PageWriteback
Line 565: (
Line 565: ID = page
Line 565: )
Line 565: )
Line 565: ;
Line 566: ID = set_page_writeback
Line 566: (
Line 566: ID = page
Line 566: )
Line 566: ;
Line 567: ID = unlock_page
Line 567: (
Line 567: ID = page
Line 567: )
Line 567: ;
Line 568: if
Line 568: (
Line 568: ID = boundary
Line 568: ||
Line 568: (
Line 568: ID = first_unmapped
Line 568: !=
Line 568: ID = blocks_per_page
Line 568: )
Line 568: )
Line 568: {
Line 569: ID = bio
Line 569: =
Line 569: ID = mpage_bio_submit
Line 569: (
Line 569: ID = WRITE
Line 569: ,
Line 569: ID = bio
Line 569: )
Line 569: ;
Line 570: if
Line 570: (
Line 570: ID = boundary_block
Line 570: )
Line 570: {
Line 571: ID = write_boundary_block
Line 571: (
Line 571: ID = boundary_bdev
Line 571: ,
Line 572: ID = boundary_block
Line 572: ,
Line 572: INTCON = 1
Line 572: <
Line 572: <
Line 572: ID = blkbits
Line 572: )
Line 572: ;
Line 573: }
Line 574: }
Line 574: else
Line 574: {
Line 575: *
Line 575: ID = last_block_in_bio
Line 575: =
Line 575: ID = blocks
Line 575: [
Line 575: ID = blocks_per_page
Line 575: -
Line 575: INTCON = 1
Line 575: ]
Line 575: ;
Line 576: }
Line 577: ID = goto
Line 577: ID = out
Line 577: ;
Line 579: ID = confused
Line 579: Unrecognized token: 58
Line 580: if
Line 580: (
Line 580: ID = bio
Line 580: )
Line 581: ID = bio
Line 581: =
Line 581: ID = mpage_bio_submit
Line 581: (
Line 581: ID = WRITE
Line 581: ,
Line 581: ID = bio
Line 581: )
Line 581: ;
Line 582: *
Line 582: ID = ret
Line 582: =
Line 582: ID = page
Line 582: -
Line 582: >
Line 582: ID = mapping
Line 582: -
Line 582: >
Line 582: ID = a_ops
Line 582: -
Line 582: >
Line 582: ID = writepage
Line 582: (
Line 582: ID = page
Line 582: ,
Line 582: ID = wbc
Line 582: )
Line 582: ;
Line 586: if
Line 586: (
Line 586: *
Line 586: ID = ret
Line 586: )
Line 586: {
Line 587: if
Line 587: (
Line 587: *
Line 587: ID = ret
Line 587: ==
Line 587: -
Line 587: ID = ENOSPC
Line 587: )
Line 588: ID = set_bit
Line 588: (
Line 588: ID = AS_ENOSPC
Line 588: ,
Line 588: Unrecognized token: 38
Line 588: ID = mapping
Line 588: -
Line 588: >
Line 588: ID = flags
Line 588: )
Line 588: ;
Line 589: else
Line 590: ID = set_bit
Line 590: (
Line 590: ID = AS_EIO
Line 590: ,
Line 590: Unrecognized token: 38
Line 590: ID = mapping
Line 590: -
Line 590: >
Line 590: ID = flags
Line 590: )
Line 590: ;
Line 591: }
Line 592: ID = out
Line 592: Unrecognized token: 58
Line 593: return
Line 593: ID = bio
Line 593: ;
Line 594: }
Line 617: int
Line 618: ID = mpage_writepages
Line 618: (
Line 618: ID = struct
Line 618: ID = address_space
Line 618: *
Line 618: ID = mapping
Line 618: ,
Line 619: ID = struct
Line 619: ID = writeback_control
Line 619: *
Line 619: ID = wbc
Line 619: ,
Line 619: ID = get_block_t
Line 619: ID = get_block
Line 619: )
Line 620: {
Line 621: ID = struct
Line 621: ID = backing_dev_info
Line 621: *
Line 621: ID = bdi
Line 621: =
Line 621: ID = mapping
Line 621: -
Line 621: >
Line 621: ID = backing_dev_info
Line 621: ;
Line 622: ID = struct
Line 622: ID = bio
Line 622: *
Line 622: ID = bio
Line 622: =
Line 622: ID = NULL
Line 622: ;
Line 623: ID = sector_t
Line 623: ID = last_block_in_bio
Line 623: =
Line 623: INTCON = 0
Line 623: ;
Line 624: int
Line 624: ID = ret
Line 624: =
Line 624: INTCON = 0
Line 624: ;
Line 625: int
Line 625: ID = done
Line 625: =
Line 625: INTCON = 0
Line 625: ;
Line 626: int
Line 626: (
Line 626: *
Line 626: ID = writepage
Line 626: )
Line 626: (
Line 626: ID = struct
Line 626: ID = page
Line 626: *
Line 626: ID = page
Line 626: ,
Line 626: ID = struct
Line 626: ID = writeback_control
Line 626: *
Line 626: ID = wbc
Line 626: )
Line 626: ;
Line 627: ID = struct
Line 627: ID = pagevec
Line 627: ID = pvec
Line 627: ;
Line 628: int
Line 628: ID = nr_pages
Line 628: ;
Line 629: ID = pgoff_t
Line 629: ID = index
Line 629: ;
Line 630: int
Line 630: ID = scanned
Line 630: =
Line 630: INTCON = 0
Line 630: ;
Line 632: if
Line 632: (
Line 632: ID = wbc
Line 632: -
Line 632: >
Line 632: ID = nonblocking
Line 632: &&
Line 632: ID = bdi_write_congested
Line 632: (
Line 632: ID = bdi
Line 632: )
Line 632: )
Line 632: {
Line 633: ID = wbc
Line 633: -
Line 633: >
Line 633: ID = encountered_congestion
Line 633: =
Line 633: INTCON = 1
Line 633: ;
Line 634: return
Line 634: INTCON = 0
Line 634: ;
Line 635: }
Line 637: ID = writepage
Line 637: =
Line 637: ID = NULL
Line 637: ;
Line 638: if
Line 638: (
Line 638: ID = get_block
Line 638: ==
Line 638: ID = NULL
Line 638: )
Line 639: ID = writepage
Line 639: =
Line 639: ID = mapping
Line 639: -
Line 639: >
Line 639: ID = a_ops
Line 639: -
Line 639: >
Line 639: ID = writepage
Line 639: ;
Line 641: ID = pagevec_init
Line 641: (
Line 641: Unrecognized token: 38
Line 641: ID = pvec
Line 641: ,
Line 641: INTCON = 0
Line 641: )
Line 641: ;
Line 642: if
Line 642: (
Line 642: ID = wbc
Line 642: -
Line 642: >
Line 642: ID = sync_mode
Line 642: ==
Line 642: ID = WB_SYNC_NONE
Line 642: )
Line 642: {
Line 643: ID = index
Line 643: =
Line 643: ID = mapping
Line 643: -
Line 643: >
Line 643: ID = writeback_index
Line 643: ;
Line 644: }
Line 644: else
Line 644: {
Line 645: ID = index
Line 645: =
Line 645: INTCON = 0
Line 645: ;
Line 646: ID = scanned
Line 646: =
Line 646: INTCON = 1
Line 646: ;
Line 647: }
Line 648: ID = retry
Line 648: Unrecognized token: 58
Line 649: while
Line 649: (
Line 649: !
Line 649: ID = done
Line 649: &&
Line 649: (
Line 649: ID = nr_pages
Line 649: =
Line 649: ID = pagevec_lookup_tag
Line 649: (
Line 649: Unrecognized token: 38
Line 649: ID = pvec
Line 649: ,
Line 649: ID = mapping
Line 649: ,
Line 649: Unrecognized token: 38
Line 649: ID = index
Line 649: ,
Line 650: ID = PAGECACHE_TAG_DIRTY
Line 650: ,
Line 650: ID = PAGEVEC_SIZE
Line 650: )
Line 650: )
Line 650: )
Line 650: {
Line 651: ID = unsigned
Line 651: ID = i
Line 651: ;
Line 653: ID = scanned
Line 653: =
Line 653: INTCON = 1
Line 653: ;
Line 654: for
Line 654: (
Line 654: ID = i
Line 654: =
Line 654: INTCON = 0
Line 654: ;
Line 654: ID = i
Line 654: <
Line 654: ID = nr_pages
Line 654: ;
Line 654: ID = i
Line 654: +
Line 654: +
Line 654: )
Line 654: {
Line 655: ID = struct
Line 655: ID = page
Line 655: *
Line 655: ID = page
Line 655: =
Line 655: ID = pvec
Line 655: Unrecognized token: 46
Line 655: ID = pages
Line 655: [
Line 655: ID = i
Line 655: ]
Line 655: ;
Line 665: ID = lock_page
Line 665: (
Line 665: ID = page
Line 665: )
Line 665: ;
Line 667: if
Line 667: (
Line 667: ID = wbc
Line 667: -
Line 667: >
Line 667: ID = sync_mode
Line 667: !=
Line 667: ID = WB_SYNC_NONE
Line 667: )
Line 668: ID = wait_on_page_writeback
Line 668: (
Line 668: ID = page
Line 668: )
Line 668: ;
Line 670: if
Line 670: (
Line 670: ID = page
Line 670: -
Line 670: >
Line 670: ID = mapping
Line 670: !=
Line 670: ID = mapping
Line 670: ||
Line 670: ID = PageWriteback
Line 670: (
Line 670: ID = page
Line 670: )
Line 670: ||
Line 671: !
Line 671: ID = clear_page_dirty_for_io
Line 671: (
Line 671: ID = page
Line 671: )
Line 671: )
Line 671: {
Line 672: ID = unlock_page
Line 672: (
Line 672: ID = page
Line 672: )
Line 672: ;
Line 673: ID = continue
Line 673: ;
Line 674: }
Line 676: if
Line 676: (
Line 676: ID = writepage
Line 676: )
Line 676: {
Line 677: ID = ret
Line 677: =
Line 677: (
Line 677: *
Line 677: ID = writepage
Line 677: )
Line 677: (
Line 677: ID = page
Line 677: ,
Line 677: ID = wbc
Line 677: )
Line 677: ;
Line 678: if
Line 678: (
Line 678: ID = ret
Line 678: )
Line 678: {
Line 679: if
Line 679: (
Line 679: ID = ret
Line 679: ==
Line 679: -
Line 679: ID = ENOSPC
Line 679: )
Line 680: ID = set_bit
Line 680: (
Line 680: ID = AS_ENOSPC
Line 680: ,
Line 681: Unrecognized token: 38
Line 681: ID = mapping
Line 681: -
Line 681: >
Line 681: ID = flags
Line 681: )
Line 681: ;
Line 682: else
Line 683: ID = set_bit
Line 683: (
Line 683: ID = AS_EIO
Line 683: ,
Line 684: Unrecognized token: 38
Line 684: ID = mapping
Line 684: -
Line 684: >
Line 684: ID = flags
Line 684: )
Line 684: ;
Line 685: }
Line 686: }
Line 686: else
Line 686: {
Line 687: ID = bio
Line 687: =
Line 687: ID = mpage_writepage
Line 687: (
Line 687: ID = bio
Line 687: ,
Line 687: ID = page
Line 687: ,
Line 687: ID = get_block
Line 687: ,
Line 688: Unrecognized token: 38
Line 688: ID = last_block_in_bio
Line 688: ,
Line 688: Unrecognized token: 38
Line 688: ID = ret
Line 688: ,
Line 688: ID = wbc
Line 688: )
Line 688: ;
Line 689: }
Line 690: if
Line 690: (
Line 690: ID = ret
Line 690: ||
Line 690: (
Line 690: -
Line 690: -
Line 690: (
Line 690: ID = wbc
Line 690: -
Line 690: >
Line 690: ID = nr_to_write
Line 690: )
Line 690: <=
Line 690: INTCON = 0
Line 690: )
Line 690: )
Line 691: ID = done
Line 691: =
Line 691: INTCON = 1
Line 691: ;
Line 692: if
Line 692: (
Line 692: ID = wbc
Line 692: -
Line 692: >
Line 692: ID = nonblocking
Line 692: &&
Line 692: ID = bdi_write_congested
Line 692: (
Line 692: ID = bdi
Line 692: )
Line 692: )
Line 692: {
Line 693: ID = wbc
Line 693: -
Line 693: >
Line 693: ID = encountered_congestion
Line 693: =
Line 693: INTCON = 1
Line 693: ;
Line 694: ID = done
Line 694: =
Line 694: INTCON = 1
Line 694: ;
Line 695: }
Line 696: }
Line 697: ID = pagevec_release
Line 697: (
Line 697: Unrecognized token: 38
Line 697: ID = pvec
Line 697: )
Line 697: ;
Line 698: ID = cond_resched
Line 698: (
Line 698: )
Line 698: ;
Line 699: }
Line 700: if
Line 700: (
Line 700: !
Line 700: ID = scanned
Line 700: &&
Line 700: !
Line 700: ID = done
Line 700: )
Line 700: {
Line 705: ID = scanned
Line 705: =
Line 705: INTCON = 1
Line 705: ;
Line 706: ID = index
Line 706: =
Line 706: INTCON = 0
Line 706: ;
Line 707: ID = goto
Line 707: ID = retry
Line 707: ;
Line 708: }
Line 709: ID = mapping
Line 709: -
Line 709: >
Line 709: ID = writeback_index
Line 709: =
Line 709: ID = index
Line 709: ;
Line 710: if
Line 710: (
Line 710: ID = bio
Line 710: )
Line 711: ID = mpage_bio_submit
Line 711: (
Line 711: ID = WRITE
Line 711: ,
Line 711: ID = bio
Line 711: )
Line 711: ;
Line 712: return
Line 712: ID = ret
Line 712: ;
Line 713: }
Line 714: ID = EXPORT_SYMBOL
Line 714: (
Line 714: ID = mpage_writepages
Line 714: )
Line 714: ;
Line 715: -EOF-

Line 16: Unrecognized token: 35
Line 16: ID = include
Line 16: <
Line 16: ID = linux
Line 16: /
Line 16: ID = fs
Line 16: Unrecognized token: 46
Line 16: ID = h
Line 16: >
Line 17: Unrecognized token: 35
Line 17: ID = include
Line 17: <
Line 17: ID = linux
Line 17: /
Line 17: ID = module
Line 17: Unrecognized token: 46
Line 17: ID = h
Line 17: >
Line 18: Unrecognized token: 35
Line 18: ID = include
Line 18: <
Line 18: ID = linux
Line 18: /
Line 18: ID = sched
Line 18: Unrecognized token: 46
Line 18: ID = h
Line 18: >
Line 19: Unrecognized token: 35
Line 19: ID = include
Line 19: <
Line 19: ID = linux
Line 19: /
Line 19: ID = dnotify
Line 19: Unrecognized token: 46
Line 19: ID = h
Line 19: >
Line 20: Unrecognized token: 35
Line 20: ID = include
Line 20: <
Line 20: ID = linux
Line 20: /
Line 20: ID = init
Line 20: Unrecognized token: 46
Line 20: ID = h
Line 20: >
Line 21: Unrecognized token: 35
Line 21: ID = include
Line 21: <
Line 21: ID = linux
Line 21: /
Line 21: ID = spinlock
Line 21: Unrecognized token: 46
Line 21: ID = h
Line 21: >
Line 22: Unrecognized token: 35
Line 22: ID = include
Line 22: <
Line 22: ID = linux
Line 22: /
Line 22: ID = slab
Line 22: Unrecognized token: 46
Line 22: ID = h
Line 22: >
Line 24: int
Line 24: ID = dir_notify_enable
Line 24: =
Line 24: INTCON = 1
Line 24: ;
Line 26: ID = static
Line 26: ID = kmem_cache_t
Line 26: *
Line 26: ID = dn_cache
Line 26: ;
Line 28: ID = static
Line 28: void
Line 28: ID = redo_inode_mask
Line 28: (
Line 28: ID = struct
Line 28: ID = inode
Line 28: *
Line 28: ID = inode
Line 28: )
Line 29: {
Line 30: ID = unsigned
Line 30: ID = long
Line 30: ID = new_mask
Line 30: ;
Line 31: ID = struct
Line 31: ID = dnotify_struct
Line 31: *
Line 31: ID = dn
Line 31: ;
Line 33: ID = new_mask
Line 33: =
Line 33: INTCON = 0
Line 33: ;
Line 34: for
Line 34: (
Line 34: ID = dn
Line 34: =
Line 34: ID = inode
Line 34: -
Line 34: >
Line 34: ID = i_dnotify
Line 34: ;
Line 34: ID = dn
Line 34: !=
Line 34: ID = NULL
Line 34: ;
Line 34: ID = dn
Line 34: =
Line 34: ID = dn
Line 34: -
Line 34: >
Line 34: ID = dn_next
Line 34: )
Line 35: ID = new_mask
Line 35: Unrecognized token: 124
Line 35: =
Line 35: ID = dn
Line 35: -
Line 35: >
Line 35: ID = dn_mask
Line 35: Unrecognized token: 38
Line 35: Unrecognized token: 126
Line 35: ID = DN_MULTISHOT
Line 35: ;
Line 36: ID = inode
Line 36: -
Line 36: >
Line 36: ID = i_dnotify_mask
Line 36: =
Line 36: ID = new_mask
Line 36: ;
Line 37: }
Line 39: void
Line 39: ID = dnotify_flush
Line 39: (
Line 39: ID = struct
Line 39: ID = file
Line 39: *
Line 39: ID = filp
Line 39: ,
Line 39: ID = fl_owner_t
Line 39: ID = id
Line 39: )
Line 40: {
Line 41: ID = struct
Line 41: ID = dnotify_struct
Line 41: *
Line 41: ID = dn
Line 41: ;
Line 42: ID = struct
Line 42: ID = dnotify_struct
Line 42: *
Line 42: *
Line 42: ID = prev
Line 42: ;
Line 43: ID = struct
Line 43: ID = inode
Line 43: *
Line 43: ID = inode
Line 43: ;
Line 45: ID = inode
Line 45: =
Line 45: ID = filp
Line 45: -
Line 45: >
Line 45: ID = f_dentry
Line 45: -
Line 45: >
Line 45: ID = d_inode
Line 45: ;
Line 46: if
Line 46: (
Line 46: !
Line 46: ID = S_ISDIR
Line 46: (
Line 46: ID = inode
Line 46: -
Line 46: >
Line 46: ID = i_mode
Line 46: )
Line 46: )
Line 47: return
Line 47: ;
Line 48: ID = spin_lock
Line 48: (
Line 48: Unrecognized token: 38
Line 48: ID = inode
Line 48: -
Line 48: >
Line 48: ID = i_lock
Line 48: )
Line 48: ;
Line 49: ID = prev
Line 49: =
Line 49: Unrecognized token: 38
Line 49: ID = inode
Line 49: -
Line 49: >
Line 49: ID = i_dnotify
Line 49: ;
Line 50: while
Line 50: (
Line 50: (
Line 50: ID = dn
Line 50: =
Line 50: *
Line 50: ID = prev
Line 50: )
Line 50: !=
Line 50: ID = NULL
Line 50: )
Line 50: {
Line 51: if
Line 51: (
Line 51: (
Line 51: ID = dn
Line 51: -
Line 51: >
Line 51: ID = dn_owner
Line 51: ==
Line 51: ID = id
Line 51: )
Line 51: &&
Line 51: (
Line 51: ID = dn
Line 51: -
Line 51: >
Line 51: ID = dn_filp
Line 51: ==
Line 51: ID = filp
Line 51: )
Line 51: )
Line 51: {
Line 52: *
Line 52: ID = prev
Line 52: =
Line 52: ID = dn
Line 52: -
Line 52: >
Line 52: ID = dn_next
Line 52: ;
Line 53: ID = redo_inode_mask
Line 53: (
Line 53: ID = inode
Line 53: )
Line 53: ;
Line 54: ID = kmem_cache_free
Line 54: (
Line 54: ID = dn_cache
Line 54: ,
Line 54: ID = dn
Line 54: )
Line 54: ;
Line 55: ID = break
Line 55: ;
Line 56: }
Line 57: ID = prev
Line 57: =
Line 57: Unrecognized token: 38
Line 57: ID = dn
Line 57: -
Line 57: >
Line 57: ID = dn_next
Line 57: ;
Line 58: }
Line 59: ID = spin_unlock
Line 59: (
Line 59: Unrecognized token: 38
Line 59: ID = inode
Line 59: -
Line 59: >
Line 59: ID = i_lock
Line 59: )
Line 59: ;
Line 60: }
Line 62: int
Line 62: ID = fcntl_dirnotify
Line 62: (
Line 62: int
Line 62: ID = fd
Line 62: ,
Line 62: ID = struct
Line 62: ID = file
Line 62: *
Line 62: ID = filp
Line 62: ,
Line 62: ID = unsigned
Line 62: ID = long
Line 62: ID = arg
Line 62: )
Line 63: {
Line 64: ID = struct
Line 64: ID = dnotify_struct
Line 64: *
Line 64: ID = dn
Line 64: ;
Line 65: ID = struct
Line 65: ID = dnotify_struct
Line 65: *
Line 65: ID = odn
Line 65: ;
Line 66: ID = struct
Line 66: ID = dnotify_struct
Line 66: *
Line 66: *
Line 66: ID = prev
Line 66: ;
Line 67: ID = struct
Line 67: ID = inode
Line 67: *
Line 67: ID = inode
Line 67: ;
Line 68: ID = fl_owner_t
Line 68: ID = id
Line 68: =
Line 68: ID = current
Line 68: -
Line 68: >
Line 68: ID = files
Line 68: ;
Line 69: int
Line 69: ID = error
Line 69: =
Line 69: INTCON = 0
Line 69: ;
Line 71: if
Line 71: (
Line 71: (
Line 71: ID = arg
Line 71: Unrecognized token: 38
Line 71: Unrecognized token: 126
Line 71: ID = DN_MULTISHOT
Line 71: )
Line 71: ==
Line 71: INTCON = 0
Line 71: )
Line 71: {
Line 72: ID = dnotify_flush
Line 72: (
Line 72: ID = filp
Line 72: ,
Line 72: ID = id
Line 72: )
Line 72: ;
Line 73: return
Line 73: INTCON = 0
Line 73: ;
Line 74: }
Line 75: if
Line 75: (
Line 75: !
Line 75: ID = dir_notify_enable
Line 75: )
Line 76: return
Line 76: -
Line 76: ID = EINVAL
Line 76: ;
Line 77: ID = inode
Line 77: =
Line 77: ID = filp
Line 77: -
Line 77: >
Line 77: ID = f_dentry
Line 77: -
Line 77: >
Line 77: ID = d_inode
Line 77: ;
Line 78: if
Line 78: (
Line 78: !
Line 78: ID = S_ISDIR
Line 78: (
Line 78: ID = inode
Line 78: -
Line 78: >
Line 78: ID = i_mode
Line 78: )
Line 78: )
Line 79: return
Line 79: -
Line 79: ID = ENOTDIR
Line 79: ;
Line 80: ID = dn
Line 80: =
Line 80: ID = kmem_cache_alloc
Line 80: (
Line 80: ID = dn_cache
Line 80: ,
Line 80: ID = SLAB_KERNEL
Line 80: )
Line 80: ;
Line 81: if
Line 81: (
Line 81: ID = dn
Line 81: ==
Line 81: ID = NULL
Line 81: )
Line 82: return
Line 82: -
Line 82: ID = ENOMEM
Line 82: ;
Line 83: ID = spin_lock
Line 83: (
Line 83: Unrecognized token: 38
Line 83: ID = inode
Line 83: -
Line 83: >
Line 83: ID = i_lock
Line 83: )
Line 83: ;
Line 84: ID = prev
Line 84: =
Line 84: Unrecognized token: 38
Line 84: ID = inode
Line 84: -
Line 84: >
Line 84: ID = i_dnotify
Line 84: ;
Line 85: while
Line 85: (
Line 85: (
Line 85: ID = odn
Line 85: =
Line 85: *
Line 85: ID = prev
Line 85: )
Line 85: !=
Line 85: ID = NULL
Line 85: )
Line 85: {
Line 86: if
Line 86: (
Line 86: (
Line 86: ID = odn
Line 86: -
Line 86: >
Line 86: ID = dn_owner
Line 86: ==
Line 86: ID = id
Line 86: )
Line 86: &&
Line 86: (
Line 86: ID = odn
Line 86: -
Line 86: >
Line 86: ID = dn_filp
Line 86: ==
Line 86: ID = filp
Line 86: )
Line 86: )
Line 86: {
Line 87: ID = odn
Line 87: -
Line 87: >
Line 87: ID = dn_fd
Line 87: =
Line 87: ID = fd
Line 87: ;
Line 88: ID = odn
Line 88: -
Line 88: >
Line 88: ID = dn_mask
Line 88: Unrecognized token: 124
Line 88: =
Line 88: ID = arg
Line 88: ;
Line 89: ID = inode
Line 89: -
Line 89: >
Line 89: ID = i_dnotify_mask
Line 89: Unrecognized token: 124
Line 89: =
Line 89: ID = arg
Line 89: Unrecognized token: 38
Line 89: Unrecognized token: 126
Line 89: ID = DN_MULTISHOT
Line 89: ;
Line 90: ID = goto
Line 90: ID = out_free
Line 90: ;
Line 91: }
Line 92: ID = prev
Line 92: =
Line 92: Unrecognized token: 38
Line 92: ID = odn
Line 92: -
Line 92: >
Line 92: ID = dn_next
Line 92: ;
Line 93: }
Line 95: ID = error
Line 95: =
Line 95: ID = f_setown
Line 95: (
Line 95: ID = filp
Line 95: ,
Line 95: ID = current
Line 95: -
Line 95: >
Line 95: ID = pid
Line 95: ,
Line 95: INTCON = 0
Line 95: )
Line 95: ;
Line 96: if
Line 96: (
Line 96: ID = error
Line 96: )
Line 97: ID = goto
Line 97: ID = out_free
Line 97: ;
Line 99: ID = dn
Line 99: -
Line 99: >
Line 99: ID = dn_mask
Line 99: =
Line 99: ID = arg
Line 99: ;
Line 100: ID = dn
Line 100: -
Line 100: >
Line 100: ID = dn_fd
Line 100: =
Line 100: ID = fd
Line 100: ;
Line 101: ID = dn
Line 101: -
Line 101: >
Line 101: ID = dn_filp
Line 101: =
Line 101: ID = filp
Line 101: ;
Line 102: ID = dn
Line 102: -
Line 102: >
Line 102: ID = dn_owner
Line 102: =
Line 102: ID = id
Line 102: ;
Line 103: ID = inode
Line 103: -
Line 103: >
Line 103: ID = i_dnotify_mask
Line 103: Unrecognized token: 124
Line 103: =
Line 103: ID = arg
Line 103: Unrecognized token: 38
Line 103: Unrecognized token: 126
Line 103: ID = DN_MULTISHOT
Line 103: ;
Line 104: ID = dn
Line 104: -
Line 104: >
Line 104: ID = dn_next
Line 104: =
Line 104: ID = inode
Line 104: -
Line 104: >
Line 104: ID = i_dnotify
Line 104: ;
Line 105: ID = inode
Line 105: -
Line 105: >
Line 105: ID = i_dnotify
Line 105: =
Line 105: ID = dn
Line 105: ;
Line 106: ID = spin_unlock
Line 106: (
Line 106: Unrecognized token: 38
Line 106: ID = inode
Line 106: -
Line 106: >
Line 106: ID = i_lock
Line 106: )
Line 106: ;
Line 108: if
Line 108: (
Line 108: ID = filp
Line 108: -
Line 108: >
Line 108: ID = f_op
Line 108: &&
Line 108: ID = filp
Line 108: -
Line 108: >
Line 108: ID = f_op
Line 108: -
Line 108: >
Line 108: ID = dir_notify
Line 108: )
Line 109: return
Line 109: ID = filp
Line 109: -
Line 109: >
Line 109: ID = f_op
Line 109: -
Line 109: >
Line 109: ID = dir_notify
Line 109: (
Line 109: ID = filp
Line 109: ,
Line 109: ID = arg
Line 109: )
Line 109: ;
Line 110: return
Line 110: INTCON = 0
Line 110: ;
Line 112: ID = out_free
Line 112: Unrecognized token: 58
Line 113: ID = spin_unlock
Line 113: (
Line 113: Unrecognized token: 38
Line 113: ID = inode
Line 113: -
Line 113: >
Line 113: ID = i_lock
Line 113: )
Line 113: ;
Line 114: ID = kmem_cache_free
Line 114: (
Line 114: ID = dn_cache
Line 114: ,
Line 114: ID = dn
Line 114: )
Line 114: ;
Line 115: return
Line 115: ID = error
Line 115: ;
Line 116: }
Line 118: void
Line 118: Unrecognized token: 95
Line 118: Unrecognized token: 95
Line 118: ID = inode_dir_notify
Line 118: (
Line 118: ID = struct
Line 118: ID = inode
Line 118: *
Line 118: ID = inode
Line 118: ,
Line 118: ID = unsigned
Line 118: ID = long
Line 118: ID = event
Line 118: )
Line 119: {
Line 120: ID = struct
Line 120: ID = dnotify_struct
Line 120: *
Line 120: ID = dn
Line 120: ;
Line 121: ID = struct
Line 121: ID = dnotify_struct
Line 121: *
Line 121: *
Line 121: ID = prev
Line 121: ;
Line 122: ID = struct
Line 122: ID = fown_struct
Line 122: *
Line 122: ID = fown
Line 122: ;
Line 123: int
Line 123: ID = changed
Line 123: =
Line 123: INTCON = 0
Line 123: ;
Line 125: ID = spin_lock
Line 125: (
Line 125: Unrecognized token: 38
Line 125: ID = inode
Line 125: -
Line 125: >
Line 125: ID = i_lock
Line 125: )
Line 125: ;
Line 126: ID = prev
Line 126: =
Line 126: Unrecognized token: 38
Line 126: ID = inode
Line 126: -
Line 126: >
Line 126: ID = i_dnotify
Line 126: ;
Line 127: while
Line 127: (
Line 127: (
Line 127: ID = dn
Line 127: =
Line 127: *
Line 127: ID = prev
Line 127: )
Line 127: !=
Line 127: ID = NULL
Line 127: )
Line 127: {
Line 128: if
Line 128: (
Line 128: (
Line 128: ID = dn
Line 128: -
Line 128: >
Line 128: ID = dn_mask
Line 128: Unrecognized token: 38
Line 128: ID = event
Line 128: )
Line 128: ==
Line 128: INTCON = 0
Line 128: )
Line 128: {
Line 129: ID = prev
Line 129: =
Line 129: Unrecognized token: 38
Line 129: ID = dn
Line 129: -
Line 129: >
Line 129: ID = dn_next
Line 129: ;
Line 130: ID = continue
Line 130: ;
Line 131: }
Line 132: ID = fown
Line 132: =
Line 132: Unrecognized token: 38
Line 132: ID = dn
Line 132: -
Line 132: >
Line 132: ID = dn_filp
Line 132: -
Line 132: >
Line 132: ID = f_owner
Line 132: ;
Line 133: ID = send_sigio
Line 133: (
Line 133: ID = fown
Line 133: ,
Line 133: ID = dn
Line 133: -
Line 133: >
Line 133: ID = dn_fd
Line 133: ,
Line 133: ID = POLL_MSG
Line 133: )
Line 133: ;
Line 134: if
Line 134: (
Line 134: ID = dn
Line 134: -
Line 134: >
Line 134: ID = dn_mask
Line 134: Unrecognized token: 38
Line 134: ID = DN_MULTISHOT
Line 134: )
Line 135: ID = prev
Line 135: =
Line 135: Unrecognized token: 38
Line 135: ID = dn
Line 135: -
Line 135: >
Line 135: ID = dn_next
Line 135: ;
Line 136: else
Line 136: {
Line 137: *
Line 137: ID = prev
Line 137: =
Line 137: ID = dn
Line 137: -
Line 137: >
Line 137: ID = dn_next
Line 137: ;
Line 138: ID = changed
Line 138: =
Line 138: INTCON = 1
Line 138: ;
Line 139: ID = kmem_cache_free
Line 139: (
Line 139: ID = dn_cache
Line 139: ,
Line 139: ID = dn
Line 139: )
Line 139: ;
Line 140: }
Line 141: }
Line 142: if
Line 142: (
Line 142: ID = changed
Line 142: )
Line 143: ID = redo_inode_mask
Line 143: (
Line 143: ID = inode
Line 143: )
Line 143: ;
Line 144: ID = spin_unlock
Line 144: (
Line 144: Unrecognized token: 38
Line 144: ID = inode
Line 144: -
Line 144: >
Line 144: ID = i_lock
Line 144: )
Line 144: ;
Line 145: }
Line 147: ID = EXPORT_SYMBOL
Line 147: (
Line 147: Unrecognized token: 95
Line 147: Unrecognized token: 95
Line 147: ID = inode_dir_notify
Line 147: )
Line 147: ;
Line 156: void
Line 156: ID = dnotify_parent
Line 156: (
Line 156: ID = struct
Line 156: ID = dentry
Line 156: *
Line 156: ID = dentry
Line 156: ,
Line 156: ID = unsigned
Line 156: ID = long
Line 156: ID = event
Line 156: )
Line 157: {
Line 158: ID = struct
Line 158: ID = dentry
Line 158: *
Line 158: ID = parent
Line 158: ;
Line 160: if
Line 160: (
Line 160: !
Line 160: ID = dir_notify_enable
Line 160: )
Line 161: return
Line 161: ;
Line 163: ID = spin_lock
Line 163: (
Line 163: Unrecognized token: 38
Line 163: ID = dentry
Line 163: -
Line 163: >
Line 163: ID = d_lock
Line 163: )
Line 163: ;
Line 164: ID = parent
Line 164: =
Line 164: ID = dentry
Line 164: -
Line 164: >
Line 164: ID = d_parent
Line 164: ;
Line 165: if
Line 165: (
Line 165: ID = parent
Line 165: -
Line 165: >
Line 165: ID = d_inode
Line 165: -
Line 165: >
Line 165: ID = i_dnotify_mask
Line 165: Unrecognized token: 38
Line 165: ID = event
Line 165: )
Line 165: {
Line 166: ID = dget
Line 166: (
Line 166: ID = parent
Line 166: )
Line 166: ;
Line 167: ID = spin_unlock
Line 167: (
Line 167: Unrecognized token: 38
Line 167: ID = dentry
Line 167: -
Line 167: >
Line 167: ID = d_lock
Line 167: )
Line 167: ;
Line 168: Unrecognized token: 95
Line 168: Unrecognized token: 95
Line 168: ID = inode_dir_notify
Line 168: (
Line 168: ID = parent
Line 168: -
Line 168: >
Line 168: ID = d_inode
Line 168: ,
Line 168: ID = event
Line 168: )
Line 168: ;
Line 169: ID = dput
Line 169: (
Line 169: ID = parent
Line 169: )
Line 169: ;
Line 170: }
Line 170: else
Line 170: {
Line 171: ID = spin_unlock
Line 171: (
Line 171: Unrecognized token: 38
Line 171: ID = dentry
Line 171: -
Line 171: >
Line 171: ID = d_lock
Line 171: )
Line 171: ;
Line 172: }
Line 173: }
Line 174: ID = EXPORT_SYMBOL_GPL
Line 174: (
Line 174: ID = dnotify_parent
Line 174: )
Line 174: ;
Line 176: ID = static
Line 176: int
Line 176: Unrecognized token: 95
Line 176: Unrecognized token: 95
Line 176: ID = init
Line 176: ID = dnotify_init
Line 176: (
Line 176: void
Line 176: )
Line 177: {
Line 178: ID = dn_cache
Line 178: =
Line 178: ID = kmem_cache_create
Line 178: (
Line 178: STRINGCON = "dnotify_cache"
Line 178: ,
Line 179: ID = sizeof
Line 179: (
Line 179: ID = struct
Line 179: ID = dnotify_struct
Line 179: )
Line 179: ,
Line 179: INTCON = 0
Line 179: ,
Line 179: ID = SLAB_PANIC
Line 179: ,
Line 179: ID = NULL
Line 179: ,
Line 179: ID = NULL
Line 179: )
Line 179: ;
Line 180: return
Line 180: INTCON = 0
Line 180: ;
Line 181: }
Line 183: ID = module_init
Line 183: (
Line 183: ID = dnotify_init
Line 183: )
Line 184: -EOF-

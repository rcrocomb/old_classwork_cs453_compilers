Line 21: Unrecognized token: 35
Line 21: ID = include
Line 21: <
Line 21: ID = linux
Line 21: /
Line 21: ID = mm
Line 21: Unrecognized token: 46
Line 21: ID = h
Line 21: >
Line 22: Unrecognized token: 35
Line 22: ID = include
Line 22: <
Line 22: ID = linux
Line 22: /
Line 22: ID = module
Line 22: Unrecognized token: 46
Line 22: ID = h
Line 22: >
Line 23: Unrecognized token: 35
Line 23: ID = include
Line 23: <
Line 23: ID = linux
Line 23: /
Line 23: ID = nmi
Line 23: Unrecognized token: 46
Line 23: ID = h
Line 23: >
Line 24: Unrecognized token: 35
Line 24: ID = include
Line 24: <
Line 24: ID = linux
Line 24: /
Line 24: ID = init
Line 24: Unrecognized token: 46
Line 24: ID = h
Line 24: >
Line 25: Unrecognized token: 35
Line 25: ID = include
Line 25: <
Line 25: ID = asm
Line 25: /
Line 25: ID = uaccess
Line 25: Unrecognized token: 46
Line 25: ID = h
Line 25: >
Line 26: Unrecognized token: 35
Line 26: ID = include
Line 26: <
Line 26: ID = linux
Line 26: /
Line 26: ID = highmem
Line 26: Unrecognized token: 46
Line 26: ID = h
Line 26: >
Line 27: Unrecognized token: 35
Line 27: ID = include
Line 27: <
Line 27: ID = linux
Line 27: /
Line 27: ID = smp_lock
Line 27: Unrecognized token: 46
Line 27: ID = h
Line 27: >
Line 28: Unrecognized token: 35
Line 28: ID = include
Line 28: <
Line 28: ID = asm
Line 28: /
Line 28: ID = mmu_context
Line 28: Unrecognized token: 46
Line 28: ID = h
Line 28: >
Line 29: Unrecognized token: 35
Line 29: ID = include
Line 29: <
Line 29: ID = linux
Line 29: /
Line 29: ID = interrupt
Line 29: Unrecognized token: 46
Line 29: ID = h
Line 29: >
Line 30: Unrecognized token: 35
Line 30: ID = include
Line 30: <
Line 30: ID = linux
Line 30: /
Line 30: ID = completion
Line 30: Unrecognized token: 46
Line 30: ID = h
Line 30: >
Line 31: Unrecognized token: 35
Line 31: ID = include
Line 31: <
Line 31: ID = linux
Line 31: /
Line 31: ID = kernel_stat
Line 31: Unrecognized token: 46
Line 31: ID = h
Line 31: >
Line 32: Unrecognized token: 35
Line 32: ID = include
Line 32: <
Line 32: ID = linux
Line 32: /
Line 32: ID = security
Line 32: Unrecognized token: 46
Line 32: ID = h
Line 32: >
Line 33: Unrecognized token: 35
Line 33: ID = include
Line 33: <
Line 33: ID = linux
Line 33: /
Line 33: ID = notifier
Line 33: Unrecognized token: 46
Line 33: ID = h
Line 33: >
Line 34: Unrecognized token: 35
Line 34: ID = include
Line 34: <
Line 34: ID = linux
Line 34: /
Line 34: ID = suspend
Line 34: Unrecognized token: 46
Line 34: ID = h
Line 34: >
Line 35: Unrecognized token: 35
Line 35: ID = include
Line 35: <
Line 35: ID = linux
Line 35: /
Line 35: ID = blkdev
Line 35: Unrecognized token: 46
Line 35: ID = h
Line 35: >
Line 36: Unrecognized token: 35
Line 36: ID = include
Line 36: <
Line 36: ID = linux
Line 36: /
Line 36: ID = delay
Line 36: Unrecognized token: 46
Line 36: ID = h
Line 36: >
Line 37: Unrecognized token: 35
Line 37: ID = include
Line 37: <
Line 37: ID = linux
Line 37: /
Line 37: ID = smp
Line 37: Unrecognized token: 46
Line 37: ID = h
Line 37: >
Line 38: Unrecognized token: 35
Line 38: ID = include
Line 38: <
Line 38: ID = linux
Line 38: /
Line 38: ID = timer
Line 38: Unrecognized token: 46
Line 38: ID = h
Line 38: >
Line 39: Unrecognized token: 35
Line 39: ID = include
Line 39: <
Line 39: ID = linux
Line 39: /
Line 39: ID = rcupdate
Line 39: Unrecognized token: 46
Line 39: ID = h
Line 39: >
Line 40: Unrecognized token: 35
Line 40: ID = include
Line 40: <
Line 40: ID = linux
Line 40: /
Line 40: ID = cpu
Line 40: Unrecognized token: 46
Line 40: ID = h
Line 40: >
Line 41: Unrecognized token: 35
Line 41: ID = include
Line 41: <
Line 41: ID = linux
Line 41: /
Line 41: ID = percpu
Line 41: Unrecognized token: 46
Line 41: ID = h
Line 41: >
Line 42: Unrecognized token: 35
Line 42: ID = include
Line 42: <
Line 42: ID = linux
Line 42: /
Line 42: ID = kthread
Line 42: Unrecognized token: 46
Line 42: ID = h
Line 42: >
Line 43: Unrecognized token: 35
Line 43: ID = include
Line 43: <
Line 43: ID = asm
Line 43: /
Line 43: ID = tlb
Line 43: Unrecognized token: 46
Line 43: ID = h
Line 43: >
Line 45: Unrecognized token: 35
Line 45: ID = include
Line 45: <
Line 45: ID = asm
Line 45: /
Line 45: ID = unistd
Line 45: Unrecognized token: 46
Line 45: ID = h
Line 45: >
Line 47: Unrecognized token: 35
Line 47: ID = ifdef
Line 47: ID = CONFIG_NUMA
Line 48: Unrecognized token: 35
Line 48: ID = define
Line 48: ID = cpu_to_node_mask
Line 48: (
Line 48: ID = cpu
Line 48: )
Line 48: ID = node_to_cpumask
Line 48: (
Line 48: ID = cpu_to_node
Line 48: (
Line 48: ID = cpu
Line 48: )
Line 48: )
Line 49: Unrecognized token: 35
Line 49: else
Line 50: Unrecognized token: 35
Line 50: ID = define
Line 50: ID = cpu_to_node_mask
Line 50: (
Line 50: ID = cpu
Line 50: )
Line 50: (
Line 50: ID = cpu_online_map
Line 50: )
Line 51: Unrecognized token: 35
Line 51: ID = endif
Line 58: Unrecognized token: 35
Line 58: ID = define
Line 58: ID = NICE_TO_PRIO
Line 58: (
Line 58: ID = nice
Line 58: )
Line 58: (
Line 58: ID = MAX_RT_PRIO
Line 58: +
Line 58: (
Line 58: ID = nice
Line 58: )
Line 58: +
Line 58: INTCON = 20
Line 58: )
Line 59: Unrecognized token: 35
Line 59: ID = define
Line 59: ID = PRIO_TO_NICE
Line 59: (
Line 59: ID = prio
Line 59: )
Line 59: (
Line 59: (
Line 59: ID = prio
Line 59: )
Line 59: -
Line 59: ID = MAX_RT_PRIO
Line 59: -
Line 59: INTCON = 20
Line 59: )
Line 60: Unrecognized token: 35
Line 60: ID = define
Line 60: ID = TASK_NICE
Line 60: (
Line 60: ID = p
Line 60: )
Line 60: ID = PRIO_TO_NICE
Line 60: (
Line 60: (
Line 60: ID = p
Line 60: )
Line 60: -
Line 60: >
Line 60: ID = static_prio
Line 60: )
Line 67: Unrecognized token: 35
Line 67: ID = define
Line 67: ID = USER_PRIO
Line 67: (
Line 67: ID = p
Line 67: )
Line 67: (
Line 67: (
Line 67: ID = p
Line 67: )
Line 67: -
Line 67: ID = MAX_RT_PRIO
Line 67: )
Line 68: Unrecognized token: 35
Line 68: ID = define
Line 68: ID = TASK_USER_PRIO
Line 68: (
Line 68: ID = p
Line 68: )
Line 68: ID = USER_PRIO
Line 68: (
Line 68: (
Line 68: ID = p
Line 68: )
Line 68: -
Line 68: >
Line 68: ID = static_prio
Line 68: )
Line 69: Unrecognized token: 35
Line 69: ID = define
Line 69: ID = MAX_USER_PRIO
Line 69: (
Line 69: ID = USER_PRIO
Line 69: (
Line 69: ID = MAX_PRIO
Line 69: )
Line 69: )
Line 70: Unrecognized token: 35
Line 70: ID = define
Line 70: ID = AVG_TIMESLICE
Line 70: (
Line 70: ID = MIN_TIMESLICE
Line 70: +
Line 70: (
Line 70: (
Line 70: ID = MAX_TIMESLICE
Line 70: -
Line 70: ID = MIN_TIMESLICE
Line 70: )
Line 70: *
Line 70: Unrecognized token: 92
Line 71: (
Line 71: ID = MAX_PRIO
Line 71: -
Line 71: INTCON = 1
Line 71: -
Line 71: ID = NICE_TO_PRIO
Line 71: (
Line 71: INTCON = 0
Line 71: )
Line 71: )
Line 71: /
Line 71: (
Line 71: ID = MAX_USER_PRIO
Line 71: -
Line 71: INTCON = 1
Line 71: )
Line 71: )
Line 71: )
Line 76: Unrecognized token: 35
Line 76: ID = define
Line 76: ID = NS_TO_JIFFIES
Line 76: (
Line 76: ID = TIME
Line 76: )
Line 76: (
Line 76: (
Line 76: ID = TIME
Line 76: )
Line 76: /
Line 76: (
Line 76: INTCON = 1000000000
Line 76: /
Line 76: ID = HZ
Line 76: )
Line 76: )
Line 77: Unrecognized token: 35
Line 77: ID = define
Line 77: ID = JIFFIES_TO_NS
Line 77: (
Line 77: ID = TIME
Line 77: )
Line 77: (
Line 77: (
Line 77: ID = TIME
Line 77: )
Line 77: *
Line 77: (
Line 77: INTCON = 1000000000
Line 77: /
Line 77: ID = HZ
Line 77: )
Line 77: )
Line 86: Unrecognized token: 35
Line 86: ID = define
Line 86: ID = MIN_TIMESLICE
Line 86: (
Line 86: INTCON = 10
Line 86: *
Line 86: ID = HZ
Line 86: /
Line 86: INTCON = 1000
Line 86: )
Line 87: Unrecognized token: 35
Line 87: ID = define
Line 87: ID = MAX_TIMESLICE
Line 87: (
Line 87: INTCON = 200
Line 87: *
Line 87: ID = HZ
Line 87: /
Line 87: INTCON = 1000
Line 87: )
Line 88: Unrecognized token: 35
Line 88: ID = define
Line 88: ID = ON_RUNQUEUE_WEIGHT
Line 88: INTCON = 30
Line 89: Unrecognized token: 35
Line 89: ID = define
Line 89: ID = CHILD_PENALTY
Line 89: INTCON = 95
Line 90: Unrecognized token: 35
Line 90: ID = define
Line 90: ID = PARENT_PENALTY
Line 90: INTCON = 100
Line 91: Unrecognized token: 35
Line 91: ID = define
Line 91: ID = EXIT_WEIGHT
Line 91: INTCON = 3
Line 92: Unrecognized token: 35
Line 92: ID = define
Line 92: ID = PRIO_BONUS_RATIO
Line 92: INTCON = 25
Line 93: Unrecognized token: 35
Line 93: ID = define
Line 93: ID = MAX_BONUS
Line 93: (
Line 93: ID = MAX_USER_PRIO
Line 93: *
Line 93: ID = PRIO_BONUS_RATIO
Line 93: /
Line 93: INTCON = 100
Line 93: )
Line 94: Unrecognized token: 35
Line 94: ID = define
Line 94: ID = INTERACTIVE_DELTA
Line 94: INTCON = 2
Line 95: Unrecognized token: 35
Line 95: ID = define
Line 95: ID = MAX_SLEEP_AVG
Line 95: (
Line 95: ID = AVG_TIMESLICE
Line 95: *
Line 95: ID = MAX_BONUS
Line 95: )
Line 96: Unrecognized token: 35
Line 96: ID = define
Line 96: ID = STARVATION_LIMIT
Line 96: (
Line 96: ID = MAX_SLEEP_AVG
Line 96: )
Line 97: Unrecognized token: 35
Line 97: ID = define
Line 97: ID = NS_MAX_SLEEP_AVG
Line 97: (
Line 97: ID = JIFFIES_TO_NS
Line 97: (
Line 97: ID = MAX_SLEEP_AVG
Line 97: )
Line 97: )
Line 98: Unrecognized token: 35
Line 98: ID = define
Line 98: ID = CREDIT_LIMIT
Line 98: INTCON = 100
Line 128: Unrecognized token: 35
Line 128: ID = define
Line 128: ID = CURRENT_BONUS
Line 128: (
Line 128: ID = p
Line 128: )
Line 128: Unrecognized token: 92
Line 129: (
Line 129: ID = NS_TO_JIFFIES
Line 129: (
Line 129: (
Line 129: ID = p
Line 129: )
Line 129: -
Line 129: >
Line 129: ID = sleep_avg
Line 129: )
Line 129: *
Line 129: ID = MAX_BONUS
Line 129: /
Line 129: Unrecognized token: 92
Line 130: ID = MAX_SLEEP_AVG
Line 130: )
Line 132: Unrecognized token: 35
Line 132: ID = ifdef
Line 132: ID = CONFIG_SMP
Line 133: Unrecognized token: 35
Line 133: ID = define
Line 133: ID = TIMESLICE_GRANULARITY
Line 133: (
Line 133: ID = p
Line 133: )
Line 133: (
Line 133: ID = MIN_TIMESLICE
Line 133: *
Line 133: Unrecognized token: 92
Line 134: (
Line 134: INTCON = 1
Line 134: <
Line 134: <
Line 134: (
Line 134: (
Line 134: (
Line 134: ID = MAX_BONUS
Line 134: -
Line 134: ID = CURRENT_BONUS
Line 134: (
Line 134: ID = p
Line 134: )
Line 134: )
Line 134: Unrecognized token: 63
Line 134: Unrecognized token: 58
Line 134: INTCON = 1
Line 134: )
Line 134: -
Line 134: INTCON = 1
Line 134: )
Line 134: )
Line 134: *
Line 134: Unrecognized token: 92
Line 135: ID = num_online_cpus
Line 135: (
Line 135: )
Line 135: )
Line 136: Unrecognized token: 35
Line 136: else
Line 137: Unrecognized token: 35
Line 137: ID = define
Line 137: ID = TIMESLICE_GRANULARITY
Line 137: (
Line 137: ID = p
Line 137: )
Line 137: (
Line 137: ID = MIN_TIMESLICE
Line 137: *
Line 137: Unrecognized token: 92
Line 138: (
Line 138: INTCON = 1
Line 138: <
Line 138: <
Line 138: (
Line 138: (
Line 138: (
Line 138: ID = MAX_BONUS
Line 138: -
Line 138: ID = CURRENT_BONUS
Line 138: (
Line 138: ID = p
Line 138: )
Line 138: )
Line 138: Unrecognized token: 63
Line 138: Unrecognized token: 58
Line 138: INTCON = 1
Line 138: )
Line 138: -
Line 138: INTCON = 1
Line 138: )
Line 138: )
Line 138: )
Line 139: Unrecognized token: 35
Line 139: ID = endif
Line 141: Unrecognized token: 35
Line 141: ID = define
Line 141: ID = SCALE
Line 141: (
Line 141: ID = v1
Line 141: ,
Line 141: ID = v1_max
Line 141: ,
Line 141: ID = v2_max
Line 141: )
Line 141: Unrecognized token: 92
Line 142: (
Line 142: ID = v1
Line 142: )
Line 142: *
Line 142: (
Line 142: ID = v2_max
Line 142: )
Line 142: /
Line 142: (
Line 142: ID = v1_max
Line 142: )
Line 144: Unrecognized token: 35
Line 144: ID = define
Line 144: ID = DELTA
Line 144: (
Line 144: ID = p
Line 144: )
Line 144: Unrecognized token: 92
Line 145: (
Line 145: ID = SCALE
Line 145: (
Line 145: ID = TASK_NICE
Line 145: (
Line 145: ID = p
Line 145: )
Line 145: ,
Line 145: INTCON = 40
Line 145: ,
Line 145: ID = MAX_BONUS
Line 145: )
Line 145: +
Line 145: ID = INTERACTIVE_DELTA
Line 145: )
Line 147: Unrecognized token: 35
Line 147: ID = define
Line 147: ID = TASK_INTERACTIVE
Line 147: (
Line 147: ID = p
Line 147: )
Line 147: Unrecognized token: 92
Line 148: (
Line 148: (
Line 148: ID = p
Line 148: )
Line 148: -
Line 148: >
Line 148: ID = prio
Line 148: <=
Line 148: (
Line 148: ID = p
Line 148: )
Line 148: -
Line 148: >
Line 148: ID = static_prio
Line 148: -
Line 148: ID = DELTA
Line 148: (
Line 148: ID = p
Line 148: )
Line 148: )
Line 150: Unrecognized token: 35
Line 150: ID = define
Line 150: ID = INTERACTIVE_SLEEP
Line 150: (
Line 150: ID = p
Line 150: )
Line 150: Unrecognized token: 92
Line 151: (
Line 151: ID = JIFFIES_TO_NS
Line 151: (
Line 151: ID = MAX_SLEEP_AVG
Line 151: *
Line 151: Unrecognized token: 92
Line 152: (
Line 152: ID = MAX_BONUS
Line 152: /
Line 152: INTCON = 2
Line 152: +
Line 152: ID = DELTA
Line 152: (
Line 152: (
Line 152: ID = p
Line 152: )
Line 152: )
Line 152: +
Line 152: INTCON = 1
Line 152: )
Line 152: /
Line 152: ID = MAX_BONUS
Line 152: -
Line 152: INTCON = 1
Line 152: )
Line 152: )
Line 154: Unrecognized token: 35
Line 154: ID = define
Line 154: ID = HIGH_CREDIT
Line 154: (
Line 154: ID = p
Line 154: )
Line 154: Unrecognized token: 92
Line 155: (
Line 155: (
Line 155: ID = p
Line 155: )
Line 155: -
Line 155: >
Line 155: ID = interactive_credit
Line 155: >
Line 155: ID = CREDIT_LIMIT
Line 155: )
Line 157: Unrecognized token: 35
Line 157: ID = define
Line 157: ID = LOW_CREDIT
Line 157: (
Line 157: ID = p
Line 157: )
Line 157: Unrecognized token: 92
Line 158: (
Line 158: (
Line 158: ID = p
Line 158: )
Line 158: -
Line 158: >
Line 158: ID = interactive_credit
Line 158: <
Line 158: -
Line 158: ID = CREDIT_LIMIT
Line 158: )
Line 160: Unrecognized token: 35
Line 160: ID = define
Line 160: ID = TASK_PREEMPTS_CURR
Line 160: (
Line 160: ID = p
Line 160: ,
Line 160: ID = rq
Line 160: )
Line 160: Unrecognized token: 92
Line 161: (
Line 161: (
Line 161: ID = p
Line 161: )
Line 161: -
Line 161: >
Line 161: ID = prio
Line 161: <
Line 161: (
Line 161: ID = rq
Line 161: )
Line 161: -
Line 161: >
Line 161: ID = curr
Line 161: -
Line 161: >
Line 161: ID = prio
Line 161: )
Line 174: Unrecognized token: 35
Line 174: ID = define
Line 174: ID = BASE_TIMESLICE
Line 174: (
Line 174: ID = p
Line 174: )
Line 174: (
Line 174: ID = MIN_TIMESLICE
Line 174: +
Line 174: Unrecognized token: 92
Line 175: (
Line 175: (
Line 175: ID = MAX_TIMESLICE
Line 175: -
Line 175: ID = MIN_TIMESLICE
Line 175: )
Line 175: *
Line 175: Unrecognized token: 92
Line 176: (
Line 176: ID = MAX_PRIO
Line 176: -
Line 176: INTCON = 1
Line 176: -
Line 176: (
Line 176: ID = p
Line 176: )
Line 176: -
Line 176: >
Line 176: ID = static_prio
Line 176: )
Line 176: /
Line 176: (
Line 176: ID = MAX_USER_PRIO
Line 176: -
Line 176: INTCON = 1
Line 176: )
Line 176: )
Line 176: )
Line 178: ID = static
Line 178: ID = unsigned
Line 178: int
Line 178: ID = task_timeslice
Line 178: (
Line 178: ID = task_t
Line 178: *
Line 178: ID = p
Line 178: )
Line 179: {
Line 180: return
Line 180: ID = BASE_TIMESLICE
Line 180: (
Line 180: ID = p
Line 180: )
Line 180: ;
Line 181: }
Line 183: Unrecognized token: 35
Line 183: ID = define
Line 183: ID = task_hot
Line 183: (
Line 183: ID = p
Line 183: ,
Line 183: ID = now
Line 183: ,
Line 183: ID = sd
Line 183: )
Line 183: (
Line 183: (
Line 183: ID = now
Line 183: )
Line 183: -
Line 183: (
Line 183: ID = p
Line 183: )
Line 183: -
Line 183: >
Line 183: ID = timestamp
Line 183: <
Line 183: (
Line 183: ID = sd
Line 183: )
Line 183: -
Line 183: >
Line 183: ID = cache_hot_time
Line 183: )
Line 189: Unrecognized token: 35
Line 189: ID = define
Line 189: ID = BITMAP_SIZE
Line 189: (
Line 189: (
Line 189: (
Line 189: (
Line 189: ID = MAX_PRIO
Line 189: +
Line 189: INTCON = 1
Line 189: +
Line 189: INTCON = 7
Line 189: )
Line 189: /
Line 189: INTCON = 8
Line 189: )
Line 189: +
Line 189: ID = sizeof
Line 189: (
Line 189: ID = long
Line 189: )
Line 189: -
Line 189: INTCON = 1
Line 189: )
Line 189: /
Line 189: ID = sizeof
Line 189: (
Line 189: ID = long
Line 189: )
Line 189: )
Line 191: ID = typedef
Line 191: ID = struct
Line 191: ID = runqueue
Line 191: ID = runqueue_t
Line 191: ;
Line 193: ID = struct
Line 193: ID = prio_array
Line 193: {
Line 194: ID = unsigned
Line 194: int
Line 194: ID = nr_active
Line 194: ;
Line 195: ID = unsigned
Line 195: ID = long
Line 195: ID = bitmap
Line 195: [
Line 195: ID = BITMAP_SIZE
Line 195: ]
Line 195: ;
Line 196: ID = struct
Line 196: ID = list_head
Line 196: ID = queue
Line 196: [
Line 196: ID = MAX_PRIO
Line 196: ]
Line 196: ;
Line 197: }
Line 197: ;
Line 206: ID = struct
Line 206: ID = runqueue
Line 206: {
Line 207: ID = spinlock_t
Line 207: ID = lock
Line 207: ;
Line 213: ID = unsigned
Line 213: ID = long
Line 213: ID = nr_running
Line 213: ;
Line 214: Unrecognized token: 35
Line 214: ID = ifdef
Line 214: ID = CONFIG_SMP
Line 215: ID = unsigned
Line 215: ID = long
Line 215: ID = cpu_load
Line 215: ;
Line 216: Unrecognized token: 35
Line 216: ID = endif
Line 217: ID = unsigned
Line 217: ID = long
Line 217: ID = long
Line 217: ID = nr_switches
Line 217: ;
Line 218: ID = unsigned
Line 218: ID = long
Line 218: ID = expired_timestamp
Line 218: ,
Line 218: ID = nr_uninterruptible
Line 218: ;
Line 219: ID = unsigned
Line 219: ID = long
Line 219: ID = long
Line 219: ID = timestamp_last_tick
Line 219: ;
Line 220: ID = task_t
Line 220: *
Line 220: ID = curr
Line 220: ,
Line 220: *
Line 220: ID = idle
Line 220: ;
Line 221: ID = struct
Line 221: ID = mm_struct
Line 221: *
Line 221: ID = prev_mm
Line 221: ;
Line 222: ID = prio_array_t
Line 222: *
Line 222: ID = active
Line 222: ,
Line 222: *
Line 222: ID = expired
Line 222: ,
Line 222: ID = arrays
Line 222: [
Line 222: INTCON = 2
Line 222: ]
Line 222: ;
Line 223: int
Line 223: ID = best_expired_prio
Line 223: ;
Line 224: ID = atomic_t
Line 224: ID = nr_iowait
Line 224: ;
Line 226: Unrecognized token: 35
Line 226: ID = ifdef
Line 226: ID = CONFIG_SMP
Line 227: ID = struct
Line 227: ID = sched_domain
Line 227: *
Line 227: ID = sd
Line 227: ;
Line 230: int
Line 230: ID = active_balance
Line 230: ;
Line 231: int
Line 231: ID = push_cpu
Line 231: ;
Line 233: ID = task_t
Line 233: *
Line 233: ID = migration_thread
Line 233: ;
Line 234: ID = struct
Line 234: ID = list_head
Line 234: ID = migration_queue
Line 234: ;
Line 235: Unrecognized token: 35
Line 235: ID = endif
Line 236: }
Line 236: ;
Line 238: ID = static
Line 238: ID = DEFINE_PER_CPU
Line 238: (
Line 238: ID = struct
Line 238: ID = runqueue
Line 238: ,
Line 238: ID = runqueues
Line 238: )
Line 238: ;
Line 240: Unrecognized token: 35
Line 240: ID = define
Line 240: ID = for_each_domain
Line 240: (
Line 240: ID = cpu
Line 240: ,
Line 240: ID = domain
Line 240: )
Line 240: Unrecognized token: 92
Line 241: for
Line 241: (
Line 241: ID = domain
Line 241: =
Line 241: ID = cpu_rq
Line 241: (
Line 241: ID = cpu
Line 241: )
Line 241: -
Line 241: >
Line 241: ID = sd
Line 241: ;
Line 241: ID = domain
Line 241: ;
Line 241: ID = domain
Line 241: =
Line 241: ID = domain
Line 241: -
Line 241: >
Line 241: ID = parent
Line 241: )
Line 243: Unrecognized token: 35
Line 243: ID = define
Line 243: ID = cpu_rq
Line 243: (
Line 243: ID = cpu
Line 243: )
Line 243: (
Line 243: Unrecognized token: 38
Line 243: ID = per_cpu
Line 243: (
Line 243: ID = runqueues
Line 243: ,
Line 243: (
Line 243: ID = cpu
Line 243: )
Line 243: )
Line 243: )
Line 244: Unrecognized token: 35
Line 244: ID = define
Line 244: ID = this_rq
Line 244: (
Line 244: )
Line 244: (
Line 244: Unrecognized token: 38
Line 244: Unrecognized token: 95
Line 244: Unrecognized token: 95
Line 244: ID = get_cpu_var
Line 244: (
Line 244: ID = runqueues
Line 244: )
Line 244: )
Line 245: Unrecognized token: 35
Line 245: ID = define
Line 245: ID = task_rq
Line 245: (
Line 245: ID = p
Line 245: )
Line 245: ID = cpu_rq
Line 245: (
Line 245: ID = task_cpu
Line 245: (
Line 245: ID = p
Line 245: )
Line 245: )
Line 246: Unrecognized token: 35
Line 246: ID = define
Line 246: ID = cpu_curr
Line 246: (
Line 246: ID = cpu
Line 246: )
Line 246: (
Line 246: ID = cpu_rq
Line 246: (
Line 246: ID = cpu
Line 246: )
Line 246: -
Line 246: >
Line 246: ID = curr
Line 246: )
Line 251: Unrecognized token: 35
Line 251: ID = ifndef
Line 251: ID = prepare_arch_switch
Line 252: Unrecognized token: 35
Line 252: ID = define
Line 252: ID = prepare_arch_switch
Line 252: (
Line 252: ID = rq
Line 252: ,
Line 252: ID = next
Line 252: )
Line 252: ID = do
Line 252: {
Line 252: }
Line 252: while
Line 252: (
Line 252: INTCON = 0
Line 252: )
Line 253: Unrecognized token: 35
Line 253: ID = define
Line 253: ID = finish_arch_switch
Line 253: (
Line 253: ID = rq
Line 253: ,
Line 253: ID = next
Line 253: )
Line 253: ID = spin_unlock_irq
Line 253: (
Line 253: Unrecognized token: 38
Line 253: (
Line 253: ID = rq
Line 253: )
Line 253: -
Line 253: >
Line 253: ID = lock
Line 253: )
Line 254: Unrecognized token: 35
Line 254: ID = define
Line 254: ID = task_running
Line 254: (
Line 254: ID = rq
Line 254: ,
Line 254: ID = p
Line 254: )
Line 254: (
Line 254: (
Line 254: ID = rq
Line 254: )
Line 254: -
Line 254: >
Line 254: ID = curr
Line 254: ==
Line 254: (
Line 254: ID = p
Line 254: )
Line 254: )
Line 255: Unrecognized token: 35
Line 255: ID = endif
Line 262: ID = static
Line 262: ID = runqueue_t
Line 262: *
Line 262: ID = task_rq_lock
Line 262: (
Line 262: ID = task_t
Line 262: *
Line 262: ID = p
Line 262: ,
Line 262: ID = unsigned
Line 262: ID = long
Line 262: *
Line 262: ID = flags
Line 262: )
Line 263: {
Line 264: ID = struct
Line 264: ID = runqueue
Line 264: *
Line 264: ID = rq
Line 264: ;
Line 266: ID = repeat_lock_task
Line 266: Unrecognized token: 58
Line 267: ID = local_irq_save
Line 267: (
Line 267: *
Line 267: ID = flags
Line 267: )
Line 267: ;
Line 268: ID = rq
Line 268: =
Line 268: ID = task_rq
Line 268: (
Line 268: ID = p
Line 268: )
Line 268: ;
Line 269: ID = spin_lock
Line 269: (
Line 269: Unrecognized token: 38
Line 269: ID = rq
Line 269: -
Line 269: >
Line 269: ID = lock
Line 269: )
Line 269: ;
Line 270: if
Line 270: (
Line 270: ID = unlikely
Line 270: (
Line 270: ID = rq
Line 270: !=
Line 270: ID = task_rq
Line 270: (
Line 270: ID = p
Line 270: )
Line 270: )
Line 270: )
Line 270: {
Line 271: ID = spin_unlock_irqrestore
Line 271: (
Line 271: Unrecognized token: 38
Line 271: ID = rq
Line 271: -
Line 271: >
Line 271: ID = lock
Line 271: ,
Line 271: *
Line 271: ID = flags
Line 271: )
Line 271: ;
Line 272: ID = goto
Line 272: ID = repeat_lock_task
Line 272: ;
Line 273: }
Line 274: return
Line 274: ID = rq
Line 274: ;
Line 275: }
Line 277: ID = static
Line 277: ID = inline
Line 277: void
Line 277: ID = task_rq_unlock
Line 277: (
Line 277: ID = runqueue_t
Line 277: *
Line 277: ID = rq
Line 277: ,
Line 277: ID = unsigned
Line 277: ID = long
Line 277: *
Line 277: ID = flags
Line 277: )
Line 278: {
Line 279: ID = spin_unlock_irqrestore
Line 279: (
Line 279: Unrecognized token: 38
Line 279: ID = rq
Line 279: -
Line 279: >
Line 279: ID = lock
Line 279: ,
Line 279: *
Line 279: ID = flags
Line 279: )
Line 279: ;
Line 280: }
Line 285: ID = static
Line 285: ID = runqueue_t
Line 285: *
Line 285: ID = this_rq_lock
Line 285: (
Line 285: void
Line 285: )
Line 286: {
Line 287: ID = runqueue_t
Line 287: *
Line 287: ID = rq
Line 287: ;
Line 289: ID = local_irq_disable
Line 289: (
Line 289: )
Line 289: ;
Line 290: ID = rq
Line 290: =
Line 290: ID = this_rq
Line 290: (
Line 290: )
Line 290: ;
Line 291: ID = spin_lock
Line 291: (
Line 291: Unrecognized token: 38
Line 291: ID = rq
Line 291: -
Line 291: >
Line 291: ID = lock
Line 291: )
Line 291: ;
Line 293: return
Line 293: ID = rq
Line 293: ;
Line 294: }
Line 296: ID = static
Line 296: ID = inline
Line 296: void
Line 296: ID = rq_unlock
Line 296: (
Line 296: ID = runqueue_t
Line 296: *
Line 296: ID = rq
Line 296: )
Line 297: {
Line 298: ID = spin_unlock_irq
Line 298: (
Line 298: Unrecognized token: 38
Line 298: ID = rq
Line 298: -
Line 298: >
Line 298: ID = lock
Line 298: )
Line 298: ;
Line 299: }
Line 304: ID = static
Line 304: void
Line 304: ID = dequeue_task
Line 304: (
Line 304: ID = struct
Line 304: ID = task_struct
Line 304: *
Line 304: ID = p
Line 304: ,
Line 304: ID = prio_array_t
Line 304: *
Line 304: ID = array
Line 304: )
Line 305: {
Line 306: ID = array
Line 306: -
Line 306: >
Line 306: ID = nr_active
Line 306: -
Line 306: -
Line 306: ;
Line 307: ID = list_del
Line 307: (
Line 307: Unrecognized token: 38
Line 307: ID = p
Line 307: -
Line 307: >
Line 307: ID = run_list
Line 307: )
Line 307: ;
Line 308: if
Line 308: (
Line 308: ID = list_empty
Line 308: (
Line 308: ID = array
Line 308: -
Line 308: >
Line 308: ID = queue
Line 308: +
Line 308: ID = p
Line 308: -
Line 308: >
Line 308: ID = prio
Line 308: )
Line 308: )
Line 309: Unrecognized token: 95
Line 309: Unrecognized token: 95
Line 309: ID = clear_bit
Line 309: (
Line 309: ID = p
Line 309: -
Line 309: >
Line 309: ID = prio
Line 309: ,
Line 309: ID = array
Line 309: -
Line 309: >
Line 309: ID = bitmap
Line 309: )
Line 309: ;
Line 310: }
Line 312: ID = static
Line 312: void
Line 312: ID = enqueue_task
Line 312: (
Line 312: ID = struct
Line 312: ID = task_struct
Line 312: *
Line 312: ID = p
Line 312: ,
Line 312: ID = prio_array_t
Line 312: *
Line 312: ID = array
Line 312: )
Line 313: {
Line 314: ID = list_add_tail
Line 314: (
Line 314: Unrecognized token: 38
Line 314: ID = p
Line 314: -
Line 314: >
Line 314: ID = run_list
Line 314: ,
Line 314: ID = array
Line 314: -
Line 314: >
Line 314: ID = queue
Line 314: +
Line 314: ID = p
Line 314: -
Line 314: >
Line 314: ID = prio
Line 314: )
Line 314: ;
Line 315: Unrecognized token: 95
Line 315: Unrecognized token: 95
Line 315: ID = set_bit
Line 315: (
Line 315: ID = p
Line 315: -
Line 315: >
Line 315: ID = prio
Line 315: ,
Line 315: ID = array
Line 315: -
Line 315: >
Line 315: ID = bitmap
Line 315: )
Line 315: ;
Line 316: ID = array
Line 316: -
Line 316: >
Line 316: ID = nr_active
Line 316: +
Line 316: +
Line 316: ;
Line 317: ID = p
Line 317: -
Line 317: >
Line 317: ID = array
Line 317: =
Line 317: ID = array
Line 317: ;
Line 318: }
Line 325: ID = static
Line 325: ID = inline
Line 325: void
Line 325: ID = enqueue_task_head
Line 325: (
Line 325: ID = struct
Line 325: ID = task_struct
Line 325: *
Line 325: ID = p
Line 325: ,
Line 325: ID = prio_array_t
Line 325: *
Line 325: ID = array
Line 325: )
Line 326: {
Line 327: ID = list_add
Line 327: (
Line 327: Unrecognized token: 38
Line 327: ID = p
Line 327: -
Line 327: >
Line 327: ID = run_list
Line 327: ,
Line 327: ID = array
Line 327: -
Line 327: >
Line 327: ID = queue
Line 327: +
Line 327: ID = p
Line 327: -
Line 327: >
Line 327: ID = prio
Line 327: )
Line 327: ;
Line 328: Unrecognized token: 95
Line 328: Unrecognized token: 95
Line 328: ID = set_bit
Line 328: (
Line 328: ID = p
Line 328: -
Line 328: >
Line 328: ID = prio
Line 328: ,
Line 328: ID = array
Line 328: -
Line 328: >
Line 328: ID = bitmap
Line 328: )
Line 328: ;
Line 329: ID = array
Line 329: -
Line 329: >
Line 329: ID = nr_active
Line 329: +
Line 329: +
Line 329: ;
Line 330: ID = p
Line 330: -
Line 330: >
Line 330: ID = array
Line 330: =
Line 330: ID = array
Line 330: ;
Line 331: }
Line 347: ID = static
Line 347: int
Line 347: ID = effective_prio
Line 347: (
Line 347: ID = task_t
Line 347: *
Line 347: ID = p
Line 347: )
Line 348: {
Line 349: int
Line 349: ID = bonus
Line 349: ,
Line 349: ID = prio
Line 349: ;
Line 351: if
Line 351: (
Line 351: ID = rt_task
Line 351: (
Line 351: ID = p
Line 351: )
Line 351: )
Line 352: return
Line 352: ID = p
Line 352: -
Line 352: >
Line 352: ID = prio
Line 352: ;
Line 354: ID = bonus
Line 354: =
Line 354: ID = CURRENT_BONUS
Line 354: (
Line 354: ID = p
Line 354: )
Line 354: -
Line 354: ID = MAX_BONUS
Line 354: /
Line 354: INTCON = 2
Line 354: ;
Line 356: ID = prio
Line 356: =
Line 356: ID = p
Line 356: -
Line 356: >
Line 356: ID = static_prio
Line 356: -
Line 356: ID = bonus
Line 356: ;
Line 357: if
Line 357: (
Line 357: ID = prio
Line 357: <
Line 357: ID = MAX_RT_PRIO
Line 357: )
Line 358: ID = prio
Line 358: =
Line 358: ID = MAX_RT_PRIO
Line 358: ;
Line 359: if
Line 359: (
Line 359: ID = prio
Line 359: >
Line 359: ID = MAX_PRIO
Line 359: -
Line 359: INTCON = 1
Line 359: )
Line 360: ID = prio
Line 360: =
Line 360: ID = MAX_PRIO
Line 360: -
Line 360: INTCON = 1
Line 360: ;
Line 361: return
Line 361: ID = prio
Line 361: ;
Line 362: }
Line 367: ID = static
Line 367: ID = inline
Line 367: void
Line 367: Unrecognized token: 95
Line 367: Unrecognized token: 95
Line 367: ID = activate_task
Line 367: (
Line 367: ID = task_t
Line 367: *
Line 367: ID = p
Line 367: ,
Line 367: ID = runqueue_t
Line 367: *
Line 367: ID = rq
Line 367: )
Line 368: {
Line 369: ID = enqueue_task
Line 369: (
Line 369: ID = p
Line 369: ,
Line 369: ID = rq
Line 369: -
Line 369: >
Line 369: ID = active
Line 369: )
Line 369: ;
Line 370: ID = rq
Line 370: -
Line 370: >
Line 370: ID = nr_running
Line 370: +
Line 370: +
Line 370: ;
Line 371: }
Line 376: ID = static
Line 376: ID = inline
Line 376: void
Line 376: Unrecognized token: 95
Line 376: Unrecognized token: 95
Line 376: ID = activate_idle_task
Line 376: (
Line 376: ID = task_t
Line 376: *
Line 376: ID = p
Line 376: ,
Line 376: ID = runqueue_t
Line 376: *
Line 376: ID = rq
Line 376: )
Line 377: {
Line 378: ID = enqueue_task_head
Line 378: (
Line 378: ID = p
Line 378: ,
Line 378: ID = rq
Line 378: -
Line 378: >
Line 378: ID = active
Line 378: )
Line 378: ;
Line 379: ID = rq
Line 379: -
Line 379: >
Line 379: ID = nr_running
Line 379: +
Line 379: +
Line 379: ;
Line 380: }
Line 382: ID = static
Line 382: void
Line 382: ID = recalc_task_prio
Line 382: (
Line 382: ID = task_t
Line 382: *
Line 382: ID = p
Line 382: ,
Line 382: ID = unsigned
Line 382: ID = long
Line 382: ID = long
Line 382: ID = now
Line 382: )
Line 383: {
Line 384: ID = unsigned
Line 384: ID = long
Line 384: ID = long
Line 384: Unrecognized token: 95
Line 384: Unrecognized token: 95
Line 384: ID = sleep_time
Line 384: =
Line 384: ID = now
Line 384: -
Line 384: ID = p
Line 384: -
Line 384: >
Line 384: ID = timestamp
Line 384: ;
Line 385: ID = unsigned
Line 385: ID = long
Line 385: ID = sleep_time
Line 385: ;
Line 387: if
Line 387: (
Line 387: Unrecognized token: 95
Line 387: Unrecognized token: 95
Line 387: ID = sleep_time
Line 387: >
Line 387: ID = NS_MAX_SLEEP_AVG
Line 387: )
Line 388: ID = sleep_time
Line 388: =
Line 388: ID = NS_MAX_SLEEP_AVG
Line 388: ;
Line 389: else
Line 390: ID = sleep_time
Line 390: =
Line 390: (
Line 390: ID = unsigned
Line 390: ID = long
Line 390: )
Line 390: Unrecognized token: 95
Line 390: Unrecognized token: 95
Line 390: ID = sleep_time
Line 390: ;
Line 392: if
Line 392: (
Line 392: ID = likely
Line 392: (
Line 392: ID = sleep_time
Line 392: >
Line 392: INTCON = 0
Line 392: )
Line 392: )
Line 392: {
Line 399: if
Line 399: (
Line 399: ID = p
Line 399: -
Line 399: >
Line 399: ID = mm
Line 399: &&
Line 399: ID = p
Line 399: -
Line 399: >
Line 399: ID = activated
Line 399: !=
Line 399: -
Line 399: INTCON = 1
Line 399: &&
Line 400: ID = sleep_time
Line 400: >
Line 400: ID = INTERACTIVE_SLEEP
Line 400: (
Line 400: ID = p
Line 400: )
Line 400: )
Line 400: {
Line 401: ID = p
Line 401: -
Line 401: >
Line 401: ID = sleep_avg
Line 401: =
Line 401: ID = JIFFIES_TO_NS
Line 401: (
Line 401: ID = MAX_SLEEP_AVG
Line 401: -
Line 402: ID = AVG_TIMESLICE
Line 402: )
Line 402: ;
Line 403: if
Line 403: (
Line 403: !
Line 403: ID = HIGH_CREDIT
Line 403: (
Line 403: ID = p
Line 403: )
Line 403: )
Line 404: ID = p
Line 404: -
Line 404: >
Line 404: ID = interactive_credit
Line 404: +
Line 404: +
Line 404: ;
Line 405: }
Line 405: else
Line 405: {
Line 410: ID = sleep_time
Line 410: *
Line 410: =
Line 410: (
Line 410: ID = MAX_BONUS
Line 410: -
Line 410: ID = CURRENT_BONUS
Line 410: (
Line 410: ID = p
Line 410: )
Line 410: )
Line 410: Unrecognized token: 63
Line 410: Unrecognized token: 58
Line 410: INTCON = 1
Line 410: ;
Line 416: if
Line 416: (
Line 416: ID = LOW_CREDIT
Line 416: (
Line 416: ID = p
Line 416: )
Line 416: &&
Line 417: ID = sleep_time
Line 417: >
Line 417: ID = JIFFIES_TO_NS
Line 417: (
Line 417: ID = task_timeslice
Line 417: (
Line 417: ID = p
Line 417: )
Line 417: )
Line 417: )
Line 418: ID = sleep_time
Line 418: =
Line 418: ID = JIFFIES_TO_NS
Line 418: (
Line 418: ID = task_timeslice
Line 418: (
Line 418: ID = p
Line 418: )
Line 418: )
Line 418: ;
Line 425: if
Line 425: (
Line 425: ID = p
Line 425: -
Line 425: >
Line 425: ID = activated
Line 425: ==
Line 425: -
Line 425: INTCON = 1
Line 425: &&
Line 425: !
Line 425: ID = HIGH_CREDIT
Line 425: (
Line 425: ID = p
Line 425: )
Line 425: &&
Line 425: ID = p
Line 425: -
Line 425: >
Line 425: ID = mm
Line 425: )
Line 425: {
Line 426: if
Line 426: (
Line 426: ID = p
Line 426: -
Line 426: >
Line 426: ID = sleep_avg
Line 426: >=
Line 426: ID = INTERACTIVE_SLEEP
Line 426: (
Line 426: ID = p
Line 426: )
Line 426: )
Line 427: ID = sleep_time
Line 427: =
Line 427: INTCON = 0
Line 427: ;
Line 428: else
Line 428: if
Line 428: (
Line 428: ID = p
Line 428: -
Line 428: >
Line 428: ID = sleep_avg
Line 428: +
Line 428: ID = sleep_time
Line 428: >=
Line 429: ID = INTERACTIVE_SLEEP
Line 429: (
Line 429: ID = p
Line 429: )
Line 429: )
Line 429: {
Line 430: ID = p
Line 430: -
Line 430: >
Line 430: ID = sleep_avg
Line 430: =
Line 430: ID = INTERACTIVE_SLEEP
Line 430: (
Line 430: ID = p
Line 430: )
Line 430: ;
Line 431: ID = sleep_time
Line 431: =
Line 431: INTCON = 0
Line 431: ;
Line 432: }
Line 433: }
Line 443: ID = p
Line 443: -
Line 443: >
Line 443: ID = sleep_avg
Line 443: +
Line 443: =
Line 443: ID = sleep_time
Line 443: ;
Line 445: if
Line 445: (
Line 445: ID = p
Line 445: -
Line 445: >
Line 445: ID = sleep_avg
Line 445: >
Line 445: ID = NS_MAX_SLEEP_AVG
Line 445: )
Line 445: {
Line 446: ID = p
Line 446: -
Line 446: >
Line 446: ID = sleep_avg
Line 446: =
Line 446: ID = NS_MAX_SLEEP_AVG
Line 446: ;
Line 447: if
Line 447: (
Line 447: !
Line 447: ID = HIGH_CREDIT
Line 447: (
Line 447: ID = p
Line 447: )
Line 447: )
Line 448: ID = p
Line 448: -
Line 448: >
Line 448: ID = interactive_credit
Line 448: +
Line 448: +
Line 448: ;
Line 449: }
Line 450: }
Line 451: }
Line 453: ID = p
Line 453: -
Line 453: >
Line 453: ID = prio
Line 453: =
Line 453: ID = effective_prio
Line 453: (
Line 453: ID = p
Line 453: )
Line 453: ;
Line 454: }
Line 462: ID = static
Line 462: void
Line 462: ID = activate_task
Line 462: (
Line 462: ID = task_t
Line 462: *
Line 462: ID = p
Line 462: ,
Line 462: ID = runqueue_t
Line 462: *
Line 462: ID = rq
Line 462: ,
Line 462: int
Line 462: ID = local
Line 462: )
Line 463: {
Line 464: ID = unsigned
Line 464: ID = long
Line 464: ID = long
Line 464: ID = now
Line 464: ;
Line 466: ID = now
Line 466: =
Line 466: ID = sched_clock
Line 466: (
Line 466: )
Line 466: ;
Line 467: Unrecognized token: 35
Line 467: ID = ifdef
Line 467: ID = CONFIG_SMP
Line 468: if
Line 468: (
Line 468: !
Line 468: ID = local
Line 468: )
Line 468: {
Line 470: ID = runqueue_t
Line 470: *
Line 470: ID = this_rq
Line 470: =
Line 470: ID = this_rq
Line 470: (
Line 470: )
Line 470: ;
Line 471: ID = now
Line 471: =
Line 471: (
Line 471: ID = now
Line 471: -
Line 471: ID = this_rq
Line 471: -
Line 471: >
Line 471: ID = timestamp_last_tick
Line 471: )
Line 472: +
Line 472: ID = rq
Line 472: -
Line 472: >
Line 472: ID = timestamp_last_tick
Line 472: ;
Line 473: }
Line 474: Unrecognized token: 35
Line 474: ID = endif
Line 476: ID = recalc_task_prio
Line 476: (
Line 476: ID = p
Line 476: ,
Line 476: ID = now
Line 476: )
Line 476: ;
Line 482: if
Line 482: (
Line 482: !
Line 482: ID = p
Line 482: -
Line 482: >
Line 482: ID = activated
Line 482: )
Line 482: {
Line 490: if
Line 490: (
Line 490: ID = in_interrupt
Line 490: (
Line 490: )
Line 490: )
Line 491: ID = p
Line 491: -
Line 491: >
Line 491: ID = activated
Line 491: =
Line 491: INTCON = 2
Line 491: ;
Line 492: else
Line 492: {
Line 497: ID = p
Line 497: -
Line 497: >
Line 497: ID = activated
Line 497: =
Line 497: INTCON = 1
Line 497: ;
Line 498: }
Line 499: }
Line 500: ID = p
Line 500: -
Line 500: >
Line 500: ID = timestamp
Line 500: =
Line 500: ID = now
Line 500: ;
Line 502: Unrecognized token: 95
Line 502: Unrecognized token: 95
Line 502: ID = activate_task
Line 502: (
Line 502: ID = p
Line 502: ,
Line 502: ID = rq
Line 502: )
Line 502: ;
Line 503: }
Line 508: ID = static
Line 508: void
Line 508: ID = deactivate_task
Line 508: (
Line 508: ID = struct
Line 508: ID = task_struct
Line 508: *
Line 508: ID = p
Line 508: ,
Line 508: ID = runqueue_t
Line 508: *
Line 508: ID = rq
Line 508: )
Line 509: {
Line 510: ID = rq
Line 510: -
Line 510: >
Line 510: ID = nr_running
Line 510: -
Line 510: -
Line 510: ;
Line 511: if
Line 511: (
Line 511: ID = p
Line 511: -
Line 511: >
Line 511: ID = state
Line 511: ==
Line 511: ID = TASK_UNINTERRUPTIBLE
Line 511: )
Line 512: ID = rq
Line 512: -
Line 512: >
Line 512: ID = nr_uninterruptible
Line 512: +
Line 512: +
Line 512: ;
Line 513: ID = dequeue_task
Line 513: (
Line 513: ID = p
Line 513: ,
Line 513: ID = p
Line 513: -
Line 513: >
Line 513: ID = array
Line 513: )
Line 513: ;
Line 514: ID = p
Line 514: -
Line 514: >
Line 514: ID = array
Line 514: =
Line 514: ID = NULL
Line 514: ;
Line 515: }
Line 524: Unrecognized token: 35
Line 524: ID = ifdef
Line 524: ID = CONFIG_SMP
Line 525: ID = static
Line 525: void
Line 525: ID = resched_task
Line 525: (
Line 525: ID = task_t
Line 525: *
Line 525: ID = p
Line 525: )
Line 526: {
Line 527: int
Line 527: ID = need_resched
Line 527: ,
Line 527: ID = nrpolling
Line 527: ;
Line 529: ID = preempt_disable
Line 529: (
Line 529: )
Line 529: ;
Line 531: ID = nrpolling
Line 531: =
Line 531: ID = test_tsk_thread_flag
Line 531: (
Line 531: ID = p
Line 531: ,
Line 531: ID = TIF_POLLING_NRFLAG
Line 531: )
Line 531: ;
Line 532: ID = need_resched
Line 532: =
Line 532: ID = test_and_set_tsk_thread_flag
Line 532: (
Line 532: ID = p
Line 532: ,
Line 532: ID = TIF_NEED_RESCHED
Line 532: )
Line 532: ;
Line 533: ID = nrpolling
Line 533: Unrecognized token: 124
Line 533: =
Line 533: ID = test_tsk_thread_flag
Line 533: (
Line 533: ID = p
Line 533: ,
Line 533: ID = TIF_POLLING_NRFLAG
Line 533: )
Line 533: ;
Line 535: if
Line 535: (
Line 535: !
Line 535: ID = need_resched
Line 535: &&
Line 535: !
Line 535: ID = nrpolling
Line 535: &&
Line 535: (
Line 535: ID = task_cpu
Line 535: (
Line 535: ID = p
Line 535: )
Line 535: !=
Line 535: ID = smp_processor_id
Line 535: (
Line 535: )
Line 535: )
Line 535: )
Line 536: ID = smp_send_reschedule
Line 536: (
Line 536: ID = task_cpu
Line 536: (
Line 536: ID = p
Line 536: )
Line 536: )
Line 536: ;
Line 537: ID = preempt_enable
Line 537: (
Line 537: )
Line 537: ;
Line 538: }
Line 539: Unrecognized token: 35
Line 539: else
Line 540: ID = static
Line 540: ID = inline
Line 540: void
Line 540: ID = resched_task
Line 540: (
Line 540: ID = task_t
Line 540: *
Line 540: ID = p
Line 540: )
Line 541: {
Line 542: ID = set_tsk_need_resched
Line 542: (
Line 542: ID = p
Line 542: )
Line 542: ;
Line 543: }
Line 544: Unrecognized token: 35
Line 544: ID = endif
Line 550: ID = inline
Line 550: int
Line 550: ID = task_curr
Line 550: (
Line 550: ID = const
Line 550: ID = task_t
Line 550: *
Line 550: ID = p
Line 550: )
Line 551: {
Line 552: return
Line 552: ID = cpu_curr
Line 552: (
Line 552: ID = task_cpu
Line 552: (
Line 552: ID = p
Line 552: )
Line 552: )
Line 552: ==
Line 552: ID = p
Line 552: ;
Line 553: }
Line 555: Unrecognized token: 35
Line 555: ID = ifdef
Line 555: ID = CONFIG_SMP
Line 556: ID = enum
Line 556: ID = request_type
Line 556: {
Line 557: ID = REQ_MOVE_TASK
Line 557: ,
Line 558: ID = REQ_SET_DOMAIN
Line 558: ,
Line 559: }
Line 559: ;
Line 561: ID = typedef
Line 561: ID = struct
Line 561: {
Line 562: ID = struct
Line 562: ID = list_head
Line 562: ID = list
Line 562: ;
Line 563: ID = enum
Line 563: ID = request_type
Line 563: ID = type
Line 563: ;
Line 566: ID = task_t
Line 566: *
Line 566: ID = task
Line 566: ;
Line 567: int
Line 567: ID = dest_cpu
Line 567: ;
Line 570: ID = struct
Line 570: ID = sched_domain
Line 570: *
Line 570: ID = sd
Line 570: ;
Line 572: ID = struct
Line 572: ID = completion
Line 572: ID = done
Line 572: ;
Line 573: }
Line 573: ID = migration_req_t
Line 573: ;
Line 579: ID = static
Line 579: int
Line 579: ID = migrate_task
Line 579: (
Line 579: ID = task_t
Line 579: *
Line 579: ID = p
Line 579: ,
Line 579: int
Line 579: ID = dest_cpu
Line 579: ,
Line 579: ID = migration_req_t
Line 579: *
Line 579: ID = req
Line 579: )
Line 580: {
Line 581: ID = runqueue_t
Line 581: *
Line 581: ID = rq
Line 581: =
Line 581: ID = task_rq
Line 581: (
Line 581: ID = p
Line 581: )
Line 581: ;
Line 587: if
Line 587: (
Line 587: !
Line 587: ID = p
Line 587: -
Line 587: >
Line 587: ID = array
Line 587: &&
Line 587: !
Line 587: ID = task_running
Line 587: (
Line 587: ID = rq
Line 587: ,
Line 587: ID = p
Line 587: )
Line 587: )
Line 587: {
Line 588: ID = set_task_cpu
Line 588: (
Line 588: ID = p
Line 588: ,
Line 588: ID = dest_cpu
Line 588: )
Line 588: ;
Line 589: return
Line 589: INTCON = 0
Line 589: ;
Line 590: }
Line 592: ID = init_completion
Line 592: (
Line 592: Unrecognized token: 38
Line 592: ID = req
Line 592: -
Line 592: >
Line 592: ID = done
Line 592: )
Line 592: ;
Line 593: ID = req
Line 593: -
Line 593: >
Line 593: ID = type
Line 593: =
Line 593: ID = REQ_MOVE_TASK
Line 593: ;
Line 594: ID = req
Line 594: -
Line 594: >
Line 594: ID = task
Line 594: =
Line 594: ID = p
Line 594: ;
Line 595: ID = req
Line 595: -
Line 595: >
Line 595: ID = dest_cpu
Line 595: =
Line 595: ID = dest_cpu
Line 595: ;
Line 596: ID = list_add
Line 596: (
Line 596: Unrecognized token: 38
Line 596: ID = req
Line 596: -
Line 596: >
Line 596: ID = list
Line 596: ,
Line 596: Unrecognized token: 38
Line 596: ID = rq
Line 596: -
Line 596: >
Line 596: ID = migration_queue
Line 596: )
Line 596: ;
Line 597: return
Line 597: INTCON = 1
Line 597: ;
Line 598: }
Line 609: void
Line 609: ID = wait_task_inactive
Line 609: (
Line 609: ID = task_t
Line 609: *
Line 609: ID = p
Line 609: )
Line 610: {
Line 611: ID = unsigned
Line 611: ID = long
Line 611: ID = flags
Line 611: ;
Line 612: ID = runqueue_t
Line 612: *
Line 612: ID = rq
Line 612: ;
Line 613: int
Line 613: ID = preempted
Line 613: ;
Line 615: ID = repeat
Line 615: Unrecognized token: 58
Line 616: ID = rq
Line 616: =
Line 616: ID = task_rq_lock
Line 616: (
Line 616: ID = p
Line 616: ,
Line 616: Unrecognized token: 38
Line 616: ID = flags
Line 616: )
Line 616: ;
Line 618: if
Line 618: (
Line 618: ID = unlikely
Line 618: (
Line 618: ID = p
Line 618: -
Line 618: >
Line 618: ID = array
Line 618: )
Line 618: )
Line 618: {
Line 620: ID = preempted
Line 620: =
Line 620: !
Line 620: ID = task_running
Line 620: (
Line 620: ID = rq
Line 620: ,
Line 620: ID = p
Line 620: )
Line 620: ;
Line 621: ID = task_rq_unlock
Line 621: (
Line 621: ID = rq
Line 621: ,
Line 621: Unrecognized token: 38
Line 621: ID = flags
Line 621: )
Line 621: ;
Line 622: ID = cpu_relax
Line 622: (
Line 622: )
Line 622: ;
Line 623: if
Line 623: (
Line 623: ID = preempted
Line 623: )
Line 624: ID = yield
Line 624: (
Line 624: )
Line 624: ;
Line 625: ID = goto
Line 625: ID = repeat
Line 625: ;
Line 626: }
Line 627: ID = task_rq_unlock
Line 627: (
Line 627: ID = rq
Line 627: ,
Line 627: Unrecognized token: 38
Line 627: ID = flags
Line 627: )
Line 627: ;
Line 628: }
Line 637: void
Line 637: ID = kick_process
Line 637: (
Line 637: ID = task_t
Line 637: *
Line 637: ID = p
Line 637: )
Line 638: {
Line 639: int
Line 639: ID = cpu
Line 639: ;
Line 641: ID = preempt_disable
Line 641: (
Line 641: )
Line 641: ;
Line 642: ID = cpu
Line 642: =
Line 642: ID = task_cpu
Line 642: (
Line 642: ID = p
Line 642: )
Line 642: ;
Line 643: if
Line 643: (
Line 643: (
Line 643: ID = cpu
Line 643: !=
Line 643: ID = smp_processor_id
Line 643: (
Line 643: )
Line 643: )
Line 643: &&
Line 643: ID = task_curr
Line 643: (
Line 643: ID = p
Line 643: )
Line 643: )
Line 644: ID = smp_send_reschedule
Line 644: (
Line 644: ID = cpu
Line 644: )
Line 644: ;
Line 645: ID = preempt_enable
Line 645: (
Line 645: )
Line 645: ;
Line 646: }
Line 648: ID = EXPORT_SYMBOL_GPL
Line 648: (
Line 648: ID = kick_process
Line 648: )
Line 648: ;
Line 656: ID = static
Line 656: ID = inline
Line 656: ID = unsigned
Line 656: ID = long
Line 656: ID = source_load
Line 656: (
Line 656: int
Line 656: ID = cpu
Line 656: )
Line 657: {
Line 658: ID = runqueue_t
Line 658: *
Line 658: ID = rq
Line 658: =
Line 658: ID = cpu_rq
Line 658: (
Line 658: ID = cpu
Line 658: )
Line 658: ;
Line 659: ID = unsigned
Line 659: ID = long
Line 659: ID = load_now
Line 659: =
Line 659: ID = rq
Line 659: -
Line 659: >
Line 659: ID = nr_running
Line 659: *
Line 659: ID = SCHED_LOAD_SCALE
Line 659: ;
Line 661: return
Line 661: ID = min
Line 661: (
Line 661: ID = rq
Line 661: -
Line 661: >
Line 661: ID = cpu_load
Line 661: ,
Line 661: ID = load_now
Line 661: )
Line 661: ;
Line 662: }
Line 667: ID = static
Line 667: ID = inline
Line 667: ID = unsigned
Line 667: ID = long
Line 667: ID = target_load
Line 667: (
Line 667: int
Line 667: ID = cpu
Line 667: )
Line 668: {
Line 669: ID = runqueue_t
Line 669: *
Line 669: ID = rq
Line 669: =
Line 669: ID = cpu_rq
Line 669: (
Line 669: ID = cpu
Line 669: )
Line 669: ;
Line 670: ID = unsigned
Line 670: ID = long
Line 670: ID = load_now
Line 670: =
Line 670: ID = rq
Line 670: -
Line 670: >
Line 670: ID = nr_running
Line 670: *
Line 670: ID = SCHED_LOAD_SCALE
Line 670: ;
Line 672: return
Line 672: ID = max
Line 672: (
Line 672: ID = rq
Line 672: -
Line 672: >
Line 672: ID = cpu_load
Line 672: ,
Line 672: ID = load_now
Line 672: )
Line 672: ;
Line 673: }
Line 675: Unrecognized token: 35
Line 675: ID = endif
Line 684: Unrecognized token: 35
Line 684: if
Line 684: ID = defined
Line 684: (
Line 684: ID = ARCH_HAS_SCHED_WAKE_IDLE
Line 684: )
Line 685: ID = static
Line 685: int
Line 685: ID = wake_idle
Line 685: (
Line 685: int
Line 685: ID = cpu
Line 685: ,
Line 685: ID = task_t
Line 685: *
Line 685: ID = p
Line 685: )
Line 686: {
Line 687: ID = cpumask_t
Line 687: ID = tmp
Line 687: ;
Line 688: ID = runqueue_t
Line 688: *
Line 688: ID = rq
Line 688: =
Line 688: ID = cpu_rq
Line 688: (
Line 688: ID = cpu
Line 688: )
Line 688: ;
Line 689: ID = struct
Line 689: ID = sched_domain
Line 689: *
Line 689: ID = sd
Line 689: ;
Line 690: int
Line 690: ID = i
Line 690: ;
Line 692: if
Line 692: (
Line 692: ID = idle_cpu
Line 692: (
Line 692: ID = cpu
Line 692: )
Line 692: )
Line 693: return
Line 693: ID = cpu
Line 693: ;
Line 695: ID = sd
Line 695: =
Line 695: ID = rq
Line 695: -
Line 695: >
Line 695: ID = sd
Line 695: ;
Line 696: if
Line 696: (
Line 696: !
Line 696: (
Line 696: ID = sd
Line 696: -
Line 696: >
Line 696: ID = flags
Line 696: Unrecognized token: 38
Line 696: ID = SD_WAKE_IDLE
Line 696: )
Line 696: )
Line 697: return
Line 697: ID = cpu
Line 697: ;
Line 699: ID = cpus_and
Line 699: (
Line 699: ID = tmp
Line 699: ,
Line 699: ID = sd
Line 699: -
Line 699: >
Line 699: ID = span
Line 699: ,
Line 699: ID = cpu_online_map
Line 699: )
Line 699: ;
Line 700: ID = cpus_and
Line 700: (
Line 700: ID = tmp
Line 700: ,
Line 700: ID = tmp
Line 700: ,
Line 700: ID = p
Line 700: -
Line 700: >
Line 700: ID = cpus_allowed
Line 700: )
Line 700: ;
Line 702: ID = for_each_cpu_mask
Line 702: (
Line 702: ID = i
Line 702: ,
Line 702: ID = tmp
Line 702: )
Line 702: {
Line 703: if
Line 703: (
Line 703: ID = idle_cpu
Line 703: (
Line 703: ID = i
Line 703: )
Line 703: )
Line 704: return
Line 704: ID = i
Line 704: ;
Line 705: }
Line 707: return
Line 707: ID = cpu
Line 707: ;
Line 708: }
Line 709: Unrecognized token: 35
Line 709: else
Line 710: ID = static
Line 710: ID = inline
Line 710: int
Line 710: ID = wake_idle
Line 710: (
Line 710: int
Line 710: ID = cpu
Line 710: ,
Line 710: ID = task_t
Line 710: *
Line 710: ID = p
Line 710: )
Line 711: {
Line 712: return
Line 712: ID = cpu
Line 712: ;
Line 713: }
Line 714: Unrecognized token: 35
Line 714: ID = endif
Line 730: ID = static
Line 730: int
Line 730: ID = try_to_wake_up
Line 730: (
Line 730: ID = task_t
Line 730: *
Line 730: ID = p
Line 730: ,
Line 730: ID = unsigned
Line 730: int
Line 730: ID = state
Line 730: ,
Line 730: int
Line 730: ID = sync
Line 730: )
Line 731: {
Line 732: int
Line 732: ID = cpu
Line 732: ,
Line 732: ID = this_cpu
Line 732: ,
Line 732: ID = success
Line 732: =
Line 732: INTCON = 0
Line 732: ;
Line 733: ID = unsigned
Line 733: ID = long
Line 733: ID = flags
Line 733: ;
Line 734: ID = long
Line 734: ID = old_state
Line 734: ;
Line 735: ID = runqueue_t
Line 735: *
Line 735: ID = rq
Line 735: ;
Line 736: Unrecognized token: 35
Line 736: ID = ifdef
Line 736: ID = CONFIG_SMP
Line 737: ID = unsigned
Line 737: ID = long
Line 737: ID = load
Line 737: ,
Line 737: ID = this_load
Line 737: ;
Line 738: ID = struct
Line 738: ID = sched_domain
Line 738: *
Line 738: ID = sd
Line 738: ;
Line 739: int
Line 739: ID = new_cpu
Line 739: ;
Line 740: Unrecognized token: 35
Line 740: ID = endif
Line 742: ID = rq
Line 742: =
Line 742: ID = task_rq_lock
Line 742: (
Line 742: ID = p
Line 742: ,
Line 742: Unrecognized token: 38
Line 742: ID = flags
Line 742: )
Line 742: ;
Line 743: ID = old_state
Line 743: =
Line 743: ID = p
Line 743: -
Line 743: >
Line 743: ID = state
Line 743: ;
Line 744: if
Line 744: (
Line 744: !
Line 744: (
Line 744: ID = old_state
Line 744: Unrecognized token: 38
Line 744: ID = state
Line 744: )
Line 744: )
Line 745: ID = goto
Line 745: ID = out
Line 745: ;
Line 747: if
Line 747: (
Line 747: ID = p
Line 747: -
Line 747: >
Line 747: ID = array
Line 747: )
Line 748: ID = goto
Line 748: ID = out_running
Line 748: ;
Line 750: ID = cpu
Line 750: =
Line 750: ID = task_cpu
Line 750: (
Line 750: ID = p
Line 750: )
Line 750: ;
Line 751: ID = this_cpu
Line 751: =
Line 751: ID = smp_processor_id
Line 751: (
Line 751: )
Line 751: ;
Line 753: Unrecognized token: 35
Line 753: ID = ifdef
Line 753: ID = CONFIG_SMP
Line 754: if
Line 754: (
Line 754: ID = unlikely
Line 754: (
Line 754: ID = task_running
Line 754: (
Line 754: ID = rq
Line 754: ,
Line 754: ID = p
Line 754: )
Line 754: )
Line 754: )
Line 755: ID = goto
Line 755: ID = out_activate
Line 755: ;
Line 757: ID = new_cpu
Line 757: =
Line 757: ID = cpu
Line 757: ;
Line 759: if
Line 759: (
Line 759: ID = cpu
Line 759: ==
Line 759: ID = this_cpu
Line 759: ||
Line 759: ID = unlikely
Line 759: (
Line 759: !
Line 759: ID = cpu_isset
Line 759: (
Line 759: ID = this_cpu
Line 759: ,
Line 759: ID = p
Line 759: -
Line 759: >
Line 759: ID = cpus_allowed
Line 759: )
Line 759: )
Line 759: )
Line 760: ID = goto
Line 760: ID = out_set_cpu
Line 760: ;
Line 762: ID = load
Line 762: =
Line 762: ID = source_load
Line 762: (
Line 762: ID = cpu
Line 762: )
Line 762: ;
Line 763: ID = this_load
Line 763: =
Line 763: ID = target_load
Line 763: (
Line 763: ID = this_cpu
Line 763: )
Line 763: ;
Line 769: if
Line 769: (
Line 769: ID = sync
Line 769: )
Line 770: ID = this_load
Line 770: -
Line 770: =
Line 770: ID = SCHED_LOAD_SCALE
Line 770: ;
Line 773: if
Line 773: (
Line 773: ID = load
Line 773: <
Line 773: ID = SCHED_LOAD_SCALE
Line 773: /
Line 773: INTCON = 2
Line 773: &&
Line 773: ID = this_load
Line 773: >
Line 773: ID = SCHED_LOAD_SCALE
Line 773: /
Line 773: INTCON = 2
Line 773: )
Line 774: ID = goto
Line 774: ID = out_set_cpu
Line 774: ;
Line 776: ID = new_cpu
Line 776: =
Line 776: ID = this_cpu
Line 776: ;
Line 782: ID = for_each_domain
Line 782: (
Line 782: ID = this_cpu
Line 782: ,
Line 782: ID = sd
Line 782: )
Line 782: {
Line 783: ID = unsigned
Line 783: int
Line 783: ID = imbalance
Line 783: ;
Line 788: ID = imbalance
Line 788: =
Line 788: ID = sd
Line 788: -
Line 788: >
Line 788: ID = imbalance_pct
Line 788: +
Line 788: (
Line 788: ID = sd
Line 788: -
Line 788: >
Line 788: ID = imbalance_pct
Line 788: -
Line 788: INTCON = 100
Line 788: )
Line 788: /
Line 788: INTCON = 2
Line 788: ;
Line 790: if
Line 790: (
Line 790: (
Line 790: (
Line 790: ID = sd
Line 790: -
Line 790: >
Line 790: ID = flags
Line 790: Unrecognized token: 38
Line 790: ID = SD_WAKE_AFFINE
Line 790: )
Line 790: &&
Line 791: !
Line 791: ID = task_hot
Line 791: (
Line 791: ID = p
Line 791: ,
Line 791: ID = rq
Line 791: -
Line 791: >
Line 791: ID = timestamp_last_tick
Line 791: ,
Line 791: ID = sd
Line 791: )
Line 791: )
Line 792: ||
Line 792: (
Line 792: (
Line 792: ID = sd
Line 792: -
Line 792: >
Line 792: ID = flags
Line 792: Unrecognized token: 38
Line 792: ID = SD_WAKE_BALANCE
Line 792: )
Line 792: &&
Line 793: ID = imbalance
Line 793: *
Line 793: ID = this_load
Line 793: <=
Line 793: INTCON = 100
Line 793: *
Line 793: ID = load
Line 793: )
Line 793: )
Line 793: {
Line 798: if
Line 798: (
Line 798: ID = cpu_isset
Line 798: (
Line 798: ID = cpu
Line 798: ,
Line 798: ID = sd
Line 798: -
Line 798: >
Line 798: ID = span
Line 798: )
Line 798: )
Line 799: ID = goto
Line 799: ID = out_set_cpu
Line 799: ;
Line 800: }
Line 801: }
Line 803: ID = new_cpu
Line 803: =
Line 803: ID = cpu
Line 803: ;
Line 804: ID = out_set_cpu
Line 804: Unrecognized token: 58
Line 805: ID = new_cpu
Line 805: =
Line 805: ID = wake_idle
Line 805: (
Line 805: ID = new_cpu
Line 805: ,
Line 805: ID = p
Line 805: )
Line 805: ;
Line 806: if
Line 806: (
Line 806: ID = new_cpu
Line 806: !=
Line 806: ID = cpu
Line 806: &&
Line 806: ID = cpu_isset
Line 806: (
Line 806: ID = new_cpu
Line 806: ,
Line 806: ID = p
Line 806: -
Line 806: >
Line 806: ID = cpus_allowed
Line 806: )
Line 806: )
Line 806: {
Line 807: ID = set_task_cpu
Line 807: (
Line 807: ID = p
Line 807: ,
Line 807: ID = new_cpu
Line 807: )
Line 807: ;
Line 808: ID = task_rq_unlock
Line 808: (
Line 808: ID = rq
Line 808: ,
Line 808: Unrecognized token: 38
Line 808: ID = flags
Line 808: )
Line 808: ;
Line 810: ID = rq
Line 810: =
Line 810: ID = task_rq_lock
Line 810: (
Line 810: ID = p
Line 810: ,
Line 810: Unrecognized token: 38
Line 810: ID = flags
Line 810: )
Line 810: ;
Line 811: ID = old_state
Line 811: =
Line 811: ID = p
Line 811: -
Line 811: >
Line 811: ID = state
Line 811: ;
Line 812: if
Line 812: (
Line 812: !
Line 812: (
Line 812: ID = old_state
Line 812: Unrecognized token: 38
Line 812: ID = state
Line 812: )
Line 812: )
Line 813: ID = goto
Line 813: ID = out
Line 813: ;
Line 814: if
Line 814: (
Line 814: ID = p
Line 814: -
Line 814: >
Line 814: ID = array
Line 814: )
Line 815: ID = goto
Line 815: ID = out_running
Line 815: ;
Line 817: ID = this_cpu
Line 817: =
Line 817: ID = smp_processor_id
Line 817: (
Line 817: )
Line 817: ;
Line 818: ID = cpu
Line 818: =
Line 818: ID = task_cpu
Line 818: (
Line 818: ID = p
Line 818: )
Line 818: ;
Line 819: }
Line 821: ID = out_activate
Line 821: Unrecognized token: 58
Line 822: Unrecognized token: 35
Line 822: ID = endif
Line 823: if
Line 823: (
Line 823: ID = old_state
Line 823: ==
Line 823: ID = TASK_UNINTERRUPTIBLE
Line 823: )
Line 823: {
Line 824: ID = rq
Line 824: -
Line 824: >
Line 824: ID = nr_uninterruptible
Line 824: -
Line 824: -
Line 824: ;
Line 829: ID = p
Line 829: -
Line 829: >
Line 829: ID = activated
Line 829: =
Line 829: -
Line 829: INTCON = 1
Line 829: ;
Line 830: }
Line 840: ID = activate_task
Line 840: (
Line 840: ID = p
Line 840: ,
Line 840: ID = rq
Line 840: ,
Line 840: ID = cpu
Line 840: ==
Line 840: ID = this_cpu
Line 840: )
Line 840: ;
Line 841: if
Line 841: (
Line 841: !
Line 841: ID = sync
Line 841: ||
Line 841: ID = cpu
Line 841: !=
Line 841: ID = this_cpu
Line 841: )
Line 841: {
Line 842: if
Line 842: (
Line 842: ID = TASK_PREEMPTS_CURR
Line 842: (
Line 842: ID = p
Line 842: ,
Line 842: ID = rq
Line 842: )
Line 842: )
Line 843: ID = resched_task
Line 843: (
Line 843: ID = rq
Line 843: -
Line 843: >
Line 843: ID = curr
Line 843: )
Line 843: ;
Line 844: }
Line 845: ID = success
Line 845: =
Line 845: INTCON = 1
Line 845: ;
Line 847: ID = out_running
Line 847: Unrecognized token: 58
Line 848: ID = p
Line 848: -
Line 848: >
Line 848: ID = state
Line 848: =
Line 848: ID = TASK_RUNNING
Line 848: ;
Line 849: ID = out
Line 849: Unrecognized token: 58
Line 850: ID = task_rq_unlock
Line 850: (
Line 850: ID = rq
Line 850: ,
Line 850: Unrecognized token: 38
Line 850: ID = flags
Line 850: )
Line 850: ;
Line 852: return
Line 852: ID = success
Line 852: ;
Line 853: }
Line 855: int
Line 855: ID = fastcall
Line 855: ID = wake_up_process
Line 855: (
Line 855: ID = task_t
Line 855: *
Line 855: ID = p
Line 855: )
Line 856: {
Line 857: return
Line 857: ID = try_to_wake_up
Line 857: (
Line 857: ID = p
Line 857: ,
Line 857: ID = TASK_STOPPED
Line 857: Unrecognized token: 124
Line 858: ID = TASK_INTERRUPTIBLE
Line 858: Unrecognized token: 124
Line 858: ID = TASK_UNINTERRUPTIBLE
Line 858: ,
Line 858: INTCON = 0
Line 858: )
Line 858: ;
Line 859: }
Line 861: ID = EXPORT_SYMBOL
Line 861: (
Line 861: ID = wake_up_process
Line 861: )
Line 861: ;
Line 863: int
Line 863: ID = fastcall
Line 863: ID = wake_up_state
Line 863: (
Line 863: ID = task_t
Line 863: *
Line 863: ID = p
Line 863: ,
Line 863: ID = unsigned
Line 863: int
Line 863: ID = state
Line 863: )
Line 864: {
Line 865: return
Line 865: ID = try_to_wake_up
Line 865: (
Line 865: ID = p
Line 865: ,
Line 865: ID = state
Line 865: ,
Line 865: INTCON = 0
Line 865: )
Line 865: ;
Line 866: }
Line 872: void
Line 872: ID = fastcall
Line 872: ID = sched_fork
Line 872: (
Line 872: ID = task_t
Line 872: *
Line 872: ID = p
Line 872: )
Line 873: {
Line 880: ID = p
Line 880: -
Line 880: >
Line 880: ID = state
Line 880: =
Line 880: ID = TASK_RUNNING
Line 880: ;
Line 881: ID = INIT_LIST_HEAD
Line 881: (
Line 881: Unrecognized token: 38
Line 881: ID = p
Line 881: -
Line 881: >
Line 881: ID = run_list
Line 881: )
Line 881: ;
Line 882: ID = p
Line 882: -
Line 882: >
Line 882: ID = array
Line 882: =
Line 882: ID = NULL
Line 882: ;
Line 883: ID = spin_lock_init
Line 883: (
Line 883: Unrecognized token: 38
Line 883: ID = p
Line 883: -
Line 883: >
Line 883: ID = switch_lock
Line 883: )
Line 883: ;
Line 884: Unrecognized token: 35
Line 884: ID = ifdef
Line 884: ID = CONFIG_PREEMPT
Line 891: ID = p
Line 891: -
Line 891: >
Line 891: ID = thread_info
Line 891: -
Line 891: >
Line 891: ID = preempt_count
Line 891: =
Line 891: INTCON = 1
Line 891: ;
Line 892: Unrecognized token: 35
Line 892: ID = endif
Line 898: ID = local_irq_disable
Line 898: (
Line 898: )
Line 898: ;
Line 899: ID = p
Line 899: -
Line 899: >
Line 899: ID = time_slice
Line 899: =
Line 899: (
Line 899: ID = current
Line 899: -
Line 899: >
Line 899: ID = time_slice
Line 899: +
Line 899: INTCON = 1
Line 899: )
Line 899: >
Line 899: >
Line 899: INTCON = 1
Line 899: ;
Line 904: ID = p
Line 904: -
Line 904: >
Line 904: ID = first_time_slice
Line 904: =
Line 904: INTCON = 1
Line 904: ;
Line 905: ID = current
Line 905: -
Line 905: >
Line 905: ID = time_slice
Line 905: >
Line 905: >=
Line 905: INTCON = 1
Line 905: ;
Line 906: ID = p
Line 906: -
Line 906: >
Line 906: ID = timestamp
Line 906: =
Line 906: ID = sched_clock
Line 906: (
Line 906: )
Line 906: ;
Line 907: if
Line 907: (
Line 907: !
Line 907: ID = current
Line 907: -
Line 907: >
Line 907: ID = time_slice
Line 907: )
Line 907: {
Line 913: ID = current
Line 913: -
Line 913: >
Line 913: ID = time_slice
Line 913: =
Line 913: INTCON = 1
Line 913: ;
Line 914: ID = preempt_disable
Line 914: (
Line 914: )
Line 914: ;
Line 915: ID = scheduler_tick
Line 915: (
Line 915: INTCON = 0
Line 915: ,
Line 915: INTCON = 0
Line 915: )
Line 915: ;
Line 916: ID = local_irq_enable
Line 916: (
Line 916: )
Line 916: ;
Line 917: ID = preempt_enable
Line 917: (
Line 917: )
Line 917: ;
Line 918: }
Line 918: else
Line 919: ID = local_irq_enable
Line 919: (
Line 919: )
Line 919: ;
Line 920: }
Line 928: void
Line 928: ID = fastcall
Line 928: ID = wake_up_forked_process
Line 928: (
Line 928: ID = task_t
Line 928: *
Line 928: ID = p
Line 928: )
Line 929: {
Line 930: ID = unsigned
Line 930: ID = long
Line 930: ID = flags
Line 930: ;
Line 931: ID = runqueue_t
Line 931: *
Line 931: ID = rq
Line 931: =
Line 931: ID = task_rq_lock
Line 931: (
Line 931: ID = current
Line 931: ,
Line 931: Unrecognized token: 38
Line 931: ID = flags
Line 931: )
Line 931: ;
Line 933: ID = BUG_ON
Line 933: (
Line 933: ID = p
Line 933: -
Line 933: >
Line 933: ID = state
Line 933: !=
Line 933: ID = TASK_RUNNING
Line 933: )
Line 933: ;
Line 940: ID = current
Line 940: -
Line 940: >
Line 940: ID = sleep_avg
Line 940: =
Line 940: ID = JIFFIES_TO_NS
Line 940: (
Line 940: ID = CURRENT_BONUS
Line 940: (
Line 940: ID = current
Line 940: )
Line 940: *
Line 941: ID = PARENT_PENALTY
Line 941: /
Line 941: INTCON = 100
Line 941: *
Line 941: ID = MAX_SLEEP_AVG
Line 941: /
Line 941: ID = MAX_BONUS
Line 941: )
Line 941: ;
Line 943: ID = p
Line 943: -
Line 943: >
Line 943: ID = sleep_avg
Line 943: =
Line 943: ID = JIFFIES_TO_NS
Line 943: (
Line 943: ID = CURRENT_BONUS
Line 943: (
Line 943: ID = p
Line 943: )
Line 943: *
Line 944: ID = CHILD_PENALTY
Line 944: /
Line 944: INTCON = 100
Line 944: *
Line 944: ID = MAX_SLEEP_AVG
Line 944: /
Line 944: ID = MAX_BONUS
Line 944: )
Line 944: ;
Line 946: ID = p
Line 946: -
Line 946: >
Line 946: ID = interactive_credit
Line 946: =
Line 946: INTCON = 0
Line 946: ;
Line 948: ID = p
Line 948: -
Line 948: >
Line 948: ID = prio
Line 948: =
Line 948: ID = effective_prio
Line 948: (
Line 948: ID = p
Line 948: )
Line 948: ;
Line 949: ID = set_task_cpu
Line 949: (
Line 949: ID = p
Line 949: ,
Line 949: ID = smp_processor_id
Line 949: (
Line 949: )
Line 949: )
Line 949: ;
Line 951: if
Line 951: (
Line 951: ID = unlikely
Line 951: (
Line 951: !
Line 951: ID = current
Line 951: -
Line 951: >
Line 951: ID = array
Line 951: )
Line 951: )
Line 952: Unrecognized token: 95
Line 952: Unrecognized token: 95
Line 952: ID = activate_task
Line 952: (
Line 952: ID = p
Line 952: ,
Line 952: ID = rq
Line 952: )
Line 952: ;
Line 953: else
Line 953: {
Line 954: ID = p
Line 954: -
Line 954: >
Line 954: ID = prio
Line 954: =
Line 954: ID = current
Line 954: -
Line 954: >
Line 954: ID = prio
Line 954: ;
Line 955: ID = list_add_tail
Line 955: (
Line 955: Unrecognized token: 38
Line 955: ID = p
Line 955: -
Line 955: >
Line 955: ID = run_list
Line 955: ,
Line 955: Unrecognized token: 38
Line 955: ID = current
Line 955: -
Line 955: >
Line 955: ID = run_list
Line 955: )
Line 955: ;
Line 956: ID = p
Line 956: -
Line 956: >
Line 956: ID = array
Line 956: =
Line 956: ID = current
Line 956: -
Line 956: >
Line 956: ID = array
Line 956: ;
Line 957: ID = p
Line 957: -
Line 957: >
Line 957: ID = array
Line 957: -
Line 957: >
Line 957: ID = nr_active
Line 957: +
Line 957: +
Line 957: ;
Line 958: ID = rq
Line 958: -
Line 958: >
Line 958: ID = nr_running
Line 958: +
Line 958: +
Line 958: ;
Line 959: }
Line 960: ID = task_rq_unlock
Line 960: (
Line 960: ID = rq
Line 960: ,
Line 960: Unrecognized token: 38
Line 960: ID = flags
Line 960: )
Line 960: ;
Line 961: }
Line 972: void
Line 972: ID = fastcall
Line 972: ID = sched_exit
Line 972: (
Line 972: ID = task_t
Line 972: *
Line 972: ID = p
Line 972: )
Line 973: {
Line 974: ID = unsigned
Line 974: ID = long
Line 974: ID = flags
Line 974: ;
Line 975: ID = runqueue_t
Line 975: *
Line 975: ID = rq
Line 975: ;
Line 977: ID = local_irq_save
Line 977: (
Line 977: ID = flags
Line 977: )
Line 977: ;
Line 978: if
Line 978: (
Line 978: ID = p
Line 978: -
Line 978: >
Line 978: ID = first_time_slice
Line 978: )
Line 978: {
Line 979: ID = p
Line 979: -
Line 979: >
Line 979: ID = parent
Line 979: -
Line 979: >
Line 979: ID = time_slice
Line 979: +
Line 979: =
Line 979: ID = p
Line 979: -
Line 979: >
Line 979: ID = time_slice
Line 979: ;
Line 980: if
Line 980: (
Line 980: ID = unlikely
Line 980: (
Line 980: ID = p
Line 980: -
Line 980: >
Line 980: ID = parent
Line 980: -
Line 980: >
Line 980: ID = time_slice
Line 980: >
Line 980: ID = MAX_TIMESLICE
Line 980: )
Line 980: )
Line 981: ID = p
Line 981: -
Line 981: >
Line 981: ID = parent
Line 981: -
Line 981: >
Line 981: ID = time_slice
Line 981: =
Line 981: ID = MAX_TIMESLICE
Line 981: ;
Line 982: }
Line 983: ID = local_irq_restore
Line 983: (
Line 983: ID = flags
Line 983: )
Line 983: ;
Line 988: ID = rq
Line 988: =
Line 988: ID = task_rq_lock
Line 988: (
Line 988: ID = p
Line 988: -
Line 988: >
Line 988: ID = parent
Line 988: ,
Line 988: Unrecognized token: 38
Line 988: ID = flags
Line 988: )
Line 988: ;
Line 989: if
Line 989: (
Line 989: ID = p
Line 989: -
Line 989: >
Line 989: ID = sleep_avg
Line 989: <
Line 989: ID = p
Line 989: -
Line 989: >
Line 989: ID = parent
Line 989: -
Line 989: >
Line 989: ID = sleep_avg
Line 989: )
Line 990: ID = p
Line 990: -
Line 990: >
Line 990: ID = parent
Line 990: -
Line 990: >
Line 990: ID = sleep_avg
Line 990: =
Line 990: ID = p
Line 990: -
Line 990: >
Line 990: ID = parent
Line 990: -
Line 990: >
Line 990: ID = sleep_avg
Line 990: /
Line 991: (
Line 991: ID = EXIT_WEIGHT
Line 991: +
Line 991: INTCON = 1
Line 991: )
Line 991: *
Line 991: ID = EXIT_WEIGHT
Line 991: +
Line 991: ID = p
Line 991: -
Line 991: >
Line 991: ID = sleep_avg
Line 991: /
Line 992: (
Line 992: ID = EXIT_WEIGHT
Line 992: +
Line 992: INTCON = 1
Line 992: )
Line 992: ;
Line 993: ID = task_rq_unlock
Line 993: (
Line 993: ID = rq
Line 993: ,
Line 993: Unrecognized token: 38
Line 993: ID = flags
Line 993: )
Line 993: ;
Line 994: }
Line 1009: ID = static
Line 1009: void
Line 1009: ID = finish_task_switch
Line 1009: (
Line 1009: ID = task_t
Line 1009: *
Line 1009: ID = prev
Line 1009: )
Line 1010: {
Line 1011: ID = runqueue_t
Line 1011: *
Line 1011: ID = rq
Line 1011: =
Line 1011: ID = this_rq
Line 1011: (
Line 1011: )
Line 1011: ;
Line 1012: ID = struct
Line 1012: ID = mm_struct
Line 1012: *
Line 1012: ID = mm
Line 1012: =
Line 1012: ID = rq
Line 1012: -
Line 1012: >
Line 1012: ID = prev_mm
Line 1012: ;
Line 1013: ID = unsigned
Line 1013: ID = long
Line 1013: ID = prev_task_flags
Line 1013: ;
Line 1015: ID = rq
Line 1015: -
Line 1015: >
Line 1015: ID = prev_mm
Line 1015: =
Line 1015: ID = NULL
Line 1015: ;
Line 1028: ID = prev_task_flags
Line 1028: =
Line 1028: ID = prev
Line 1028: -
Line 1028: >
Line 1028: ID = flags
Line 1028: ;
Line 1029: ID = finish_arch_switch
Line 1029: (
Line 1029: ID = rq
Line 1029: ,
Line 1029: ID = prev
Line 1029: )
Line 1029: ;
Line 1030: if
Line 1030: (
Line 1030: ID = mm
Line 1030: )
Line 1031: ID = mmdrop
Line 1031: (
Line 1031: ID = mm
Line 1031: )
Line 1031: ;
Line 1032: if
Line 1032: (
Line 1032: ID = unlikely
Line 1032: (
Line 1032: ID = prev_task_flags
Line 1032: Unrecognized token: 38
Line 1032: ID = PF_DEAD
Line 1032: )
Line 1032: )
Line 1033: ID = put_task_struct
Line 1033: (
Line 1033: ID = prev
Line 1033: )
Line 1033: ;
Line 1034: }
Line 1040: ID = asmlinkage
Line 1040: void
Line 1040: ID = schedule_tail
Line 1040: (
Line 1040: ID = task_t
Line 1040: *
Line 1040: ID = prev
Line 1040: )
Line 1041: {
Line 1042: ID = finish_task_switch
Line 1042: (
Line 1042: ID = prev
Line 1042: )
Line 1042: ;
Line 1044: if
Line 1044: (
Line 1044: ID = current
Line 1044: -
Line 1044: >
Line 1044: ID = set_child_tid
Line 1044: )
Line 1045: ID = put_user
Line 1045: (
Line 1045: ID = current
Line 1045: -
Line 1045: >
Line 1045: ID = pid
Line 1045: ,
Line 1045: ID = current
Line 1045: -
Line 1045: >
Line 1045: ID = set_child_tid
Line 1045: )
Line 1045: ;
Line 1046: }
Line 1052: ID = static
Line 1052: ID = inline
Line 1053: ID = task_t
Line 1053: *
Line 1053: ID = context_switch
Line 1053: (
Line 1053: ID = runqueue_t
Line 1053: *
Line 1053: ID = rq
Line 1053: ,
Line 1053: ID = task_t
Line 1053: *
Line 1053: ID = prev
Line 1053: ,
Line 1053: ID = task_t
Line 1053: *
Line 1053: ID = next
Line 1053: )
Line 1054: {
Line 1055: ID = struct
Line 1055: ID = mm_struct
Line 1055: *
Line 1055: ID = mm
Line 1055: =
Line 1055: ID = next
Line 1055: -
Line 1055: >
Line 1055: ID = mm
Line 1055: ;
Line 1056: ID = struct
Line 1056: ID = mm_struct
Line 1056: *
Line 1056: ID = oldmm
Line 1056: =
Line 1056: ID = prev
Line 1056: -
Line 1056: >
Line 1056: ID = active_mm
Line 1056: ;
Line 1058: if
Line 1058: (
Line 1058: ID = unlikely
Line 1058: (
Line 1058: !
Line 1058: ID = mm
Line 1058: )
Line 1058: )
Line 1058: {
Line 1059: ID = next
Line 1059: -
Line 1059: >
Line 1059: ID = active_mm
Line 1059: =
Line 1059: ID = oldmm
Line 1059: ;
Line 1060: ID = atomic_inc
Line 1060: (
Line 1060: Unrecognized token: 38
Line 1060: ID = oldmm
Line 1060: -
Line 1060: >
Line 1060: ID = mm_count
Line 1060: )
Line 1060: ;
Line 1061: ID = enter_lazy_tlb
Line 1061: (
Line 1061: ID = oldmm
Line 1061: ,
Line 1061: ID = next
Line 1061: )
Line 1061: ;
Line 1062: }
Line 1062: else
Line 1063: ID = switch_mm
Line 1063: (
Line 1063: ID = oldmm
Line 1063: ,
Line 1063: ID = mm
Line 1063: ,
Line 1063: ID = next
Line 1063: )
Line 1063: ;
Line 1065: if
Line 1065: (
Line 1065: ID = unlikely
Line 1065: (
Line 1065: !
Line 1065: ID = prev
Line 1065: -
Line 1065: >
Line 1065: ID = mm
Line 1065: )
Line 1065: )
Line 1065: {
Line 1066: ID = prev
Line 1066: -
Line 1066: >
Line 1066: ID = active_mm
Line 1066: =
Line 1066: ID = NULL
Line 1066: ;
Line 1067: ID = WARN_ON
Line 1067: (
Line 1067: ID = rq
Line 1067: -
Line 1067: >
Line 1067: ID = prev_mm
Line 1067: )
Line 1067: ;
Line 1068: ID = rq
Line 1068: -
Line 1068: >
Line 1068: ID = prev_mm
Line 1068: =
Line 1068: ID = oldmm
Line 1068: ;
Line 1069: }
Line 1072: ID = switch_to
Line 1072: (
Line 1072: ID = prev
Line 1072: ,
Line 1072: ID = next
Line 1072: ,
Line 1072: ID = prev
Line 1072: )
Line 1072: ;
Line 1074: return
Line 1074: ID = prev
Line 1074: ;
Line 1075: }
Line 1084: ID = unsigned
Line 1084: ID = long
Line 1084: ID = nr_running
Line 1084: (
Line 1084: void
Line 1084: )
Line 1085: {
Line 1086: ID = unsigned
Line 1086: ID = long
Line 1086: ID = i
Line 1086: ,
Line 1086: ID = sum
Line 1086: =
Line 1086: INTCON = 0
Line 1086: ;
Line 1088: ID = for_each_cpu
Line 1088: (
Line 1088: ID = i
Line 1088: )
Line 1089: ID = sum
Line 1089: +
Line 1089: =
Line 1089: ID = cpu_rq
Line 1089: (
Line 1089: ID = i
Line 1089: )
Line 1089: -
Line 1089: >
Line 1089: ID = nr_running
Line 1089: ;
Line 1091: return
Line 1091: ID = sum
Line 1091: ;
Line 1092: }
Line 1094: ID = unsigned
Line 1094: ID = long
Line 1094: ID = nr_uninterruptible
Line 1094: (
Line 1094: void
Line 1094: )
Line 1095: {
Line 1096: ID = unsigned
Line 1096: ID = long
Line 1096: ID = i
Line 1096: ,
Line 1096: ID = sum
Line 1096: =
Line 1096: INTCON = 0
Line 1096: ;
Line 1098: ID = for_each_cpu
Line 1098: (
Line 1098: ID = i
Line 1098: )
Line 1099: ID = sum
Line 1099: +
Line 1099: =
Line 1099: ID = cpu_rq
Line 1099: (
Line 1099: ID = i
Line 1099: )
Line 1099: -
Line 1099: >
Line 1099: ID = nr_uninterruptible
Line 1099: ;
Line 1101: return
Line 1101: ID = sum
Line 1101: ;
Line 1102: }
Line 1104: ID = unsigned
Line 1104: ID = long
Line 1104: ID = long
Line 1104: ID = nr_context_switches
Line 1104: (
Line 1104: void
Line 1104: )
Line 1105: {
Line 1106: ID = unsigned
Line 1106: ID = long
Line 1106: ID = long
Line 1106: ID = i
Line 1106: ,
Line 1106: ID = sum
Line 1106: =
Line 1106: INTCON = 0
Line 1106: ;
Line 1108: ID = for_each_cpu
Line 1108: (
Line 1108: ID = i
Line 1108: )
Line 1109: ID = sum
Line 1109: +
Line 1109: =
Line 1109: ID = cpu_rq
Line 1109: (
Line 1109: ID = i
Line 1109: )
Line 1109: -
Line 1109: >
Line 1109: ID = nr_switches
Line 1109: ;
Line 1111: return
Line 1111: ID = sum
Line 1111: ;
Line 1112: }
Line 1114: ID = unsigned
Line 1114: ID = long
Line 1114: ID = nr_iowait
Line 1114: (
Line 1114: void
Line 1114: )
Line 1115: {
Line 1116: ID = unsigned
Line 1116: ID = long
Line 1116: ID = i
Line 1116: ,
Line 1116: ID = sum
Line 1116: =
Line 1116: INTCON = 0
Line 1116: ;
Line 1118: ID = for_each_cpu
Line 1118: (
Line 1118: ID = i
Line 1118: )
Line 1119: ID = sum
Line 1119: +
Line 1119: =
Line 1119: ID = atomic_read
Line 1119: (
Line 1119: Unrecognized token: 38
Line 1119: ID = cpu_rq
Line 1119: (
Line 1119: ID = i
Line 1119: )
Line 1119: -
Line 1119: >
Line 1119: ID = nr_iowait
Line 1119: )
Line 1119: ;
Line 1121: return
Line 1121: ID = sum
Line 1121: ;
Line 1122: }
Line 1130: ID = static
Line 1130: void
Line 1130: ID = double_rq_lock
Line 1130: (
Line 1130: ID = runqueue_t
Line 1130: *
Line 1130: ID = rq1
Line 1130: ,
Line 1130: ID = runqueue_t
Line 1130: *
Line 1130: ID = rq2
Line 1130: )
Line 1131: {
Line 1132: if
Line 1132: (
Line 1132: ID = rq1
Line 1132: ==
Line 1132: ID = rq2
Line 1132: )
Line 1133: ID = spin_lock
Line 1133: (
Line 1133: Unrecognized token: 38
Line 1133: ID = rq1
Line 1133: -
Line 1133: >
Line 1133: ID = lock
Line 1133: )
Line 1133: ;
Line 1134: else
Line 1134: {
Line 1135: if
Line 1135: (
Line 1135: ID = rq1
Line 1135: <
Line 1135: ID = rq2
Line 1135: )
Line 1135: {
Line 1136: ID = spin_lock
Line 1136: (
Line 1136: Unrecognized token: 38
Line 1136: ID = rq1
Line 1136: -
Line 1136: >
Line 1136: ID = lock
Line 1136: )
Line 1136: ;
Line 1137: ID = spin_lock
Line 1137: (
Line 1137: Unrecognized token: 38
Line 1137: ID = rq2
Line 1137: -
Line 1137: >
Line 1137: ID = lock
Line 1137: )
Line 1137: ;
Line 1138: }
Line 1138: else
Line 1138: {
Line 1139: ID = spin_lock
Line 1139: (
Line 1139: Unrecognized token: 38
Line 1139: ID = rq2
Line 1139: -
Line 1139: >
Line 1139: ID = lock
Line 1139: )
Line 1139: ;
Line 1140: ID = spin_lock
Line 1140: (
Line 1140: Unrecognized token: 38
Line 1140: ID = rq1
Line 1140: -
Line 1140: >
Line 1140: ID = lock
Line 1140: )
Line 1140: ;
Line 1141: }
Line 1142: }
Line 1143: }
Line 1151: ID = static
Line 1151: void
Line 1151: ID = double_rq_unlock
Line 1151: (
Line 1151: ID = runqueue_t
Line 1151: *
Line 1151: ID = rq1
Line 1151: ,
Line 1151: ID = runqueue_t
Line 1151: *
Line 1151: ID = rq2
Line 1151: )
Line 1152: {
Line 1153: ID = spin_unlock
Line 1153: (
Line 1153: Unrecognized token: 38
Line 1153: ID = rq1
Line 1153: -
Line 1153: >
Line 1153: ID = lock
Line 1153: )
Line 1153: ;
Line 1154: if
Line 1154: (
Line 1154: ID = rq1
Line 1154: !=
Line 1154: ID = rq2
Line 1154: )
Line 1155: ID = spin_unlock
Line 1155: (
Line 1155: Unrecognized token: 38
Line 1155: ID = rq2
Line 1155: -
Line 1155: >
Line 1155: ID = lock
Line 1155: )
Line 1155: ;
Line 1156: }
Line 1158: ID = enum
Line 1158: ID = idle_type
Line 1159: {
Line 1160: ID = IDLE
Line 1160: ,
Line 1161: ID = NOT_IDLE
Line 1161: ,
Line 1162: ID = NEWLY_IDLE
Line 1162: ,
Line 1163: }
Line 1163: ;
Line 1165: Unrecognized token: 35
Line 1165: ID = ifdef
Line 1165: ID = CONFIG_SMP
Line 1170: ID = static
Line 1170: int
Line 1170: ID = find_idlest_cpu
Line 1170: (
Line 1170: ID = struct
Line 1170: ID = task_struct
Line 1170: *
Line 1170: ID = p
Line 1170: ,
Line 1170: int
Line 1170: ID = this_cpu
Line 1170: ,
Line 1171: ID = struct
Line 1171: ID = sched_domain
Line 1171: *
Line 1171: ID = sd
Line 1171: )
Line 1172: {
Line 1173: ID = unsigned
Line 1173: ID = long
Line 1173: ID = load
Line 1173: ,
Line 1173: ID = min_load
Line 1173: ,
Line 1173: ID = this_load
Line 1173: ;
Line 1174: int
Line 1174: ID = i
Line 1174: ,
Line 1174: ID = min_cpu
Line 1174: ;
Line 1175: ID = cpumask_t
Line 1175: ID = mask
Line 1175: ;
Line 1177: ID = min_cpu
Line 1177: =
Line 1177: ID = UINT_MAX
Line 1177: ;
Line 1178: ID = min_load
Line 1178: =
Line 1178: ID = ULONG_MAX
Line 1178: ;
Line 1180: ID = cpus_and
Line 1180: (
Line 1180: ID = mask
Line 1180: ,
Line 1180: ID = sd
Line 1180: -
Line 1180: >
Line 1180: ID = span
Line 1180: ,
Line 1180: ID = cpu_online_map
Line 1180: )
Line 1180: ;
Line 1181: ID = cpus_and
Line 1181: (
Line 1181: ID = mask
Line 1181: ,
Line 1181: ID = mask
Line 1181: ,
Line 1181: ID = p
Line 1181: -
Line 1181: >
Line 1181: ID = cpus_allowed
Line 1181: )
Line 1181: ;
Line 1183: ID = for_each_cpu_mask
Line 1183: (
Line 1183: ID = i
Line 1183: ,
Line 1183: ID = mask
Line 1183: )
Line 1183: {
Line 1184: ID = load
Line 1184: =
Line 1184: ID = target_load
Line 1184: (
Line 1184: ID = i
Line 1184: )
Line 1184: ;
Line 1186: if
Line 1186: (
Line 1186: ID = load
Line 1186: <
Line 1186: ID = min_load
Line 1186: )
Line 1186: {
Line 1187: ID = min_cpu
Line 1187: =
Line 1187: ID = i
Line 1187: ;
Line 1188: ID = min_load
Line 1188: =
Line 1188: ID = load
Line 1188: ;
Line 1191: if
Line 1191: (
Line 1191: !
Line 1191: ID = min_load
Line 1191: )
Line 1192: ID = break
Line 1192: ;
Line 1193: }
Line 1194: }
Line 1197: ID = this_load
Line 1197: =
Line 1197: ID = source_load
Line 1197: (
Line 1197: ID = this_cpu
Line 1197: )
Line 1197: +
Line 1197: ID = SCHED_LOAD_SCALE
Line 1197: ;
Line 1207: if
Line 1207: (
Line 1207: ID = min_load
Line 1207: *
Line 1207: (
Line 1207: INTCON = 100
Line 1207: +
Line 1207: (
Line 1207: ID = sd
Line 1207: -
Line 1207: >
Line 1207: ID = imbalance_pct
Line 1207: -
Line 1207: INTCON = 100
Line 1207: )
Line 1207: /
Line 1207: INTCON = 2
Line 1207: )
Line 1207: <
Line 1207: ID = this_load
Line 1207: *
Line 1207: INTCON = 100
Line 1207: )
Line 1208: return
Line 1208: ID = min_cpu
Line 1208: ;
Line 1210: return
Line 1210: ID = this_cpu
Line 1210: ;
Line 1211: }
Line 1220: void
Line 1220: ID = fastcall
Line 1220: ID = wake_up_forked_thread
Line 1220: (
Line 1220: ID = task_t
Line 1220: *
Line 1220: ID = p
Line 1220: )
Line 1221: {
Line 1222: ID = unsigned
Line 1222: ID = long
Line 1222: ID = flags
Line 1222: ;
Line 1223: int
Line 1223: ID = this_cpu
Line 1223: =
Line 1223: ID = get_cpu
Line 1223: (
Line 1223: )
Line 1223: ,
Line 1223: ID = cpu
Line 1223: ;
Line 1224: ID = struct
Line 1224: ID = sched_domain
Line 1224: *
Line 1224: ID = tmp
Line 1224: ,
Line 1224: *
Line 1224: ID = sd
Line 1224: =
Line 1224: ID = NULL
Line 1224: ;
Line 1225: ID = runqueue_t
Line 1225: *
Line 1225: ID = this_rq
Line 1225: =
Line 1225: ID = cpu_rq
Line 1225: (
Line 1225: ID = this_cpu
Line 1225: )
Line 1225: ,
Line 1225: *
Line 1225: ID = rq
Line 1225: ;
Line 1231: ID = for_each_domain
Line 1231: (
Line 1231: ID = this_cpu
Line 1231: ,
Line 1231: ID = tmp
Line 1231: )
Line 1232: if
Line 1232: (
Line 1232: ID = tmp
Line 1232: -
Line 1232: >
Line 1232: ID = flags
Line 1232: Unrecognized token: 38
Line 1232: ID = SD_BALANCE_CLONE
Line 1232: )
Line 1233: ID = sd
Line 1233: =
Line 1233: ID = tmp
Line 1233: ;
Line 1234: if
Line 1234: (
Line 1234: ID = sd
Line 1234: )
Line 1235: ID = cpu
Line 1235: =
Line 1235: ID = find_idlest_cpu
Line 1235: (
Line 1235: ID = p
Line 1235: ,
Line 1235: ID = this_cpu
Line 1235: ,
Line 1235: ID = sd
Line 1235: )
Line 1235: ;
Line 1236: else
Line 1237: ID = cpu
Line 1237: =
Line 1237: ID = this_cpu
Line 1237: ;
Line 1239: ID = local_irq_save
Line 1239: (
Line 1239: ID = flags
Line 1239: )
Line 1239: ;
Line 1240: ID = lock_again
Line 1240: Unrecognized token: 58
Line 1241: ID = rq
Line 1241: =
Line 1241: ID = cpu_rq
Line 1241: (
Line 1241: ID = cpu
Line 1241: )
Line 1241: ;
Line 1242: ID = double_rq_lock
Line 1242: (
Line 1242: ID = this_rq
Line 1242: ,
Line 1242: ID = rq
Line 1242: )
Line 1242: ;
Line 1244: ID = BUG_ON
Line 1244: (
Line 1244: ID = p
Line 1244: -
Line 1244: >
Line 1244: ID = state
Line 1244: !=
Line 1244: ID = TASK_RUNNING
Line 1244: )
Line 1244: ;
Line 1251: if
Line 1251: (
Line 1251: ID = unlikely
Line 1251: (
Line 1251: !
Line 1251: ID = cpu_isset
Line 1251: (
Line 1251: ID = cpu
Line 1251: ,
Line 1251: ID = p
Line 1251: -
Line 1251: >
Line 1251: ID = cpus_allowed
Line 1251: )
Line 1251: )
Line 1251: )
Line 1251: {
Line 1252: ID = cpu
Line 1252: =
Line 1252: ID = this_cpu
Line 1252: ;
Line 1253: ID = double_rq_unlock
Line 1253: (
Line 1253: ID = this_rq
Line 1253: ,
Line 1253: ID = rq
Line 1253: )
Line 1253: ;
Line 1254: ID = goto
Line 1254: ID = lock_again
Line 1254: ;
Line 1255: }
Line 1261: ID = current
Line 1261: -
Line 1261: >
Line 1261: ID = sleep_avg
Line 1261: =
Line 1261: ID = JIFFIES_TO_NS
Line 1261: (
Line 1261: ID = CURRENT_BONUS
Line 1261: (
Line 1261: ID = current
Line 1261: )
Line 1261: *
Line 1262: ID = PARENT_PENALTY
Line 1262: /
Line 1262: INTCON = 100
Line 1262: *
Line 1262: ID = MAX_SLEEP_AVG
Line 1262: /
Line 1262: ID = MAX_BONUS
Line 1262: )
Line 1262: ;
Line 1264: ID = p
Line 1264: -
Line 1264: >
Line 1264: ID = sleep_avg
Line 1264: =
Line 1264: ID = JIFFIES_TO_NS
Line 1264: (
Line 1264: ID = CURRENT_BONUS
Line 1264: (
Line 1264: ID = p
Line 1264: )
Line 1264: *
Line 1265: ID = CHILD_PENALTY
Line 1265: /
Line 1265: INTCON = 100
Line 1265: *
Line 1265: ID = MAX_SLEEP_AVG
Line 1265: /
Line 1265: ID = MAX_BONUS
Line 1265: )
Line 1265: ;
Line 1267: ID = p
Line 1267: -
Line 1267: >
Line 1267: ID = interactive_credit
Line 1267: =
Line 1267: INTCON = 0
Line 1267: ;
Line 1269: ID = p
Line 1269: -
Line 1269: >
Line 1269: ID = prio
Line 1269: =
Line 1269: ID = effective_prio
Line 1269: (
Line 1269: ID = p
Line 1269: )
Line 1269: ;
Line 1270: ID = set_task_cpu
Line 1270: (
Line 1270: ID = p
Line 1270: ,
Line 1270: ID = cpu
Line 1270: )
Line 1270: ;
Line 1272: if
Line 1272: (
Line 1272: ID = cpu
Line 1272: ==
Line 1272: ID = this_cpu
Line 1272: )
Line 1272: {
Line 1273: if
Line 1273: (
Line 1273: ID = unlikely
Line 1273: (
Line 1273: !
Line 1273: ID = current
Line 1273: -
Line 1273: >
Line 1273: ID = array
Line 1273: )
Line 1273: )
Line 1274: Unrecognized token: 95
Line 1274: Unrecognized token: 95
Line 1274: ID = activate_task
Line 1274: (
Line 1274: ID = p
Line 1274: ,
Line 1274: ID = rq
Line 1274: )
Line 1274: ;
Line 1275: else
Line 1275: {
Line 1276: ID = p
Line 1276: -
Line 1276: >
Line 1276: ID = prio
Line 1276: =
Line 1276: ID = current
Line 1276: -
Line 1276: >
Line 1276: ID = prio
Line 1276: ;
Line 1277: ID = list_add_tail
Line 1277: (
Line 1277: Unrecognized token: 38
Line 1277: ID = p
Line 1277: -
Line 1277: >
Line 1277: ID = run_list
Line 1277: ,
Line 1277: Unrecognized token: 38
Line 1277: ID = current
Line 1277: -
Line 1277: >
Line 1277: ID = run_list
Line 1277: )
Line 1277: ;
Line 1278: ID = p
Line 1278: -
Line 1278: >
Line 1278: ID = array
Line 1278: =
Line 1278: ID = current
Line 1278: -
Line 1278: >
Line 1278: ID = array
Line 1278: ;
Line 1279: ID = p
Line 1279: -
Line 1279: >
Line 1279: ID = array
Line 1279: -
Line 1279: >
Line 1279: ID = nr_active
Line 1279: +
Line 1279: +
Line 1279: ;
Line 1280: ID = rq
Line 1280: -
Line 1280: >
Line 1280: ID = nr_running
Line 1280: +
Line 1280: +
Line 1280: ;
Line 1281: }
Line 1282: }
Line 1282: else
Line 1282: {
Line 1284: ID = p
Line 1284: -
Line 1284: >
Line 1284: ID = timestamp
Line 1284: =
Line 1284: (
Line 1284: ID = p
Line 1284: -
Line 1284: >
Line 1284: ID = timestamp
Line 1284: -
Line 1284: ID = this_rq
Line 1284: -
Line 1284: >
Line 1284: ID = timestamp_last_tick
Line 1284: )
Line 1285: +
Line 1285: ID = rq
Line 1285: -
Line 1285: >
Line 1285: ID = timestamp_last_tick
Line 1285: ;
Line 1286: Unrecognized token: 95
Line 1286: Unrecognized token: 95
Line 1286: ID = activate_task
Line 1286: (
Line 1286: ID = p
Line 1286: ,
Line 1286: ID = rq
Line 1286: )
Line 1286: ;
Line 1287: if
Line 1287: (
Line 1287: ID = TASK_PREEMPTS_CURR
Line 1287: (
Line 1287: ID = p
Line 1287: ,
Line 1287: ID = rq
Line 1287: )
Line 1287: )
Line 1288: ID = resched_task
Line 1288: (
Line 1288: ID = rq
Line 1288: -
Line 1288: >
Line 1288: ID = curr
Line 1288: )
Line 1288: ;
Line 1289: }
Line 1291: ID = double_rq_unlock
Line 1291: (
Line 1291: ID = this_rq
Line 1291: ,
Line 1291: ID = rq
Line 1291: )
Line 1291: ;
Line 1292: ID = local_irq_restore
Line 1292: (
Line 1292: ID = flags
Line 1292: )
Line 1292: ;
Line 1293: ID = put_cpu
Line 1293: (
Line 1293: )
Line 1293: ;
Line 1294: }
Line 1302: ID = static
Line 1302: void
Line 1302: ID = sched_migrate_task
Line 1302: (
Line 1302: ID = task_t
Line 1302: *
Line 1302: ID = p
Line 1302: ,
Line 1302: int
Line 1302: ID = dest_cpu
Line 1302: )
Line 1303: {
Line 1304: ID = migration_req_t
Line 1304: ID = req
Line 1304: ;
Line 1305: ID = runqueue_t
Line 1305: *
Line 1305: ID = rq
Line 1305: ;
Line 1306: ID = unsigned
Line 1306: ID = long
Line 1306: ID = flags
Line 1306: ;
Line 1308: ID = rq
Line 1308: =
Line 1308: ID = task_rq_lock
Line 1308: (
Line 1308: ID = p
Line 1308: ,
Line 1308: Unrecognized token: 38
Line 1308: ID = flags
Line 1308: )
Line 1308: ;
Line 1309: if
Line 1309: (
Line 1309: !
Line 1309: ID = cpu_isset
Line 1309: (
Line 1309: ID = dest_cpu
Line 1309: ,
Line 1309: ID = p
Line 1309: -
Line 1309: >
Line 1309: ID = cpus_allowed
Line 1309: )
Line 1310: ||
Line 1310: ID = unlikely
Line 1310: (
Line 1310: ID = cpu_is_offline
Line 1310: (
Line 1310: ID = dest_cpu
Line 1310: )
Line 1310: )
Line 1310: )
Line 1311: ID = goto
Line 1311: ID = out
Line 1311: ;
Line 1314: if
Line 1314: (
Line 1314: ID = migrate_task
Line 1314: (
Line 1314: ID = p
Line 1314: ,
Line 1314: ID = dest_cpu
Line 1314: ,
Line 1314: Unrecognized token: 38
Line 1314: ID = req
Line 1314: )
Line 1314: )
Line 1314: {
Line 1316: ID = struct
Line 1316: ID = task_struct
Line 1316: *
Line 1316: ID = mt
Line 1316: =
Line 1316: ID = rq
Line 1316: -
Line 1316: >
Line 1316: ID = migration_thread
Line 1316: ;
Line 1317: ID = get_task_struct
Line 1317: (
Line 1317: ID = mt
Line 1317: )
Line 1317: ;
Line 1318: ID = task_rq_unlock
Line 1318: (
Line 1318: ID = rq
Line 1318: ,
Line 1318: Unrecognized token: 38
Line 1318: ID = flags
Line 1318: )
Line 1318: ;
Line 1319: ID = wake_up_process
Line 1319: (
Line 1319: ID = mt
Line 1319: )
Line 1319: ;
Line 1320: ID = put_task_struct
Line 1320: (
Line 1320: ID = mt
Line 1320: )
Line 1320: ;
Line 1321: ID = wait_for_completion
Line 1321: (
Line 1321: Unrecognized token: 38
Line 1321: ID = req
Line 1321: Unrecognized token: 46
Line 1321: ID = done
Line 1321: )
Line 1321: ;
Line 1322: return
Line 1322: ;
Line 1323: }
Line 1324: ID = out
Line 1324: Unrecognized token: 58
Line 1325: ID = task_rq_unlock
Line 1325: (
Line 1325: ID = rq
Line 1325: ,
Line 1325: Unrecognized token: 38
Line 1325: ID = flags
Line 1325: )
Line 1325: ;
Line 1326: }
Line 1335: void
Line 1335: ID = sched_balance_exec
Line 1335: (
Line 1335: void
Line 1335: )
Line 1336: {
Line 1337: ID = struct
Line 1337: ID = sched_domain
Line 1337: *
Line 1337: ID = tmp
Line 1337: ,
Line 1337: *
Line 1337: ID = sd
Line 1337: =
Line 1337: ID = NULL
Line 1337: ;
Line 1338: int
Line 1338: ID = new_cpu
Line 1338: ,
Line 1338: ID = this_cpu
Line 1338: =
Line 1338: ID = get_cpu
Line 1338: (
Line 1338: )
Line 1338: ;
Line 1341: if
Line 1341: (
Line 1341: ID = this_rq
Line 1341: (
Line 1341: )
Line 1341: -
Line 1341: >
Line 1341: ID = nr_running
Line 1341: <=
Line 1341: INTCON = 1
Line 1341: )
Line 1342: ID = goto
Line 1342: ID = out
Line 1342: ;
Line 1344: ID = for_each_domain
Line 1344: (
Line 1344: ID = this_cpu
Line 1344: ,
Line 1344: ID = tmp
Line 1344: )
Line 1345: if
Line 1345: (
Line 1345: ID = tmp
Line 1345: -
Line 1345: >
Line 1345: ID = flags
Line 1345: Unrecognized token: 38
Line 1345: ID = SD_BALANCE_EXEC
Line 1345: )
Line 1346: ID = sd
Line 1346: =
Line 1346: ID = tmp
Line 1346: ;
Line 1348: if
Line 1348: (
Line 1348: ID = sd
Line 1348: )
Line 1348: {
Line 1349: ID = new_cpu
Line 1349: =
Line 1349: ID = find_idlest_cpu
Line 1349: (
Line 1349: ID = current
Line 1349: ,
Line 1349: ID = this_cpu
Line 1349: ,
Line 1349: ID = sd
Line 1349: )
Line 1349: ;
Line 1350: if
Line 1350: (
Line 1350: ID = new_cpu
Line 1350: !=
Line 1350: ID = this_cpu
Line 1350: )
Line 1350: {
Line 1351: ID = put_cpu
Line 1351: (
Line 1351: )
Line 1351: ;
Line 1352: ID = sched_migrate_task
Line 1352: (
Line 1352: ID = current
Line 1352: ,
Line 1352: ID = new_cpu
Line 1352: )
Line 1352: ;
Line 1353: return
Line 1353: ;
Line 1354: }
Line 1355: }
Line 1356: ID = out
Line 1356: Unrecognized token: 58
Line 1357: ID = put_cpu
Line 1357: (
Line 1357: )
Line 1357: ;
Line 1358: }
Line 1363: ID = static
Line 1363: void
Line 1363: ID = double_lock_balance
Line 1363: (
Line 1363: ID = runqueue_t
Line 1363: *
Line 1363: ID = this_rq
Line 1363: ,
Line 1363: ID = runqueue_t
Line 1363: *
Line 1363: ID = busiest
Line 1363: )
Line 1364: {
Line 1365: if
Line 1365: (
Line 1365: ID = unlikely
Line 1365: (
Line 1365: !
Line 1365: ID = spin_trylock
Line 1365: (
Line 1365: Unrecognized token: 38
Line 1365: ID = busiest
Line 1365: -
Line 1365: >
Line 1365: ID = lock
Line 1365: )
Line 1365: )
Line 1365: )
Line 1365: {
Line 1366: if
Line 1366: (
Line 1366: ID = busiest
Line 1366: <
Line 1366: ID = this_rq
Line 1366: )
Line 1366: {
Line 1367: ID = spin_unlock
Line 1367: (
Line 1367: Unrecognized token: 38
Line 1367: ID = this_rq
Line 1367: -
Line 1367: >
Line 1367: ID = lock
Line 1367: )
Line 1367: ;
Line 1368: ID = spin_lock
Line 1368: (
Line 1368: Unrecognized token: 38
Line 1368: ID = busiest
Line 1368: -
Line 1368: >
Line 1368: ID = lock
Line 1368: )
Line 1368: ;
Line 1369: ID = spin_lock
Line 1369: (
Line 1369: Unrecognized token: 38
Line 1369: ID = this_rq
Line 1369: -
Line 1369: >
Line 1369: ID = lock
Line 1369: )
Line 1369: ;
Line 1370: }
Line 1370: else
Line 1371: ID = spin_lock
Line 1371: (
Line 1371: Unrecognized token: 38
Line 1371: ID = busiest
Line 1371: -
Line 1371: >
Line 1371: ID = lock
Line 1371: )
Line 1371: ;
Line 1372: }
Line 1373: }
Line 1379: ID = static
Line 1379: ID = inline
Line 1380: void
Line 1380: ID = pull_task
Line 1380: (
Line 1380: ID = runqueue_t
Line 1380: *
Line 1380: ID = src_rq
Line 1380: ,
Line 1380: ID = prio_array_t
Line 1380: *
Line 1380: ID = src_array
Line 1380: ,
Line 1380: ID = task_t
Line 1380: *
Line 1380: ID = p
Line 1380: ,
Line 1381: ID = runqueue_t
Line 1381: *
Line 1381: ID = this_rq
Line 1381: ,
Line 1381: ID = prio_array_t
Line 1381: *
Line 1381: ID = this_array
Line 1381: ,
Line 1381: int
Line 1381: ID = this_cpu
Line 1381: )
Line 1382: {
Line 1383: ID = dequeue_task
Line 1383: (
Line 1383: ID = p
Line 1383: ,
Line 1383: ID = src_array
Line 1383: )
Line 1383: ;
Line 1384: ID = src_rq
Line 1384: -
Line 1384: >
Line 1384: ID = nr_running
Line 1384: -
Line 1384: -
Line 1384: ;
Line 1385: ID = set_task_cpu
Line 1385: (
Line 1385: ID = p
Line 1385: ,
Line 1385: ID = this_cpu
Line 1385: )
Line 1385: ;
Line 1386: ID = this_rq
Line 1386: -
Line 1386: >
Line 1386: ID = nr_running
Line 1386: +
Line 1386: +
Line 1386: ;
Line 1387: ID = enqueue_task
Line 1387: (
Line 1387: ID = p
Line 1387: ,
Line 1387: ID = this_array
Line 1387: )
Line 1387: ;
Line 1388: ID = p
Line 1388: -
Line 1388: >
Line 1388: ID = timestamp
Line 1388: =
Line 1388: (
Line 1388: ID = p
Line 1388: -
Line 1388: >
Line 1388: ID = timestamp
Line 1388: -
Line 1388: ID = src_rq
Line 1388: -
Line 1388: >
Line 1388: ID = timestamp_last_tick
Line 1388: )
Line 1389: +
Line 1389: ID = this_rq
Line 1389: -
Line 1389: >
Line 1389: ID = timestamp_last_tick
Line 1389: ;
Line 1394: if
Line 1394: (
Line 1394: ID = TASK_PREEMPTS_CURR
Line 1394: (
Line 1394: ID = p
Line 1394: ,
Line 1394: ID = this_rq
Line 1394: )
Line 1394: )
Line 1395: ID = resched_task
Line 1395: (
Line 1395: ID = this_rq
Line 1395: -
Line 1395: >
Line 1395: ID = curr
Line 1395: )
Line 1395: ;
Line 1396: }
Line 1401: ID = static
Line 1401: ID = inline
Line 1402: int
Line 1402: ID = can_migrate_task
Line 1402: (
Line 1402: ID = task_t
Line 1402: *
Line 1402: ID = p
Line 1402: ,
Line 1402: ID = runqueue_t
Line 1402: *
Line 1402: ID = rq
Line 1402: ,
Line 1402: int
Line 1402: ID = this_cpu
Line 1402: ,
Line 1403: ID = struct
Line 1403: ID = sched_domain
Line 1403: *
Line 1403: ID = sd
Line 1403: ,
Line 1403: ID = enum
Line 1403: ID = idle_type
Line 1403: ID = idle
Line 1403: )
Line 1404: {
Line 1411: if
Line 1411: (
Line 1411: ID = task_running
Line 1411: (
Line 1411: ID = rq
Line 1411: ,
Line 1411: ID = p
Line 1411: )
Line 1411: )
Line 1412: return
Line 1412: INTCON = 0
Line 1412: ;
Line 1413: if
Line 1413: (
Line 1413: !
Line 1413: ID = cpu_isset
Line 1413: (
Line 1413: ID = this_cpu
Line 1413: ,
Line 1413: ID = p
Line 1413: -
Line 1413: >
Line 1413: ID = cpus_allowed
Line 1413: )
Line 1413: )
Line 1414: return
Line 1414: INTCON = 0
Line 1414: ;
Line 1417: if
Line 1417: (
Line 1417: ID = idle
Line 1417: ==
Line 1417: ID = NEWLY_IDLE
Line 1417: ||
Line 1418: ID = sd
Line 1418: -
Line 1418: >
Line 1418: ID = nr_balance_failed
Line 1418: <
Line 1418: ID = sd
Line 1418: -
Line 1418: >
Line 1418: ID = cache_nice_tries
Line 1418: )
Line 1418: {
Line 1419: if
Line 1419: (
Line 1419: ID = task_hot
Line 1419: (
Line 1419: ID = p
Line 1419: ,
Line 1419: ID = rq
Line 1419: -
Line 1419: >
Line 1419: ID = timestamp_last_tick
Line 1419: ,
Line 1419: ID = sd
Line 1419: )
Line 1419: )
Line 1420: return
Line 1420: INTCON = 0
Line 1420: ;
Line 1421: }
Line 1423: return
Line 1423: INTCON = 1
Line 1423: ;
Line 1424: }
Line 1433: ID = static
Line 1433: int
Line 1433: ID = move_tasks
Line 1433: (
Line 1433: ID = runqueue_t
Line 1433: *
Line 1433: ID = this_rq
Line 1433: ,
Line 1433: int
Line 1433: ID = this_cpu
Line 1433: ,
Line 1433: ID = runqueue_t
Line 1433: *
Line 1433: ID = busiest
Line 1433: ,
Line 1434: ID = unsigned
Line 1434: ID = long
Line 1434: ID = max_nr_move
Line 1434: ,
Line 1434: ID = struct
Line 1434: ID = sched_domain
Line 1434: *
Line 1434: ID = sd
Line 1434: ,
Line 1435: ID = enum
Line 1435: ID = idle_type
Line 1435: ID = idle
Line 1435: )
Line 1436: {
Line 1437: ID = prio_array_t
Line 1437: *
Line 1437: ID = array
Line 1437: ,
Line 1437: *
Line 1437: ID = dst_array
Line 1437: ;
Line 1438: ID = struct
Line 1438: ID = list_head
Line 1438: *
Line 1438: ID = head
Line 1438: ,
Line 1438: *
Line 1438: ID = curr
Line 1438: ;
Line 1439: int
Line 1439: ID = idx
Line 1439: ,
Line 1439: ID = pulled
Line 1439: =
Line 1439: INTCON = 0
Line 1439: ;
Line 1440: ID = task_t
Line 1440: *
Line 1440: ID = tmp
Line 1440: ;
Line 1442: if
Line 1442: (
Line 1442: ID = max_nr_move
Line 1442: <=
Line 1442: INTCON = 0
Line 1442: ||
Line 1442: ID = busiest
Line 1442: -
Line 1442: >
Line 1442: ID = nr_running
Line 1442: <=
Line 1442: INTCON = 1
Line 1442: )
Line 1443: ID = goto
Line 1443: ID = out
Line 1443: ;
Line 1451: if
Line 1451: (
Line 1451: ID = busiest
Line 1451: -
Line 1451: >
Line 1451: ID = expired
Line 1451: -
Line 1451: >
Line 1451: ID = nr_active
Line 1451: )
Line 1451: {
Line 1452: ID = array
Line 1452: =
Line 1452: ID = busiest
Line 1452: -
Line 1452: >
Line 1452: ID = expired
Line 1452: ;
Line 1453: ID = dst_array
Line 1453: =
Line 1453: ID = this_rq
Line 1453: -
Line 1453: >
Line 1453: ID = expired
Line 1453: ;
Line 1454: }
Line 1454: else
Line 1454: {
Line 1455: ID = array
Line 1455: =
Line 1455: ID = busiest
Line 1455: -
Line 1455: >
Line 1455: ID = active
Line 1455: ;
Line 1456: ID = dst_array
Line 1456: =
Line 1456: ID = this_rq
Line 1456: -
Line 1456: >
Line 1456: ID = active
Line 1456: ;
Line 1457: }
Line 1459: ID = new_array
Line 1459: Unrecognized token: 58
Line 1461: ID = idx
Line 1461: =
Line 1461: INTCON = 0
Line 1461: ;
Line 1462: ID = skip_bitmap
Line 1462: Unrecognized token: 58
Line 1463: if
Line 1463: (
Line 1463: !
Line 1463: ID = idx
Line 1463: )
Line 1464: ID = idx
Line 1464: =
Line 1464: ID = sched_find_first_bit
Line 1464: (
Line 1464: ID = array
Line 1464: -
Line 1464: >
Line 1464: ID = bitmap
Line 1464: )
Line 1464: ;
Line 1465: else
Line 1466: ID = idx
Line 1466: =
Line 1466: ID = find_next_bit
Line 1466: (
Line 1466: ID = array
Line 1466: -
Line 1466: >
Line 1466: ID = bitmap
Line 1466: ,
Line 1466: ID = MAX_PRIO
Line 1466: ,
Line 1466: ID = idx
Line 1466: )
Line 1466: ;
Line 1467: if
Line 1467: (
Line 1467: ID = idx
Line 1467: >=
Line 1467: ID = MAX_PRIO
Line 1467: )
Line 1467: {
Line 1468: if
Line 1468: (
Line 1468: ID = array
Line 1468: ==
Line 1468: ID = busiest
Line 1468: -
Line 1468: >
Line 1468: ID = expired
Line 1468: &&
Line 1468: ID = busiest
Line 1468: -
Line 1468: >
Line 1468: ID = active
Line 1468: -
Line 1468: >
Line 1468: ID = nr_active
Line 1468: )
Line 1468: {
Line 1469: ID = array
Line 1469: =
Line 1469: ID = busiest
Line 1469: -
Line 1469: >
Line 1469: ID = active
Line 1469: ;
Line 1470: ID = dst_array
Line 1470: =
Line 1470: ID = this_rq
Line 1470: -
Line 1470: >
Line 1470: ID = active
Line 1470: ;
Line 1471: ID = goto
Line 1471: ID = new_array
Line 1471: ;
Line 1472: }
Line 1473: ID = goto
Line 1473: ID = out
Line 1473: ;
Line 1474: }
Line 1476: ID = head
Line 1476: =
Line 1476: ID = array
Line 1476: -
Line 1476: >
Line 1476: ID = queue
Line 1476: +
Line 1476: ID = idx
Line 1476: ;
Line 1477: ID = curr
Line 1477: =
Line 1477: ID = head
Line 1477: -
Line 1477: >
Line 1477: ID = prev
Line 1477: ;
Line 1478: ID = skip_queue
Line 1478: Unrecognized token: 58
Line 1479: ID = tmp
Line 1479: =
Line 1479: ID = list_entry
Line 1479: (
Line 1479: ID = curr
Line 1479: ,
Line 1479: ID = task_t
Line 1479: ,
Line 1479: ID = run_list
Line 1479: )
Line 1479: ;
Line 1481: ID = curr
Line 1481: =
Line 1481: ID = curr
Line 1481: -
Line 1481: >
Line 1481: ID = prev
Line 1481: ;
Line 1483: if
Line 1483: (
Line 1483: !
Line 1483: ID = can_migrate_task
Line 1483: (
Line 1483: ID = tmp
Line 1483: ,
Line 1483: ID = busiest
Line 1483: ,
Line 1483: ID = this_cpu
Line 1483: ,
Line 1483: ID = sd
Line 1483: ,
Line 1483: ID = idle
Line 1483: )
Line 1483: )
Line 1483: {
Line 1484: if
Line 1484: (
Line 1484: ID = curr
Line 1484: !=
Line 1484: ID = head
Line 1484: )
Line 1485: ID = goto
Line 1485: ID = skip_queue
Line 1485: ;
Line 1486: ID = idx
Line 1486: +
Line 1486: +
Line 1486: ;
Line 1487: ID = goto
Line 1487: ID = skip_bitmap
Line 1487: ;
Line 1488: }
Line 1489: ID = pull_task
Line 1489: (
Line 1489: ID = busiest
Line 1489: ,
Line 1489: ID = array
Line 1489: ,
Line 1489: ID = tmp
Line 1489: ,
Line 1489: ID = this_rq
Line 1489: ,
Line 1489: ID = dst_array
Line 1489: ,
Line 1489: ID = this_cpu
Line 1489: )
Line 1489: ;
Line 1490: ID = pulled
Line 1490: +
Line 1490: +
Line 1490: ;
Line 1493: if
Line 1493: (
Line 1493: ID = pulled
Line 1493: <
Line 1493: ID = max_nr_move
Line 1493: )
Line 1493: {
Line 1494: if
Line 1494: (
Line 1494: ID = curr
Line 1494: !=
Line 1494: ID = head
Line 1494: )
Line 1495: ID = goto
Line 1495: ID = skip_queue
Line 1495: ;
Line 1496: ID = idx
Line 1496: +
Line 1496: +
Line 1496: ;
Line 1497: ID = goto
Line 1497: ID = skip_bitmap
Line 1497: ;
Line 1498: }
Line 1499: ID = out
Line 1499: Unrecognized token: 58
Line 1500: return
Line 1500: ID = pulled
Line 1500: ;
Line 1501: }
Line 1508: ID = static
Line 1508: ID = struct
Line 1508: ID = sched_group
Line 1508: *
Line 1509: ID = find_busiest_group
Line 1509: (
Line 1509: ID = struct
Line 1509: ID = sched_domain
Line 1509: *
Line 1509: ID = sd
Line 1509: ,
Line 1509: int
Line 1509: ID = this_cpu
Line 1509: ,
Line 1510: ID = unsigned
Line 1510: ID = long
Line 1510: *
Line 1510: ID = imbalance
Line 1510: ,
Line 1510: ID = enum
Line 1510: ID = idle_type
Line 1510: ID = idle
Line 1510: )
Line 1511: {
Line 1512: ID = struct
Line 1512: ID = sched_group
Line 1512: *
Line 1512: ID = busiest
Line 1512: =
Line 1512: ID = NULL
Line 1512: ,
Line 1512: *
Line 1512: ID = this
Line 1512: =
Line 1512: ID = NULL
Line 1512: ,
Line 1512: *
Line 1512: ID = group
Line 1512: =
Line 1512: ID = sd
Line 1512: -
Line 1512: >
Line 1512: ID = groups
Line 1512: ;
Line 1513: ID = unsigned
Line 1513: ID = long
Line 1513: ID = max_load
Line 1513: ,
Line 1513: ID = avg_load
Line 1513: ,
Line 1513: ID = total_load
Line 1513: ,
Line 1513: ID = this_load
Line 1513: ,
Line 1513: ID = total_pwr
Line 1513: ;
Line 1515: ID = max_load
Line 1515: =
Line 1515: ID = this_load
Line 1515: =
Line 1515: ID = total_load
Line 1515: =
Line 1515: ID = total_pwr
Line 1515: =
Line 1515: INTCON = 0
Line 1515: ;
Line 1517: ID = do
Line 1517: {
Line 1518: ID = cpumask_t
Line 1518: ID = tmp
Line 1518: ;
Line 1519: ID = unsigned
Line 1519: ID = long
Line 1519: ID = load
Line 1519: ;
Line 1520: int
Line 1520: ID = local_group
Line 1520: ;
Line 1521: int
Line 1521: ID = i
Line 1521: ,
Line 1521: ID = nr_cpus
Line 1521: =
Line 1521: INTCON = 0
Line 1521: ;
Line 1523: ID = local_group
Line 1523: =
Line 1523: ID = cpu_isset
Line 1523: (
Line 1523: ID = this_cpu
Line 1523: ,
Line 1523: ID = group
Line 1523: -
Line 1523: >
Line 1523: ID = cpumask
Line 1523: )
Line 1523: ;
Line 1526: ID = avg_load
Line 1526: =
Line 1526: INTCON = 0
Line 1526: ;
Line 1527: ID = cpus_and
Line 1527: (
Line 1527: ID = tmp
Line 1527: ,
Line 1527: ID = group
Line 1527: -
Line 1527: >
Line 1527: ID = cpumask
Line 1527: ,
Line 1527: ID = cpu_online_map
Line 1527: )
Line 1527: ;
Line 1528: if
Line 1528: (
Line 1528: ID = unlikely
Line 1528: (
Line 1528: ID = cpus_empty
Line 1528: (
Line 1528: ID = tmp
Line 1528: )
Line 1528: )
Line 1528: )
Line 1529: ID = goto
Line 1529: ID = nextgroup
Line 1529: ;
Line 1531: ID = for_each_cpu_mask
Line 1531: (
Line 1531: ID = i
Line 1531: ,
Line 1531: ID = tmp
Line 1531: )
Line 1531: {
Line 1533: if
Line 1533: (
Line 1533: ID = local_group
Line 1533: )
Line 1534: ID = load
Line 1534: =
Line 1534: ID = target_load
Line 1534: (
Line 1534: ID = i
Line 1534: )
Line 1534: ;
Line 1535: else
Line 1536: ID = load
Line 1536: =
Line 1536: ID = source_load
Line 1536: (
Line 1536: ID = i
Line 1536: )
Line 1536: ;
Line 1538: ID = nr_cpus
Line 1538: +
Line 1538: +
Line 1538: ;
Line 1539: ID = avg_load
Line 1539: +
Line 1539: =
Line 1539: ID = load
Line 1539: ;
Line 1540: }
Line 1542: if
Line 1542: (
Line 1542: !
Line 1542: ID = nr_cpus
Line 1542: )
Line 1543: ID = goto
Line 1543: ID = nextgroup
Line 1543: ;
Line 1545: ID = total_load
Line 1545: +
Line 1545: =
Line 1545: ID = avg_load
Line 1545: ;
Line 1546: ID = total_pwr
Line 1546: +
Line 1546: =
Line 1546: ID = group
Line 1546: -
Line 1546: >
Line 1546: ID = cpu_power
Line 1546: ;
Line 1549: ID = avg_load
Line 1549: =
Line 1549: (
Line 1549: ID = avg_load
Line 1549: *
Line 1549: ID = SCHED_LOAD_SCALE
Line 1549: )
Line 1549: /
Line 1549: ID = group
Line 1549: -
Line 1549: >
Line 1549: ID = cpu_power
Line 1549: ;
Line 1551: if
Line 1551: (
Line 1551: ID = local_group
Line 1551: )
Line 1551: {
Line 1552: ID = this_load
Line 1552: =
Line 1552: ID = avg_load
Line 1552: ;
Line 1553: ID = this
Line 1553: =
Line 1553: ID = group
Line 1553: ;
Line 1554: ID = goto
Line 1554: ID = nextgroup
Line 1554: ;
Line 1555: }
Line 1555: else
Line 1555: if
Line 1555: (
Line 1555: ID = avg_load
Line 1555: >
Line 1555: ID = max_load
Line 1555: )
Line 1555: {
Line 1556: ID = max_load
Line 1556: =
Line 1556: ID = avg_load
Line 1556: ;
Line 1557: ID = busiest
Line 1557: =
Line 1557: ID = group
Line 1557: ;
Line 1558: }
Line 1559: ID = nextgroup
Line 1559: Unrecognized token: 58
Line 1560: ID = group
Line 1560: =
Line 1560: ID = group
Line 1560: -
Line 1560: >
Line 1560: ID = next
Line 1560: ;
Line 1561: }
Line 1561: while
Line 1561: (
Line 1561: ID = group
Line 1561: !=
Line 1561: ID = sd
Line 1561: -
Line 1561: >
Line 1561: ID = groups
Line 1561: )
Line 1561: ;
Line 1563: if
Line 1563: (
Line 1563: !
Line 1563: ID = busiest
Line 1563: ||
Line 1563: ID = this_load
Line 1563: >=
Line 1563: ID = max_load
Line 1563: )
Line 1564: ID = goto
Line 1564: ID = out_balanced
Line 1564: ;
Line 1566: ID = avg_load
Line 1566: =
Line 1566: (
Line 1566: ID = SCHED_LOAD_SCALE
Line 1566: *
Line 1566: ID = total_load
Line 1566: )
Line 1566: /
Line 1566: ID = total_pwr
Line 1566: ;
Line 1568: if
Line 1568: (
Line 1568: ID = this_load
Line 1568: >=
Line 1568: ID = avg_load
Line 1568: ||
Line 1569: INTCON = 100
Line 1569: *
Line 1569: ID = max_load
Line 1569: <=
Line 1569: ID = sd
Line 1569: -
Line 1569: >
Line 1569: ID = imbalance_pct
Line 1569: *
Line 1569: ID = this_load
Line 1569: )
Line 1570: ID = goto
Line 1570: ID = out_balanced
Line 1570: ;
Line 1583: *
Line 1583: ID = imbalance
Line 1583: =
Line 1583: ID = min
Line 1583: (
Line 1583: ID = max_load
Line 1583: -
Line 1583: ID = avg_load
Line 1583: ,
Line 1583: ID = avg_load
Line 1583: -
Line 1583: ID = this_load
Line 1583: )
Line 1583: ;
Line 1586: *
Line 1586: ID = imbalance
Line 1586: =
Line 1586: (
Line 1586: *
Line 1586: ID = imbalance
Line 1586: *
Line 1586: ID = min
Line 1586: (
Line 1586: ID = busiest
Line 1586: -
Line 1586: >
Line 1586: ID = cpu_power
Line 1586: ,
Line 1586: ID = this
Line 1586: -
Line 1586: >
Line 1586: ID = cpu_power
Line 1586: )
Line 1586: )
Line 1587: /
Line 1587: ID = SCHED_LOAD_SCALE
Line 1587: ;
Line 1589: if
Line 1589: (
Line 1589: *
Line 1589: ID = imbalance
Line 1589: <
Line 1589: ID = SCHED_LOAD_SCALE
Line 1589: -
Line 1589: INTCON = 1
Line 1589: )
Line 1589: {
Line 1590: ID = unsigned
Line 1590: ID = long
Line 1590: ID = pwr_now
Line 1590: =
Line 1590: INTCON = 0
Line 1590: ,
Line 1590: ID = pwr_move
Line 1590: =
Line 1590: INTCON = 0
Line 1590: ;
Line 1591: ID = unsigned
Line 1591: ID = long
Line 1591: ID = tmp
Line 1591: ;
Line 1593: if
Line 1593: (
Line 1593: ID = max_load
Line 1593: -
Line 1593: ID = this_load
Line 1593: >=
Line 1593: ID = SCHED_LOAD_SCALE
Line 1593: *
Line 1593: INTCON = 2
Line 1593: )
Line 1593: {
Line 1594: *
Line 1594: ID = imbalance
Line 1594: =
Line 1594: INTCON = 1
Line 1594: ;
Line 1595: return
Line 1595: ID = busiest
Line 1595: ;
Line 1596: }
Line 1604: ID = pwr_now
Line 1604: +
Line 1604: =
Line 1604: ID = busiest
Line 1604: -
Line 1604: >
Line 1604: ID = cpu_power
Line 1604: *
Line 1604: ID = min
Line 1604: (
Line 1604: ID = SCHED_LOAD_SCALE
Line 1604: ,
Line 1604: ID = max_load
Line 1604: )
Line 1604: ;
Line 1605: ID = pwr_now
Line 1605: +
Line 1605: =
Line 1605: ID = this
Line 1605: -
Line 1605: >
Line 1605: ID = cpu_power
Line 1605: *
Line 1605: ID = min
Line 1605: (
Line 1605: ID = SCHED_LOAD_SCALE
Line 1605: ,
Line 1605: ID = this_load
Line 1605: )
Line 1605: ;
Line 1606: ID = pwr_now
Line 1606: /
Line 1606: =
Line 1606: ID = SCHED_LOAD_SCALE
Line 1606: ;
Line 1609: ID = tmp
Line 1609: =
Line 1609: ID = SCHED_LOAD_SCALE
Line 1609: *
Line 1609: ID = SCHED_LOAD_SCALE
Line 1609: /
Line 1609: ID = busiest
Line 1609: -
Line 1609: >
Line 1609: ID = cpu_power
Line 1609: ;
Line 1610: if
Line 1610: (
Line 1610: ID = max_load
Line 1610: >
Line 1610: ID = tmp
Line 1610: )
Line 1611: ID = pwr_move
Line 1611: +
Line 1611: =
Line 1611: ID = busiest
Line 1611: -
Line 1611: >
Line 1611: ID = cpu_power
Line 1611: *
Line 1611: ID = min
Line 1611: (
Line 1611: ID = SCHED_LOAD_SCALE
Line 1611: ,
Line 1612: ID = max_load
Line 1612: -
Line 1612: ID = tmp
Line 1612: )
Line 1612: ;
Line 1615: ID = tmp
Line 1615: =
Line 1615: ID = SCHED_LOAD_SCALE
Line 1615: *
Line 1615: ID = SCHED_LOAD_SCALE
Line 1615: /
Line 1615: ID = this
Line 1615: -
Line 1615: >
Line 1615: ID = cpu_power
Line 1615: ;
Line 1616: if
Line 1616: (
Line 1616: ID = max_load
Line 1616: <
Line 1616: ID = tmp
Line 1616: )
Line 1617: ID = tmp
Line 1617: =
Line 1617: ID = max_load
Line 1617: ;
Line 1618: ID = pwr_move
Line 1618: +
Line 1618: =
Line 1618: ID = this
Line 1618: -
Line 1618: >
Line 1618: ID = cpu_power
Line 1618: *
Line 1618: ID = min
Line 1618: (
Line 1618: ID = SCHED_LOAD_SCALE
Line 1618: ,
Line 1618: ID = this_load
Line 1618: +
Line 1618: ID = tmp
Line 1618: )
Line 1618: ;
Line 1619: ID = pwr_move
Line 1619: /
Line 1619: =
Line 1619: ID = SCHED_LOAD_SCALE
Line 1619: ;
Line 1622: if
Line 1622: (
Line 1622: ID = pwr_move
Line 1622: <
Line 1622: ID = pwr_now
Line 1622: +
Line 1622: ID = SCHED_LOAD_SCALE
Line 1622: /
Line 1622: INTCON = 8
Line 1622: )
Line 1623: ID = goto
Line 1623: ID = out_balanced
Line 1623: ;
Line 1625: *
Line 1625: ID = imbalance
Line 1625: =
Line 1625: INTCON = 1
Line 1625: ;
Line 1626: return
Line 1626: ID = busiest
Line 1626: ;
Line 1627: }
Line 1630: *
Line 1630: ID = imbalance
Line 1630: =
Line 1630: (
Line 1630: *
Line 1630: ID = imbalance
Line 1630: +
Line 1630: INTCON = 1
Line 1630: )
Line 1630: /
Line 1630: ID = SCHED_LOAD_SCALE
Line 1630: ;
Line 1632: return
Line 1632: ID = busiest
Line 1632: ;
Line 1634: ID = out_balanced
Line 1634: Unrecognized token: 58
Line 1635: if
Line 1635: (
Line 1635: ID = busiest
Line 1635: &&
Line 1635: (
Line 1635: ID = idle
Line 1635: ==
Line 1635: ID = NEWLY_IDLE
Line 1635: ||
Line 1636: (
Line 1636: ID = idle
Line 1636: ==
Line 1636: ID = IDLE
Line 1636: &&
Line 1636: ID = max_load
Line 1636: >
Line 1636: ID = SCHED_LOAD_SCALE
Line 1636: )
Line 1636: )
Line 1636: )
Line 1636: {
Line 1637: *
Line 1637: ID = imbalance
Line 1637: =
Line 1637: INTCON = 1
Line 1637: ;
Line 1638: return
Line 1638: ID = busiest
Line 1638: ;
Line 1639: }
Line 1641: *
Line 1641: ID = imbalance
Line 1641: =
Line 1641: INTCON = 0
Line 1641: ;
Line 1642: return
Line 1642: ID = NULL
Line 1642: ;
Line 1643: }
Line 1648: ID = static
Line 1648: ID = runqueue_t
Line 1648: *
Line 1648: ID = find_busiest_queue
Line 1648: (
Line 1648: ID = struct
Line 1648: ID = sched_group
Line 1648: *
Line 1648: ID = group
Line 1648: )
Line 1649: {
Line 1650: ID = cpumask_t
Line 1650: ID = tmp
Line 1650: ;
Line 1651: ID = unsigned
Line 1651: ID = long
Line 1651: ID = load
Line 1651: ,
Line 1651: ID = max_load
Line 1651: =
Line 1651: INTCON = 0
Line 1651: ;
Line 1652: ID = runqueue_t
Line 1652: *
Line 1652: ID = busiest
Line 1652: =
Line 1652: ID = NULL
Line 1652: ;
Line 1653: int
Line 1653: ID = i
Line 1653: ;
Line 1655: ID = cpus_and
Line 1655: (
Line 1655: ID = tmp
Line 1655: ,
Line 1655: ID = group
Line 1655: -
Line 1655: >
Line 1655: ID = cpumask
Line 1655: ,
Line 1655: ID = cpu_online_map
Line 1655: )
Line 1655: ;
Line 1656: ID = for_each_cpu_mask
Line 1656: (
Line 1656: ID = i
Line 1656: ,
Line 1656: ID = tmp
Line 1656: )
Line 1656: {
Line 1657: ID = load
Line 1657: =
Line 1657: ID = source_load
Line 1657: (
Line 1657: ID = i
Line 1657: )
Line 1657: ;
Line 1659: if
Line 1659: (
Line 1659: ID = load
Line 1659: >
Line 1659: ID = max_load
Line 1659: )
Line 1659: {
Line 1660: ID = max_load
Line 1660: =
Line 1660: ID = load
Line 1660: ;
Line 1661: ID = busiest
Line 1661: =
Line 1661: ID = cpu_rq
Line 1661: (
Line 1661: ID = i
Line 1661: )
Line 1661: ;
Line 1662: }
Line 1663: }
Line 1665: return
Line 1665: ID = busiest
Line 1665: ;
Line 1666: }
Line 1674: ID = static
Line 1674: int
Line 1674: ID = load_balance
Line 1674: (
Line 1674: int
Line 1674: ID = this_cpu
Line 1674: ,
Line 1674: ID = runqueue_t
Line 1674: *
Line 1674: ID = this_rq
Line 1674: ,
Line 1675: ID = struct
Line 1675: ID = sched_domain
Line 1675: *
Line 1675: ID = sd
Line 1675: ,
Line 1675: ID = enum
Line 1675: ID = idle_type
Line 1675: ID = idle
Line 1675: )
Line 1676: {
Line 1677: ID = struct
Line 1677: ID = sched_group
Line 1677: *
Line 1677: ID = group
Line 1677: ;
Line 1678: ID = runqueue_t
Line 1678: *
Line 1678: ID = busiest
Line 1678: ;
Line 1679: ID = unsigned
Line 1679: ID = long
Line 1679: ID = imbalance
Line 1679: ;
Line 1680: int
Line 1680: ID = nr_moved
Line 1680: ;
Line 1682: ID = spin_lock
Line 1682: (
Line 1682: Unrecognized token: 38
Line 1682: ID = this_rq
Line 1682: -
Line 1682: >
Line 1682: ID = lock
Line 1682: )
Line 1682: ;
Line 1684: ID = group
Line 1684: =
Line 1684: ID = find_busiest_group
Line 1684: (
Line 1684: ID = sd
Line 1684: ,
Line 1684: ID = this_cpu
Line 1684: ,
Line 1684: Unrecognized token: 38
Line 1684: ID = imbalance
Line 1684: ,
Line 1684: ID = idle
Line 1684: )
Line 1684: ;
Line 1685: if
Line 1685: (
Line 1685: !
Line 1685: ID = group
Line 1685: )
Line 1686: ID = goto
Line 1686: ID = out_balanced
Line 1686: ;
Line 1688: ID = busiest
Line 1688: =
Line 1688: ID = find_busiest_queue
Line 1688: (
Line 1688: ID = group
Line 1688: )
Line 1688: ;
Line 1689: if
Line 1689: (
Line 1689: !
Line 1689: ID = busiest
Line 1689: )
Line 1690: ID = goto
Line 1690: ID = out_balanced
Line 1690: ;
Line 1696: if
Line 1696: (
Line 1696: ID = unlikely
Line 1696: (
Line 1696: ID = busiest
Line 1696: ==
Line 1696: ID = this_rq
Line 1696: )
Line 1696: )
Line 1696: {
Line 1697: ID = WARN_ON
Line 1697: (
Line 1697: INTCON = 1
Line 1697: )
Line 1697: ;
Line 1698: ID = goto
Line 1698: ID = out_balanced
Line 1698: ;
Line 1699: }
Line 1701: ID = nr_moved
Line 1701: =
Line 1701: INTCON = 0
Line 1701: ;
Line 1702: if
Line 1702: (
Line 1702: ID = busiest
Line 1702: -
Line 1702: >
Line 1702: ID = nr_running
Line 1702: >
Line 1702: INTCON = 1
Line 1702: )
Line 1702: {
Line 1709: ID = double_lock_balance
Line 1709: (
Line 1709: ID = this_rq
Line 1709: ,
Line 1709: ID = busiest
Line 1709: )
Line 1709: ;
Line 1710: ID = nr_moved
Line 1710: =
Line 1710: ID = move_tasks
Line 1710: (
Line 1710: ID = this_rq
Line 1710: ,
Line 1710: ID = this_cpu
Line 1710: ,
Line 1710: ID = busiest
Line 1710: ,
Line 1711: ID = imbalance
Line 1711: ,
Line 1711: ID = sd
Line 1711: ,
Line 1711: ID = idle
Line 1711: )
Line 1711: ;
Line 1712: ID = spin_unlock
Line 1712: (
Line 1712: Unrecognized token: 38
Line 1712: ID = busiest
Line 1712: -
Line 1712: >
Line 1712: ID = lock
Line 1712: )
Line 1712: ;
Line 1713: }
Line 1714: ID = spin_unlock
Line 1714: (
Line 1714: Unrecognized token: 38
Line 1714: ID = this_rq
Line 1714: -
Line 1714: >
Line 1714: ID = lock
Line 1714: )
Line 1714: ;
Line 1716: if
Line 1716: (
Line 1716: !
Line 1716: ID = nr_moved
Line 1716: )
Line 1716: {
Line 1717: ID = sd
Line 1717: -
Line 1717: >
Line 1717: ID = nr_balance_failed
Line 1717: +
Line 1717: +
Line 1717: ;
Line 1719: if
Line 1719: (
Line 1719: ID = unlikely
Line 1719: (
Line 1719: ID = sd
Line 1719: -
Line 1719: >
Line 1719: ID = nr_balance_failed
Line 1719: >
Line 1719: ID = sd
Line 1719: -
Line 1719: >
Line 1719: ID = cache_nice_tries
Line 1719: +
Line 1719: INTCON = 2
Line 1719: )
Line 1719: )
Line 1719: {
Line 1720: int
Line 1720: ID = wake
Line 1720: =
Line 1720: INTCON = 0
Line 1720: ;
Line 1722: ID = spin_lock
Line 1722: (
Line 1722: Unrecognized token: 38
Line 1722: ID = busiest
Line 1722: -
Line 1722: >
Line 1722: ID = lock
Line 1722: )
Line 1722: ;
Line 1723: if
Line 1723: (
Line 1723: !
Line 1723: ID = busiest
Line 1723: -
Line 1723: >
Line 1723: ID = active_balance
Line 1723: )
Line 1723: {
Line 1724: ID = busiest
Line 1724: -
Line 1724: >
Line 1724: ID = active_balance
Line 1724: =
Line 1724: INTCON = 1
Line 1724: ;
Line 1725: ID = busiest
Line 1725: -
Line 1725: >
Line 1725: ID = push_cpu
Line 1725: =
Line 1725: ID = this_cpu
Line 1725: ;
Line 1726: ID = wake
Line 1726: =
Line 1726: INTCON = 1
Line 1726: ;
Line 1727: }
Line 1728: ID = spin_unlock
Line 1728: (
Line 1728: Unrecognized token: 38
Line 1728: ID = busiest
Line 1728: -
Line 1728: >
Line 1728: ID = lock
Line 1728: )
Line 1728: ;
Line 1729: if
Line 1729: (
Line 1729: ID = wake
Line 1729: )
Line 1730: ID = wake_up_process
Line 1730: (
Line 1730: ID = busiest
Line 1730: -
Line 1730: >
Line 1730: ID = migration_thread
Line 1730: )
Line 1730: ;
Line 1736: ID = sd
Line 1736: -
Line 1736: >
Line 1736: ID = nr_balance_failed
Line 1736: =
Line 1736: ID = sd
Line 1736: -
Line 1736: >
Line 1736: ID = cache_nice_tries
Line 1736: ;
Line 1737: }
Line 1738: }
Line 1738: else
Line 1739: ID = sd
Line 1739: -
Line 1739: >
Line 1739: ID = nr_balance_failed
Line 1739: =
Line 1739: INTCON = 0
Line 1739: ;
Line 1742: ID = sd
Line 1742: -
Line 1742: >
Line 1742: ID = balance_interval
Line 1742: =
Line 1742: ID = sd
Line 1742: -
Line 1742: >
Line 1742: ID = min_interval
Line 1742: ;
Line 1744: return
Line 1744: ID = nr_moved
Line 1744: ;
Line 1746: ID = out_balanced
Line 1746: Unrecognized token: 58
Line 1747: ID = spin_unlock
Line 1747: (
Line 1747: Unrecognized token: 38
Line 1747: ID = this_rq
Line 1747: -
Line 1747: >
Line 1747: ID = lock
Line 1747: )
Line 1747: ;
Line 1750: if
Line 1750: (
Line 1750: ID = sd
Line 1750: -
Line 1750: >
Line 1750: ID = balance_interval
Line 1750: <
Line 1750: ID = sd
Line 1750: -
Line 1750: >
Line 1750: ID = max_interval
Line 1750: )
Line 1751: ID = sd
Line 1751: -
Line 1751: >
Line 1751: ID = balance_interval
Line 1751: *
Line 1751: =
Line 1751: INTCON = 2
Line 1751: ;
Line 1753: return
Line 1753: INTCON = 0
Line 1753: ;
Line 1754: }
Line 1763: ID = static
Line 1763: int
Line 1763: ID = load_balance_newidle
Line 1763: (
Line 1763: int
Line 1763: ID = this_cpu
Line 1763: ,
Line 1763: ID = runqueue_t
Line 1763: *
Line 1763: ID = this_rq
Line 1763: ,
Line 1764: ID = struct
Line 1764: ID = sched_domain
Line 1764: *
Line 1764: ID = sd
Line 1764: )
Line 1765: {
Line 1766: ID = struct
Line 1766: ID = sched_group
Line 1766: *
Line 1766: ID = group
Line 1766: ;
Line 1767: ID = runqueue_t
Line 1767: *
Line 1767: ID = busiest
Line 1767: =
Line 1767: ID = NULL
Line 1767: ;
Line 1768: ID = unsigned
Line 1768: ID = long
Line 1768: ID = imbalance
Line 1768: ;
Line 1769: int
Line 1769: ID = nr_moved
Line 1769: =
Line 1769: INTCON = 0
Line 1769: ;
Line 1771: ID = group
Line 1771: =
Line 1771: ID = find_busiest_group
Line 1771: (
Line 1771: ID = sd
Line 1771: ,
Line 1771: ID = this_cpu
Line 1771: ,
Line 1771: Unrecognized token: 38
Line 1771: ID = imbalance
Line 1771: ,
Line 1771: ID = NEWLY_IDLE
Line 1771: )
Line 1771: ;
Line 1772: if
Line 1772: (
Line 1772: !
Line 1772: ID = group
Line 1772: )
Line 1773: ID = goto
Line 1773: ID = out
Line 1773: ;
Line 1775: ID = busiest
Line 1775: =
Line 1775: ID = find_busiest_queue
Line 1775: (
Line 1775: ID = group
Line 1775: )
Line 1775: ;
Line 1776: if
Line 1776: (
Line 1776: !
Line 1776: ID = busiest
Line 1776: ||
Line 1776: ID = busiest
Line 1776: ==
Line 1776: ID = this_rq
Line 1776: )
Line 1777: ID = goto
Line 1777: ID = out
Line 1777: ;
Line 1780: ID = double_lock_balance
Line 1780: (
Line 1780: ID = this_rq
Line 1780: ,
Line 1780: ID = busiest
Line 1780: )
Line 1780: ;
Line 1782: ID = nr_moved
Line 1782: =
Line 1782: ID = move_tasks
Line 1782: (
Line 1782: ID = this_rq
Line 1782: ,
Line 1782: ID = this_cpu
Line 1782: ,
Line 1782: ID = busiest
Line 1782: ,
Line 1783: ID = imbalance
Line 1783: ,
Line 1783: ID = sd
Line 1783: ,
Line 1783: ID = NEWLY_IDLE
Line 1783: )
Line 1783: ;
Line 1785: ID = spin_unlock
Line 1785: (
Line 1785: Unrecognized token: 38
Line 1785: ID = busiest
Line 1785: -
Line 1785: >
Line 1785: ID = lock
Line 1785: )
Line 1785: ;
Line 1787: ID = out
Line 1787: Unrecognized token: 58
Line 1788: return
Line 1788: ID = nr_moved
Line 1788: ;
Line 1789: }
Line 1795: ID = static
Line 1795: ID = inline
Line 1795: void
Line 1795: ID = idle_balance
Line 1795: (
Line 1795: int
Line 1795: ID = this_cpu
Line 1795: ,
Line 1795: ID = runqueue_t
Line 1795: *
Line 1795: ID = this_rq
Line 1795: )
Line 1796: {
Line 1797: ID = struct
Line 1797: ID = sched_domain
Line 1797: *
Line 1797: ID = sd
Line 1797: ;
Line 1799: ID = for_each_domain
Line 1799: (
Line 1799: ID = this_cpu
Line 1799: ,
Line 1799: ID = sd
Line 1799: )
Line 1799: {
Line 1800: if
Line 1800: (
Line 1800: ID = sd
Line 1800: -
Line 1800: >
Line 1800: ID = flags
Line 1800: Unrecognized token: 38
Line 1800: ID = SD_BALANCE_NEWIDLE
Line 1800: )
Line 1800: {
Line 1801: if
Line 1801: (
Line 1801: ID = load_balance_newidle
Line 1801: (
Line 1801: ID = this_cpu
Line 1801: ,
Line 1801: ID = this_rq
Line 1801: ,
Line 1801: ID = sd
Line 1801: )
Line 1801: )
Line 1801: {
Line 1803: ID = break
Line 1803: ;
Line 1804: }
Line 1805: }
Line 1806: }
Line 1807: }
Line 1817: ID = static
Line 1817: void
Line 1817: ID = active_load_balance
Line 1817: (
Line 1817: ID = runqueue_t
Line 1817: *
Line 1817: ID = busiest
Line 1817: ,
Line 1817: int
Line 1817: ID = busiest_cpu
Line 1817: )
Line 1818: {
Line 1819: ID = struct
Line 1819: ID = sched_domain
Line 1819: *
Line 1819: ID = sd
Line 1819: ;
Line 1820: ID = struct
Line 1820: ID = sched_group
Line 1820: *
Line 1820: ID = group
Line 1820: ,
Line 1820: *
Line 1820: ID = busy_group
Line 1820: ;
Line 1821: int
Line 1821: ID = i
Line 1821: ;
Line 1823: if
Line 1823: (
Line 1823: ID = busiest
Line 1823: -
Line 1823: >
Line 1823: ID = nr_running
Line 1823: <=
Line 1823: INTCON = 1
Line 1823: )
Line 1824: return
Line 1824: ;
Line 1826: ID = for_each_domain
Line 1826: (
Line 1826: ID = busiest_cpu
Line 1826: ,
Line 1826: ID = sd
Line 1826: )
Line 1827: if
Line 1827: (
Line 1827: ID = cpu_isset
Line 1827: (
Line 1827: ID = busiest
Line 1827: -
Line 1827: >
Line 1827: ID = push_cpu
Line 1827: ,
Line 1827: ID = sd
Line 1827: -
Line 1827: >
Line 1827: ID = span
Line 1827: )
Line 1827: )
Line 1828: ID = break
Line 1828: ;
Line 1829: if
Line 1829: (
Line 1829: !
Line 1829: ID = sd
Line 1829: )
Line 1829: {
Line 1830: ID = WARN_ON
Line 1830: (
Line 1830: INTCON = 1
Line 1830: )
Line 1830: ;
Line 1831: return
Line 1831: ;
Line 1832: }
Line 1834: ID = group
Line 1834: =
Line 1834: ID = sd
Line 1834: -
Line 1834: >
Line 1834: ID = groups
Line 1834: ;
Line 1835: while
Line 1835: (
Line 1835: !
Line 1835: ID = cpu_isset
Line 1835: (
Line 1835: ID = busiest_cpu
Line 1835: ,
Line 1835: ID = group
Line 1835: -
Line 1835: >
Line 1835: ID = cpumask
Line 1835: )
Line 1835: )
Line 1836: ID = group
Line 1836: =
Line 1836: ID = group
Line 1836: -
Line 1836: >
Line 1836: ID = next
Line 1836: ;
Line 1837: ID = busy_group
Line 1837: =
Line 1837: ID = group
Line 1837: ;
Line 1839: ID = group
Line 1839: =
Line 1839: ID = sd
Line 1839: -
Line 1839: >
Line 1839: ID = groups
Line 1839: ;
Line 1840: ID = do
Line 1840: {
Line 1841: ID = cpumask_t
Line 1841: ID = tmp
Line 1841: ;
Line 1842: ID = runqueue_t
Line 1842: *
Line 1842: ID = rq
Line 1842: ;
Line 1843: int
Line 1843: ID = push_cpu
Line 1843: =
Line 1843: INTCON = 0
Line 1843: ;
Line 1845: if
Line 1845: (
Line 1845: ID = group
Line 1845: ==
Line 1845: ID = busy_group
Line 1845: )
Line 1846: ID = goto
Line 1846: ID = next_group
Line 1846: ;
Line 1848: ID = cpus_and
Line 1848: (
Line 1848: ID = tmp
Line 1848: ,
Line 1848: ID = group
Line 1848: -
Line 1848: >
Line 1848: ID = cpumask
Line 1848: ,
Line 1848: ID = cpu_online_map
Line 1848: )
Line 1848: ;
Line 1849: if
Line 1849: (
Line 1849: !
Line 1849: ID = cpus_weight
Line 1849: (
Line 1849: ID = tmp
Line 1849: )
Line 1849: )
Line 1850: ID = goto
Line 1850: ID = next_group
Line 1850: ;
Line 1852: ID = for_each_cpu_mask
Line 1852: (
Line 1852: ID = i
Line 1852: ,
Line 1852: ID = tmp
Line 1852: )
Line 1852: {
Line 1853: if
Line 1853: (
Line 1853: !
Line 1853: ID = idle_cpu
Line 1853: (
Line 1853: ID = i
Line 1853: )
Line 1853: )
Line 1854: ID = goto
Line 1854: ID = next_group
Line 1854: ;
Line 1855: ID = push_cpu
Line 1855: =
Line 1855: ID = i
Line 1855: ;
Line 1856: }
Line 1858: ID = rq
Line 1858: =
Line 1858: ID = cpu_rq
Line 1858: (
Line 1858: ID = push_cpu
Line 1858: )
Line 1858: ;
Line 1866: if
Line 1866: (
Line 1866: ID = unlikely
Line 1866: (
Line 1866: ID = busiest
Line 1866: ==
Line 1866: ID = rq
Line 1866: )
Line 1866: )
Line 1867: ID = goto
Line 1867: ID = next_group
Line 1867: ;
Line 1868: ID = double_lock_balance
Line 1868: (
Line 1868: ID = busiest
Line 1868: ,
Line 1868: ID = rq
Line 1868: )
Line 1868: ;
Line 1869: ID = move_tasks
Line 1869: (
Line 1869: ID = rq
Line 1869: ,
Line 1869: ID = push_cpu
Line 1869: ,
Line 1869: ID = busiest
Line 1869: ,
Line 1869: INTCON = 1
Line 1869: ,
Line 1869: ID = sd
Line 1869: ,
Line 1869: ID = IDLE
Line 1869: )
Line 1869: ;
Line 1870: ID = spin_unlock
Line 1870: (
Line 1870: Unrecognized token: 38
Line 1870: ID = rq
Line 1870: -
Line 1870: >
Line 1870: ID = lock
Line 1870: )
Line 1870: ;
Line 1871: ID = next_group
Line 1871: Unrecognized token: 58
Line 1872: ID = group
Line 1872: =
Line 1872: ID = group
Line 1872: -
Line 1872: >
Line 1872: ID = next
Line 1872: ;
Line 1873: }
Line 1873: while
Line 1873: (
Line 1873: ID = group
Line 1873: !=
Line 1873: ID = sd
Line 1873: -
Line 1873: >
Line 1873: ID = groups
Line 1873: )
Line 1873: ;
Line 1874: }
Line 1886: Unrecognized token: 35
Line 1886: ID = define
Line 1886: ID = CPU_OFFSET
Line 1886: (
Line 1886: ID = cpu
Line 1886: )
Line 1886: (
Line 1886: ID = HZ
Line 1886: *
Line 1886: ID = cpu
Line 1886: /
Line 1886: ID = NR_CPUS
Line 1886: )
Line 1888: ID = static
Line 1888: void
Line 1888: ID = rebalance_tick
Line 1888: (
Line 1888: int
Line 1888: ID = this_cpu
Line 1888: ,
Line 1888: ID = runqueue_t
Line 1888: *
Line 1888: ID = this_rq
Line 1888: ,
Line 1889: ID = enum
Line 1889: ID = idle_type
Line 1889: ID = idle
Line 1889: )
Line 1890: {
Line 1891: ID = unsigned
Line 1891: ID = long
Line 1891: ID = old_load
Line 1891: ,
Line 1891: ID = this_load
Line 1891: ;
Line 1892: ID = unsigned
Line 1892: ID = long
Line 1892: ID = j
Line 1892: =
Line 1892: ID = jiffies
Line 1892: +
Line 1892: ID = CPU_OFFSET
Line 1892: (
Line 1892: ID = this_cpu
Line 1892: )
Line 1892: ;
Line 1893: ID = struct
Line 1893: ID = sched_domain
Line 1893: *
Line 1893: ID = sd
Line 1893: ;
Line 1896: ID = old_load
Line 1896: =
Line 1896: ID = this_rq
Line 1896: -
Line 1896: >
Line 1896: ID = cpu_load
Line 1896: ;
Line 1897: ID = this_load
Line 1897: =
Line 1897: ID = this_rq
Line 1897: -
Line 1897: >
Line 1897: ID = nr_running
Line 1897: *
Line 1897: ID = SCHED_LOAD_SCALE
Line 1897: ;
Line 1903: if
Line 1903: (
Line 1903: ID = this_load
Line 1903: >
Line 1903: ID = old_load
Line 1903: )
Line 1904: ID = old_load
Line 1904: +
Line 1904: +
Line 1904: ;
Line 1905: ID = this_rq
Line 1905: -
Line 1905: >
Line 1905: ID = cpu_load
Line 1905: =
Line 1905: (
Line 1905: ID = old_load
Line 1905: +
Line 1905: ID = this_load
Line 1905: )
Line 1905: /
Line 1905: INTCON = 2
Line 1905: ;
Line 1907: ID = for_each_domain
Line 1907: (
Line 1907: ID = this_cpu
Line 1907: ,
Line 1907: ID = sd
Line 1907: )
Line 1907: {
Line 1908: ID = unsigned
Line 1908: ID = long
Line 1908: ID = interval
Line 1908: =
Line 1908: ID = sd
Line 1908: -
Line 1908: >
Line 1908: ID = balance_interval
Line 1908: ;
Line 1910: if
Line 1910: (
Line 1910: ID = idle
Line 1910: !=
Line 1910: ID = IDLE
Line 1910: )
Line 1911: ID = interval
Line 1911: *
Line 1911: =
Line 1911: ID = sd
Line 1911: -
Line 1911: >
Line 1911: ID = busy_factor
Line 1911: ;
Line 1914: ID = interval
Line 1914: =
Line 1914: ID = msecs_to_jiffies
Line 1914: (
Line 1914: ID = interval
Line 1914: )
Line 1914: ;
Line 1915: if
Line 1915: (
Line 1915: ID = unlikely
Line 1915: (
Line 1915: !
Line 1915: ID = interval
Line 1915: )
Line 1915: )
Line 1916: ID = interval
Line 1916: =
Line 1916: INTCON = 1
Line 1916: ;
Line 1918: if
Line 1918: (
Line 1918: ID = j
Line 1918: -
Line 1918: ID = sd
Line 1918: -
Line 1918: >
Line 1918: ID = last_balance
Line 1918: >=
Line 1918: ID = interval
Line 1918: )
Line 1918: {
Line 1919: if
Line 1919: (
Line 1919: ID = load_balance
Line 1919: (
Line 1919: ID = this_cpu
Line 1919: ,
Line 1919: ID = this_rq
Line 1919: ,
Line 1919: ID = sd
Line 1919: ,
Line 1919: ID = idle
Line 1919: )
Line 1919: )
Line 1919: {
Line 1921: ID = idle
Line 1921: =
Line 1921: ID = NOT_IDLE
Line 1921: ;
Line 1922: }
Line 1923: ID = sd
Line 1923: -
Line 1923: >
Line 1923: ID = last_balance
Line 1923: +
Line 1923: =
Line 1923: ID = interval
Line 1923: ;
Line 1924: }
Line 1925: }
Line 1926: }
Line 1927: Unrecognized token: 35
Line 1927: else
Line 1931: ID = static
Line 1931: ID = inline
Line 1931: void
Line 1931: ID = rebalance_tick
Line 1931: (
Line 1931: int
Line 1931: ID = cpu
Line 1931: ,
Line 1931: ID = runqueue_t
Line 1931: *
Line 1931: ID = rq
Line 1931: ,
Line 1931: ID = enum
Line 1931: ID = idle_type
Line 1931: ID = idle
Line 1931: )
Line 1932: {
Line 1933: }
Line 1934: ID = static
Line 1934: ID = inline
Line 1934: void
Line 1934: ID = idle_balance
Line 1934: (
Line 1934: int
Line 1934: ID = cpu
Line 1934: ,
Line 1934: ID = runqueue_t
Line 1934: *
Line 1934: ID = rq
Line 1934: )
Line 1935: {
Line 1936: }
Line 1937: Unrecognized token: 35
Line 1937: ID = endif
Line 1939: ID = static
Line 1939: ID = inline
Line 1939: int
Line 1939: ID = wake_priority_sleeper
Line 1939: (
Line 1939: ID = runqueue_t
Line 1939: *
Line 1939: ID = rq
Line 1939: )
Line 1940: {
Line 1941: Unrecognized token: 35
Line 1941: ID = ifdef
Line 1941: ID = CONFIG_SCHED_SMT
Line 1946: if
Line 1946: (
Line 1946: ID = rq
Line 1946: -
Line 1946: >
Line 1946: ID = nr_running
Line 1946: )
Line 1946: {
Line 1947: ID = resched_task
Line 1947: (
Line 1947: ID = rq
Line 1947: -
Line 1947: >
Line 1947: ID = idle
Line 1947: )
Line 1947: ;
Line 1948: return
Line 1948: INTCON = 1
Line 1948: ;
Line 1949: }
Line 1950: Unrecognized token: 35
Line 1950: ID = endif
Line 1951: return
Line 1951: INTCON = 0
Line 1951: ;
Line 1952: }
Line 1954: ID = DEFINE_PER_CPU
Line 1954: (
Line 1954: ID = struct
Line 1954: ID = kernel_stat
Line 1954: ,
Line 1954: ID = kstat
Line 1954: )
Line 1954: ;
Line 1956: ID = EXPORT_PER_CPU_SYMBOL
Line 1956: (
Line 1956: ID = kstat
Line 1956: )
Line 1956: ;
Line 1968: Unrecognized token: 35
Line 1968: ID = define
Line 1968: ID = EXPIRED_STARVING
Line 1968: (
Line 1968: ID = rq
Line 1968: )
Line 1968: Unrecognized token: 92
Line 1969: (
Line 1969: (
Line 1969: ID = STARVATION_LIMIT
Line 1969: &&
Line 1969: (
Line 1969: (
Line 1969: ID = rq
Line 1969: )
Line 1969: -
Line 1969: >
Line 1969: ID = expired_timestamp
Line 1969: &&
Line 1969: Unrecognized token: 92
Line 1970: (
Line 1970: ID = jiffies
Line 1970: -
Line 1970: (
Line 1970: ID = rq
Line 1970: )
Line 1970: -
Line 1970: >
Line 1970: ID = expired_timestamp
Line 1970: >=
Line 1970: Unrecognized token: 92
Line 1971: ID = STARVATION_LIMIT
Line 1971: *
Line 1971: (
Line 1971: (
Line 1971: ID = rq
Line 1971: )
Line 1971: -
Line 1971: >
Line 1971: ID = nr_running
Line 1971: )
Line 1971: +
Line 1971: INTCON = 1
Line 1971: )
Line 1971: )
Line 1971: )
Line 1971: ||
Line 1971: Unrecognized token: 92
Line 1972: (
Line 1972: (
Line 1972: ID = rq
Line 1972: )
Line 1972: -
Line 1972: >
Line 1972: ID = curr
Line 1972: -
Line 1972: >
Line 1972: ID = static_prio
Line 1972: >
Line 1972: (
Line 1972: ID = rq
Line 1972: )
Line 1972: -
Line 1972: >
Line 1972: ID = best_expired_prio
Line 1972: )
Line 1972: )
Line 1981: void
Line 1981: ID = scheduler_tick
Line 1981: (
Line 1981: int
Line 1981: ID = user_ticks
Line 1981: ,
Line 1981: int
Line 1981: ID = sys_ticks
Line 1981: )
Line 1982: {
Line 1983: int
Line 1983: ID = cpu
Line 1983: =
Line 1983: ID = smp_processor_id
Line 1983: (
Line 1983: )
Line 1983: ;
Line 1984: ID = struct
Line 1984: ID = cpu_usage_stat
Line 1984: *
Line 1984: ID = cpustat
Line 1984: =
Line 1984: Unrecognized token: 38
Line 1984: ID = kstat_this_cpu
Line 1984: Unrecognized token: 46
Line 1984: ID = cpustat
Line 1984: ;
Line 1985: ID = runqueue_t
Line 1985: *
Line 1985: ID = rq
Line 1985: =
Line 1985: ID = this_rq
Line 1985: (
Line 1985: )
Line 1985: ;
Line 1986: ID = task_t
Line 1986: *
Line 1986: ID = p
Line 1986: =
Line 1986: ID = current
Line 1986: ;
Line 1988: ID = rq
Line 1988: -
Line 1988: >
Line 1988: ID = timestamp_last_tick
Line 1988: =
Line 1988: ID = sched_clock
Line 1988: (
Line 1988: )
Line 1988: ;
Line 1990: if
Line 1990: (
Line 1990: ID = rcu_pending
Line 1990: (
Line 1990: ID = cpu
Line 1990: )
Line 1990: )
Line 1991: ID = rcu_check_callbacks
Line 1991: (
Line 1991: ID = cpu
Line 1991: ,
Line 1991: ID = user_ticks
Line 1991: )
Line 1991: ;
Line 1994: if
Line 1994: (
Line 1994: ID = hardirq_count
Line 1994: (
Line 1994: )
Line 1994: -
Line 1994: ID = HARDIRQ_OFFSET
Line 1994: )
Line 1994: {
Line 1995: ID = cpustat
Line 1995: -
Line 1995: >
Line 1995: ID = irq
Line 1995: +
Line 1995: =
Line 1995: ID = sys_ticks
Line 1995: ;
Line 1996: ID = sys_ticks
Line 1996: =
Line 1996: INTCON = 0
Line 1996: ;
Line 1997: }
Line 1997: else
Line 1997: if
Line 1997: (
Line 1997: ID = softirq_count
Line 1997: (
Line 1997: )
Line 1997: )
Line 1997: {
Line 1998: ID = cpustat
Line 1998: -
Line 1998: >
Line 1998: ID = softirq
Line 1998: +
Line 1998: =
Line 1998: ID = sys_ticks
Line 1998: ;
Line 1999: ID = sys_ticks
Line 1999: =
Line 1999: INTCON = 0
Line 1999: ;
Line 2000: }
Line 2002: if
Line 2002: (
Line 2002: ID = p
Line 2002: ==
Line 2002: ID = rq
Line 2002: -
Line 2002: >
Line 2002: ID = idle
Line 2002: )
Line 2002: {
Line 2003: if
Line 2003: (
Line 2003: ID = atomic_read
Line 2003: (
Line 2003: Unrecognized token: 38
Line 2003: ID = rq
Line 2003: -
Line 2003: >
Line 2003: ID = nr_iowait
Line 2003: )
Line 2003: >
Line 2003: INTCON = 0
Line 2003: )
Line 2004: ID = cpustat
Line 2004: -
Line 2004: >
Line 2004: ID = iowait
Line 2004: +
Line 2004: =
Line 2004: ID = sys_ticks
Line 2004: ;
Line 2005: else
Line 2006: ID = cpustat
Line 2006: -
Line 2006: >
Line 2006: ID = idle
Line 2006: +
Line 2006: =
Line 2006: ID = sys_ticks
Line 2006: ;
Line 2007: if
Line 2007: (
Line 2007: ID = wake_priority_sleeper
Line 2007: (
Line 2007: ID = rq
Line 2007: )
Line 2007: )
Line 2008: ID = goto
Line 2008: ID = out
Line 2008: ;
Line 2009: ID = rebalance_tick
Line 2009: (
Line 2009: ID = cpu
Line 2009: ,
Line 2009: ID = rq
Line 2009: ,
Line 2009: ID = IDLE
Line 2009: )
Line 2009: ;
Line 2010: return
Line 2010: ;
Line 2011: }
Line 2012: if
Line 2012: (
Line 2012: ID = TASK_NICE
Line 2012: (
Line 2012: ID = p
Line 2012: )
Line 2012: >
Line 2012: INTCON = 0
Line 2012: )
Line 2013: ID = cpustat
Line 2013: -
Line 2013: >
Line 2013: ID = nice
Line 2013: +
Line 2013: =
Line 2013: ID = user_ticks
Line 2013: ;
Line 2014: else
Line 2015: ID = cpustat
Line 2015: -
Line 2015: >
Line 2015: ID = user
Line 2015: +
Line 2015: =
Line 2015: ID = user_ticks
Line 2015: ;
Line 2016: ID = cpustat
Line 2016: -
Line 2016: >
Line 2016: ID = system
Line 2016: +
Line 2016: =
Line 2016: ID = sys_ticks
Line 2016: ;
Line 2019: if
Line 2019: (
Line 2019: ID = p
Line 2019: -
Line 2019: >
Line 2019: ID = array
Line 2019: !=
Line 2019: ID = rq
Line 2019: -
Line 2019: >
Line 2019: ID = active
Line 2019: )
Line 2019: {
Line 2020: ID = set_tsk_need_resched
Line 2020: (
Line 2020: ID = p
Line 2020: )
Line 2020: ;
Line 2021: ID = goto
Line 2021: ID = out
Line 2021: ;
Line 2022: }
Line 2023: ID = spin_lock
Line 2023: (
Line 2023: Unrecognized token: 38
Line 2023: ID = rq
Line 2023: -
Line 2023: >
Line 2023: ID = lock
Line 2023: )
Line 2023: ;
Line 2031: if
Line 2031: (
Line 2031: ID = unlikely
Line 2031: (
Line 2031: ID = rt_task
Line 2031: (
Line 2031: ID = p
Line 2031: )
Line 2031: )
Line 2031: )
Line 2031: {
Line 2036: if
Line 2036: (
Line 2036: (
Line 2036: ID = p
Line 2036: -
Line 2036: >
Line 2036: ID = policy
Line 2036: ==
Line 2036: ID = SCHED_RR
Line 2036: )
Line 2036: &&
Line 2036: !
Line 2036: -
Line 2036: -
Line 2036: ID = p
Line 2036: -
Line 2036: >
Line 2036: ID = time_slice
Line 2036: )
Line 2036: {
Line 2037: ID = p
Line 2037: -
Line 2037: >
Line 2037: ID = time_slice
Line 2037: =
Line 2037: ID = task_timeslice
Line 2037: (
Line 2037: ID = p
Line 2037: )
Line 2037: ;
Line 2038: ID = p
Line 2038: -
Line 2038: >
Line 2038: ID = first_time_slice
Line 2038: =
Line 2038: INTCON = 0
Line 2038: ;
Line 2039: ID = set_tsk_need_resched
Line 2039: (
Line 2039: ID = p
Line 2039: )
Line 2039: ;
Line 2042: ID = dequeue_task
Line 2042: (
Line 2042: ID = p
Line 2042: ,
Line 2042: ID = rq
Line 2042: -
Line 2042: >
Line 2042: ID = active
Line 2042: )
Line 2042: ;
Line 2043: ID = enqueue_task
Line 2043: (
Line 2043: ID = p
Line 2043: ,
Line 2043: ID = rq
Line 2043: -
Line 2043: >
Line 2043: ID = active
Line 2043: )
Line 2043: ;
Line 2044: }
Line 2045: ID = goto
Line 2045: ID = out_unlock
Line 2045: ;
Line 2046: }
Line 2047: if
Line 2047: (
Line 2047: !
Line 2047: -
Line 2047: -
Line 2047: ID = p
Line 2047: -
Line 2047: >
Line 2047: ID = time_slice
Line 2047: )
Line 2047: {
Line 2048: ID = dequeue_task
Line 2048: (
Line 2048: ID = p
Line 2048: ,
Line 2048: ID = rq
Line 2048: -
Line 2048: >
Line 2048: ID = active
Line 2048: )
Line 2048: ;
Line 2049: ID = set_tsk_need_resched
Line 2049: (
Line 2049: ID = p
Line 2049: )
Line 2049: ;
Line 2050: ID = p
Line 2050: -
Line 2050: >
Line 2050: ID = prio
Line 2050: =
Line 2050: ID = effective_prio
Line 2050: (
Line 2050: ID = p
Line 2050: )
Line 2050: ;
Line 2051: ID = p
Line 2051: -
Line 2051: >
Line 2051: ID = time_slice
Line 2051: =
Line 2051: ID = task_timeslice
Line 2051: (
Line 2051: ID = p
Line 2051: )
Line 2051: ;
Line 2052: ID = p
Line 2052: -
Line 2052: >
Line 2052: ID = first_time_slice
Line 2052: =
Line 2052: INTCON = 0
Line 2052: ;
Line 2054: if
Line 2054: (
Line 2054: !
Line 2054: ID = rq
Line 2054: -
Line 2054: >
Line 2054: ID = expired_timestamp
Line 2054: )
Line 2055: ID = rq
Line 2055: -
Line 2055: >
Line 2055: ID = expired_timestamp
Line 2055: =
Line 2055: ID = jiffies
Line 2055: ;
Line 2056: if
Line 2056: (
Line 2056: !
Line 2056: ID = TASK_INTERACTIVE
Line 2056: (
Line 2056: ID = p
Line 2056: )
Line 2056: ||
Line 2056: ID = EXPIRED_STARVING
Line 2056: (
Line 2056: ID = rq
Line 2056: )
Line 2056: )
Line 2056: {
Line 2057: ID = enqueue_task
Line 2057: (
Line 2057: ID = p
Line 2057: ,
Line 2057: ID = rq
Line 2057: -
Line 2057: >
Line 2057: ID = expired
Line 2057: )
Line 2057: ;
Line 2058: if
Line 2058: (
Line 2058: ID = p
Line 2058: -
Line 2058: >
Line 2058: ID = static_prio
Line 2058: <
Line 2058: ID = rq
Line 2058: -
Line 2058: >
Line 2058: ID = best_expired_prio
Line 2058: )
Line 2059: ID = rq
Line 2059: -
Line 2059: >
Line 2059: ID = best_expired_prio
Line 2059: =
Line 2059: ID = p
Line 2059: -
Line 2059: >
Line 2059: ID = static_prio
Line 2059: ;
Line 2060: }
Line 2060: else
Line 2061: ID = enqueue_task
Line 2061: (
Line 2061: ID = p
Line 2061: ,
Line 2061: ID = rq
Line 2061: -
Line 2061: >
Line 2061: ID = active
Line 2061: )
Line 2061: ;
Line 2062: }
Line 2062: else
Line 2062: {
Line 2079: if
Line 2079: (
Line 2079: ID = TASK_INTERACTIVE
Line 2079: (
Line 2079: ID = p
Line 2079: )
Line 2079: &&
Line 2079: !
Line 2079: (
Line 2079: (
Line 2079: ID = task_timeslice
Line 2079: (
Line 2079: ID = p
Line 2079: )
Line 2079: -
Line 2080: ID = p
Line 2080: -
Line 2080: >
Line 2080: ID = time_slice
Line 2080: )
Line 2080: Unrecognized token: 37
Line 2080: ID = TIMESLICE_GRANULARITY
Line 2080: (
Line 2080: ID = p
Line 2080: )
Line 2080: )
Line 2080: &&
Line 2081: (
Line 2081: ID = p
Line 2081: -
Line 2081: >
Line 2081: ID = time_slice
Line 2081: >=
Line 2081: ID = TIMESLICE_GRANULARITY
Line 2081: (
Line 2081: ID = p
Line 2081: )
Line 2081: )
Line 2081: &&
Line 2082: (
Line 2082: ID = p
Line 2082: -
Line 2082: >
Line 2082: ID = array
Line 2082: ==
Line 2082: ID = rq
Line 2082: -
Line 2082: >
Line 2082: ID = active
Line 2082: )
Line 2082: )
Line 2082: {
Line 2084: ID = dequeue_task
Line 2084: (
Line 2084: ID = p
Line 2084: ,
Line 2084: ID = rq
Line 2084: -
Line 2084: >
Line 2084: ID = active
Line 2084: )
Line 2084: ;
Line 2085: ID = set_tsk_need_resched
Line 2085: (
Line 2085: ID = p
Line 2085: )
Line 2085: ;
Line 2086: ID = p
Line 2086: -
Line 2086: >
Line 2086: ID = prio
Line 2086: =
Line 2086: ID = effective_prio
Line 2086: (
Line 2086: ID = p
Line 2086: )
Line 2086: ;
Line 2087: ID = enqueue_task
Line 2087: (
Line 2087: ID = p
Line 2087: ,
Line 2087: ID = rq
Line 2087: -
Line 2087: >
Line 2087: ID = active
Line 2087: )
Line 2087: ;
Line 2088: }
Line 2089: }
Line 2090: ID = out_unlock
Line 2090: Unrecognized token: 58
Line 2091: ID = spin_unlock
Line 2091: (
Line 2091: Unrecognized token: 38
Line 2091: ID = rq
Line 2091: -
Line 2091: >
Line 2091: ID = lock
Line 2091: )
Line 2091: ;
Line 2092: ID = out
Line 2092: Unrecognized token: 58
Line 2093: ID = rebalance_tick
Line 2093: (
Line 2093: ID = cpu
Line 2093: ,
Line 2093: ID = rq
Line 2093: ,
Line 2093: ID = NOT_IDLE
Line 2093: )
Line 2093: ;
Line 2094: }
Line 2096: Unrecognized token: 35
Line 2096: ID = ifdef
Line 2096: ID = CONFIG_SCHED_SMT
Line 2097: ID = static
Line 2097: ID = inline
Line 2097: void
Line 2097: ID = wake_sleeping_dependent
Line 2097: (
Line 2097: int
Line 2097: ID = cpu
Line 2097: ,
Line 2097: ID = runqueue_t
Line 2097: *
Line 2097: ID = rq
Line 2097: )
Line 2098: {
Line 2099: int
Line 2099: ID = i
Line 2099: ;
Line 2100: ID = struct
Line 2100: ID = sched_domain
Line 2100: *
Line 2100: ID = sd
Line 2100: =
Line 2100: ID = rq
Line 2100: -
Line 2100: >
Line 2100: ID = sd
Line 2100: ;
Line 2101: ID = cpumask_t
Line 2101: ID = sibling_map
Line 2101: ;
Line 2103: if
Line 2103: (
Line 2103: !
Line 2103: (
Line 2103: ID = sd
Line 2103: -
Line 2103: >
Line 2103: ID = flags
Line 2103: Unrecognized token: 38
Line 2103: ID = SD_SHARE_CPUPOWER
Line 2103: )
Line 2103: )
Line 2104: return
Line 2104: ;
Line 2106: ID = cpus_and
Line 2106: (
Line 2106: ID = sibling_map
Line 2106: ,
Line 2106: ID = sd
Line 2106: -
Line 2106: >
Line 2106: ID = span
Line 2106: ,
Line 2106: ID = cpu_online_map
Line 2106: )
Line 2106: ;
Line 2107: ID = for_each_cpu_mask
Line 2107: (
Line 2107: ID = i
Line 2107: ,
Line 2107: ID = sibling_map
Line 2107: )
Line 2107: {
Line 2108: ID = runqueue_t
Line 2108: *
Line 2108: ID = smt_rq
Line 2108: ;
Line 2110: if
Line 2110: (
Line 2110: ID = i
Line 2110: ==
Line 2110: ID = cpu
Line 2110: )
Line 2111: ID = continue
Line 2111: ;
Line 2113: ID = smt_rq
Line 2113: =
Line 2113: ID = cpu_rq
Line 2113: (
Line 2113: ID = i
Line 2113: )
Line 2113: ;
Line 2119: if
Line 2119: (
Line 2119: ID = smt_rq
Line 2119: -
Line 2119: >
Line 2119: ID = curr
Line 2119: ==
Line 2119: ID = smt_rq
Line 2119: -
Line 2119: >
Line 2119: ID = idle
Line 2119: &&
Line 2119: ID = smt_rq
Line 2119: -
Line 2119: >
Line 2119: ID = nr_running
Line 2119: )
Line 2120: ID = resched_task
Line 2120: (
Line 2120: ID = smt_rq
Line 2120: -
Line 2120: >
Line 2120: ID = idle
Line 2120: )
Line 2120: ;
Line 2121: }
Line 2122: }
Line 2124: ID = static
Line 2124: ID = inline
Line 2124: int
Line 2124: ID = dependent_sleeper
Line 2124: (
Line 2124: int
Line 2124: ID = cpu
Line 2124: ,
Line 2124: ID = runqueue_t
Line 2124: *
Line 2124: ID = rq
Line 2124: ,
Line 2124: ID = task_t
Line 2124: *
Line 2124: ID = p
Line 2124: )
Line 2125: {
Line 2126: ID = struct
Line 2126: ID = sched_domain
Line 2126: *
Line 2126: ID = sd
Line 2126: =
Line 2126: ID = rq
Line 2126: -
Line 2126: >
Line 2126: ID = sd
Line 2126: ;
Line 2127: ID = cpumask_t
Line 2127: ID = sibling_map
Line 2127: ;
Line 2128: int
Line 2128: ID = ret
Line 2128: =
Line 2128: INTCON = 0
Line 2128: ,
Line 2128: ID = i
Line 2128: ;
Line 2130: if
Line 2130: (
Line 2130: !
Line 2130: (
Line 2130: ID = sd
Line 2130: -
Line 2130: >
Line 2130: ID = flags
Line 2130: Unrecognized token: 38
Line 2130: ID = SD_SHARE_CPUPOWER
Line 2130: )
Line 2130: )
Line 2131: return
Line 2131: INTCON = 0
Line 2131: ;
Line 2133: ID = cpus_and
Line 2133: (
Line 2133: ID = sibling_map
Line 2133: ,
Line 2133: ID = sd
Line 2133: -
Line 2133: >
Line 2133: ID = span
Line 2133: ,
Line 2133: ID = cpu_online_map
Line 2133: )
Line 2133: ;
Line 2134: ID = for_each_cpu_mask
Line 2134: (
Line 2134: ID = i
Line 2134: ,
Line 2134: ID = sibling_map
Line 2134: )
Line 2134: {
Line 2135: ID = runqueue_t
Line 2135: *
Line 2135: ID = smt_rq
Line 2135: ;
Line 2136: ID = task_t
Line 2136: *
Line 2136: ID = smt_curr
Line 2136: ;
Line 2138: if
Line 2138: (
Line 2138: ID = i
Line 2138: ==
Line 2138: ID = cpu
Line 2138: )
Line 2139: ID = continue
Line 2139: ;
Line 2141: ID = smt_rq
Line 2141: =
Line 2141: ID = cpu_rq
Line 2141: (
Line 2141: ID = i
Line 2141: )
Line 2141: ;
Line 2142: ID = smt_curr
Line 2142: =
Line 2142: ID = smt_rq
Line 2142: -
Line 2142: >
Line 2142: ID = curr
Line 2142: ;
Line 2152: if
Line 2152: (
Line 2152: (
Line 2152: (
Line 2152: ID = smt_curr
Line 2152: -
Line 2152: >
Line 2152: ID = time_slice
Line 2152: *
Line 2152: (
Line 2152: INTCON = 100
Line 2152: -
Line 2152: ID = sd
Line 2152: -
Line 2152: >
Line 2152: ID = per_cpu_gain
Line 2152: )
Line 2152: /
Line 2152: INTCON = 100
Line 2152: )
Line 2152: >
Line 2153: ID = task_timeslice
Line 2153: (
Line 2153: ID = p
Line 2153: )
Line 2153: ||
Line 2153: ID = rt_task
Line 2153: (
Line 2153: ID = smt_curr
Line 2153: )
Line 2153: )
Line 2153: &&
Line 2154: ID = p
Line 2154: -
Line 2154: >
Line 2154: ID = mm
Line 2154: &&
Line 2154: ID = smt_curr
Line 2154: -
Line 2154: >
Line 2154: ID = mm
Line 2154: &&
Line 2154: !
Line 2154: ID = rt_task
Line 2154: (
Line 2154: ID = p
Line 2154: )
Line 2154: )
Line 2155: ID = ret
Line 2155: =
Line 2155: INTCON = 1
Line 2155: ;
Line 2162: if
Line 2162: (
Line 2162: (
Line 2162: (
Line 2162: (
Line 2162: ID = p
Line 2162: -
Line 2162: >
Line 2162: ID = time_slice
Line 2162: *
Line 2162: (
Line 2162: INTCON = 100
Line 2162: -
Line 2162: ID = sd
Line 2162: -
Line 2162: >
Line 2162: ID = per_cpu_gain
Line 2162: )
Line 2162: /
Line 2162: INTCON = 100
Line 2162: )
Line 2162: >
Line 2163: ID = task_timeslice
Line 2163: (
Line 2163: ID = smt_curr
Line 2163: )
Line 2163: ||
Line 2163: ID = rt_task
Line 2163: (
Line 2163: ID = p
Line 2163: )
Line 2163: )
Line 2163: &&
Line 2164: ID = smt_curr
Line 2164: -
Line 2164: >
Line 2164: ID = mm
Line 2164: &&
Line 2164: ID = p
Line 2164: -
Line 2164: >
Line 2164: ID = mm
Line 2164: &&
Line 2164: !
Line 2164: ID = rt_task
Line 2164: (
Line 2164: ID = smt_curr
Line 2164: )
Line 2164: )
Line 2164: ||
Line 2165: (
Line 2165: ID = smt_curr
Line 2165: ==
Line 2165: ID = smt_rq
Line 2165: -
Line 2165: >
Line 2165: ID = idle
Line 2165: &&
Line 2165: ID = smt_rq
Line 2165: -
Line 2165: >
Line 2165: ID = nr_running
Line 2165: )
Line 2165: )
Line 2166: ID = resched_task
Line 2166: (
Line 2166: ID = smt_curr
Line 2166: )
Line 2166: ;
Line 2167: }
Line 2168: return
Line 2168: ID = ret
Line 2168: ;
Line 2169: }
Line 2170: Unrecognized token: 35
Line 2170: else
Line 2171: ID = static
Line 2171: ID = inline
Line 2171: void
Line 2171: ID = wake_sleeping_dependent
Line 2171: (
Line 2171: int
Line 2171: ID = cpu
Line 2171: ,
Line 2171: ID = runqueue_t
Line 2171: *
Line 2171: ID = rq
Line 2171: )
Line 2172: {
Line 2173: }
Line 2175: ID = static
Line 2175: ID = inline
Line 2175: int
Line 2175: ID = dependent_sleeper
Line 2175: (
Line 2175: int
Line 2175: ID = cpu
Line 2175: ,
Line 2175: ID = runqueue_t
Line 2175: *
Line 2175: ID = rq
Line 2175: ,
Line 2175: ID = task_t
Line 2175: *
Line 2175: ID = p
Line 2175: )
Line 2176: {
Line 2177: return
Line 2177: INTCON = 0
Line 2177: ;
Line 2178: }
Line 2179: Unrecognized token: 35
Line 2179: ID = endif
Line 2184: ID = asmlinkage
Line 2184: void
Line 2184: Unrecognized token: 95
Line 2184: Unrecognized token: 95
Line 2184: ID = sched
Line 2184: ID = schedule
Line 2184: (
Line 2184: void
Line 2184: )
Line 2185: {
Line 2186: ID = long
Line 2186: *
Line 2186: ID = switch_count
Line 2186: ;
Line 2187: ID = task_t
Line 2187: *
Line 2187: ID = prev
Line 2187: ,
Line 2187: *
Line 2187: ID = next
Line 2187: ;
Line 2188: ID = runqueue_t
Line 2188: *
Line 2188: ID = rq
Line 2188: ;
Line 2189: ID = prio_array_t
Line 2189: *
Line 2189: ID = array
Line 2189: ;
Line 2190: ID = struct
Line 2190: ID = list_head
Line 2190: *
Line 2190: ID = queue
Line 2190: ;
Line 2191: ID = unsigned
Line 2191: ID = long
Line 2191: ID = long
Line 2191: ID = now
Line 2191: ;
Line 2192: ID = unsigned
Line 2192: ID = long
Line 2192: ID = run_time
Line 2192: ;
Line 2193: int
Line 2193: ID = cpu
Line 2193: ,
Line 2193: ID = idx
Line 2193: ;
Line 2200: if
Line 2200: (
Line 2200: ID = likely
Line 2200: (
Line 2200: !
Line 2200: (
Line 2200: ID = current
Line 2200: -
Line 2200: >
Line 2200: ID = state
Line 2200: Unrecognized token: 38
Line 2200: (
Line 2200: ID = TASK_DEAD
Line 2200: Unrecognized token: 124
Line 2200: ID = TASK_ZOMBIE
Line 2200: )
Line 2200: )
Line 2200: )
Line 2200: )
Line 2200: {
Line 2201: if
Line 2201: (
Line 2201: ID = unlikely
Line 2201: (
Line 2201: ID = in_atomic
Line 2201: (
Line 2201: )
Line 2201: )
Line 2201: )
Line 2201: {
Line 2202: ID = printk
Line 2202: (
Line 2202: ID = KERN_ERR
Line 2202: STRINGCON = "bad: scheduling while atomic!\n"
Line 2202: )
Line 2202: ;
Line 2203: ID = dump_stack
Line 2203: (
Line 2203: )
Line 2203: ;
Line 2204: }
Line 2205: }
Line 2207: ID = need_resched
Line 2207: Unrecognized token: 58
Line 2208: ID = preempt_disable
Line 2208: (
Line 2208: )
Line 2208: ;
Line 2209: ID = prev
Line 2209: =
Line 2209: ID = current
Line 2209: ;
Line 2210: ID = rq
Line 2210: =
Line 2210: ID = this_rq
Line 2210: (
Line 2210: )
Line 2210: ;
Line 2212: ID = release_kernel_lock
Line 2212: (
Line 2212: ID = prev
Line 2212: )
Line 2212: ;
Line 2213: ID = now
Line 2213: =
Line 2213: ID = sched_clock
Line 2213: (
Line 2213: )
Line 2213: ;
Line 2214: if
Line 2214: (
Line 2214: ID = likely
Line 2214: (
Line 2214: ID = now
Line 2214: -
Line 2214: ID = prev
Line 2214: -
Line 2214: >
Line 2214: ID = timestamp
Line 2214: <
Line 2214: ID = NS_MAX_SLEEP_AVG
Line 2214: )
Line 2214: )
Line 2215: ID = run_time
Line 2215: =
Line 2215: ID = now
Line 2215: -
Line 2215: ID = prev
Line 2215: -
Line 2215: >
Line 2215: ID = timestamp
Line 2215: ;
Line 2216: else
Line 2217: ID = run_time
Line 2217: =
Line 2217: ID = NS_MAX_SLEEP_AVG
Line 2217: ;
Line 2224: if
Line 2224: (
Line 2224: ID = HIGH_CREDIT
Line 2224: (
Line 2224: ID = prev
Line 2224: )
Line 2224: )
Line 2225: ID = run_time
Line 2225: /
Line 2225: =
Line 2225: (
Line 2225: ID = CURRENT_BONUS
Line 2225: (
Line 2225: ID = prev
Line 2225: )
Line 2225: Unrecognized token: 63
Line 2225: Unrecognized token: 58
Line 2225: INTCON = 1
Line 2225: )
Line 2225: ;
Line 2227: ID = spin_lock_irq
Line 2227: (
Line 2227: Unrecognized token: 38
Line 2227: ID = rq
Line 2227: -
Line 2227: >
Line 2227: ID = lock
Line 2227: )
Line 2227: ;
Line 2233: ID = switch_count
Line 2233: =
Line 2233: Unrecognized token: 38
Line 2233: ID = prev
Line 2233: -
Line 2233: >
Line 2233: ID = nivcsw
Line 2233: ;
Line 2234: if
Line 2234: (
Line 2234: ID = prev
Line 2234: -
Line 2234: >
Line 2234: ID = state
Line 2234: &&
Line 2234: !
Line 2234: (
Line 2234: ID = preempt_count
Line 2234: (
Line 2234: )
Line 2234: Unrecognized token: 38
Line 2234: ID = PREEMPT_ACTIVE
Line 2234: )
Line 2234: )
Line 2234: {
Line 2235: ID = switch_count
Line 2235: =
Line 2235: Unrecognized token: 38
Line 2235: ID = prev
Line 2235: -
Line 2235: >
Line 2235: ID = nvcsw
Line 2235: ;
Line 2236: if
Line 2236: (
Line 2236: ID = unlikely
Line 2236: (
Line 2236: (
Line 2236: ID = prev
Line 2236: -
Line 2236: >
Line 2236: ID = state
Line 2236: Unrecognized token: 38
Line 2236: ID = TASK_INTERRUPTIBLE
Line 2236: )
Line 2236: &&
Line 2237: ID = unlikely
Line 2237: (
Line 2237: ID = signal_pending
Line 2237: (
Line 2237: ID = prev
Line 2237: )
Line 2237: )
Line 2237: )
Line 2237: )
Line 2238: ID = prev
Line 2238: -
Line 2238: >
Line 2238: ID = state
Line 2238: =
Line 2238: ID = TASK_RUNNING
Line 2238: ;
Line 2239: else
Line 2240: ID = deactivate_task
Line 2240: (
Line 2240: ID = prev
Line 2240: ,
Line 2240: ID = rq
Line 2240: )
Line 2240: ;
Line 2241: }
Line 2243: ID = cpu
Line 2243: =
Line 2243: ID = smp_processor_id
Line 2243: (
Line 2243: )
Line 2243: ;
Line 2244: if
Line 2244: (
Line 2244: ID = unlikely
Line 2244: (
Line 2244: !
Line 2244: ID = rq
Line 2244: -
Line 2244: >
Line 2244: ID = nr_running
Line 2244: )
Line 2244: )
Line 2244: {
Line 2245: ID = idle_balance
Line 2245: (
Line 2245: ID = cpu
Line 2245: ,
Line 2245: ID = rq
Line 2245: )
Line 2245: ;
Line 2246: if
Line 2246: (
Line 2246: !
Line 2246: ID = rq
Line 2246: -
Line 2246: >
Line 2246: ID = nr_running
Line 2246: )
Line 2246: {
Line 2247: ID = next
Line 2247: =
Line 2247: ID = rq
Line 2247: -
Line 2247: >
Line 2247: ID = idle
Line 2247: ;
Line 2248: ID = rq
Line 2248: -
Line 2248: >
Line 2248: ID = expired_timestamp
Line 2248: =
Line 2248: INTCON = 0
Line 2248: ;
Line 2249: ID = wake_sleeping_dependent
Line 2249: (
Line 2249: ID = cpu
Line 2249: ,
Line 2249: ID = rq
Line 2249: )
Line 2249: ;
Line 2250: ID = goto
Line 2250: ID = switch_tasks
Line 2250: ;
Line 2251: }
Line 2252: }
Line 2254: ID = array
Line 2254: =
Line 2254: ID = rq
Line 2254: -
Line 2254: >
Line 2254: ID = active
Line 2254: ;
Line 2255: if
Line 2255: (
Line 2255: ID = unlikely
Line 2255: (
Line 2255: !
Line 2255: ID = array
Line 2255: -
Line 2255: >
Line 2255: ID = nr_active
Line 2255: )
Line 2255: )
Line 2255: {
Line 2259: ID = rq
Line 2259: -
Line 2259: >
Line 2259: ID = active
Line 2259: =
Line 2259: ID = rq
Line 2259: -
Line 2259: >
Line 2259: ID = expired
Line 2259: ;
Line 2260: ID = rq
Line 2260: -
Line 2260: >
Line 2260: ID = expired
Line 2260: =
Line 2260: ID = array
Line 2260: ;
Line 2261: ID = array
Line 2261: =
Line 2261: ID = rq
Line 2261: -
Line 2261: >
Line 2261: ID = active
Line 2261: ;
Line 2262: ID = rq
Line 2262: -
Line 2262: >
Line 2262: ID = expired_timestamp
Line 2262: =
Line 2262: INTCON = 0
Line 2262: ;
Line 2263: ID = rq
Line 2263: -
Line 2263: >
Line 2263: ID = best_expired_prio
Line 2263: =
Line 2263: ID = MAX_PRIO
Line 2263: ;
Line 2264: }
Line 2266: ID = idx
Line 2266: =
Line 2266: ID = sched_find_first_bit
Line 2266: (
Line 2266: ID = array
Line 2266: -
Line 2266: >
Line 2266: ID = bitmap
Line 2266: )
Line 2266: ;
Line 2267: ID = queue
Line 2267: =
Line 2267: ID = array
Line 2267: -
Line 2267: >
Line 2267: ID = queue
Line 2267: +
Line 2267: ID = idx
Line 2267: ;
Line 2268: ID = next
Line 2268: =
Line 2268: ID = list_entry
Line 2268: (
Line 2268: ID = queue
Line 2268: -
Line 2268: >
Line 2268: ID = next
Line 2268: ,
Line 2268: ID = task_t
Line 2268: ,
Line 2268: ID = run_list
Line 2268: )
Line 2268: ;
Line 2270: if
Line 2270: (
Line 2270: ID = dependent_sleeper
Line 2270: (
Line 2270: ID = cpu
Line 2270: ,
Line 2270: ID = rq
Line 2270: ,
Line 2270: ID = next
Line 2270: )
Line 2270: )
Line 2270: {
Line 2271: ID = next
Line 2271: =
Line 2271: ID = rq
Line 2271: -
Line 2271: >
Line 2271: ID = idle
Line 2271: ;
Line 2272: ID = goto
Line 2272: ID = switch_tasks
Line 2272: ;
Line 2273: }
Line 2275: if
Line 2275: (
Line 2275: !
Line 2275: ID = rt_task
Line 2275: (
Line 2275: ID = next
Line 2275: )
Line 2275: &&
Line 2275: ID = next
Line 2275: -
Line 2275: >
Line 2275: ID = activated
Line 2275: >
Line 2275: INTCON = 0
Line 2275: )
Line 2275: {
Line 2276: ID = unsigned
Line 2276: ID = long
Line 2276: ID = long
Line 2276: ID = delta
Line 2276: =
Line 2276: ID = now
Line 2276: -
Line 2276: ID = next
Line 2276: -
Line 2276: >
Line 2276: ID = timestamp
Line 2276: ;
Line 2278: if
Line 2278: (
Line 2278: ID = next
Line 2278: -
Line 2278: >
Line 2278: ID = activated
Line 2278: ==
Line 2278: INTCON = 1
Line 2278: )
Line 2279: ID = delta
Line 2279: =
Line 2279: ID = delta
Line 2279: *
Line 2279: (
Line 2279: ID = ON_RUNQUEUE_WEIGHT
Line 2279: *
Line 2279: INTCON = 128
Line 2279: /
Line 2279: INTCON = 100
Line 2279: )
Line 2279: /
Line 2279: INTCON = 128
Line 2279: ;
Line 2281: ID = array
Line 2281: =
Line 2281: ID = next
Line 2281: -
Line 2281: >
Line 2281: ID = array
Line 2281: ;
Line 2282: ID = dequeue_task
Line 2282: (
Line 2282: ID = next
Line 2282: ,
Line 2282: ID = array
Line 2282: )
Line 2282: ;
Line 2283: ID = recalc_task_prio
Line 2283: (
Line 2283: ID = next
Line 2283: ,
Line 2283: ID = next
Line 2283: -
Line 2283: >
Line 2283: ID = timestamp
Line 2283: +
Line 2283: ID = delta
Line 2283: )
Line 2283: ;
Line 2284: ID = enqueue_task
Line 2284: (
Line 2284: ID = next
Line 2284: ,
Line 2284: ID = array
Line 2284: )
Line 2284: ;
Line 2285: }
Line 2286: ID = next
Line 2286: -
Line 2286: >
Line 2286: ID = activated
Line 2286: =
Line 2286: INTCON = 0
Line 2286: ;
Line 2287: ID = switch_tasks
Line 2287: Unrecognized token: 58
Line 2288: ID = prefetch
Line 2288: (
Line 2288: ID = next
Line 2288: )
Line 2288: ;
Line 2289: ID = clear_tsk_need_resched
Line 2289: (
Line 2289: ID = prev
Line 2289: )
Line 2289: ;
Line 2290: ID = RCU_qsctr
Line 2290: (
Line 2290: ID = task_cpu
Line 2290: (
Line 2290: ID = prev
Line 2290: )
Line 2290: )
Line 2290: +
Line 2290: +
Line 2290: ;
Line 2292: ID = prev
Line 2292: -
Line 2292: >
Line 2292: ID = sleep_avg
Line 2292: -
Line 2292: =
Line 2292: ID = run_time
Line 2292: ;
Line 2293: if
Line 2293: (
Line 2293: (
Line 2293: ID = long
Line 2293: )
Line 2293: ID = prev
Line 2293: -
Line 2293: >
Line 2293: ID = sleep_avg
Line 2293: <=
Line 2293: INTCON = 0
Line 2293: )
Line 2293: {
Line 2294: ID = prev
Line 2294: -
Line 2294: >
Line 2294: ID = sleep_avg
Line 2294: =
Line 2294: INTCON = 0
Line 2294: ;
Line 2295: if
Line 2295: (
Line 2295: !
Line 2295: (
Line 2295: ID = HIGH_CREDIT
Line 2295: (
Line 2295: ID = prev
Line 2295: )
Line 2295: ||
Line 2295: ID = LOW_CREDIT
Line 2295: (
Line 2295: ID = prev
Line 2295: )
Line 2295: )
Line 2295: )
Line 2296: ID = prev
Line 2296: -
Line 2296: >
Line 2296: ID = interactive_credit
Line 2296: -
Line 2296: -
Line 2296: ;
Line 2297: }
Line 2298: ID = prev
Line 2298: -
Line 2298: >
Line 2298: ID = timestamp
Line 2298: =
Line 2298: ID = now
Line 2298: ;
Line 2300: if
Line 2300: (
Line 2300: ID = likely
Line 2300: (
Line 2300: ID = prev
Line 2300: !=
Line 2300: ID = next
Line 2300: )
Line 2300: )
Line 2300: {
Line 2301: ID = next
Line 2301: -
Line 2301: >
Line 2301: ID = timestamp
Line 2301: =
Line 2301: ID = now
Line 2301: ;
Line 2302: ID = rq
Line 2302: -
Line 2302: >
Line 2302: ID = nr_switches
Line 2302: +
Line 2302: +
Line 2302: ;
Line 2303: ID = rq
Line 2303: -
Line 2303: >
Line 2303: ID = curr
Line 2303: =
Line 2303: ID = next
Line 2303: ;
Line 2304: +
Line 2304: +
Line 2304: *
Line 2304: ID = switch_count
Line 2304: ;
Line 2306: ID = prepare_arch_switch
Line 2306: (
Line 2306: ID = rq
Line 2306: ,
Line 2306: ID = next
Line 2306: )
Line 2306: ;
Line 2307: ID = prev
Line 2307: =
Line 2307: ID = context_switch
Line 2307: (
Line 2307: ID = rq
Line 2307: ,
Line 2307: ID = prev
Line 2307: ,
Line 2307: ID = next
Line 2307: )
Line 2307: ;
Line 2308: ID = barrier
Line 2308: (
Line 2308: )
Line 2308: ;
Line 2310: ID = finish_task_switch
Line 2310: (
Line 2310: ID = prev
Line 2310: )
Line 2310: ;
Line 2311: }
Line 2311: else
Line 2312: ID = spin_unlock_irq
Line 2312: (
Line 2312: Unrecognized token: 38
Line 2312: ID = rq
Line 2312: -
Line 2312: >
Line 2312: ID = lock
Line 2312: )
Line 2312: ;
Line 2314: ID = reacquire_kernel_lock
Line 2314: (
Line 2314: ID = current
Line 2314: )
Line 2314: ;
Line 2315: ID = preempt_enable_no_resched
Line 2315: (
Line 2315: )
Line 2315: ;
Line 2316: if
Line 2316: (
Line 2316: ID = test_thread_flag
Line 2316: (
Line 2316: ID = TIF_NEED_RESCHED
Line 2316: )
Line 2316: )
Line 2317: ID = goto
Line 2317: ID = need_resched
Line 2317: ;
Line 2318: }
Line 2320: ID = EXPORT_SYMBOL
Line 2320: (
Line 2320: ID = schedule
Line 2320: )
Line 2320: ;
Line 2322: Unrecognized token: 35
Line 2322: ID = ifdef
Line 2322: ID = CONFIG_PREEMPT
Line 2328: ID = asmlinkage
Line 2328: void
Line 2328: Unrecognized token: 95
Line 2328: Unrecognized token: 95
Line 2328: ID = sched
Line 2328: ID = preempt_schedule
Line 2328: (
Line 2328: void
Line 2328: )
Line 2329: {
Line 2330: ID = struct
Line 2330: ID = thread_info
Line 2330: *
Line 2330: ID = ti
Line 2330: =
Line 2330: ID = current_thread_info
Line 2330: (
Line 2330: )
Line 2330: ;
Line 2336: if
Line 2336: (
Line 2336: ID = unlikely
Line 2336: (
Line 2336: ID = ti
Line 2336: -
Line 2336: >
Line 2336: ID = preempt_count
Line 2336: ||
Line 2336: ID = irqs_disabled
Line 2336: (
Line 2336: )
Line 2336: )
Line 2336: )
Line 2337: return
Line 2337: ;
Line 2339: ID = need_resched
Line 2339: Unrecognized token: 58
Line 2340: ID = ti
Line 2340: -
Line 2340: >
Line 2340: ID = preempt_count
Line 2340: =
Line 2340: ID = PREEMPT_ACTIVE
Line 2340: ;
Line 2341: ID = schedule
Line 2341: (
Line 2341: )
Line 2341: ;
Line 2342: ID = ti
Line 2342: -
Line 2342: >
Line 2342: ID = preempt_count
Line 2342: =
Line 2342: INTCON = 0
Line 2342: ;
Line 2345: ID = barrier
Line 2345: (
Line 2345: )
Line 2345: ;
Line 2346: if
Line 2346: (
Line 2346: ID = unlikely
Line 2346: (
Line 2346: ID = test_thread_flag
Line 2346: (
Line 2346: ID = TIF_NEED_RESCHED
Line 2346: )
Line 2346: )
Line 2346: )
Line 2347: ID = goto
Line 2347: ID = need_resched
Line 2347: ;
Line 2348: }
Line 2350: ID = EXPORT_SYMBOL
Line 2350: (
Line 2350: ID = preempt_schedule
Line 2350: )
Line 2350: ;
Line 2351: Unrecognized token: 35
Line 2351: ID = endif
Line 2353: int
Line 2353: ID = default_wake_function
Line 2353: (
Line 2353: ID = wait_queue_t
Line 2353: *
Line 2353: ID = curr
Line 2353: ,
Line 2353: ID = unsigned
Line 2353: ID = mode
Line 2353: ,
Line 2353: int
Line 2353: ID = sync
Line 2353: ,
Line 2353: void
Line 2353: *
Line 2353: ID = key
Line 2353: )
Line 2354: {
Line 2355: ID = task_t
Line 2355: *
Line 2355: ID = p
Line 2355: =
Line 2355: ID = curr
Line 2355: -
Line 2355: >
Line 2355: ID = task
Line 2355: ;
Line 2356: return
Line 2356: ID = try_to_wake_up
Line 2356: (
Line 2356: ID = p
Line 2356: ,
Line 2356: ID = mode
Line 2356: ,
Line 2356: ID = sync
Line 2356: )
Line 2356: ;
Line 2357: }
Line 2359: ID = EXPORT_SYMBOL
Line 2359: (
Line 2359: ID = default_wake_function
Line 2359: )
Line 2359: ;
Line 2370: ID = static
Line 2370: void
Line 2370: Unrecognized token: 95
Line 2370: Unrecognized token: 95
Line 2370: ID = wake_up_common
Line 2370: (
Line 2370: ID = wait_queue_head_t
Line 2370: *
Line 2370: ID = q
Line 2370: ,
Line 2370: ID = unsigned
Line 2370: int
Line 2370: ID = mode
Line 2370: ,
Line 2371: int
Line 2371: ID = nr_exclusive
Line 2371: ,
Line 2371: int
Line 2371: ID = sync
Line 2371: ,
Line 2371: void
Line 2371: *
Line 2371: ID = key
Line 2371: )
Line 2372: {
Line 2373: ID = struct
Line 2373: ID = list_head
Line 2373: *
Line 2373: ID = tmp
Line 2373: ,
Line 2373: *
Line 2373: ID = next
Line 2373: ;
Line 2375: ID = list_for_each_safe
Line 2375: (
Line 2375: ID = tmp
Line 2375: ,
Line 2375: ID = next
Line 2375: ,
Line 2375: Unrecognized token: 38
Line 2375: ID = q
Line 2375: -
Line 2375: >
Line 2375: ID = task_list
Line 2375: )
Line 2375: {
Line 2376: ID = wait_queue_t
Line 2376: *
Line 2376: ID = curr
Line 2376: ;
Line 2377: ID = unsigned
Line 2377: ID = flags
Line 2377: ;
Line 2378: ID = curr
Line 2378: =
Line 2378: ID = list_entry
Line 2378: (
Line 2378: ID = tmp
Line 2378: ,
Line 2378: ID = wait_queue_t
Line 2378: ,
Line 2378: ID = task_list
Line 2378: )
Line 2378: ;
Line 2379: ID = flags
Line 2379: =
Line 2379: ID = curr
Line 2379: -
Line 2379: >
Line 2379: ID = flags
Line 2379: ;
Line 2380: if
Line 2380: (
Line 2380: ID = curr
Line 2380: -
Line 2380: >
Line 2380: ID = func
Line 2380: (
Line 2380: ID = curr
Line 2380: ,
Line 2380: ID = mode
Line 2380: ,
Line 2380: ID = sync
Line 2380: ,
Line 2380: ID = key
Line 2380: )
Line 2380: &&
Line 2381: (
Line 2381: ID = flags
Line 2381: Unrecognized token: 38
Line 2381: ID = WQ_FLAG_EXCLUSIVE
Line 2381: )
Line 2381: &&
Line 2382: !
Line 2382: -
Line 2382: -
Line 2382: ID = nr_exclusive
Line 2382: )
Line 2383: ID = break
Line 2383: ;
Line 2384: }
Line 2385: }
Line 2393: void
Line 2393: ID = fastcall
Line 2393: Unrecognized token: 95
Line 2393: Unrecognized token: 95
Line 2393: ID = wake_up
Line 2393: (
Line 2393: ID = wait_queue_head_t
Line 2393: *
Line 2393: ID = q
Line 2393: ,
Line 2393: ID = unsigned
Line 2393: int
Line 2393: ID = mode
Line 2393: ,
Line 2394: int
Line 2394: ID = nr_exclusive
Line 2394: ,
Line 2394: void
Line 2394: *
Line 2394: ID = key
Line 2394: )
Line 2395: {
Line 2396: ID = unsigned
Line 2396: ID = long
Line 2396: ID = flags
Line 2396: ;
Line 2398: ID = spin_lock_irqsave
Line 2398: (
Line 2398: Unrecognized token: 38
Line 2398: ID = q
Line 2398: -
Line 2398: >
Line 2398: ID = lock
Line 2398: ,
Line 2398: ID = flags
Line 2398: )
Line 2398: ;
Line 2399: Unrecognized token: 95
Line 2399: Unrecognized token: 95
Line 2399: ID = wake_up_common
Line 2399: (
Line 2399: ID = q
Line 2399: ,
Line 2399: ID = mode
Line 2399: ,
Line 2399: ID = nr_exclusive
Line 2399: ,
Line 2399: INTCON = 0
Line 2399: ,
Line 2399: ID = key
Line 2399: )
Line 2399: ;
Line 2400: ID = spin_unlock_irqrestore
Line 2400: (
Line 2400: Unrecognized token: 38
Line 2400: ID = q
Line 2400: -
Line 2400: >
Line 2400: ID = lock
Line 2400: ,
Line 2400: ID = flags
Line 2400: )
Line 2400: ;
Line 2401: }
Line 2403: ID = EXPORT_SYMBOL
Line 2403: (
Line 2403: Unrecognized token: 95
Line 2403: Unrecognized token: 95
Line 2403: ID = wake_up
Line 2403: )
Line 2403: ;
Line 2408: void
Line 2408: ID = fastcall
Line 2408: Unrecognized token: 95
Line 2408: Unrecognized token: 95
Line 2408: ID = wake_up_locked
Line 2408: (
Line 2408: ID = wait_queue_head_t
Line 2408: *
Line 2408: ID = q
Line 2408: ,
Line 2408: ID = unsigned
Line 2408: int
Line 2408: ID = mode
Line 2408: )
Line 2409: {
Line 2410: Unrecognized token: 95
Line 2410: Unrecognized token: 95
Line 2410: ID = wake_up_common
Line 2410: (
Line 2410: ID = q
Line 2410: ,
Line 2410: ID = mode
Line 2410: ,
Line 2410: INTCON = 1
Line 2410: ,
Line 2410: INTCON = 0
Line 2410: ,
Line 2410: ID = NULL
Line 2410: )
Line 2410: ;
Line 2411: }
Line 2426: void
Line 2426: ID = fastcall
Line 2426: Unrecognized token: 95
Line 2426: Unrecognized token: 95
Line 2426: ID = wake_up_sync
Line 2426: (
Line 2426: ID = wait_queue_head_t
Line 2426: *
Line 2426: ID = q
Line 2426: ,
Line 2426: ID = unsigned
Line 2426: int
Line 2426: ID = mode
Line 2426: ,
Line 2426: int
Line 2426: ID = nr_exclusive
Line 2426: )
Line 2427: {
Line 2428: ID = unsigned
Line 2428: ID = long
Line 2428: ID = flags
Line 2428: ;
Line 2429: int
Line 2429: ID = sync
Line 2429: =
Line 2429: INTCON = 1
Line 2429: ;
Line 2431: if
Line 2431: (
Line 2431: ID = unlikely
Line 2431: (
Line 2431: !
Line 2431: ID = q
Line 2431: )
Line 2431: )
Line 2432: return
Line 2432: ;
Line 2434: if
Line 2434: (
Line 2434: ID = unlikely
Line 2434: (
Line 2434: !
Line 2434: ID = nr_exclusive
Line 2434: )
Line 2434: )
Line 2435: ID = sync
Line 2435: =
Line 2435: INTCON = 0
Line 2435: ;
Line 2437: ID = spin_lock_irqsave
Line 2437: (
Line 2437: Unrecognized token: 38
Line 2437: ID = q
Line 2437: -
Line 2437: >
Line 2437: ID = lock
Line 2437: ,
Line 2437: ID = flags
Line 2437: )
Line 2437: ;
Line 2438: Unrecognized token: 95
Line 2438: Unrecognized token: 95
Line 2438: ID = wake_up_common
Line 2438: (
Line 2438: ID = q
Line 2438: ,
Line 2438: ID = mode
Line 2438: ,
Line 2438: ID = nr_exclusive
Line 2438: ,
Line 2438: ID = sync
Line 2438: ,
Line 2438: ID = NULL
Line 2438: )
Line 2438: ;
Line 2439: ID = spin_unlock_irqrestore
Line 2439: (
Line 2439: Unrecognized token: 38
Line 2439: ID = q
Line 2439: -
Line 2439: >
Line 2439: ID = lock
Line 2439: ,
Line 2439: ID = flags
Line 2439: )
Line 2439: ;
Line 2440: }
Line 2441: ID = EXPORT_SYMBOL_GPL
Line 2441: (
Line 2441: Unrecognized token: 95
Line 2441: Unrecognized token: 95
Line 2441: ID = wake_up_sync
Line 2441: )
Line 2441: ;
Line 2443: void
Line 2443: ID = fastcall
Line 2443: ID = complete
Line 2443: (
Line 2443: ID = struct
Line 2443: ID = completion
Line 2443: *
Line 2443: ID = x
Line 2443: )
Line 2444: {
Line 2445: ID = unsigned
Line 2445: ID = long
Line 2445: ID = flags
Line 2445: ;
Line 2447: ID = spin_lock_irqsave
Line 2447: (
Line 2447: Unrecognized token: 38
Line 2447: ID = x
Line 2447: -
Line 2447: >
Line 2447: ID = wait
Line 2447: Unrecognized token: 46
Line 2447: ID = lock
Line 2447: ,
Line 2447: ID = flags
Line 2447: )
Line 2447: ;
Line 2448: ID = x
Line 2448: -
Line 2448: >
Line 2448: ID = done
Line 2448: +
Line 2448: +
Line 2448: ;
Line 2449: Unrecognized token: 95
Line 2449: Unrecognized token: 95
Line 2449: ID = wake_up_common
Line 2449: (
Line 2449: Unrecognized token: 38
Line 2449: ID = x
Line 2449: -
Line 2449: >
Line 2449: ID = wait
Line 2449: ,
Line 2449: ID = TASK_UNINTERRUPTIBLE
Line 2449: Unrecognized token: 124
Line 2449: ID = TASK_INTERRUPTIBLE
Line 2449: ,
Line 2450: INTCON = 1
Line 2450: ,
Line 2450: INTCON = 0
Line 2450: ,
Line 2450: ID = NULL
Line 2450: )
Line 2450: ;
Line 2451: ID = spin_unlock_irqrestore
Line 2451: (
Line 2451: Unrecognized token: 38
Line 2451: ID = x
Line 2451: -
Line 2451: >
Line 2451: ID = wait
Line 2451: Unrecognized token: 46
Line 2451: ID = lock
Line 2451: ,
Line 2451: ID = flags
Line 2451: )
Line 2451: ;
Line 2452: }
Line 2453: ID = EXPORT_SYMBOL
Line 2453: (
Line 2453: ID = complete
Line 2453: )
Line 2453: ;
Line 2455: void
Line 2455: ID = fastcall
Line 2455: ID = complete_all
Line 2455: (
Line 2455: ID = struct
Line 2455: ID = completion
Line 2455: *
Line 2455: ID = x
Line 2455: )
Line 2456: {
Line 2457: ID = unsigned
Line 2457: ID = long
Line 2457: ID = flags
Line 2457: ;
Line 2459: ID = spin_lock_irqsave
Line 2459: (
Line 2459: Unrecognized token: 38
Line 2459: ID = x
Line 2459: -
Line 2459: >
Line 2459: ID = wait
Line 2459: Unrecognized token: 46
Line 2459: ID = lock
Line 2459: ,
Line 2459: ID = flags
Line 2459: )
Line 2459: ;
Line 2460: ID = x
Line 2460: -
Line 2460: >
Line 2460: ID = done
Line 2460: +
Line 2460: =
Line 2460: ID = UINT_MAX
Line 2460: /
Line 2460: INTCON = 2
Line 2460: ;
Line 2461: Unrecognized token: 95
Line 2461: Unrecognized token: 95
Line 2461: ID = wake_up_common
Line 2461: (
Line 2461: Unrecognized token: 38
Line 2461: ID = x
Line 2461: -
Line 2461: >
Line 2461: ID = wait
Line 2461: ,
Line 2461: ID = TASK_UNINTERRUPTIBLE
Line 2461: Unrecognized token: 124
Line 2461: ID = TASK_INTERRUPTIBLE
Line 2461: ,
Line 2462: INTCON = 0
Line 2462: ,
Line 2462: INTCON = 0
Line 2462: ,
Line 2462: ID = NULL
Line 2462: )
Line 2462: ;
Line 2463: ID = spin_unlock_irqrestore
Line 2463: (
Line 2463: Unrecognized token: 38
Line 2463: ID = x
Line 2463: -
Line 2463: >
Line 2463: ID = wait
Line 2463: Unrecognized token: 46
Line 2463: ID = lock
Line 2463: ,
Line 2463: ID = flags
Line 2463: )
Line 2463: ;
Line 2464: }
Line 2465: ID = EXPORT_SYMBOL
Line 2465: (
Line 2465: ID = complete_all
Line 2465: )
Line 2465: ;
Line 2467: void
Line 2467: ID = fastcall
Line 2467: Unrecognized token: 95
Line 2467: Unrecognized token: 95
Line 2467: ID = sched
Line 2467: ID = wait_for_completion
Line 2467: (
Line 2467: ID = struct
Line 2467: ID = completion
Line 2467: *
Line 2467: ID = x
Line 2467: )
Line 2468: {
Line 2469: ID = might_sleep
Line 2469: (
Line 2469: )
Line 2469: ;
Line 2470: ID = spin_lock_irq
Line 2470: (
Line 2470: Unrecognized token: 38
Line 2470: ID = x
Line 2470: -
Line 2470: >
Line 2470: ID = wait
Line 2470: Unrecognized token: 46
Line 2470: ID = lock
Line 2470: )
Line 2470: ;
Line 2471: if
Line 2471: (
Line 2471: !
Line 2471: ID = x
Line 2471: -
Line 2471: >
Line 2471: ID = done
Line 2471: )
Line 2471: {
Line 2472: ID = DECLARE_WAITQUEUE
Line 2472: (
Line 2472: ID = wait
Line 2472: ,
Line 2472: ID = current
Line 2472: )
Line 2472: ;
Line 2474: ID = wait
Line 2474: Unrecognized token: 46
Line 2474: ID = flags
Line 2474: Unrecognized token: 124
Line 2474: =
Line 2474: ID = WQ_FLAG_EXCLUSIVE
Line 2474: ;
Line 2475: Unrecognized token: 95
Line 2475: Unrecognized token: 95
Line 2475: ID = add_wait_queue_tail
Line 2475: (
Line 2475: Unrecognized token: 38
Line 2475: ID = x
Line 2475: -
Line 2475: >
Line 2475: ID = wait
Line 2475: ,
Line 2475: Unrecognized token: 38
Line 2475: ID = wait
Line 2475: )
Line 2475: ;
Line 2476: ID = do
Line 2476: {
Line 2477: Unrecognized token: 95
Line 2477: Unrecognized token: 95
Line 2477: ID = set_current_state
Line 2477: (
Line 2477: ID = TASK_UNINTERRUPTIBLE
Line 2477: )
Line 2477: ;
Line 2478: ID = spin_unlock_irq
Line 2478: (
Line 2478: Unrecognized token: 38
Line 2478: ID = x
Line 2478: -
Line 2478: >
Line 2478: ID = wait
Line 2478: Unrecognized token: 46
Line 2478: ID = lock
Line 2478: )
Line 2478: ;
Line 2479: ID = schedule
Line 2479: (
Line 2479: )
Line 2479: ;
Line 2480: ID = spin_lock_irq
Line 2480: (
Line 2480: Unrecognized token: 38
Line 2480: ID = x
Line 2480: -
Line 2480: >
Line 2480: ID = wait
Line 2480: Unrecognized token: 46
Line 2480: ID = lock
Line 2480: )
Line 2480: ;
Line 2481: }
Line 2481: while
Line 2481: (
Line 2481: !
Line 2481: ID = x
Line 2481: -
Line 2481: >
Line 2481: ID = done
Line 2481: )
Line 2481: ;
Line 2482: Unrecognized token: 95
Line 2482: Unrecognized token: 95
Line 2482: ID = remove_wait_queue
Line 2482: (
Line 2482: Unrecognized token: 38
Line 2482: ID = x
Line 2482: -
Line 2482: >
Line 2482: ID = wait
Line 2482: ,
Line 2482: Unrecognized token: 38
Line 2482: ID = wait
Line 2482: )
Line 2482: ;
Line 2483: }
Line 2484: ID = x
Line 2484: -
Line 2484: >
Line 2484: ID = done
Line 2484: -
Line 2484: -
Line 2484: ;
Line 2485: ID = spin_unlock_irq
Line 2485: (
Line 2485: Unrecognized token: 38
Line 2485: ID = x
Line 2485: -
Line 2485: >
Line 2485: ID = wait
Line 2485: Unrecognized token: 46
Line 2485: ID = lock
Line 2485: )
Line 2485: ;
Line 2486: }
Line 2487: ID = EXPORT_SYMBOL
Line 2487: (
Line 2487: ID = wait_for_completion
Line 2487: )
Line 2487: ;
Line 2489: Unrecognized token: 35
Line 2489: ID = define
Line 2489: ID = SLEEP_ON_VAR
Line 2489: Unrecognized token: 92
Line 2490: ID = unsigned
Line 2490: ID = long
Line 2490: ID = flags
Line 2490: ;
Line 2490: Unrecognized token: 92
Line 2491: ID = wait_queue_t
Line 2491: ID = wait
Line 2491: ;
Line 2491: Unrecognized token: 92
Line 2492: ID = init_waitqueue_entry
Line 2492: (
Line 2492: Unrecognized token: 38
Line 2492: ID = wait
Line 2492: ,
Line 2492: ID = current
Line 2492: )
Line 2492: ;
Line 2494: Unrecognized token: 35
Line 2494: ID = define
Line 2494: ID = SLEEP_ON_HEAD
Line 2494: Unrecognized token: 92
Line 2495: ID = spin_lock_irqsave
Line 2495: (
Line 2495: Unrecognized token: 38
Line 2495: ID = q
Line 2495: -
Line 2495: >
Line 2495: ID = lock
Line 2495: ,
Line 2495: ID = flags
Line 2495: )
Line 2495: ;
Line 2495: Unrecognized token: 92
Line 2496: Unrecognized token: 95
Line 2496: Unrecognized token: 95
Line 2496: ID = add_wait_queue
Line 2496: (
Line 2496: ID = q
Line 2496: ,
Line 2496: Unrecognized token: 38
Line 2496: ID = wait
Line 2496: )
Line 2496: ;
Line 2496: Unrecognized token: 92
Line 2497: ID = spin_unlock
Line 2497: (
Line 2497: Unrecognized token: 38
Line 2497: ID = q
Line 2497: -
Line 2497: >
Line 2497: ID = lock
Line 2497: )
Line 2497: ;
Line 2499: Unrecognized token: 35
Line 2499: ID = define
Line 2499: ID = SLEEP_ON_TAIL
Line 2499: Unrecognized token: 92
Line 2500: ID = spin_lock_irq
Line 2500: (
Line 2500: Unrecognized token: 38
Line 2500: ID = q
Line 2500: -
Line 2500: >
Line 2500: ID = lock
Line 2500: )
Line 2500: ;
Line 2500: Unrecognized token: 92
Line 2501: Unrecognized token: 95
Line 2501: Unrecognized token: 95
Line 2501: ID = remove_wait_queue
Line 2501: (
Line 2501: ID = q
Line 2501: ,
Line 2501: Unrecognized token: 38
Line 2501: ID = wait
Line 2501: )
Line 2501: ;
Line 2501: Unrecognized token: 92
Line 2502: ID = spin_unlock_irqrestore
Line 2502: (
Line 2502: Unrecognized token: 38
Line 2502: ID = q
Line 2502: -
Line 2502: >
Line 2502: ID = lock
Line 2502: ,
Line 2502: ID = flags
Line 2502: )
Line 2502: ;
Line 2504: void
Line 2504: ID = fastcall
Line 2504: Unrecognized token: 95
Line 2504: Unrecognized token: 95
Line 2504: ID = sched
Line 2504: ID = interruptible_sleep_on
Line 2504: (
Line 2504: ID = wait_queue_head_t
Line 2504: *
Line 2504: ID = q
Line 2504: )
Line 2505: {
Line 2506: ID = SLEEP_ON_VAR
Line 2508: ID = current
Line 2508: -
Line 2508: >
Line 2508: ID = state
Line 2508: =
Line 2508: ID = TASK_INTERRUPTIBLE
Line 2508: ;
Line 2510: ID = SLEEP_ON_HEAD
Line 2511: ID = schedule
Line 2511: (
Line 2511: )
Line 2511: ;
Line 2512: ID = SLEEP_ON_TAIL
Line 2513: }
Line 2515: ID = EXPORT_SYMBOL
Line 2515: (
Line 2515: ID = interruptible_sleep_on
Line 2515: )
Line 2515: ;
Line 2517: ID = long
Line 2517: ID = fastcall
Line 2517: Unrecognized token: 95
Line 2517: Unrecognized token: 95
Line 2517: ID = sched
Line 2517: ID = interruptible_sleep_on_timeout
Line 2517: (
Line 2517: ID = wait_queue_head_t
Line 2517: *
Line 2517: ID = q
Line 2517: ,
Line 2517: ID = long
Line 2517: ID = timeout
Line 2517: )
Line 2518: {
Line 2519: ID = SLEEP_ON_VAR
Line 2521: ID = current
Line 2521: -
Line 2521: >
Line 2521: ID = state
Line 2521: =
Line 2521: ID = TASK_INTERRUPTIBLE
Line 2521: ;
Line 2523: ID = SLEEP_ON_HEAD
Line 2524: ID = timeout
Line 2524: =
Line 2524: ID = schedule_timeout
Line 2524: (
Line 2524: ID = timeout
Line 2524: )
Line 2524: ;
Line 2525: ID = SLEEP_ON_TAIL
Line 2527: return
Line 2527: ID = timeout
Line 2527: ;
Line 2528: }
Line 2530: ID = EXPORT_SYMBOL
Line 2530: (
Line 2530: ID = interruptible_sleep_on_timeout
Line 2530: )
Line 2530: ;
Line 2532: void
Line 2532: ID = fastcall
Line 2532: Unrecognized token: 95
Line 2532: Unrecognized token: 95
Line 2532: ID = sched
Line 2532: ID = sleep_on
Line 2532: (
Line 2532: ID = wait_queue_head_t
Line 2532: *
Line 2532: ID = q
Line 2532: )
Line 2533: {
Line 2534: ID = SLEEP_ON_VAR
Line 2536: ID = current
Line 2536: -
Line 2536: >
Line 2536: ID = state
Line 2536: =
Line 2536: ID = TASK_UNINTERRUPTIBLE
Line 2536: ;
Line 2538: ID = SLEEP_ON_HEAD
Line 2539: ID = schedule
Line 2539: (
Line 2539: )
Line 2539: ;
Line 2540: ID = SLEEP_ON_TAIL
Line 2541: }
Line 2543: ID = EXPORT_SYMBOL
Line 2543: (
Line 2543: ID = sleep_on
Line 2543: )
Line 2543: ;
Line 2545: ID = long
Line 2545: ID = fastcall
Line 2545: Unrecognized token: 95
Line 2545: Unrecognized token: 95
Line 2545: ID = sched
Line 2545: ID = sleep_on_timeout
Line 2545: (
Line 2545: ID = wait_queue_head_t
Line 2545: *
Line 2545: ID = q
Line 2545: ,
Line 2545: ID = long
Line 2545: ID = timeout
Line 2545: )
Line 2546: {
Line 2547: ID = SLEEP_ON_VAR
Line 2549: ID = current
Line 2549: -
Line 2549: >
Line 2549: ID = state
Line 2549: =
Line 2549: ID = TASK_UNINTERRUPTIBLE
Line 2549: ;
Line 2551: ID = SLEEP_ON_HEAD
Line 2552: ID = timeout
Line 2552: =
Line 2552: ID = schedule_timeout
Line 2552: (
Line 2552: ID = timeout
Line 2552: )
Line 2552: ;
Line 2553: ID = SLEEP_ON_TAIL
Line 2555: return
Line 2555: ID = timeout
Line 2555: ;
Line 2556: }
Line 2558: ID = EXPORT_SYMBOL
Line 2558: (
Line 2558: ID = sleep_on_timeout
Line 2558: )
Line 2558: ;
Line 2560: void
Line 2560: ID = set_user_nice
Line 2560: (
Line 2560: ID = task_t
Line 2560: *
Line 2560: ID = p
Line 2560: ,
Line 2560: ID = long
Line 2560: ID = nice
Line 2560: )
Line 2561: {
Line 2562: ID = unsigned
Line 2562: ID = long
Line 2562: ID = flags
Line 2562: ;
Line 2563: ID = prio_array_t
Line 2563: *
Line 2563: ID = array
Line 2563: ;
Line 2564: ID = runqueue_t
Line 2564: *
Line 2564: ID = rq
Line 2564: ;
Line 2565: int
Line 2565: ID = old_prio
Line 2565: ,
Line 2565: ID = new_prio
Line 2565: ,
Line 2565: ID = delta
Line 2565: ;
Line 2567: if
Line 2567: (
Line 2567: ID = TASK_NICE
Line 2567: (
Line 2567: ID = p
Line 2567: )
Line 2567: ==
Line 2567: ID = nice
Line 2567: ||
Line 2567: ID = nice
Line 2567: <
Line 2567: -
Line 2567: INTCON = 20
Line 2567: ||
Line 2567: ID = nice
Line 2567: >
Line 2567: INTCON = 19
Line 2567: )
Line 2568: return
Line 2568: ;
Line 2573: ID = rq
Line 2573: =
Line 2573: ID = task_rq_lock
Line 2573: (
Line 2573: ID = p
Line 2573: ,
Line 2573: Unrecognized token: 38
Line 2573: ID = flags
Line 2573: )
Line 2573: ;
Line 2580: if
Line 2580: (
Line 2580: ID = rt_task
Line 2580: (
Line 2580: ID = p
Line 2580: )
Line 2580: )
Line 2580: {
Line 2581: ID = p
Line 2581: -
Line 2581: >
Line 2581: ID = static_prio
Line 2581: =
Line 2581: ID = NICE_TO_PRIO
Line 2581: (
Line 2581: ID = nice
Line 2581: )
Line 2581: ;
Line 2582: ID = goto
Line 2582: ID = out_unlock
Line 2582: ;
Line 2583: }
Line 2584: ID = array
Line 2584: =
Line 2584: ID = p
Line 2584: -
Line 2584: >
Line 2584: ID = array
Line 2584: ;
Line 2585: if
Line 2585: (
Line 2585: ID = array
Line 2585: )
Line 2586: ID = dequeue_task
Line 2586: (
Line 2586: ID = p
Line 2586: ,
Line 2586: ID = array
Line 2586: )
Line 2586: ;
Line 2588: ID = old_prio
Line 2588: =
Line 2588: ID = p
Line 2588: -
Line 2588: >
Line 2588: ID = prio
Line 2588: ;
Line 2589: ID = new_prio
Line 2589: =
Line 2589: ID = NICE_TO_PRIO
Line 2589: (
Line 2589: ID = nice
Line 2589: )
Line 2589: ;
Line 2590: ID = delta
Line 2590: =
Line 2590: ID = new_prio
Line 2590: -
Line 2590: ID = old_prio
Line 2590: ;
Line 2591: ID = p
Line 2591: -
Line 2591: >
Line 2591: ID = static_prio
Line 2591: =
Line 2591: ID = NICE_TO_PRIO
Line 2591: (
Line 2591: ID = nice
Line 2591: )
Line 2591: ;
Line 2592: ID = p
Line 2592: -
Line 2592: >
Line 2592: ID = prio
Line 2592: +
Line 2592: =
Line 2592: ID = delta
Line 2592: ;
Line 2594: if
Line 2594: (
Line 2594: ID = array
Line 2594: )
Line 2594: {
Line 2595: ID = enqueue_task
Line 2595: (
Line 2595: ID = p
Line 2595: ,
Line 2595: ID = array
Line 2595: )
Line 2595: ;
Line 2600: if
Line 2600: (
Line 2600: ID = delta
Line 2600: <
Line 2600: INTCON = 0
Line 2600: ||
Line 2600: (
Line 2600: ID = delta
Line 2600: >
Line 2600: INTCON = 0
Line 2600: &&
Line 2600: ID = task_running
Line 2600: (
Line 2600: ID = rq
Line 2600: ,
Line 2600: ID = p
Line 2600: )
Line 2600: )
Line 2600: )
Line 2601: ID = resched_task
Line 2601: (
Line 2601: ID = rq
Line 2601: -
Line 2601: >
Line 2601: ID = curr
Line 2601: )
Line 2601: ;
Line 2602: }
Line 2603: ID = out_unlock
Line 2603: Unrecognized token: 58
Line 2604: ID = task_rq_unlock
Line 2604: (
Line 2604: ID = rq
Line 2604: ,
Line 2604: Unrecognized token: 38
Line 2604: ID = flags
Line 2604: )
Line 2604: ;
Line 2605: }
Line 2607: ID = EXPORT_SYMBOL
Line 2607: (
Line 2607: ID = set_user_nice
Line 2607: )
Line 2607: ;
Line 2609: Unrecognized token: 35
Line 2609: ID = ifdef
Line 2609: Unrecognized token: 95
Line 2609: Unrecognized token: 95
Line 2609: ID = ARCH_WANT_SYS_NICE
Line 2618: ID = asmlinkage
Line 2618: ID = long
Line 2618: ID = sys_nice
Line 2618: (
Line 2618: int
Line 2618: ID = increment
Line 2618: )
Line 2619: {
Line 2620: int
Line 2620: ID = retval
Line 2620: ;
Line 2621: ID = long
Line 2621: ID = nice
Line 2621: ;
Line 2628: if
Line 2628: (
Line 2628: ID = increment
Line 2628: <
Line 2628: INTCON = 0
Line 2628: )
Line 2628: {
Line 2629: if
Line 2629: (
Line 2629: !
Line 2629: ID = capable
Line 2629: (
Line 2629: ID = CAP_SYS_NICE
Line 2629: )
Line 2629: )
Line 2630: return
Line 2630: -
Line 2630: ID = EPERM
Line 2630: ;
Line 2631: if
Line 2631: (
Line 2631: ID = increment
Line 2631: <
Line 2631: -
Line 2631: INTCON = 40
Line 2631: )
Line 2632: ID = increment
Line 2632: =
Line 2632: -
Line 2632: INTCON = 40
Line 2632: ;
Line 2633: }
Line 2634: if
Line 2634: (
Line 2634: ID = increment
Line 2634: >
Line 2634: INTCON = 40
Line 2634: )
Line 2635: ID = increment
Line 2635: =
Line 2635: INTCON = 40
Line 2635: ;
Line 2637: ID = nice
Line 2637: =
Line 2637: ID = PRIO_TO_NICE
Line 2637: (
Line 2637: ID = current
Line 2637: -
Line 2637: >
Line 2637: ID = static_prio
Line 2637: )
Line 2637: +
Line 2637: ID = increment
Line 2637: ;
Line 2638: if
Line 2638: (
Line 2638: ID = nice
Line 2638: <
Line 2638: -
Line 2638: INTCON = 20
Line 2638: )
Line 2639: ID = nice
Line 2639: =
Line 2639: -
Line 2639: INTCON = 20
Line 2639: ;
Line 2640: if
Line 2640: (
Line 2640: ID = nice
Line 2640: >
Line 2640: INTCON = 19
Line 2640: )
Line 2641: ID = nice
Line 2641: =
Line 2641: INTCON = 19
Line 2641: ;
Line 2643: ID = retval
Line 2643: =
Line 2643: ID = security_task_setnice
Line 2643: (
Line 2643: ID = current
Line 2643: ,
Line 2643: ID = nice
Line 2643: )
Line 2643: ;
Line 2644: if
Line 2644: (
Line 2644: ID = retval
Line 2644: )
Line 2645: return
Line 2645: ID = retval
Line 2645: ;
Line 2647: ID = set_user_nice
Line 2647: (
Line 2647: ID = current
Line 2647: ,
Line 2647: ID = nice
Line 2647: )
Line 2647: ;
Line 2648: return
Line 2648: INTCON = 0
Line 2648: ;
Line 2649: }
Line 2651: Unrecognized token: 35
Line 2651: ID = endif
Line 2661: int
Line 2661: ID = task_prio
Line 2661: (
Line 2661: ID = const
Line 2661: ID = task_t
Line 2661: *
Line 2661: ID = p
Line 2661: )
Line 2662: {
Line 2663: return
Line 2663: ID = p
Line 2663: -
Line 2663: >
Line 2663: ID = prio
Line 2663: -
Line 2663: ID = MAX_RT_PRIO
Line 2663: ;
Line 2664: }
Line 2670: int
Line 2670: ID = task_nice
Line 2670: (
Line 2670: ID = const
Line 2670: ID = task_t
Line 2670: *
Line 2670: ID = p
Line 2670: )
Line 2671: {
Line 2672: return
Line 2672: ID = TASK_NICE
Line 2672: (
Line 2672: ID = p
Line 2672: )
Line 2672: ;
Line 2673: }
Line 2675: ID = EXPORT_SYMBOL
Line 2675: (
Line 2675: ID = task_nice
Line 2675: )
Line 2675: ;
Line 2681: int
Line 2681: ID = idle_cpu
Line 2681: (
Line 2681: int
Line 2681: ID = cpu
Line 2681: )
Line 2682: {
Line 2683: return
Line 2683: ID = cpu_curr
Line 2683: (
Line 2683: ID = cpu
Line 2683: )
Line 2683: ==
Line 2683: ID = cpu_rq
Line 2683: (
Line 2683: ID = cpu
Line 2683: )
Line 2683: -
Line 2683: >
Line 2683: ID = idle
Line 2683: ;
Line 2684: }
Line 2686: ID = EXPORT_SYMBOL_GPL
Line 2686: (
Line 2686: ID = idle_cpu
Line 2686: )
Line 2686: ;
Line 2692: ID = static
Line 2692: ID = inline
Line 2692: ID = task_t
Line 2692: *
Line 2692: ID = find_process_by_pid
Line 2692: (
Line 2692: ID = pid_t
Line 2692: ID = pid
Line 2692: )
Line 2693: {
Line 2694: return
Line 2694: ID = pid
Line 2694: Unrecognized token: 63
Line 2694: ID = find_task_by_pid
Line 2694: (
Line 2694: ID = pid
Line 2694: )
Line 2694: Unrecognized token: 58
Line 2694: ID = current
Line 2694: ;
Line 2695: }
Line 2698: ID = static
Line 2698: void
Line 2698: Unrecognized token: 95
Line 2698: Unrecognized token: 95
Line 2698: ID = setscheduler
Line 2698: (
Line 2698: ID = struct
Line 2698: ID = task_struct
Line 2698: *
Line 2698: ID = p
Line 2698: ,
Line 2698: int
Line 2698: ID = policy
Line 2698: ,
Line 2698: int
Line 2698: ID = prio
Line 2698: )
Line 2699: {
Line 2700: ID = BUG_ON
Line 2700: (
Line 2700: ID = p
Line 2700: -
Line 2700: >
Line 2700: ID = array
Line 2700: )
Line 2700: ;
Line 2701: ID = p
Line 2701: -
Line 2701: >
Line 2701: ID = policy
Line 2701: =
Line 2701: ID = policy
Line 2701: ;
Line 2702: ID = p
Line 2702: -
Line 2702: >
Line 2702: ID = rt_priority
Line 2702: =
Line 2702: ID = prio
Line 2702: ;
Line 2703: if
Line 2703: (
Line 2703: ID = policy
Line 2703: !=
Line 2703: ID = SCHED_NORMAL
Line 2703: )
Line 2704: ID = p
Line 2704: -
Line 2704: >
Line 2704: ID = prio
Line 2704: =
Line 2704: ID = MAX_USER_RT_PRIO
Line 2704: -
Line 2704: INTCON = 1
Line 2704: -
Line 2704: ID = p
Line 2704: -
Line 2704: >
Line 2704: ID = rt_priority
Line 2704: ;
Line 2705: else
Line 2706: ID = p
Line 2706: -
Line 2706: >
Line 2706: ID = prio
Line 2706: =
Line 2706: ID = p
Line 2706: -
Line 2706: >
Line 2706: ID = static_prio
Line 2706: ;
Line 2707: }
Line 2712: ID = static
Line 2712: int
Line 2712: ID = setscheduler
Line 2712: (
Line 2712: ID = pid_t
Line 2712: ID = pid
Line 2712: ,
Line 2712: int
Line 2712: ID = policy
Line 2712: ,
Line 2712: ID = struct
Line 2712: ID = sched_param
Line 2712: Unrecognized token: 95
Line 2712: Unrecognized token: 95
Line 2712: ID = user
Line 2712: *
Line 2712: ID = param
Line 2712: )
Line 2713: {
Line 2714: ID = struct
Line 2714: ID = sched_param
Line 2714: ID = lp
Line 2714: ;
Line 2715: int
Line 2715: ID = retval
Line 2715: =
Line 2715: -
Line 2715: ID = EINVAL
Line 2715: ;
Line 2716: int
Line 2716: ID = oldprio
Line 2716: ;
Line 2717: ID = prio_array_t
Line 2717: *
Line 2717: ID = array
Line 2717: ;
Line 2718: ID = unsigned
Line 2718: ID = long
Line 2718: ID = flags
Line 2718: ;
Line 2719: ID = runqueue_t
Line 2719: *
Line 2719: ID = rq
Line 2719: ;
Line 2720: ID = task_t
Line 2720: *
Line 2720: ID = p
Line 2720: ;
Line 2722: if
Line 2722: (
Line 2722: !
Line 2722: ID = param
Line 2722: ||
Line 2722: ID = pid
Line 2722: <
Line 2722: INTCON = 0
Line 2722: )
Line 2723: ID = goto
Line 2723: ID = out_nounlock
Line 2723: ;
Line 2725: ID = retval
Line 2725: =
Line 2725: -
Line 2725: ID = EFAULT
Line 2725: ;
Line 2726: if
Line 2726: (
Line 2726: ID = copy_from_user
Line 2726: (
Line 2726: Unrecognized token: 38
Line 2726: ID = lp
Line 2726: ,
Line 2726: ID = param
Line 2726: ,
Line 2726: ID = sizeof
Line 2726: (
Line 2726: ID = struct
Line 2726: ID = sched_param
Line 2726: )
Line 2726: )
Line 2726: )
Line 2727: ID = goto
Line 2727: ID = out_nounlock
Line 2727: ;
Line 2732: ID = read_lock_irq
Line 2732: (
Line 2732: Unrecognized token: 38
Line 2732: ID = tasklist_lock
Line 2732: )
Line 2732: ;
Line 2734: ID = p
Line 2734: =
Line 2734: ID = find_process_by_pid
Line 2734: (
Line 2734: ID = pid
Line 2734: )
Line 2734: ;
Line 2736: ID = retval
Line 2736: =
Line 2736: -
Line 2736: ID = ESRCH
Line 2736: ;
Line 2737: if
Line 2737: (
Line 2737: !
Line 2737: ID = p
Line 2737: )
Line 2738: ID = goto
Line 2738: ID = out_unlock_tasklist
Line 2738: ;
Line 2744: ID = rq
Line 2744: =
Line 2744: ID = task_rq_lock
Line 2744: (
Line 2744: ID = p
Line 2744: ,
Line 2744: Unrecognized token: 38
Line 2744: ID = flags
Line 2744: )
Line 2744: ;
Line 2746: if
Line 2746: (
Line 2746: ID = policy
Line 2746: <
Line 2746: INTCON = 0
Line 2746: )
Line 2747: ID = policy
Line 2747: =
Line 2747: ID = p
Line 2747: -
Line 2747: >
Line 2747: ID = policy
Line 2747: ;
Line 2748: else
Line 2748: {
Line 2749: ID = retval
Line 2749: =
Line 2749: -
Line 2749: ID = EINVAL
Line 2749: ;
Line 2750: if
Line 2750: (
Line 2750: ID = policy
Line 2750: !=
Line 2750: ID = SCHED_FIFO
Line 2750: &&
Line 2750: ID = policy
Line 2750: !=
Line 2750: ID = SCHED_RR
Line 2750: &&
Line 2751: ID = policy
Line 2751: !=
Line 2751: ID = SCHED_NORMAL
Line 2751: )
Line 2752: ID = goto
Line 2752: ID = out_unlock
Line 2752: ;
Line 2753: }
Line 2759: ID = retval
Line 2759: =
Line 2759: -
Line 2759: ID = EINVAL
Line 2759: ;
Line 2760: if
Line 2760: (
Line 2760: ID = lp
Line 2760: Unrecognized token: 46
Line 2760: ID = sched_priority
Line 2760: <
Line 2760: INTCON = 0
Line 2760: ||
Line 2760: ID = lp
Line 2760: Unrecognized token: 46
Line 2760: ID = sched_priority
Line 2760: >
Line 2760: ID = MAX_USER_RT_PRIO
Line 2760: -
Line 2760: INTCON = 1
Line 2760: )
Line 2761: ID = goto
Line 2761: ID = out_unlock
Line 2761: ;
Line 2762: if
Line 2762: (
Line 2762: (
Line 2762: ID = policy
Line 2762: ==
Line 2762: ID = SCHED_NORMAL
Line 2762: )
Line 2762: !=
Line 2762: (
Line 2762: ID = lp
Line 2762: Unrecognized token: 46
Line 2762: ID = sched_priority
Line 2762: ==
Line 2762: INTCON = 0
Line 2762: )
Line 2762: )
Line 2763: ID = goto
Line 2763: ID = out_unlock
Line 2763: ;
Line 2765: ID = retval
Line 2765: =
Line 2765: -
Line 2765: ID = EPERM
Line 2765: ;
Line 2766: if
Line 2766: (
Line 2766: (
Line 2766: ID = policy
Line 2766: ==
Line 2766: ID = SCHED_FIFO
Line 2766: ||
Line 2766: ID = policy
Line 2766: ==
Line 2766: ID = SCHED_RR
Line 2766: )
Line 2766: &&
Line 2767: !
Line 2767: ID = capable
Line 2767: (
Line 2767: ID = CAP_SYS_NICE
Line 2767: )
Line 2767: )
Line 2768: ID = goto
Line 2768: ID = out_unlock
Line 2768: ;
Line 2769: if
Line 2769: (
Line 2769: (
Line 2769: ID = current
Line 2769: -
Line 2769: >
Line 2769: ID = euid
Line 2769: !=
Line 2769: ID = p
Line 2769: -
Line 2769: >
Line 2769: ID = euid
Line 2769: )
Line 2769: &&
Line 2769: (
Line 2769: ID = current
Line 2769: -
Line 2769: >
Line 2769: ID = euid
Line 2769: !=
Line 2769: ID = p
Line 2769: -
Line 2769: >
Line 2769: ID = uid
Line 2769: )
Line 2769: &&
Line 2770: !
Line 2770: ID = capable
Line 2770: (
Line 2770: ID = CAP_SYS_NICE
Line 2770: )
Line 2770: )
Line 2771: ID = goto
Line 2771: ID = out_unlock
Line 2771: ;
Line 2773: ID = retval
Line 2773: =
Line 2773: ID = security_task_setscheduler
Line 2773: (
Line 2773: ID = p
Line 2773: ,
Line 2773: ID = policy
Line 2773: ,
Line 2773: Unrecognized token: 38
Line 2773: ID = lp
Line 2773: )
Line 2773: ;
Line 2774: if
Line 2774: (
Line 2774: ID = retval
Line 2774: )
Line 2775: ID = goto
Line 2775: ID = out_unlock
Line 2775: ;
Line 2777: ID = array
Line 2777: =
Line 2777: ID = p
Line 2777: -
Line 2777: >
Line 2777: ID = array
Line 2777: ;
Line 2778: if
Line 2778: (
Line 2778: ID = array
Line 2778: )
Line 2779: ID = deactivate_task
Line 2779: (
Line 2779: ID = p
Line 2779: ,
Line 2779: ID = task_rq
Line 2779: (
Line 2779: ID = p
Line 2779: )
Line 2779: )
Line 2779: ;
Line 2780: ID = retval
Line 2780: =
Line 2780: INTCON = 0
Line 2780: ;
Line 2781: ID = oldprio
Line 2781: =
Line 2781: ID = p
Line 2781: -
Line 2781: >
Line 2781: ID = prio
Line 2781: ;
Line 2782: Unrecognized token: 95
Line 2782: Unrecognized token: 95
Line 2782: ID = setscheduler
Line 2782: (
Line 2782: ID = p
Line 2782: ,
Line 2782: ID = policy
Line 2782: ,
Line 2782: ID = lp
Line 2782: Unrecognized token: 46
Line 2782: ID = sched_priority
Line 2782: )
Line 2782: ;
Line 2783: if
Line 2783: (
Line 2783: ID = array
Line 2783: )
Line 2783: {
Line 2784: Unrecognized token: 95
Line 2784: Unrecognized token: 95
Line 2784: ID = activate_task
Line 2784: (
Line 2784: ID = p
Line 2784: ,
Line 2784: ID = task_rq
Line 2784: (
Line 2784: ID = p
Line 2784: )
Line 2784: )
Line 2784: ;
Line 2790: if
Line 2790: (
Line 2790: ID = task_running
Line 2790: (
Line 2790: ID = rq
Line 2790: ,
Line 2790: ID = p
Line 2790: )
Line 2790: )
Line 2790: {
Line 2791: if
Line 2791: (
Line 2791: ID = p
Line 2791: -
Line 2791: >
Line 2791: ID = prio
Line 2791: >
Line 2791: ID = oldprio
Line 2791: )
Line 2792: ID = resched_task
Line 2792: (
Line 2792: ID = rq
Line 2792: -
Line 2792: >
Line 2792: ID = curr
Line 2792: )
Line 2792: ;
Line 2793: }
Line 2793: else
Line 2793: if
Line 2793: (
Line 2793: ID = TASK_PREEMPTS_CURR
Line 2793: (
Line 2793: ID = p
Line 2793: ,
Line 2793: ID = rq
Line 2793: )
Line 2793: )
Line 2794: ID = resched_task
Line 2794: (
Line 2794: ID = rq
Line 2794: -
Line 2794: >
Line 2794: ID = curr
Line 2794: )
Line 2794: ;
Line 2795: }
Line 2797: ID = out_unlock
Line 2797: Unrecognized token: 58
Line 2798: ID = task_rq_unlock
Line 2798: (
Line 2798: ID = rq
Line 2798: ,
Line 2798: Unrecognized token: 38
Line 2798: ID = flags
Line 2798: )
Line 2798: ;
Line 2799: ID = out_unlock_tasklist
Line 2799: Unrecognized token: 58
Line 2800: ID = read_unlock_irq
Line 2800: (
Line 2800: Unrecognized token: 38
Line 2800: ID = tasklist_lock
Line 2800: )
Line 2800: ;
Line 2802: ID = out_nounlock
Line 2802: Unrecognized token: 58
Line 2803: return
Line 2803: ID = retval
Line 2803: ;
Line 2804: }
Line 2812: ID = asmlinkage
Line 2812: ID = long
Line 2812: ID = sys_sched_setscheduler
Line 2812: (
Line 2812: ID = pid_t
Line 2812: ID = pid
Line 2812: ,
Line 2812: int
Line 2812: ID = policy
Line 2812: ,
Line 2813: ID = struct
Line 2813: ID = sched_param
Line 2813: Unrecognized token: 95
Line 2813: Unrecognized token: 95
Line 2813: ID = user
Line 2813: *
Line 2813: ID = param
Line 2813: )
Line 2814: {
Line 2815: return
Line 2815: ID = setscheduler
Line 2815: (
Line 2815: ID = pid
Line 2815: ,
Line 2815: ID = policy
Line 2815: ,
Line 2815: ID = param
Line 2815: )
Line 2815: ;
Line 2816: }
Line 2823: ID = asmlinkage
Line 2823: ID = long
Line 2823: ID = sys_sched_setparam
Line 2823: (
Line 2823: ID = pid_t
Line 2823: ID = pid
Line 2823: ,
Line 2823: ID = struct
Line 2823: ID = sched_param
Line 2823: Unrecognized token: 95
Line 2823: Unrecognized token: 95
Line 2823: ID = user
Line 2823: *
Line 2823: ID = param
Line 2823: )
Line 2824: {
Line 2825: return
Line 2825: ID = setscheduler
Line 2825: (
Line 2825: ID = pid
Line 2825: ,
Line 2825: -
Line 2825: INTCON = 1
Line 2825: ,
Line 2825: ID = param
Line 2825: )
Line 2825: ;
Line 2826: }
Line 2832: ID = asmlinkage
Line 2832: ID = long
Line 2832: ID = sys_sched_getscheduler
Line 2832: (
Line 2832: ID = pid_t
Line 2832: ID = pid
Line 2832: )
Line 2833: {
Line 2834: int
Line 2834: ID = retval
Line 2834: =
Line 2834: -
Line 2834: ID = EINVAL
Line 2834: ;
Line 2835: ID = task_t
Line 2835: *
Line 2835: ID = p
Line 2835: ;
Line 2837: if
Line 2837: (
Line 2837: ID = pid
Line 2837: <
Line 2837: INTCON = 0
Line 2837: )
Line 2838: ID = goto
Line 2838: ID = out_nounlock
Line 2838: ;
Line 2840: ID = retval
Line 2840: =
Line 2840: -
Line 2840: ID = ESRCH
Line 2840: ;
Line 2841: ID = read_lock
Line 2841: (
Line 2841: Unrecognized token: 38
Line 2841: ID = tasklist_lock
Line 2841: )
Line 2841: ;
Line 2842: ID = p
Line 2842: =
Line 2842: ID = find_process_by_pid
Line 2842: (
Line 2842: ID = pid
Line 2842: )
Line 2842: ;
Line 2843: if
Line 2843: (
Line 2843: ID = p
Line 2843: )
Line 2843: {
Line 2844: ID = retval
Line 2844: =
Line 2844: ID = security_task_getscheduler
Line 2844: (
Line 2844: ID = p
Line 2844: )
Line 2844: ;
Line 2845: if
Line 2845: (
Line 2845: !
Line 2845: ID = retval
Line 2845: )
Line 2846: ID = retval
Line 2846: =
Line 2846: ID = p
Line 2846: -
Line 2846: >
Line 2846: ID = policy
Line 2846: ;
Line 2847: }
Line 2848: ID = read_unlock
Line 2848: (
Line 2848: Unrecognized token: 38
Line 2848: ID = tasklist_lock
Line 2848: )
Line 2848: ;
Line 2850: ID = out_nounlock
Line 2850: Unrecognized token: 58
Line 2851: return
Line 2851: ID = retval
Line 2851: ;
Line 2852: }
Line 2859: ID = asmlinkage
Line 2859: ID = long
Line 2859: ID = sys_sched_getparam
Line 2859: (
Line 2859: ID = pid_t
Line 2859: ID = pid
Line 2859: ,
Line 2859: ID = struct
Line 2859: ID = sched_param
Line 2859: Unrecognized token: 95
Line 2859: Unrecognized token: 95
Line 2859: ID = user
Line 2859: *
Line 2859: ID = param
Line 2859: )
Line 2860: {
Line 2861: ID = struct
Line 2861: ID = sched_param
Line 2861: ID = lp
Line 2861: ;
Line 2862: int
Line 2862: ID = retval
Line 2862: =
Line 2862: -
Line 2862: ID = EINVAL
Line 2862: ;
Line 2863: ID = task_t
Line 2863: *
Line 2863: ID = p
Line 2863: ;
Line 2865: if
Line 2865: (
Line 2865: !
Line 2865: ID = param
Line 2865: ||
Line 2865: ID = pid
Line 2865: <
Line 2865: INTCON = 0
Line 2865: )
Line 2866: ID = goto
Line 2866: ID = out_nounlock
Line 2866: ;
Line 2868: ID = read_lock
Line 2868: (
Line 2868: Unrecognized token: 38
Line 2868: ID = tasklist_lock
Line 2868: )
Line 2868: ;
Line 2869: ID = p
Line 2869: =
Line 2869: ID = find_process_by_pid
Line 2869: (
Line 2869: ID = pid
Line 2869: )
Line 2869: ;
Line 2870: ID = retval
Line 2870: =
Line 2870: -
Line 2870: ID = ESRCH
Line 2870: ;
Line 2871: if
Line 2871: (
Line 2871: !
Line 2871: ID = p
Line 2871: )
Line 2872: ID = goto
Line 2872: ID = out_unlock
Line 2872: ;
Line 2874: ID = retval
Line 2874: =
Line 2874: ID = security_task_getscheduler
Line 2874: (
Line 2874: ID = p
Line 2874: )
Line 2874: ;
Line 2875: if
Line 2875: (
Line 2875: ID = retval
Line 2875: )
Line 2876: ID = goto
Line 2876: ID = out_unlock
Line 2876: ;
Line 2878: ID = lp
Line 2878: Unrecognized token: 46
Line 2878: ID = sched_priority
Line 2878: =
Line 2878: ID = p
Line 2878: -
Line 2878: >
Line 2878: ID = rt_priority
Line 2878: ;
Line 2879: ID = read_unlock
Line 2879: (
Line 2879: Unrecognized token: 38
Line 2879: ID = tasklist_lock
Line 2879: )
Line 2879: ;
Line 2884: ID = retval
Line 2884: =
Line 2884: ID = copy_to_user
Line 2884: (
Line 2884: ID = param
Line 2884: ,
Line 2884: Unrecognized token: 38
Line 2884: ID = lp
Line 2884: ,
Line 2884: ID = sizeof
Line 2884: (
Line 2884: *
Line 2884: ID = param
Line 2884: )
Line 2884: )
Line 2884: Unrecognized token: 63
Line 2884: -
Line 2884: ID = EFAULT
Line 2884: Unrecognized token: 58
Line 2884: INTCON = 0
Line 2884: ;
Line 2886: ID = out_nounlock
Line 2886: Unrecognized token: 58
Line 2887: return
Line 2887: ID = retval
Line 2887: ;
Line 2889: ID = out_unlock
Line 2889: Unrecognized token: 58
Line 2890: ID = read_unlock
Line 2890: (
Line 2890: Unrecognized token: 38
Line 2890: ID = tasklist_lock
Line 2890: )
Line 2890: ;
Line 2891: return
Line 2891: ID = retval
Line 2891: ;
Line 2892: }
Line 2900: ID = asmlinkage
Line 2900: ID = long
Line 2900: ID = sys_sched_setaffinity
Line 2900: (
Line 2900: ID = pid_t
Line 2900: ID = pid
Line 2900: ,
Line 2900: ID = unsigned
Line 2900: int
Line 2900: ID = len
Line 2900: ,
Line 2901: ID = unsigned
Line 2901: ID = long
Line 2901: Unrecognized token: 95
Line 2901: Unrecognized token: 95
Line 2901: ID = user
Line 2901: *
Line 2901: ID = user_mask_ptr
Line 2901: )
Line 2902: {
Line 2903: ID = cpumask_t
Line 2903: ID = new_mask
Line 2903: ;
Line 2904: int
Line 2904: ID = retval
Line 2904: ;
Line 2905: ID = task_t
Line 2905: *
Line 2905: ID = p
Line 2905: ;
Line 2907: if
Line 2907: (
Line 2907: ID = len
Line 2907: <
Line 2907: ID = sizeof
Line 2907: (
Line 2907: ID = new_mask
Line 2907: )
Line 2907: )
Line 2908: return
Line 2908: -
Line 2908: ID = EINVAL
Line 2908: ;
Line 2910: if
Line 2910: (
Line 2910: ID = copy_from_user
Line 2910: (
Line 2910: Unrecognized token: 38
Line 2910: ID = new_mask
Line 2910: ,
Line 2910: ID = user_mask_ptr
Line 2910: ,
Line 2910: ID = sizeof
Line 2910: (
Line 2910: ID = new_mask
Line 2910: )
Line 2910: )
Line 2910: )
Line 2911: return
Line 2911: -
Line 2911: ID = EFAULT
Line 2911: ;
Line 2913: ID = lock_cpu_hotplug
Line 2913: (
Line 2913: )
Line 2913: ;
Line 2914: ID = read_lock
Line 2914: (
Line 2914: Unrecognized token: 38
Line 2914: ID = tasklist_lock
Line 2914: )
Line 2914: ;
Line 2916: ID = p
Line 2916: =
Line 2916: ID = find_process_by_pid
Line 2916: (
Line 2916: ID = pid
Line 2916: )
Line 2916: ;
Line 2917: if
Line 2917: (
Line 2917: !
Line 2917: ID = p
Line 2917: )
Line 2917: {
Line 2918: ID = read_unlock
Line 2918: (
Line 2918: Unrecognized token: 38
Line 2918: ID = tasklist_lock
Line 2918: )
Line 2918: ;
Line 2919: ID = unlock_cpu_hotplug
Line 2919: (
Line 2919: )
Line 2919: ;
Line 2920: return
Line 2920: -
Line 2920: ID = ESRCH
Line 2920: ;
Line 2921: }
Line 2928: ID = get_task_struct
Line 2928: (
Line 2928: ID = p
Line 2928: )
Line 2928: ;
Line 2929: ID = read_unlock
Line 2929: (
Line 2929: Unrecognized token: 38
Line 2929: ID = tasklist_lock
Line 2929: )
Line 2929: ;
Line 2931: ID = retval
Line 2931: =
Line 2931: -
Line 2931: ID = EPERM
Line 2931: ;
Line 2932: if
Line 2932: (
Line 2932: (
Line 2932: ID = current
Line 2932: -
Line 2932: >
Line 2932: ID = euid
Line 2932: !=
Line 2932: ID = p
Line 2932: -
Line 2932: >
Line 2932: ID = euid
Line 2932: )
Line 2932: &&
Line 2932: (
Line 2932: ID = current
Line 2932: -
Line 2932: >
Line 2932: ID = euid
Line 2932: !=
Line 2932: ID = p
Line 2932: -
Line 2932: >
Line 2932: ID = uid
Line 2932: )
Line 2932: &&
Line 2933: !
Line 2933: ID = capable
Line 2933: (
Line 2933: ID = CAP_SYS_NICE
Line 2933: )
Line 2933: )
Line 2934: ID = goto
Line 2934: ID = out_unlock
Line 2934: ;
Line 2936: ID = retval
Line 2936: =
Line 2936: ID = set_cpus_allowed
Line 2936: (
Line 2936: ID = p
Line 2936: ,
Line 2936: ID = new_mask
Line 2936: )
Line 2936: ;
Line 2938: ID = out_unlock
Line 2938: Unrecognized token: 58
Line 2939: ID = put_task_struct
Line 2939: (
Line 2939: ID = p
Line 2939: )
Line 2939: ;
Line 2940: ID = unlock_cpu_hotplug
Line 2940: (
Line 2940: )
Line 2940: ;
Line 2941: return
Line 2941: ID = retval
Line 2941: ;
Line 2942: }
Line 2951: ID = cpumask_t
Line 2951: ID = cpu_present_map
Line 2951: ;
Line 2952: ID = EXPORT_SYMBOL
Line 2952: (
Line 2952: ID = cpu_present_map
Line 2952: )
Line 2952: ;
Line 2954: Unrecognized token: 35
Line 2954: ID = ifndef
Line 2954: ID = CONFIG_SMP
Line 2955: ID = cpumask_t
Line 2955: ID = cpu_online_map
Line 2955: =
Line 2955: ID = CPU_MASK_ALL
Line 2955: ;
Line 2956: ID = cpumask_t
Line 2956: ID = cpu_possible_map
Line 2956: =
Line 2956: ID = CPU_MASK_ALL
Line 2956: ;
Line 2957: Unrecognized token: 35
Line 2957: ID = endif
Line 2965: ID = asmlinkage
Line 2965: ID = long
Line 2965: ID = sys_sched_getaffinity
Line 2965: (
Line 2965: ID = pid_t
Line 2965: ID = pid
Line 2965: ,
Line 2965: ID = unsigned
Line 2965: int
Line 2965: ID = len
Line 2965: ,
Line 2966: ID = unsigned
Line 2966: ID = long
Line 2966: Unrecognized token: 95
Line 2966: Unrecognized token: 95
Line 2966: ID = user
Line 2966: *
Line 2966: ID = user_mask_ptr
Line 2966: )
Line 2967: {
Line 2968: ID = unsigned
Line 2968: int
Line 2968: ID = real_len
Line 2968: ;
Line 2969: ID = cpumask_t
Line 2969: ID = mask
Line 2969: ;
Line 2970: int
Line 2970: ID = retval
Line 2970: ;
Line 2971: ID = task_t
Line 2971: *
Line 2971: ID = p
Line 2971: ;
Line 2973: ID = real_len
Line 2973: =
Line 2973: ID = sizeof
Line 2973: (
Line 2973: ID = mask
Line 2973: )
Line 2973: ;
Line 2974: if
Line 2974: (
Line 2974: ID = len
Line 2974: <
Line 2974: ID = real_len
Line 2974: )
Line 2975: return
Line 2975: -
Line 2975: ID = EINVAL
Line 2975: ;
Line 2977: ID = lock_cpu_hotplug
Line 2977: (
Line 2977: )
Line 2977: ;
Line 2978: ID = read_lock
Line 2978: (
Line 2978: Unrecognized token: 38
Line 2978: ID = tasklist_lock
Line 2978: )
Line 2978: ;
Line 2980: ID = retval
Line 2980: =
Line 2980: -
Line 2980: ID = ESRCH
Line 2980: ;
Line 2981: ID = p
Line 2981: =
Line 2981: ID = find_process_by_pid
Line 2981: (
Line 2981: ID = pid
Line 2981: )
Line 2981: ;
Line 2982: if
Line 2982: (
Line 2982: !
Line 2982: ID = p
Line 2982: )
Line 2983: ID = goto
Line 2983: ID = out_unlock
Line 2983: ;
Line 2985: ID = retval
Line 2985: =
Line 2985: INTCON = 0
Line 2985: ;
Line 2986: ID = cpus_and
Line 2986: (
Line 2986: ID = mask
Line 2986: ,
Line 2986: ID = p
Line 2986: -
Line 2986: >
Line 2986: ID = cpus_allowed
Line 2986: ,
Line 2986: ID = cpu_possible_map
Line 2986: )
Line 2986: ;
Line 2988: ID = out_unlock
Line 2988: Unrecognized token: 58
Line 2989: ID = read_unlock
Line 2989: (
Line 2989: Unrecognized token: 38
Line 2989: ID = tasklist_lock
Line 2989: )
Line 2989: ;
Line 2990: ID = unlock_cpu_hotplug
Line 2990: (
Line 2990: )
Line 2990: ;
Line 2991: if
Line 2991: (
Line 2991: ID = retval
Line 2991: )
Line 2992: return
Line 2992: ID = retval
Line 2992: ;
Line 2993: if
Line 2993: (
Line 2993: ID = copy_to_user
Line 2993: (
Line 2993: ID = user_mask_ptr
Line 2993: ,
Line 2993: Unrecognized token: 38
Line 2993: ID = mask
Line 2993: ,
Line 2993: ID = real_len
Line 2993: )
Line 2993: )
Line 2994: return
Line 2994: -
Line 2994: ID = EFAULT
Line 2994: ;
Line 2995: return
Line 2995: ID = real_len
Line 2995: ;
Line 2996: }
Line 3005: ID = asmlinkage
Line 3005: ID = long
Line 3005: ID = sys_sched_yield
Line 3005: (
Line 3005: void
Line 3005: )
Line 3006: {
Line 3007: ID = runqueue_t
Line 3007: *
Line 3007: ID = rq
Line 3007: =
Line 3007: ID = this_rq_lock
Line 3007: (
Line 3007: )
Line 3007: ;
Line 3008: ID = prio_array_t
Line 3008: *
Line 3008: ID = array
Line 3008: =
Line 3008: ID = current
Line 3008: -
Line 3008: >
Line 3008: ID = array
Line 3008: ;
Line 3009: ID = prio_array_t
Line 3009: *
Line 3009: ID = target
Line 3009: =
Line 3009: ID = rq
Line 3009: -
Line 3009: >
Line 3009: ID = expired
Line 3009: ;
Line 3018: if
Line 3018: (
Line 3018: ID = unlikely
Line 3018: (
Line 3018: ID = rt_task
Line 3018: (
Line 3018: ID = current
Line 3018: )
Line 3018: )
Line 3018: )
Line 3019: ID = target
Line 3019: =
Line 3019: ID = rq
Line 3019: -
Line 3019: >
Line 3019: ID = active
Line 3019: ;
Line 3021: ID = dequeue_task
Line 3021: (
Line 3021: ID = current
Line 3021: ,
Line 3021: ID = array
Line 3021: )
Line 3021: ;
Line 3022: ID = enqueue_task
Line 3022: (
Line 3022: ID = current
Line 3022: ,
Line 3022: ID = target
Line 3022: )
Line 3022: ;
Line 3028: Unrecognized token: 95
Line 3028: ID = raw_spin_unlock
Line 3028: (
Line 3028: Unrecognized token: 38
Line 3028: ID = rq
Line 3028: -
Line 3028: >
Line 3028: ID = lock
Line 3028: )
Line 3028: ;
Line 3029: ID = preempt_enable_no_resched
Line 3029: (
Line 3029: )
Line 3029: ;
Line 3031: ID = schedule
Line 3031: (
Line 3031: )
Line 3031: ;
Line 3033: return
Line 3033: INTCON = 0
Line 3033: ;
Line 3034: }
Line 3036: void
Line 3036: Unrecognized token: 95
Line 3036: Unrecognized token: 95
Line 3036: ID = sched
Line 3036: Unrecognized token: 95
Line 3036: Unrecognized token: 95
Line 3036: ID = cond_resched
Line 3036: (
Line 3036: void
Line 3036: )
Line 3037: {
Line 3038: ID = set_current_state
Line 3038: (
Line 3038: ID = TASK_RUNNING
Line 3038: )
Line 3038: ;
Line 3039: ID = schedule
Line 3039: (
Line 3039: )
Line 3039: ;
Line 3040: }
Line 3042: ID = EXPORT_SYMBOL
Line 3042: (
Line 3042: Unrecognized token: 95
Line 3042: Unrecognized token: 95
Line 3042: ID = cond_resched
Line 3042: )
Line 3042: ;
Line 3050: void
Line 3050: Unrecognized token: 95
Line 3050: Unrecognized token: 95
Line 3050: ID = sched
Line 3050: ID = yield
Line 3050: (
Line 3050: void
Line 3050: )
Line 3051: {
Line 3052: ID = set_current_state
Line 3052: (
Line 3052: ID = TASK_RUNNING
Line 3052: )
Line 3052: ;
Line 3053: ID = sys_sched_yield
Line 3053: (
Line 3053: )
Line 3053: ;
Line 3054: }
Line 3056: ID = EXPORT_SYMBOL
Line 3056: (
Line 3056: ID = yield
Line 3056: )
Line 3056: ;
Line 3065: void
Line 3065: Unrecognized token: 95
Line 3065: Unrecognized token: 95
Line 3065: ID = sched
Line 3065: ID = io_schedule
Line 3065: (
Line 3065: void
Line 3065: )
Line 3066: {
Line 3067: ID = struct
Line 3067: ID = runqueue
Line 3067: *
Line 3067: ID = rq
Line 3067: =
Line 3067: ID = this_rq
Line 3067: (
Line 3067: )
Line 3067: ;
Line 3069: ID = atomic_inc
Line 3069: (
Line 3069: Unrecognized token: 38
Line 3069: ID = rq
Line 3069: -
Line 3069: >
Line 3069: ID = nr_iowait
Line 3069: )
Line 3069: ;
Line 3070: ID = schedule
Line 3070: (
Line 3070: )
Line 3070: ;
Line 3071: ID = atomic_dec
Line 3071: (
Line 3071: Unrecognized token: 38
Line 3071: ID = rq
Line 3071: -
Line 3071: >
Line 3071: ID = nr_iowait
Line 3071: )
Line 3071: ;
Line 3072: }
Line 3074: ID = EXPORT_SYMBOL
Line 3074: (
Line 3074: ID = io_schedule
Line 3074: )
Line 3074: ;
Line 3076: ID = long
Line 3076: Unrecognized token: 95
Line 3076: Unrecognized token: 95
Line 3076: ID = sched
Line 3076: ID = io_schedule_timeout
Line 3076: (
Line 3076: ID = long
Line 3076: ID = timeout
Line 3076: )
Line 3077: {
Line 3078: ID = struct
Line 3078: ID = runqueue
Line 3078: *
Line 3078: ID = rq
Line 3078: =
Line 3078: ID = this_rq
Line 3078: (
Line 3078: )
Line 3078: ;
Line 3079: ID = long
Line 3079: ID = ret
Line 3079: ;
Line 3081: ID = atomic_inc
Line 3081: (
Line 3081: Unrecognized token: 38
Line 3081: ID = rq
Line 3081: -
Line 3081: >
Line 3081: ID = nr_iowait
Line 3081: )
Line 3081: ;
Line 3082: ID = ret
Line 3082: =
Line 3082: ID = schedule_timeout
Line 3082: (
Line 3082: ID = timeout
Line 3082: )
Line 3082: ;
Line 3083: ID = atomic_dec
Line 3083: (
Line 3083: Unrecognized token: 38
Line 3083: ID = rq
Line 3083: -
Line 3083: >
Line 3083: ID = nr_iowait
Line 3083: )
Line 3083: ;
Line 3084: return
Line 3084: ID = ret
Line 3084: ;
Line 3085: }
Line 3094: ID = asmlinkage
Line 3094: ID = long
Line 3094: ID = sys_sched_get_priority_max
Line 3094: (
Line 3094: int
Line 3094: ID = policy
Line 3094: )
Line 3095: {
Line 3096: int
Line 3096: ID = ret
Line 3096: =
Line 3096: -
Line 3096: ID = EINVAL
Line 3096: ;
Line 3098: ID = switch
Line 3098: (
Line 3098: ID = policy
Line 3098: )
Line 3098: {
Line 3099: ID = case
Line 3099: ID = SCHED_FIFO
Line 3099: Unrecognized token: 58
Line 3100: ID = case
Line 3100: ID = SCHED_RR
Line 3100: Unrecognized token: 58
Line 3101: ID = ret
Line 3101: =
Line 3101: ID = MAX_USER_RT_PRIO
Line 3101: -
Line 3101: INTCON = 1
Line 3101: ;
Line 3102: ID = break
Line 3102: ;
Line 3103: ID = case
Line 3103: ID = SCHED_NORMAL
Line 3103: Unrecognized token: 58
Line 3104: ID = ret
Line 3104: =
Line 3104: INTCON = 0
Line 3104: ;
Line 3105: ID = break
Line 3105: ;
Line 3106: }
Line 3107: return
Line 3107: ID = ret
Line 3107: ;
Line 3108: }
Line 3117: ID = asmlinkage
Line 3117: ID = long
Line 3117: ID = sys_sched_get_priority_min
Line 3117: (
Line 3117: int
Line 3117: ID = policy
Line 3117: )
Line 3118: {
Line 3119: int
Line 3119: ID = ret
Line 3119: =
Line 3119: -
Line 3119: ID = EINVAL
Line 3119: ;
Line 3121: ID = switch
Line 3121: (
Line 3121: ID = policy
Line 3121: )
Line 3121: {
Line 3122: ID = case
Line 3122: ID = SCHED_FIFO
Line 3122: Unrecognized token: 58
Line 3123: ID = case
Line 3123: ID = SCHED_RR
Line 3123: Unrecognized token: 58
Line 3124: ID = ret
Line 3124: =
Line 3124: INTCON = 1
Line 3124: ;
Line 3125: ID = break
Line 3125: ;
Line 3126: ID = case
Line 3126: ID = SCHED_NORMAL
Line 3126: Unrecognized token: 58
Line 3127: ID = ret
Line 3127: =
Line 3127: INTCON = 0
Line 3127: ;
Line 3128: }
Line 3129: return
Line 3129: ID = ret
Line 3129: ;
Line 3130: }
Line 3140: ID = asmlinkage
Line 3141: ID = long
Line 3141: ID = sys_sched_rr_get_interval
Line 3141: (
Line 3141: ID = pid_t
Line 3141: ID = pid
Line 3141: ,
Line 3141: ID = struct
Line 3141: ID = timespec
Line 3141: Unrecognized token: 95
Line 3141: Unrecognized token: 95
Line 3141: ID = user
Line 3141: *
Line 3141: ID = interval
Line 3141: )
Line 3142: {
Line 3143: int
Line 3143: ID = retval
Line 3143: =
Line 3143: -
Line 3143: ID = EINVAL
Line 3143: ;
Line 3144: ID = struct
Line 3144: ID = timespec
Line 3144: ID = t
Line 3144: ;
Line 3145: ID = task_t
Line 3145: *
Line 3145: ID = p
Line 3145: ;
Line 3147: if
Line 3147: (
Line 3147: ID = pid
Line 3147: <
Line 3147: INTCON = 0
Line 3147: )
Line 3148: ID = goto
Line 3148: ID = out_nounlock
Line 3148: ;
Line 3150: ID = retval
Line 3150: =
Line 3150: -
Line 3150: ID = ESRCH
Line 3150: ;
Line 3151: ID = read_lock
Line 3151: (
Line 3151: Unrecognized token: 38
Line 3151: ID = tasklist_lock
Line 3151: )
Line 3151: ;
Line 3152: ID = p
Line 3152: =
Line 3152: ID = find_process_by_pid
Line 3152: (
Line 3152: ID = pid
Line 3152: )
Line 3152: ;
Line 3153: if
Line 3153: (
Line 3153: !
Line 3153: ID = p
Line 3153: )
Line 3154: ID = goto
Line 3154: ID = out_unlock
Line 3154: ;
Line 3156: ID = retval
Line 3156: =
Line 3156: ID = security_task_getscheduler
Line 3156: (
Line 3156: ID = p
Line 3156: )
Line 3156: ;
Line 3157: if
Line 3157: (
Line 3157: ID = retval
Line 3157: )
Line 3158: ID = goto
Line 3158: ID = out_unlock
Line 3158: ;
Line 3160: ID = jiffies_to_timespec
Line 3160: (
Line 3160: ID = p
Line 3160: -
Line 3160: >
Line 3160: ID = policy
Line 3160: Unrecognized token: 38
Line 3160: ID = SCHED_FIFO
Line 3160: Unrecognized token: 63
Line 3161: INTCON = 0
Line 3161: Unrecognized token: 58
Line 3161: ID = task_timeslice
Line 3161: (
Line 3161: ID = p
Line 3161: )
Line 3161: ,
Line 3161: Unrecognized token: 38
Line 3161: ID = t
Line 3161: )
Line 3161: ;
Line 3162: ID = read_unlock
Line 3162: (
Line 3162: Unrecognized token: 38
Line 3162: ID = tasklist_lock
Line 3162: )
Line 3162: ;
Line 3163: ID = retval
Line 3163: =
Line 3163: ID = copy_to_user
Line 3163: (
Line 3163: ID = interval
Line 3163: ,
Line 3163: Unrecognized token: 38
Line 3163: ID = t
Line 3163: ,
Line 3163: ID = sizeof
Line 3163: (
Line 3163: ID = t
Line 3163: )
Line 3163: )
Line 3163: Unrecognized token: 63
Line 3163: -
Line 3163: ID = EFAULT
Line 3163: Unrecognized token: 58
Line 3163: INTCON = 0
Line 3163: ;
Line 3164: ID = out_nounlock
Line 3164: Unrecognized token: 58
Line 3165: return
Line 3165: ID = retval
Line 3165: ;
Line 3166: ID = out_unlock
Line 3166: Unrecognized token: 58
Line 3167: ID = read_unlock
Line 3167: (
Line 3167: Unrecognized token: 38
Line 3167: ID = tasklist_lock
Line 3167: )
Line 3167: ;
Line 3168: return
Line 3168: ID = retval
Line 3168: ;
Line 3169: }
Line 3171: ID = static
Line 3171: ID = inline
Line 3171: ID = struct
Line 3171: ID = task_struct
Line 3171: *
Line 3171: ID = eldest_child
Line 3171: (
Line 3171: ID = struct
Line 3171: ID = task_struct
Line 3171: *
Line 3171: ID = p
Line 3171: )
Line 3172: {
Line 3173: if
Line 3173: (
Line 3173: ID = list_empty
Line 3173: (
Line 3173: Unrecognized token: 38
Line 3173: ID = p
Line 3173: -
Line 3173: >
Line 3173: ID = children
Line 3173: )
Line 3173: )
Line 3173: return
Line 3173: ID = NULL
Line 3173: ;
Line 3174: return
Line 3174: ID = list_entry
Line 3174: (
Line 3174: ID = p
Line 3174: -
Line 3174: >
Line 3174: ID = children
Line 3174: Unrecognized token: 46
Line 3174: ID = next
Line 3174: ,
Line 3174: ID = struct
Line 3174: ID = task_struct
Line 3174: ,
Line 3174: ID = sibling
Line 3174: )
Line 3174: ;
Line 3175: }
Line 3177: ID = static
Line 3177: ID = inline
Line 3177: ID = struct
Line 3177: ID = task_struct
Line 3177: *
Line 3177: ID = older_sibling
Line 3177: (
Line 3177: ID = struct
Line 3177: ID = task_struct
Line 3177: *
Line 3177: ID = p
Line 3177: )
Line 3178: {
Line 3179: if
Line 3179: (
Line 3179: ID = p
Line 3179: -
Line 3179: >
Line 3179: ID = sibling
Line 3179: Unrecognized token: 46
Line 3179: ID = prev
Line 3179: ==
Line 3179: Unrecognized token: 38
Line 3179: ID = p
Line 3179: -
Line 3179: >
Line 3179: ID = parent
Line 3179: -
Line 3179: >
Line 3179: ID = children
Line 3179: )
Line 3179: return
Line 3179: ID = NULL
Line 3179: ;
Line 3180: return
Line 3180: ID = list_entry
Line 3180: (
Line 3180: ID = p
Line 3180: -
Line 3180: >
Line 3180: ID = sibling
Line 3180: Unrecognized token: 46
Line 3180: ID = prev
Line 3180: ,
Line 3180: ID = struct
Line 3180: ID = task_struct
Line 3180: ,
Line 3180: ID = sibling
Line 3180: )
Line 3180: ;
Line 3181: }
Line 3183: ID = static
Line 3183: ID = inline
Line 3183: ID = struct
Line 3183: ID = task_struct
Line 3183: *
Line 3183: ID = younger_sibling
Line 3183: (
Line 3183: ID = struct
Line 3183: ID = task_struct
Line 3183: *
Line 3183: ID = p
Line 3183: )
Line 3184: {
Line 3185: if
Line 3185: (
Line 3185: ID = p
Line 3185: -
Line 3185: >
Line 3185: ID = sibling
Line 3185: Unrecognized token: 46
Line 3185: ID = next
Line 3185: ==
Line 3185: Unrecognized token: 38
Line 3185: ID = p
Line 3185: -
Line 3185: >
Line 3185: ID = parent
Line 3185: -
Line 3185: >
Line 3185: ID = children
Line 3185: )
Line 3185: return
Line 3185: ID = NULL
Line 3185: ;
Line 3186: return
Line 3186: ID = list_entry
Line 3186: (
Line 3186: ID = p
Line 3186: -
Line 3186: >
Line 3186: ID = sibling
Line 3186: Unrecognized token: 46
Line 3186: ID = next
Line 3186: ,
Line 3186: ID = struct
Line 3186: ID = task_struct
Line 3186: ,
Line 3186: ID = sibling
Line 3186: )
Line 3186: ;
Line 3187: }
Line 3189: ID = static
Line 3189: void
Line 3189: ID = show_task
Line 3189: (
Line 3189: ID = task_t
Line 3189: *
Line 3189: ID = p
Line 3189: )
Line 3190: {
Line 3191: ID = task_t
Line 3191: *
Line 3191: ID = relative
Line 3191: ;
Line 3192: ID = unsigned
Line 3192: ID = state
Line 3192: ;
Line 3193: ID = unsigned
Line 3193: ID = long
Line 3193: ID = free
Line 3193: =
Line 3193: INTCON = 0
Line 3193: ;
Line 3194: ID = static
Line 3194: ID = const
Line 3194: char
Line 3194: *
Line 3194: ID = stat_nam
Line 3194: [
Line 3194: ]
Line 3194: =
Line 3194: {
Line 3194: STRINGCON = "R"
Line 3194: ,
Line 3194: STRINGCON = "S"
Line 3194: ,
Line 3194: STRINGCON = "D"
Line 3194: ,
Line 3194: STRINGCON = "T"
Line 3194: ,
Line 3194: STRINGCON = "Z"
Line 3194: ,
Line 3194: STRINGCON = "W"
Line 3194: }
Line 3194: ;
Line 3196: ID = printk
Line 3196: (
Line 3196: STRINGCON = "%-13.13s "
Line 3196: ,
Line 3196: ID = p
Line 3196: -
Line 3196: >
Line 3196: ID = comm
Line 3196: )
Line 3196: ;
Line 3197: ID = state
Line 3197: =
Line 3197: ID = p
Line 3197: -
Line 3197: >
Line 3197: ID = state
Line 3197: Unrecognized token: 63
Line 3197: Unrecognized token: 95
Line 3197: Unrecognized token: 95
Line 3197: ID = ffs
Line 3197: (
Line 3197: ID = p
Line 3197: -
Line 3197: >
Line 3197: ID = state
Line 3197: )
Line 3197: +
Line 3197: INTCON = 1
Line 3197: Unrecognized token: 58
Line 3197: INTCON = 0
Line 3197: ;
Line 3198: if
Line 3198: (
Line 3198: ID = state
Line 3198: <
Line 3198: ID = ARRAY_SIZE
Line 3198: (
Line 3198: ID = stat_nam
Line 3198: )
Line 3198: )
Line 3199: ID = printk
Line 3199: (
Line 3199: ID = stat_nam
Line 3199: [
Line 3199: ID = state
Line 3199: ]
Line 3199: )
Line 3199: ;
Line 3200: else
Line 3201: ID = printk
Line 3201: (
Line 3201: STRINGCON = "?"
Line 3201: )
Line 3201: ;
Line 3202: Unrecognized token: 35
Line 3202: if
Line 3202: (
Line 3202: ID = BITS_PER_LONG
Line 3202: ==
Line 3202: INTCON = 32
Line 3202: )
Line 3203: if
Line 3203: (
Line 3203: ID = state
Line 3203: ==
Line 3203: ID = TASK_RUNNING
Line 3203: )
Line 3204: ID = printk
Line 3204: (
Line 3204: STRINGCON = " running "
Line 3204: )
Line 3204: ;
Line 3205: else
Line 3206: ID = printk
Line 3206: (
Line 3206: STRINGCON = " %08lX "
Line 3206: ,
Line 3206: ID = thread_saved_pc
Line 3206: (
Line 3206: ID = p
Line 3206: )
Line 3206: )
Line 3206: ;
Line 3207: Unrecognized token: 35
Line 3207: else
Line 3208: if
Line 3208: (
Line 3208: ID = state
Line 3208: ==
Line 3208: ID = TASK_RUNNING
Line 3208: )
Line 3209: ID = printk
Line 3209: (
Line 3209: STRINGCON = "  running task   "
Line 3209: )
Line 3209: ;
Line 3210: else
Line 3211: ID = printk
Line 3211: (
Line 3211: STRINGCON = " %016lx "
Line 3211: ,
Line 3211: ID = thread_saved_pc
Line 3211: (
Line 3211: ID = p
Line 3211: )
Line 3211: )
Line 3211: ;
Line 3212: Unrecognized token: 35
Line 3212: ID = endif
Line 3213: Unrecognized token: 35
Line 3213: ID = ifdef
Line 3213: ID = CONFIG_DEBUG_STACK_USAGE
Line 3214: {
Line 3215: ID = unsigned
Line 3215: ID = long
Line 3215: *
Line 3215: ID = n
Line 3215: =
Line 3215: (
Line 3215: ID = unsigned
Line 3215: ID = long
Line 3215: *
Line 3215: )
Line 3215: (
Line 3215: ID = p
Line 3215: -
Line 3215: >
Line 3215: ID = thread_info
Line 3215: +
Line 3215: INTCON = 1
Line 3215: )
Line 3215: ;
Line 3216: while
Line 3216: (
Line 3216: !
Line 3216: *
Line 3216: ID = n
Line 3216: )
Line 3217: ID = n
Line 3217: +
Line 3217: +
Line 3217: ;
Line 3218: ID = free
Line 3218: =
Line 3218: (
Line 3218: ID = unsigned
Line 3218: ID = long
Line 3218: )
Line 3218: ID = n
Line 3218: -
Line 3218: (
Line 3218: ID = unsigned
Line 3218: ID = long
Line 3218: )
Line 3218: (
Line 3218: ID = p
Line 3218: -
Line 3218: >
Line 3218: ID = thread_info
Line 3218: +
Line 3218: INTCON = 1
Line 3218: )
Line 3218: ;
Line 3219: }
Line 3220: Unrecognized token: 35
Line 3220: ID = endif
Line 3221: ID = printk
Line 3221: (
Line 3221: STRINGCON = "%5lu %5d %6d "
Line 3221: ,
Line 3221: ID = free
Line 3221: ,
Line 3221: ID = p
Line 3221: -
Line 3221: >
Line 3221: ID = pid
Line 3221: ,
Line 3221: ID = p
Line 3221: -
Line 3221: >
Line 3221: ID = parent
Line 3221: -
Line 3221: >
Line 3221: ID = pid
Line 3221: )
Line 3221: ;
Line 3222: if
Line 3222: (
Line 3222: (
Line 3222: ID = relative
Line 3222: =
Line 3222: ID = eldest_child
Line 3222: (
Line 3222: ID = p
Line 3222: )
Line 3222: )
Line 3222: )
Line 3223: ID = printk
Line 3223: (
Line 3223: STRINGCON = "%5d "
Line 3223: ,
Line 3223: ID = relative
Line 3223: -
Line 3223: >
Line 3223: ID = pid
Line 3223: )
Line 3223: ;
Line 3224: else
Line 3225: ID = printk
Line 3225: (
Line 3225: STRINGCON = "      "
Line 3225: )
Line 3225: ;
Line 3226: if
Line 3226: (
Line 3226: (
Line 3226: ID = relative
Line 3226: =
Line 3226: ID = younger_sibling
Line 3226: (
Line 3226: ID = p
Line 3226: )
Line 3226: )
Line 3226: )
Line 3227: ID = printk
Line 3227: (
Line 3227: STRINGCON = "%7d"
Line 3227: ,
Line 3227: ID = relative
Line 3227: -
Line 3227: >
Line 3227: ID = pid
Line 3227: )
Line 3227: ;
Line 3228: else
Line 3229: ID = printk
Line 3229: (
Line 3229: STRINGCON = "       "
Line 3229: )
Line 3229: ;
Line 3230: if
Line 3230: (
Line 3230: (
Line 3230: ID = relative
Line 3230: =
Line 3230: ID = older_sibling
Line 3230: (
Line 3230: ID = p
Line 3230: )
Line 3230: )
Line 3230: )
Line 3231: ID = printk
Line 3231: (
Line 3231: STRINGCON = " %5d"
Line 3231: ,
Line 3231: ID = relative
Line 3231: -
Line 3231: >
Line 3231: ID = pid
Line 3231: )
Line 3231: ;
Line 3232: else
Line 3233: ID = printk
Line 3233: (
Line 3233: STRINGCON = "      "
Line 3233: )
Line 3233: ;
Line 3234: if
Line 3234: (
Line 3234: !
Line 3234: ID = p
Line 3234: -
Line 3234: >
Line 3234: ID = mm
Line 3234: )
Line 3235: ID = printk
Line 3235: (
Line 3235: STRINGCON = " (L-TLB)\n"
Line 3235: )
Line 3235: ;
Line 3236: else
Line 3237: ID = printk
Line 3237: (
Line 3237: STRINGCON = " (NOTLB)\n"
Line 3237: )
Line 3237: ;
Line 3239: if
Line 3239: (
Line 3239: ID = state
Line 3239: !=
Line 3239: ID = TASK_RUNNING
Line 3239: )
Line 3240: ID = show_stack
Line 3240: (
Line 3240: ID = p
Line 3240: ,
Line 3240: ID = NULL
Line 3240: )
Line 3240: ;
Line 3241: }
Line 3243: void
Line 3243: ID = show_state
Line 3243: (
Line 3243: void
Line 3243: )
Line 3244: {
Line 3245: ID = task_t
Line 3245: *
Line 3245: ID = g
Line 3245: ,
Line 3245: *
Line 3245: ID = p
Line 3245: ;
Line 3247: Unrecognized token: 35
Line 3247: if
Line 3247: (
Line 3247: ID = BITS_PER_LONG
Line 3247: ==
Line 3247: INTCON = 32
Line 3247: )
Line 3248: ID = printk
Line 3248: (
Line 3248: STRINGCON = "\n"
Line 3249: STRINGCON = "                                               sibling\n"
Line 3249: )
Line 3249: ;
Line 3250: ID = printk
Line 3250: (
Line 3250: STRINGCON = "  task             PC      pid father child younger older\n"
Line 3250: )
Line 3250: ;
Line 3251: Unrecognized token: 35
Line 3251: else
Line 3252: ID = printk
Line 3252: (
Line 3252: STRINGCON = "\n"
Line 3253: STRINGCON = "                                                       sibling\n"
Line 3253: )
Line 3253: ;
Line 3254: ID = printk
Line 3254: (
Line 3254: STRINGCON = "  task                 PC          pid father child younger older\n"
Line 3254: )
Line 3254: ;
Line 3255: Unrecognized token: 35
Line 3255: ID = endif
Line 3256: ID = read_lock
Line 3256: (
Line 3256: Unrecognized token: 38
Line 3256: ID = tasklist_lock
Line 3256: )
Line 3256: ;
Line 3257: ID = do_each_thread
Line 3257: (
Line 3257: ID = g
Line 3257: ,
Line 3257: ID = p
Line 3257: )
Line 3257: {
Line 3262: ID = touch_nmi_watchdog
Line 3262: (
Line 3262: )
Line 3262: ;
Line 3263: ID = show_task
Line 3263: (
Line 3263: ID = p
Line 3263: )
Line 3263: ;
Line 3264: }
Line 3264: ID = while_each_thread
Line 3264: (
Line 3264: ID = g
Line 3264: ,
Line 3264: ID = p
Line 3264: )
Line 3264: ;
Line 3266: ID = read_unlock
Line 3266: (
Line 3266: Unrecognized token: 38
Line 3266: ID = tasklist_lock
Line 3266: )
Line 3266: ;
Line 3267: }
Line 3269: void
Line 3269: Unrecognized token: 95
Line 3269: Unrecognized token: 95
Line 3269: ID = devinit
Line 3269: ID = init_idle
Line 3269: (
Line 3269: ID = task_t
Line 3269: *
Line 3269: ID = idle
Line 3269: ,
Line 3269: int
Line 3269: ID = cpu
Line 3269: )
Line 3270: {
Line 3271: ID = runqueue_t
Line 3271: *
Line 3271: ID = idle_rq
Line 3271: =
Line 3271: ID = cpu_rq
Line 3271: (
Line 3271: ID = cpu
Line 3271: )
Line 3271: ,
Line 3271: *
Line 3271: ID = rq
Line 3271: =
Line 3271: ID = cpu_rq
Line 3271: (
Line 3271: ID = task_cpu
Line 3271: (
Line 3271: ID = idle
Line 3271: )
Line 3271: )
Line 3271: ;
Line 3272: ID = unsigned
Line 3272: ID = long
Line 3272: ID = flags
Line 3272: ;
Line 3274: ID = local_irq_save
Line 3274: (
Line 3274: ID = flags
Line 3274: )
Line 3274: ;
Line 3275: ID = double_rq_lock
Line 3275: (
Line 3275: ID = idle_rq
Line 3275: ,
Line 3275: ID = rq
Line 3275: )
Line 3275: ;
Line 3277: ID = idle_rq
Line 3277: -
Line 3277: >
Line 3277: ID = curr
Line 3277: =
Line 3277: ID = idle_rq
Line 3277: -
Line 3277: >
Line 3277: ID = idle
Line 3277: =
Line 3277: ID = idle
Line 3277: ;
Line 3278: ID = deactivate_task
Line 3278: (
Line 3278: ID = idle
Line 3278: ,
Line 3278: ID = rq
Line 3278: )
Line 3278: ;
Line 3279: ID = idle
Line 3279: -
Line 3279: >
Line 3279: ID = array
Line 3279: =
Line 3279: ID = NULL
Line 3279: ;
Line 3280: ID = idle
Line 3280: -
Line 3280: >
Line 3280: ID = prio
Line 3280: =
Line 3280: ID = MAX_PRIO
Line 3280: ;
Line 3281: ID = idle
Line 3281: -
Line 3281: >
Line 3281: ID = state
Line 3281: =
Line 3281: ID = TASK_RUNNING
Line 3281: ;
Line 3282: ID = set_task_cpu
Line 3282: (
Line 3282: ID = idle
Line 3282: ,
Line 3282: ID = cpu
Line 3282: )
Line 3282: ;
Line 3283: ID = double_rq_unlock
Line 3283: (
Line 3283: ID = idle_rq
Line 3283: ,
Line 3283: ID = rq
Line 3283: )
Line 3283: ;
Line 3284: ID = set_tsk_need_resched
Line 3284: (
Line 3284: ID = idle
Line 3284: )
Line 3284: ;
Line 3285: ID = local_irq_restore
Line 3285: (
Line 3285: ID = flags
Line 3285: )
Line 3285: ;
Line 3288: Unrecognized token: 35
Line 3288: ID = ifdef
Line 3288: ID = CONFIG_PREEMPT
Line 3289: ID = idle
Line 3289: -
Line 3289: >
Line 3289: ID = thread_info
Line 3289: -
Line 3289: >
Line 3289: ID = preempt_count
Line 3289: =
Line 3289: (
Line 3289: ID = idle
Line 3289: -
Line 3289: >
Line 3289: ID = lock_depth
Line 3289: >=
Line 3289: INTCON = 0
Line 3289: )
Line 3289: ;
Line 3290: Unrecognized token: 35
Line 3290: else
Line 3291: ID = idle
Line 3291: -
Line 3291: >
Line 3291: ID = thread_info
Line 3291: -
Line 3291: >
Line 3291: ID = preempt_count
Line 3291: =
Line 3291: INTCON = 0
Line 3291: ;
Line 3292: Unrecognized token: 35
Line 3292: ID = endif
Line 3293: }
Line 3302: ID = cpumask_t
Line 3302: ID = nohz_cpu_mask
Line 3302: =
Line 3302: ID = CPU_MASK_NONE
Line 3302: ;
Line 3304: Unrecognized token: 35
Line 3304: ID = ifdef
Line 3304: ID = CONFIG_SMP
Line 3330: int
Line 3330: ID = set_cpus_allowed
Line 3330: (
Line 3330: ID = task_t
Line 3330: *
Line 3330: ID = p
Line 3330: ,
Line 3330: ID = cpumask_t
Line 3330: ID = new_mask
Line 3330: )
Line 3331: {
Line 3332: ID = unsigned
Line 3332: ID = long
Line 3332: ID = flags
Line 3332: ;
Line 3333: int
Line 3333: ID = ret
Line 3333: =
Line 3333: INTCON = 0
Line 3333: ;
Line 3334: ID = migration_req_t
Line 3334: ID = req
Line 3334: ;
Line 3335: ID = runqueue_t
Line 3335: *
Line 3335: ID = rq
Line 3335: ;
Line 3337: ID = rq
Line 3337: =
Line 3337: ID = task_rq_lock
Line 3337: (
Line 3337: ID = p
Line 3337: ,
Line 3337: Unrecognized token: 38
Line 3337: ID = flags
Line 3337: )
Line 3337: ;
Line 3338: if
Line 3338: (
Line 3338: !
Line 3338: ID = cpus_intersects
Line 3338: (
Line 3338: ID = new_mask
Line 3338: ,
Line 3338: ID = cpu_online_map
Line 3338: )
Line 3338: )
Line 3338: {
Line 3339: ID = ret
Line 3339: =
Line 3339: -
Line 3339: ID = EINVAL
Line 3339: ;
Line 3340: ID = goto
Line 3340: ID = out
Line 3340: ;
Line 3341: }
Line 3343: ID = p
Line 3343: -
Line 3343: >
Line 3343: ID = cpus_allowed
Line 3343: =
Line 3343: ID = new_mask
Line 3343: ;
Line 3345: if
Line 3345: (
Line 3345: ID = cpu_isset
Line 3345: (
Line 3345: ID = task_cpu
Line 3345: (
Line 3345: ID = p
Line 3345: )
Line 3345: ,
Line 3345: ID = new_mask
Line 3345: )
Line 3345: )
Line 3346: ID = goto
Line 3346: ID = out
Line 3346: ;
Line 3348: if
Line 3348: (
Line 3348: ID = migrate_task
Line 3348: (
Line 3348: ID = p
Line 3348: ,
Line 3348: ID = any_online_cpu
Line 3348: (
Line 3348: ID = new_mask
Line 3348: )
Line 3348: ,
Line 3348: Unrecognized token: 38
Line 3348: ID = req
Line 3348: )
Line 3348: )
Line 3348: {
Line 3350: ID = task_rq_unlock
Line 3350: (
Line 3350: ID = rq
Line 3350: ,
Line 3350: Unrecognized token: 38
Line 3350: ID = flags
Line 3350: )
Line 3350: ;
Line 3351: ID = wake_up_process
Line 3351: (
Line 3351: ID = rq
Line 3351: -
Line 3351: >
Line 3351: ID = migration_thread
Line 3351: )
Line 3351: ;
Line 3352: ID = wait_for_completion
Line 3352: (
Line 3352: Unrecognized token: 38
Line 3352: ID = req
Line 3352: Unrecognized token: 46
Line 3352: ID = done
Line 3352: )
Line 3352: ;
Line 3353: ID = tlb_migrate_finish
Line 3353: (
Line 3353: ID = p
Line 3353: -
Line 3353: >
Line 3353: ID = mm
Line 3353: )
Line 3353: ;
Line 3354: return
Line 3354: INTCON = 0
Line 3354: ;
Line 3355: }
Line 3356: ID = out
Line 3356: Unrecognized token: 58
Line 3357: ID = task_rq_unlock
Line 3357: (
Line 3357: ID = rq
Line 3357: ,
Line 3357: Unrecognized token: 38
Line 3357: ID = flags
Line 3357: )
Line 3357: ;
Line 3358: return
Line 3358: ID = ret
Line 3358: ;
Line 3359: }
Line 3361: ID = EXPORT_SYMBOL_GPL
Line 3361: (
Line 3361: ID = set_cpus_allowed
Line 3361: )
Line 3361: ;
Line 3372: ID = static
Line 3372: void
Line 3372: Unrecognized token: 95
Line 3372: Unrecognized token: 95
Line 3372: ID = migrate_task
Line 3372: (
Line 3372: ID = struct
Line 3372: ID = task_struct
Line 3372: *
Line 3372: ID = p
Line 3372: ,
Line 3372: int
Line 3372: ID = src_cpu
Line 3372: ,
Line 3372: int
Line 3372: ID = dest_cpu
Line 3372: )
Line 3373: {
Line 3374: ID = runqueue_t
Line 3374: *
Line 3374: ID = rq_dest
Line 3374: ,
Line 3374: *
Line 3374: ID = rq_src
Line 3374: ;
Line 3376: if
Line 3376: (
Line 3376: ID = unlikely
Line 3376: (
Line 3376: ID = cpu_is_offline
Line 3376: (
Line 3376: ID = dest_cpu
Line 3376: )
Line 3376: )
Line 3376: )
Line 3377: return
Line 3377: ;
Line 3379: ID = rq_src
Line 3379: =
Line 3379: ID = cpu_rq
Line 3379: (
Line 3379: ID = src_cpu
Line 3379: )
Line 3379: ;
Line 3380: ID = rq_dest
Line 3380: =
Line 3380: ID = cpu_rq
Line 3380: (
Line 3380: ID = dest_cpu
Line 3380: )
Line 3380: ;
Line 3382: ID = double_rq_lock
Line 3382: (
Line 3382: ID = rq_src
Line 3382: ,
Line 3382: ID = rq_dest
Line 3382: )
Line 3382: ;
Line 3384: if
Line 3384: (
Line 3384: ID = task_cpu
Line 3384: (
Line 3384: ID = p
Line 3384: )
Line 3384: !=
Line 3384: ID = src_cpu
Line 3384: )
Line 3385: ID = goto
Line 3385: ID = out
Line 3385: ;
Line 3387: if
Line 3387: (
Line 3387: !
Line 3387: ID = cpu_isset
Line 3387: (
Line 3387: ID = dest_cpu
Line 3387: ,
Line 3387: ID = p
Line 3387: -
Line 3387: >
Line 3387: ID = cpus_allowed
Line 3387: )
Line 3387: )
Line 3388: ID = goto
Line 3388: ID = out
Line 3388: ;
Line 3390: ID = set_task_cpu
Line 3390: (
Line 3390: ID = p
Line 3390: ,
Line 3390: ID = dest_cpu
Line 3390: )
Line 3390: ;
Line 3391: if
Line 3391: (
Line 3391: ID = p
Line 3391: -
Line 3391: >
Line 3391: ID = array
Line 3391: )
Line 3391: {
Line 3398: ID = p
Line 3398: -
Line 3398: >
Line 3398: ID = timestamp
Line 3398: =
Line 3398: ID = p
Line 3398: -
Line 3398: >
Line 3398: ID = timestamp
Line 3398: -
Line 3398: ID = rq_src
Line 3398: -
Line 3398: >
Line 3398: ID = timestamp_last_tick
Line 3399: +
Line 3399: ID = rq_dest
Line 3399: -
Line 3399: >
Line 3399: ID = timestamp_last_tick
Line 3399: ;
Line 3400: ID = deactivate_task
Line 3400: (
Line 3400: ID = p
Line 3400: ,
Line 3400: ID = rq_src
Line 3400: )
Line 3400: ;
Line 3401: ID = activate_task
Line 3401: (
Line 3401: ID = p
Line 3401: ,
Line 3401: ID = rq_dest
Line 3401: ,
Line 3401: INTCON = 0
Line 3401: )
Line 3401: ;
Line 3402: if
Line 3402: (
Line 3402: ID = TASK_PREEMPTS_CURR
Line 3402: (
Line 3402: ID = p
Line 3402: ,
Line 3402: ID = rq_dest
Line 3402: )
Line 3402: )
Line 3403: ID = resched_task
Line 3403: (
Line 3403: ID = rq_dest
Line 3403: -
Line 3403: >
Line 3403: ID = curr
Line 3403: )
Line 3403: ;
Line 3404: }
Line 3406: ID = out
Line 3406: Unrecognized token: 58
Line 3407: ID = double_rq_unlock
Line 3407: (
Line 3407: ID = rq_src
Line 3407: ,
Line 3407: ID = rq_dest
Line 3407: )
Line 3407: ;
Line 3408: }
Line 3415: ID = static
Line 3415: int
Line 3415: ID = migration_thread
Line 3415: (
Line 3415: void
Line 3415: *
Line 3415: ID = data
Line 3415: )
Line 3416: {
Line 3417: ID = runqueue_t
Line 3417: *
Line 3417: ID = rq
Line 3417: ;
Line 3418: int
Line 3418: ID = cpu
Line 3418: =
Line 3418: (
Line 3418: ID = long
Line 3418: )
Line 3418: ID = data
Line 3418: ;
Line 3420: ID = rq
Line 3420: =
Line 3420: ID = cpu_rq
Line 3420: (
Line 3420: ID = cpu
Line 3420: )
Line 3420: ;
Line 3421: ID = BUG_ON
Line 3421: (
Line 3421: ID = rq
Line 3421: -
Line 3421: >
Line 3421: ID = migration_thread
Line 3421: !=
Line 3421: ID = current
Line 3421: )
Line 3421: ;
Line 3423: ID = set_current_state
Line 3423: (
Line 3423: ID = TASK_INTERRUPTIBLE
Line 3423: )
Line 3423: ;
Line 3424: while
Line 3424: (
Line 3424: !
Line 3424: ID = kthread_should_stop
Line 3424: (
Line 3424: )
Line 3424: )
Line 3424: {
Line 3425: ID = struct
Line 3425: ID = list_head
Line 3425: *
Line 3425: ID = head
Line 3425: ;
Line 3426: ID = migration_req_t
Line 3426: *
Line 3426: ID = req
Line 3426: ;
Line 3428: if
Line 3428: (
Line 3428: ID = current
Line 3428: -
Line 3428: >
Line 3428: ID = flags
Line 3428: Unrecognized token: 38
Line 3428: ID = PF_FREEZE
Line 3428: )
Line 3429: ID = refrigerator
Line 3429: (
Line 3429: ID = PF_FREEZE
Line 3429: )
Line 3429: ;
Line 3431: ID = spin_lock_irq
Line 3431: (
Line 3431: Unrecognized token: 38
Line 3431: ID = rq
Line 3431: -
Line 3431: >
Line 3431: ID = lock
Line 3431: )
Line 3431: ;
Line 3433: if
Line 3433: (
Line 3433: ID = cpu_is_offline
Line 3433: (
Line 3433: ID = cpu
Line 3433: )
Line 3433: )
Line 3433: {
Line 3434: ID = spin_unlock_irq
Line 3434: (
Line 3434: Unrecognized token: 38
Line 3434: ID = rq
Line 3434: -
Line 3434: >
Line 3434: ID = lock
Line 3434: )
Line 3434: ;
Line 3435: ID = goto
Line 3435: ID = wait_to_die
Line 3435: ;
Line 3436: }
Line 3438: if
Line 3438: (
Line 3438: ID = rq
Line 3438: -
Line 3438: >
Line 3438: ID = active_balance
Line 3438: )
Line 3438: {
Line 3439: ID = active_load_balance
Line 3439: (
Line 3439: ID = rq
Line 3439: ,
Line 3439: ID = cpu
Line 3439: )
Line 3439: ;
Line 3440: ID = rq
Line 3440: -
Line 3440: >
Line 3440: ID = active_balance
Line 3440: =
Line 3440: INTCON = 0
Line 3440: ;
Line 3441: }
Line 3443: ID = head
Line 3443: =
Line 3443: Unrecognized token: 38
Line 3443: ID = rq
Line 3443: -
Line 3443: >
Line 3443: ID = migration_queue
Line 3443: ;
Line 3445: if
Line 3445: (
Line 3445: ID = list_empty
Line 3445: (
Line 3445: ID = head
Line 3445: )
Line 3445: )
Line 3445: {
Line 3446: ID = spin_unlock_irq
Line 3446: (
Line 3446: Unrecognized token: 38
Line 3446: ID = rq
Line 3446: -
Line 3446: >
Line 3446: ID = lock
Line 3446: )
Line 3446: ;
Line 3447: ID = schedule
Line 3447: (
Line 3447: )
Line 3447: ;
Line 3448: ID = set_current_state
Line 3448: (
Line 3448: ID = TASK_INTERRUPTIBLE
Line 3448: )
Line 3448: ;
Line 3449: ID = continue
Line 3449: ;
Line 3450: }
Line 3451: ID = req
Line 3451: =
Line 3451: ID = list_entry
Line 3451: (
Line 3451: ID = head
Line 3451: -
Line 3451: >
Line 3451: ID = next
Line 3451: ,
Line 3451: ID = migration_req_t
Line 3451: ,
Line 3451: ID = list
Line 3451: )
Line 3451: ;
Line 3452: ID = list_del_init
Line 3452: (
Line 3452: ID = head
Line 3452: -
Line 3452: >
Line 3452: ID = next
Line 3452: )
Line 3452: ;
Line 3454: if
Line 3454: (
Line 3454: ID = req
Line 3454: -
Line 3454: >
Line 3454: ID = type
Line 3454: ==
Line 3454: ID = REQ_MOVE_TASK
Line 3454: )
Line 3454: {
Line 3455: ID = spin_unlock
Line 3455: (
Line 3455: Unrecognized token: 38
Line 3455: ID = rq
Line 3455: -
Line 3455: >
Line 3455: ID = lock
Line 3455: )
Line 3455: ;
Line 3456: Unrecognized token: 95
Line 3456: Unrecognized token: 95
Line 3456: ID = migrate_task
Line 3456: (
Line 3456: ID = req
Line 3456: -
Line 3456: >
Line 3456: ID = task
Line 3456: ,
Line 3456: ID = smp_processor_id
Line 3456: (
Line 3456: )
Line 3456: ,
Line 3457: ID = req
Line 3457: -
Line 3457: >
Line 3457: ID = dest_cpu
Line 3457: )
Line 3457: ;
Line 3458: ID = local_irq_enable
Line 3458: (
Line 3458: )
Line 3458: ;
Line 3459: }
Line 3459: else
Line 3459: if
Line 3459: (
Line 3459: ID = req
Line 3459: -
Line 3459: >
Line 3459: ID = type
Line 3459: ==
Line 3459: ID = REQ_SET_DOMAIN
Line 3459: )
Line 3459: {
Line 3460: ID = rq
Line 3460: -
Line 3460: >
Line 3460: ID = sd
Line 3460: =
Line 3460: ID = req
Line 3460: -
Line 3460: >
Line 3460: ID = sd
Line 3460: ;
Line 3461: ID = spin_unlock_irq
Line 3461: (
Line 3461: Unrecognized token: 38
Line 3461: ID = rq
Line 3461: -
Line 3461: >
Line 3461: ID = lock
Line 3461: )
Line 3461: ;
Line 3462: }
Line 3462: else
Line 3462: {
Line 3463: ID = spin_unlock_irq
Line 3463: (
Line 3463: Unrecognized token: 38
Line 3463: ID = rq
Line 3463: -
Line 3463: >
Line 3463: ID = lock
Line 3463: )
Line 3463: ;
Line 3464: ID = WARN_ON
Line 3464: (
Line 3464: INTCON = 1
Line 3464: )
Line 3464: ;
Line 3465: }
Line 3467: ID = complete
Line 3467: (
Line 3467: Unrecognized token: 38
Line 3467: ID = req
Line 3467: -
Line 3467: >
Line 3467: ID = done
Line 3467: )
Line 3467: ;
Line 3468: }
Line 3469: Unrecognized token: 95
Line 3469: Unrecognized token: 95
Line 3469: ID = set_current_state
Line 3469: (
Line 3469: ID = TASK_RUNNING
Line 3469: )
Line 3469: ;
Line 3470: return
Line 3470: INTCON = 0
Line 3470: ;
Line 3472: ID = wait_to_die
Line 3472: Unrecognized token: 58
Line 3474: ID = set_current_state
Line 3474: (
Line 3474: ID = TASK_INTERRUPTIBLE
Line 3474: )
Line 3474: ;
Line 3475: while
Line 3475: (
Line 3475: !
Line 3475: ID = kthread_should_stop
Line 3475: (
Line 3475: )
Line 3475: )
Line 3475: {
Line 3476: ID = schedule
Line 3476: (
Line 3476: )
Line 3476: ;
Line 3477: ID = set_current_state
Line 3477: (
Line 3477: ID = TASK_INTERRUPTIBLE
Line 3477: )
Line 3477: ;
Line 3478: }
Line 3479: Unrecognized token: 95
Line 3479: Unrecognized token: 95
Line 3479: ID = set_current_state
Line 3479: (
Line 3479: ID = TASK_RUNNING
Line 3479: )
Line 3479: ;
Line 3480: return
Line 3480: INTCON = 0
Line 3480: ;
Line 3481: }
Line 3483: Unrecognized token: 35
Line 3483: ID = ifdef
Line 3483: ID = CONFIG_HOTPLUG_CPU
Line 3485: ID = static
Line 3485: void
Line 3485: ID = migrate_all_tasks
Line 3485: (
Line 3485: int
Line 3485: ID = src_cpu
Line 3485: )
Line 3486: {
Line 3487: ID = struct
Line 3487: ID = task_struct
Line 3487: *
Line 3487: ID = tsk
Line 3487: ,
Line 3487: *
Line 3487: ID = t
Line 3487: ;
Line 3488: int
Line 3488: ID = dest_cpu
Line 3488: ;
Line 3489: ID = unsigned
Line 3489: int
Line 3489: ID = node
Line 3489: ;
Line 3491: ID = write_lock_irq
Line 3491: (
Line 3491: Unrecognized token: 38
Line 3491: ID = tasklist_lock
Line 3491: )
Line 3491: ;
Line 3494: ID = node
Line 3494: =
Line 3494: ID = cpu_to_node
Line 3494: (
Line 3494: ID = src_cpu
Line 3494: )
Line 3494: ;
Line 3496: ID = do_each_thread
Line 3496: (
Line 3496: ID = t
Line 3496: ,
Line 3496: ID = tsk
Line 3496: )
Line 3496: {
Line 3497: ID = cpumask_t
Line 3497: ID = mask
Line 3497: ;
Line 3498: if
Line 3498: (
Line 3498: ID = tsk
Line 3498: ==
Line 3498: ID = current
Line 3498: )
Line 3499: ID = continue
Line 3499: ;
Line 3501: if
Line 3501: (
Line 3501: ID = task_cpu
Line 3501: (
Line 3501: ID = tsk
Line 3501: )
Line 3501: !=
Line 3501: ID = src_cpu
Line 3501: )
Line 3502: ID = continue
Line 3502: ;
Line 3508: ID = mask
Line 3508: =
Line 3508: ID = node_to_cpumask
Line 3508: (
Line 3508: ID = node
Line 3508: )
Line 3508: ;
Line 3509: ID = cpus_and
Line 3509: (
Line 3509: ID = mask
Line 3509: ,
Line 3509: ID = mask
Line 3509: ,
Line 3509: ID = tsk
Line 3509: -
Line 3509: >
Line 3509: ID = cpus_allowed
Line 3509: )
Line 3509: ;
Line 3510: ID = dest_cpu
Line 3510: =
Line 3510: ID = any_online_cpu
Line 3510: (
Line 3510: ID = mask
Line 3510: )
Line 3510: ;
Line 3511: if
Line 3511: (
Line 3511: ID = dest_cpu
Line 3511: ==
Line 3511: ID = NR_CPUS
Line 3511: )
Line 3512: ID = dest_cpu
Line 3512: =
Line 3512: ID = any_online_cpu
Line 3512: (
Line 3512: ID = tsk
Line 3512: -
Line 3512: >
Line 3512: ID = cpus_allowed
Line 3512: )
Line 3512: ;
Line 3513: if
Line 3513: (
Line 3513: ID = dest_cpu
Line 3513: ==
Line 3513: ID = NR_CPUS
Line 3513: )
Line 3513: {
Line 3514: ID = cpus_setall
Line 3514: (
Line 3514: ID = tsk
Line 3514: -
Line 3514: >
Line 3514: ID = cpus_allowed
Line 3514: )
Line 3514: ;
Line 3515: ID = dest_cpu
Line 3515: =
Line 3515: ID = any_online_cpu
Line 3515: (
Line 3515: ID = tsk
Line 3515: -
Line 3515: >
Line 3515: ID = cpus_allowed
Line 3515: )
Line 3515: ;
Line 3520: if
Line 3520: (
Line 3520: ID = tsk
Line 3520: -
Line 3520: >
Line 3520: ID = mm
Line 3520: &&
Line 3520: ID = printk_ratelimit
Line 3520: (
Line 3520: )
Line 3520: )
Line 3521: ID = printk
Line 3521: (
Line 3521: ID = KERN_INFO
Line 3521: STRINGCON = "process %d (%s) no "
Line 3522: STRINGCON = "longer affine to cpu%d\n"
Line 3522: ,
Line 3523: ID = tsk
Line 3523: -
Line 3523: >
Line 3523: ID = pid
Line 3523: ,
Line 3523: ID = tsk
Line 3523: -
Line 3523: >
Line 3523: ID = comm
Line 3523: ,
Line 3523: ID = src_cpu
Line 3523: )
Line 3523: ;
Line 3524: }
Line 3526: Unrecognized token: 95
Line 3526: Unrecognized token: 95
Line 3526: ID = migrate_task
Line 3526: (
Line 3526: ID = tsk
Line 3526: ,
Line 3526: ID = src_cpu
Line 3526: ,
Line 3526: ID = dest_cpu
Line 3526: )
Line 3526: ;
Line 3527: }
Line 3527: ID = while_each_thread
Line 3527: (
Line 3527: ID = t
Line 3527: ,
Line 3527: ID = tsk
Line 3527: )
Line 3527: ;
Line 3529: ID = write_unlock_irq
Line 3529: (
Line 3529: Unrecognized token: 38
Line 3529: ID = tasklist_lock
Line 3529: )
Line 3529: ;
Line 3530: }
Line 3536: void
Line 3536: ID = sched_idle_next
Line 3536: (
Line 3536: void
Line 3536: )
Line 3537: {
Line 3538: int
Line 3538: ID = cpu
Line 3538: =
Line 3538: ID = smp_processor_id
Line 3538: (
Line 3538: )
Line 3538: ;
Line 3539: ID = runqueue_t
Line 3539: *
Line 3539: ID = rq
Line 3539: =
Line 3539: ID = this_rq
Line 3539: (
Line 3539: )
Line 3539: ;
Line 3540: ID = struct
Line 3540: ID = task_struct
Line 3540: *
Line 3540: ID = p
Line 3540: =
Line 3540: ID = rq
Line 3540: -
Line 3540: >
Line 3540: ID = idle
Line 3540: ;
Line 3541: ID = unsigned
Line 3541: ID = long
Line 3541: ID = flags
Line 3541: ;
Line 3544: ID = BUG_ON
Line 3544: (
Line 3544: ID = cpu_online
Line 3544: (
Line 3544: ID = cpu
Line 3544: )
Line 3544: )
Line 3544: ;
Line 3549: ID = spin_lock_irqsave
Line 3549: (
Line 3549: Unrecognized token: 38
Line 3549: ID = rq
Line 3549: -
Line 3549: >
Line 3549: ID = lock
Line 3549: ,
Line 3549: ID = flags
Line 3549: )
Line 3549: ;
Line 3551: Unrecognized token: 95
Line 3551: Unrecognized token: 95
Line 3551: ID = setscheduler
Line 3551: (
Line 3551: ID = p
Line 3551: ,
Line 3551: ID = SCHED_FIFO
Line 3551: ,
Line 3551: ID = MAX_RT_PRIO
Line 3551: -
Line 3551: INTCON = 1
Line 3551: )
Line 3551: ;
Line 3553: Unrecognized token: 95
Line 3553: Unrecognized token: 95
Line 3553: ID = activate_idle_task
Line 3553: (
Line 3553: ID = p
Line 3553: ,
Line 3553: ID = rq
Line 3553: )
Line 3553: ;
Line 3555: ID = spin_unlock_irqrestore
Line 3555: (
Line 3555: Unrecognized token: 38
Line 3555: ID = rq
Line 3555: -
Line 3555: >
Line 3555: ID = lock
Line 3555: ,
Line 3555: ID = flags
Line 3555: )
Line 3555: ;
Line 3556: }
Line 3557: Unrecognized token: 35
Line 3557: ID = endif
Line 3563: ID = static
Line 3563: int
Line 3563: ID = migration_call
Line 3563: (
Line 3563: ID = struct
Line 3563: ID = notifier_block
Line 3563: *
Line 3563: ID = nfb
Line 3563: ,
Line 3563: ID = unsigned
Line 3563: ID = long
Line 3563: ID = action
Line 3563: ,
Line 3564: void
Line 3564: *
Line 3564: ID = hcpu
Line 3564: )
Line 3565: {
Line 3566: int
Line 3566: ID = cpu
Line 3566: =
Line 3566: (
Line 3566: ID = long
Line 3566: )
Line 3566: ID = hcpu
Line 3566: ;
Line 3567: ID = struct
Line 3567: ID = task_struct
Line 3567: *
Line 3567: ID = p
Line 3567: ;
Line 3568: ID = struct
Line 3568: ID = runqueue
Line 3568: *
Line 3568: ID = rq
Line 3568: ;
Line 3569: ID = unsigned
Line 3569: ID = long
Line 3569: ID = flags
Line 3569: ;
Line 3571: ID = switch
Line 3571: (
Line 3571: ID = action
Line 3571: )
Line 3571: {
Line 3572: ID = case
Line 3572: ID = CPU_UP_PREPARE
Line 3572: Unrecognized token: 58
Line 3573: ID = p
Line 3573: =
Line 3573: ID = kthread_create
Line 3573: (
Line 3573: ID = migration_thread
Line 3573: ,
Line 3573: ID = hcpu
Line 3573: ,
Line 3573: STRINGCON = "migration/%d"
Line 3573: ,
Line 3573: ID = cpu
Line 3573: )
Line 3573: ;
Line 3574: if
Line 3574: (
Line 3574: ID = IS_ERR
Line 3574: (
Line 3574: ID = p
Line 3574: )
Line 3574: )
Line 3575: return
Line 3575: ID = NOTIFY_BAD
Line 3575: ;
Line 3576: ID = p
Line 3576: -
Line 3576: >
Line 3576: ID = flags
Line 3576: Unrecognized token: 124
Line 3576: =
Line 3576: ID = PF_NOFREEZE
Line 3576: ;
Line 3577: ID = kthread_bind
Line 3577: (
Line 3577: ID = p
Line 3577: ,
Line 3577: ID = cpu
Line 3577: )
Line 3577: ;
Line 3579: ID = rq
Line 3579: =
Line 3579: ID = task_rq_lock
Line 3579: (
Line 3579: ID = p
Line 3579: ,
Line 3579: Unrecognized token: 38
Line 3579: ID = flags
Line 3579: )
Line 3579: ;
Line 3580: Unrecognized token: 95
Line 3580: Unrecognized token: 95
Line 3580: ID = setscheduler
Line 3580: (
Line 3580: ID = p
Line 3580: ,
Line 3580: ID = SCHED_FIFO
Line 3580: ,
Line 3580: ID = MAX_RT_PRIO
Line 3580: -
Line 3580: INTCON = 1
Line 3580: )
Line 3580: ;
Line 3581: ID = task_rq_unlock
Line 3581: (
Line 3581: ID = rq
Line 3581: ,
Line 3581: Unrecognized token: 38
Line 3581: ID = flags
Line 3581: )
Line 3581: ;
Line 3582: ID = cpu_rq
Line 3582: (
Line 3582: ID = cpu
Line 3582: )
Line 3582: -
Line 3582: >
Line 3582: ID = migration_thread
Line 3582: =
Line 3582: ID = p
Line 3582: ;
Line 3583: ID = break
Line 3583: ;
Line 3584: ID = case
Line 3584: ID = CPU_ONLINE
Line 3584: Unrecognized token: 58
Line 3586: ID = wake_up_process
Line 3586: (
Line 3586: ID = cpu_rq
Line 3586: (
Line 3586: ID = cpu
Line 3586: )
Line 3586: -
Line 3586: >
Line 3586: ID = migration_thread
Line 3586: )
Line 3586: ;
Line 3587: ID = break
Line 3587: ;
Line 3588: Unrecognized token: 35
Line 3588: ID = ifdef
Line 3588: ID = CONFIG_HOTPLUG_CPU
Line 3589: ID = case
Line 3589: ID = CPU_UP_CANCELED
Line 3589: Unrecognized token: 58
Line 3591: ID = kthread_bind
Line 3591: (
Line 3591: ID = cpu_rq
Line 3591: (
Line 3591: ID = cpu
Line 3591: )
Line 3591: -
Line 3591: >
Line 3591: ID = migration_thread
Line 3591: ,
Line 3591: ID = smp_processor_id
Line 3591: (
Line 3591: )
Line 3591: )
Line 3591: ;
Line 3592: ID = kthread_stop
Line 3592: (
Line 3592: ID = cpu_rq
Line 3592: (
Line 3592: ID = cpu
Line 3592: )
Line 3592: -
Line 3592: >
Line 3592: ID = migration_thread
Line 3592: )
Line 3592: ;
Line 3593: ID = cpu_rq
Line 3593: (
Line 3593: ID = cpu
Line 3593: )
Line 3593: -
Line 3593: >
Line 3593: ID = migration_thread
Line 3593: =
Line 3593: ID = NULL
Line 3593: ;
Line 3594: ID = break
Line 3594: ;
Line 3595: ID = case
Line 3595: ID = CPU_DEAD
Line 3595: Unrecognized token: 58
Line 3596: ID = migrate_all_tasks
Line 3596: (
Line 3596: ID = cpu
Line 3596: )
Line 3596: ;
Line 3597: ID = rq
Line 3597: =
Line 3597: ID = cpu_rq
Line 3597: (
Line 3597: ID = cpu
Line 3597: )
Line 3597: ;
Line 3598: ID = kthread_stop
Line 3598: (
Line 3598: ID = rq
Line 3598: -
Line 3598: >
Line 3598: ID = migration_thread
Line 3598: )
Line 3598: ;
Line 3599: ID = rq
Line 3599: -
Line 3599: >
Line 3599: ID = migration_thread
Line 3599: =
Line 3599: ID = NULL
Line 3599: ;
Line 3601: ID = rq
Line 3601: =
Line 3601: ID = task_rq_lock
Line 3601: (
Line 3601: ID = rq
Line 3601: -
Line 3601: >
Line 3601: ID = idle
Line 3601: ,
Line 3601: Unrecognized token: 38
Line 3601: ID = flags
Line 3601: )
Line 3601: ;
Line 3602: ID = deactivate_task
Line 3602: (
Line 3602: ID = rq
Line 3602: -
Line 3602: >
Line 3602: ID = idle
Line 3602: ,
Line 3602: ID = rq
Line 3602: )
Line 3602: ;
Line 3603: ID = rq
Line 3603: -
Line 3603: >
Line 3603: ID = idle
Line 3603: -
Line 3603: >
Line 3603: ID = static_prio
Line 3603: =
Line 3603: ID = MAX_PRIO
Line 3603: ;
Line 3604: Unrecognized token: 95
Line 3604: Unrecognized token: 95
Line 3604: ID = setscheduler
Line 3604: (
Line 3604: ID = rq
Line 3604: -
Line 3604: >
Line 3604: ID = idle
Line 3604: ,
Line 3604: ID = SCHED_NORMAL
Line 3604: ,
Line 3604: INTCON = 0
Line 3604: )
Line 3604: ;
Line 3605: ID = task_rq_unlock
Line 3605: (
Line 3605: ID = rq
Line 3605: ,
Line 3605: Unrecognized token: 38
Line 3605: ID = flags
Line 3605: )
Line 3605: ;
Line 3606: ID = BUG_ON
Line 3606: (
Line 3606: ID = rq
Line 3606: -
Line 3606: >
Line 3606: ID = nr_running
Line 3606: !=
Line 3606: INTCON = 0
Line 3606: )
Line 3606: ;
Line 3611: ID = spin_lock_irq
Line 3611: (
Line 3611: Unrecognized token: 38
Line 3611: ID = rq
Line 3611: -
Line 3611: >
Line 3611: ID = lock
Line 3611: )
Line 3611: ;
Line 3612: while
Line 3612: (
Line 3612: !
Line 3612: ID = list_empty
Line 3612: (
Line 3612: Unrecognized token: 38
Line 3612: ID = rq
Line 3612: -
Line 3612: >
Line 3612: ID = migration_queue
Line 3612: )
Line 3612: )
Line 3612: {
Line 3613: ID = migration_req_t
Line 3613: *
Line 3613: ID = req
Line 3613: ;
Line 3614: ID = req
Line 3614: =
Line 3614: ID = list_entry
Line 3614: (
Line 3614: ID = rq
Line 3614: -
Line 3614: >
Line 3614: ID = migration_queue
Line 3614: Unrecognized token: 46
Line 3614: ID = next
Line 3614: ,
Line 3615: ID = migration_req_t
Line 3615: ,
Line 3615: ID = list
Line 3615: )
Line 3615: ;
Line 3616: ID = BUG_ON
Line 3616: (
Line 3616: ID = req
Line 3616: -
Line 3616: >
Line 3616: ID = type
Line 3616: !=
Line 3616: ID = REQ_MOVE_TASK
Line 3616: )
Line 3616: ;
Line 3617: ID = list_del_init
Line 3617: (
Line 3617: Unrecognized token: 38
Line 3617: ID = req
Line 3617: -
Line 3617: >
Line 3617: ID = list
Line 3617: )
Line 3617: ;
Line 3618: ID = complete
Line 3618: (
Line 3618: Unrecognized token: 38
Line 3618: ID = req
Line 3618: -
Line 3618: >
Line 3618: ID = done
Line 3618: )
Line 3618: ;
Line 3619: }
Line 3620: ID = spin_unlock_irq
Line 3620: (
Line 3620: Unrecognized token: 38
Line 3620: ID = rq
Line 3620: -
Line 3620: >
Line 3620: ID = lock
Line 3620: )
Line 3620: ;
Line 3621: ID = break
Line 3621: ;
Line 3622: Unrecognized token: 35
Line 3622: ID = endif
Line 3623: }
Line 3624: return
Line 3624: ID = NOTIFY_OK
Line 3624: ;
Line 3625: }
Line 3630: ID = static
Line 3630: ID = struct
Line 3630: ID = notifier_block
Line 3630: Unrecognized token: 95
Line 3630: Unrecognized token: 95
Line 3630: ID = devinitdata
Line 3630: ID = migration_notifier
Line 3630: =
Line 3630: {
Line 3631: Unrecognized token: 46
Line 3631: ID = notifier_call
Line 3631: =
Line 3631: ID = migration_call
Line 3631: ,
Line 3632: Unrecognized token: 46
Line 3632: ID = priority
Line 3632: =
Line 3632: INTCON = 10
Line 3633: }
Line 3633: ;
Line 3635: int
Line 3635: Unrecognized token: 95
Line 3635: Unrecognized token: 95
Line 3635: ID = init
Line 3635: ID = migration_init
Line 3635: (
Line 3635: void
Line 3635: )
Line 3636: {
Line 3637: void
Line 3637: *
Line 3637: ID = cpu
Line 3637: =
Line 3637: (
Line 3637: void
Line 3637: *
Line 3637: )
Line 3637: (
Line 3637: ID = long
Line 3637: )
Line 3637: ID = smp_processor_id
Line 3637: (
Line 3637: )
Line 3637: ;
Line 3639: ID = migration_call
Line 3639: (
Line 3639: Unrecognized token: 38
Line 3639: ID = migration_notifier
Line 3639: ,
Line 3639: ID = CPU_UP_PREPARE
Line 3639: ,
Line 3639: ID = cpu
Line 3639: )
Line 3639: ;
Line 3640: ID = migration_call
Line 3640: (
Line 3640: Unrecognized token: 38
Line 3640: ID = migration_notifier
Line 3640: ,
Line 3640: ID = CPU_ONLINE
Line 3640: ,
Line 3640: ID = cpu
Line 3640: )
Line 3640: ;
Line 3641: ID = register_cpu_notifier
Line 3641: (
Line 3641: Unrecognized token: 38
Line 3641: ID = migration_notifier
Line 3641: )
Line 3641: ;
Line 3642: return
Line 3642: INTCON = 0
Line 3642: ;
Line 3643: }
Line 3644: Unrecognized token: 35
Line 3644: ID = endif
Line 3658: ID = spinlock_t
Line 3658: ID = kernel_flag
Line 3658: Unrecognized token: 95
Line 3658: Unrecognized token: 95
Line 3658: ID = cacheline_aligned_in_smp
Line 3658: =
Line 3658: ID = SPIN_LOCK_UNLOCKED
Line 3658: ;
Line 3659: ID = EXPORT_SYMBOL
Line 3659: (
Line 3659: ID = kernel_flag
Line 3659: )
Line 3659: ;
Line 3661: Unrecognized token: 35
Line 3661: ID = ifdef
Line 3661: ID = CONFIG_SMP
Line 3663: void
Line 3663: ID = cpu_attach_domain
Line 3663: (
Line 3663: ID = struct
Line 3663: ID = sched_domain
Line 3663: *
Line 3663: ID = sd
Line 3663: ,
Line 3663: int
Line 3663: ID = cpu
Line 3663: )
Line 3664: {
Line 3665: ID = migration_req_t
Line 3665: ID = req
Line 3665: ;
Line 3666: ID = unsigned
Line 3666: ID = long
Line 3666: ID = flags
Line 3666: ;
Line 3667: ID = runqueue_t
Line 3667: *
Line 3667: ID = rq
Line 3667: =
Line 3667: ID = cpu_rq
Line 3667: (
Line 3667: ID = cpu
Line 3667: )
Line 3667: ;
Line 3668: int
Line 3668: ID = local
Line 3668: =
Line 3668: INTCON = 1
Line 3668: ;
Line 3670: ID = lock_cpu_hotplug
Line 3670: (
Line 3670: )
Line 3670: ;
Line 3672: ID = spin_lock_irqsave
Line 3672: (
Line 3672: Unrecognized token: 38
Line 3672: ID = rq
Line 3672: -
Line 3672: >
Line 3672: ID = lock
Line 3672: ,
Line 3672: ID = flags
Line 3672: )
Line 3672: ;
Line 3674: if
Line 3674: (
Line 3674: ID = cpu
Line 3674: ==
Line 3674: ID = smp_processor_id
Line 3674: (
Line 3674: )
Line 3674: ||
Line 3674: !
Line 3674: ID = cpu_online
Line 3674: (
Line 3674: ID = cpu
Line 3674: )
Line 3674: )
Line 3674: {
Line 3675: ID = rq
Line 3675: -
Line 3675: >
Line 3675: ID = sd
Line 3675: =
Line 3675: ID = sd
Line 3675: ;
Line 3676: }
Line 3676: else
Line 3676: {
Line 3677: ID = init_completion
Line 3677: (
Line 3677: Unrecognized token: 38
Line 3677: ID = req
Line 3677: Unrecognized token: 46
Line 3677: ID = done
Line 3677: )
Line 3677: ;
Line 3678: ID = req
Line 3678: Unrecognized token: 46
Line 3678: ID = type
Line 3678: =
Line 3678: ID = REQ_SET_DOMAIN
Line 3678: ;
Line 3679: ID = req
Line 3679: Unrecognized token: 46
Line 3679: ID = sd
Line 3679: =
Line 3679: ID = sd
Line 3679: ;
Line 3680: ID = list_add
Line 3680: (
Line 3680: Unrecognized token: 38
Line 3680: ID = req
Line 3680: Unrecognized token: 46
Line 3680: ID = list
Line 3680: ,
Line 3680: Unrecognized token: 38
Line 3680: ID = rq
Line 3680: -
Line 3680: >
Line 3680: ID = migration_queue
Line 3680: )
Line 3680: ;
Line 3681: ID = local
Line 3681: =
Line 3681: INTCON = 0
Line 3681: ;
Line 3682: }
Line 3684: ID = spin_unlock_irqrestore
Line 3684: (
Line 3684: Unrecognized token: 38
Line 3684: ID = rq
Line 3684: -
Line 3684: >
Line 3684: ID = lock
Line 3684: ,
Line 3684: ID = flags
Line 3684: )
Line 3684: ;
Line 3686: if
Line 3686: (
Line 3686: !
Line 3686: ID = local
Line 3686: )
Line 3686: {
Line 3687: ID = wake_up_process
Line 3687: (
Line 3687: ID = rq
Line 3687: -
Line 3687: >
Line 3687: ID = migration_thread
Line 3687: )
Line 3687: ;
Line 3688: ID = wait_for_completion
Line 3688: (
Line 3688: Unrecognized token: 38
Line 3688: ID = req
Line 3688: Unrecognized token: 46
Line 3688: ID = done
Line 3688: )
Line 3688: ;
Line 3689: }
Line 3691: ID = unlock_cpu_hotplug
Line 3691: (
Line 3691: )
Line 3691: ;
Line 3692: }
Line 3694: Unrecognized token: 35
Line 3694: ID = ifdef
Line 3694: ID = ARCH_HAS_SCHED_DOMAIN
Line 3695: extern
Line 3695: void
Line 3695: Unrecognized token: 95
Line 3695: Unrecognized token: 95
Line 3695: ID = init
Line 3695: ID = arch_init_sched_domains
Line 3695: (
Line 3695: void
Line 3695: )
Line 3695: ;
Line 3696: Unrecognized token: 35
Line 3696: else
Line 3697: ID = static
Line 3697: ID = struct
Line 3697: ID = sched_group
Line 3697: ID = sched_group_cpus
Line 3697: [
Line 3697: ID = NR_CPUS
Line 3697: ]
Line 3697: ;
Line 3698: ID = static
Line 3698: ID = DEFINE_PER_CPU
Line 3698: (
Line 3698: ID = struct
Line 3698: ID = sched_domain
Line 3698: ,
Line 3698: ID = cpu_domains
Line 3698: )
Line 3698: ;
Line 3699: Unrecognized token: 35
Line 3699: ID = ifdef
Line 3699: ID = CONFIG_NUMA
Line 3700: ID = static
Line 3700: ID = struct
Line 3700: ID = sched_group
Line 3700: ID = sched_group_nodes
Line 3700: [
Line 3700: ID = MAX_NUMNODES
Line 3700: ]
Line 3700: ;
Line 3701: ID = static
Line 3701: ID = DEFINE_PER_CPU
Line 3701: (
Line 3701: ID = struct
Line 3701: ID = sched_domain
Line 3701: ,
Line 3701: ID = node_domains
Line 3701: )
Line 3701: ;
Line 3702: ID = static
Line 3702: void
Line 3702: Unrecognized token: 95
Line 3702: Unrecognized token: 95
Line 3702: ID = init
Line 3702: ID = arch_init_sched_domains
Line 3702: (
Line 3702: void
Line 3702: )
Line 3703: {
Line 3704: int
Line 3704: ID = i
Line 3704: ;
Line 3705: ID = struct
Line 3705: ID = sched_group
Line 3705: *
Line 3705: ID = first_node
Line 3705: =
Line 3705: ID = NULL
Line 3705: ,
Line 3705: *
Line 3705: ID = last_node
Line 3705: =
Line 3705: ID = NULL
Line 3705: ;
Line 3708: ID = for_each_cpu
Line 3708: (
Line 3708: ID = i
Line 3708: )
Line 3708: {
Line 3709: int
Line 3709: ID = node
Line 3709: =
Line 3709: ID = cpu_to_node
Line 3709: (
Line 3709: ID = i
Line 3709: )
Line 3709: ;
Line 3710: ID = cpumask_t
Line 3710: ID = nodemask
Line 3710: =
Line 3710: ID = node_to_cpumask
Line 3710: (
Line 3710: ID = node
Line 3710: )
Line 3710: ;
Line 3711: ID = struct
Line 3711: ID = sched_domain
Line 3711: *
Line 3711: ID = node_sd
Line 3711: =
Line 3711: Unrecognized token: 38
Line 3711: ID = per_cpu
Line 3711: (
Line 3711: ID = node_domains
Line 3711: ,
Line 3711: ID = i
Line 3711: )
Line 3711: ;
Line 3712: ID = struct
Line 3712: ID = sched_domain
Line 3712: *
Line 3712: ID = cpu_sd
Line 3712: =
Line 3712: Unrecognized token: 38
Line 3712: ID = per_cpu
Line 3712: (
Line 3712: ID = cpu_domains
Line 3712: ,
Line 3712: ID = i
Line 3712: )
Line 3712: ;
Line 3714: *
Line 3714: ID = node_sd
Line 3714: =
Line 3714: ID = SD_NODE_INIT
Line 3714: ;
Line 3715: ID = node_sd
Line 3715: -
Line 3715: >
Line 3715: ID = span
Line 3715: =
Line 3715: ID = cpu_possible_map
Line 3715: ;
Line 3716: ID = node_sd
Line 3716: -
Line 3716: >
Line 3716: ID = groups
Line 3716: =
Line 3716: Unrecognized token: 38
Line 3716: ID = sched_group_nodes
Line 3716: [
Line 3716: ID = cpu_to_node
Line 3716: (
Line 3716: ID = i
Line 3716: )
Line 3716: ]
Line 3716: ;
Line 3718: *
Line 3718: ID = cpu_sd
Line 3718: =
Line 3718: ID = SD_CPU_INIT
Line 3718: ;
Line 3719: ID = cpus_and
Line 3719: (
Line 3719: ID = cpu_sd
Line 3719: -
Line 3719: >
Line 3719: ID = span
Line 3719: ,
Line 3719: ID = nodemask
Line 3719: ,
Line 3719: ID = cpu_possible_map
Line 3719: )
Line 3719: ;
Line 3720: ID = cpu_sd
Line 3720: -
Line 3720: >
Line 3720: ID = groups
Line 3720: =
Line 3720: Unrecognized token: 38
Line 3720: ID = sched_group_cpus
Line 3720: [
Line 3720: ID = i
Line 3720: ]
Line 3720: ;
Line 3721: ID = cpu_sd
Line 3721: -
Line 3721: >
Line 3721: ID = parent
Line 3721: =
Line 3721: ID = node_sd
Line 3721: ;
Line 3722: }
Line 3725: for
Line 3725: (
Line 3725: ID = i
Line 3725: =
Line 3725: INTCON = 0
Line 3725: ;
Line 3725: ID = i
Line 3725: <
Line 3725: ID = MAX_NUMNODES
Line 3725: ;
Line 3725: ID = i
Line 3725: +
Line 3725: +
Line 3725: )
Line 3725: {
Line 3726: ID = cpumask_t
Line 3726: ID = tmp
Line 3726: =
Line 3726: ID = node_to_cpumask
Line 3726: (
Line 3726: ID = i
Line 3726: )
Line 3726: ;
Line 3727: ID = cpumask_t
Line 3727: ID = nodemask
Line 3727: ;
Line 3728: ID = struct
Line 3728: ID = sched_group
Line 3728: *
Line 3728: ID = first_cpu
Line 3728: =
Line 3728: ID = NULL
Line 3728: ,
Line 3728: *
Line 3728: ID = last_cpu
Line 3728: =
Line 3728: ID = NULL
Line 3728: ;
Line 3729: ID = struct
Line 3729: ID = sched_group
Line 3729: *
Line 3729: ID = node
Line 3729: =
Line 3729: Unrecognized token: 38
Line 3729: ID = sched_group_nodes
Line 3729: [
Line 3729: ID = i
Line 3729: ]
Line 3729: ;
Line 3730: int
Line 3730: ID = j
Line 3730: ;
Line 3732: ID = cpus_and
Line 3732: (
Line 3732: ID = nodemask
Line 3732: ,
Line 3732: ID = tmp
Line 3732: ,
Line 3732: ID = cpu_possible_map
Line 3732: )
Line 3732: ;
Line 3734: if
Line 3734: (
Line 3734: ID = cpus_empty
Line 3734: (
Line 3734: ID = nodemask
Line 3734: )
Line 3734: )
Line 3735: ID = continue
Line 3735: ;
Line 3737: ID = node
Line 3737: -
Line 3737: >
Line 3737: ID = cpumask
Line 3737: =
Line 3737: ID = nodemask
Line 3737: ;
Line 3738: ID = node
Line 3738: -
Line 3738: >
Line 3738: ID = cpu_power
Line 3738: =
Line 3738: ID = SCHED_LOAD_SCALE
Line 3738: *
Line 3738: ID = cpus_weight
Line 3738: (
Line 3738: ID = node
Line 3738: -
Line 3738: >
Line 3738: ID = cpumask
Line 3738: )
Line 3738: ;
Line 3740: ID = for_each_cpu_mask
Line 3740: (
Line 3740: ID = j
Line 3740: ,
Line 3740: ID = node
Line 3740: -
Line 3740: >
Line 3740: ID = cpumask
Line 3740: )
Line 3740: {
Line 3741: ID = struct
Line 3741: ID = sched_group
Line 3741: *
Line 3741: ID = cpu
Line 3741: =
Line 3741: Unrecognized token: 38
Line 3741: ID = sched_group_cpus
Line 3741: [
Line 3741: ID = j
Line 3741: ]
Line 3741: ;
Line 3743: ID = cpus_clear
Line 3743: (
Line 3743: ID = cpu
Line 3743: -
Line 3743: >
Line 3743: ID = cpumask
Line 3743: )
Line 3743: ;
Line 3744: ID = cpu_set
Line 3744: (
Line 3744: ID = j
Line 3744: ,
Line 3744: ID = cpu
Line 3744: -
Line 3744: >
Line 3744: ID = cpumask
Line 3744: )
Line 3744: ;
Line 3745: ID = cpu
Line 3745: -
Line 3745: >
Line 3745: ID = cpu_power
Line 3745: =
Line 3745: ID = SCHED_LOAD_SCALE
Line 3745: ;
Line 3747: if
Line 3747: (
Line 3747: !
Line 3747: ID = first_cpu
Line 3747: )
Line 3748: ID = first_cpu
Line 3748: =
Line 3748: ID = cpu
Line 3748: ;
Line 3749: if
Line 3749: (
Line 3749: ID = last_cpu
Line 3749: )
Line 3750: ID = last_cpu
Line 3750: -
Line 3750: >
Line 3750: ID = next
Line 3750: =
Line 3750: ID = cpu
Line 3750: ;
Line 3751: ID = last_cpu
Line 3751: =
Line 3751: ID = cpu
Line 3751: ;
Line 3752: }
Line 3753: ID = last_cpu
Line 3753: -
Line 3753: >
Line 3753: ID = next
Line 3753: =
Line 3753: ID = first_cpu
Line 3753: ;
Line 3755: if
Line 3755: (
Line 3755: !
Line 3755: ID = first_node
Line 3755: )
Line 3756: ID = first_node
Line 3756: =
Line 3756: ID = node
Line 3756: ;
Line 3757: if
Line 3757: (
Line 3757: ID = last_node
Line 3757: )
Line 3758: ID = last_node
Line 3758: -
Line 3758: >
Line 3758: ID = next
Line 3758: =
Line 3758: ID = node
Line 3758: ;
Line 3759: ID = last_node
Line 3759: =
Line 3759: ID = node
Line 3759: ;
Line 3760: }
Line 3761: ID = last_node
Line 3761: -
Line 3761: >
Line 3761: ID = next
Line 3761: =
Line 3761: ID = first_node
Line 3761: ;
Line 3763: ID = mb
Line 3763: (
Line 3763: )
Line 3763: ;
Line 3764: ID = for_each_cpu
Line 3764: (
Line 3764: ID = i
Line 3764: )
Line 3764: {
Line 3765: ID = struct
Line 3765: ID = sched_domain
Line 3765: *
Line 3765: ID = cpu_sd
Line 3765: =
Line 3765: Unrecognized token: 38
Line 3765: ID = per_cpu
Line 3765: (
Line 3765: ID = cpu_domains
Line 3765: ,
Line 3765: ID = i
Line 3765: )
Line 3765: ;
Line 3766: ID = cpu_attach_domain
Line 3766: (
Line 3766: ID = cpu_sd
Line 3766: ,
Line 3766: ID = i
Line 3766: )
Line 3766: ;
Line 3767: }
Line 3768: }
Line 3770: Unrecognized token: 35
Line 3770: else
Line 3771: ID = static
Line 3771: void
Line 3771: Unrecognized token: 95
Line 3771: Unrecognized token: 95
Line 3771: ID = init
Line 3771: ID = arch_init_sched_domains
Line 3771: (
Line 3771: void
Line 3771: )
Line 3772: {
Line 3773: int
Line 3773: ID = i
Line 3773: ;
Line 3774: ID = struct
Line 3774: ID = sched_group
Line 3774: *
Line 3774: ID = first_cpu
Line 3774: =
Line 3774: ID = NULL
Line 3774: ,
Line 3774: *
Line 3774: ID = last_cpu
Line 3774: =
Line 3774: ID = NULL
Line 3774: ;
Line 3777: ID = for_each_cpu
Line 3777: (
Line 3777: ID = i
Line 3777: )
Line 3777: {
Line 3778: ID = struct
Line 3778: ID = sched_domain
Line 3778: *
Line 3778: ID = cpu_sd
Line 3778: =
Line 3778: Unrecognized token: 38
Line 3778: ID = per_cpu
Line 3778: (
Line 3778: ID = cpu_domains
Line 3778: ,
Line 3778: ID = i
Line 3778: )
Line 3778: ;
Line 3780: *
Line 3780: ID = cpu_sd
Line 3780: =
Line 3780: ID = SD_CPU_INIT
Line 3780: ;
Line 3781: ID = cpu_sd
Line 3781: -
Line 3781: >
Line 3781: ID = span
Line 3781: =
Line 3781: ID = cpu_possible_map
Line 3781: ;
Line 3782: ID = cpu_sd
Line 3782: -
Line 3782: >
Line 3782: ID = groups
Line 3782: =
Line 3782: Unrecognized token: 38
Line 3782: ID = sched_group_cpus
Line 3782: [
Line 3782: ID = i
Line 3782: ]
Line 3782: ;
Line 3783: }
Line 3786: ID = for_each_cpu_mask
Line 3786: (
Line 3786: ID = i
Line 3786: ,
Line 3786: ID = cpu_possible_map
Line 3786: )
Line 3786: {
Line 3787: ID = struct
Line 3787: ID = sched_group
Line 3787: *
Line 3787: ID = cpu
Line 3787: =
Line 3787: Unrecognized token: 38
Line 3787: ID = sched_group_cpus
Line 3787: [
Line 3787: ID = i
Line 3787: ]
Line 3787: ;
Line 3789: ID = cpus_clear
Line 3789: (
Line 3789: ID = cpu
Line 3789: -
Line 3789: >
Line 3789: ID = cpumask
Line 3789: )
Line 3789: ;
Line 3790: ID = cpu_set
Line 3790: (
Line 3790: ID = i
Line 3790: ,
Line 3790: ID = cpu
Line 3790: -
Line 3790: >
Line 3790: ID = cpumask
Line 3790: )
Line 3790: ;
Line 3791: ID = cpu
Line 3791: -
Line 3791: >
Line 3791: ID = cpu_power
Line 3791: =
Line 3791: ID = SCHED_LOAD_SCALE
Line 3791: ;
Line 3793: if
Line 3793: (
Line 3793: !
Line 3793: ID = first_cpu
Line 3793: )
Line 3794: ID = first_cpu
Line 3794: =
Line 3794: ID = cpu
Line 3794: ;
Line 3795: if
Line 3795: (
Line 3795: ID = last_cpu
Line 3795: )
Line 3796: ID = last_cpu
Line 3796: -
Line 3796: >
Line 3796: ID = next
Line 3796: =
Line 3796: ID = cpu
Line 3796: ;
Line 3797: ID = last_cpu
Line 3797: =
Line 3797: ID = cpu
Line 3797: ;
Line 3798: }
Line 3799: ID = last_cpu
Line 3799: -
Line 3799: >
Line 3799: ID = next
Line 3799: =
Line 3799: ID = first_cpu
Line 3799: ;
Line 3801: ID = mb
Line 3801: (
Line 3801: )
Line 3801: ;
Line 3802: ID = for_each_cpu
Line 3802: (
Line 3802: ID = i
Line 3802: )
Line 3802: {
Line 3803: ID = struct
Line 3803: ID = sched_domain
Line 3803: *
Line 3803: ID = cpu_sd
Line 3803: =
Line 3803: Unrecognized token: 38
Line 3803: ID = per_cpu
Line 3803: (
Line 3803: ID = cpu_domains
Line 3803: ,
Line 3803: ID = i
Line 3803: )
Line 3803: ;
Line 3804: ID = cpu_attach_domain
Line 3804: (
Line 3804: ID = cpu_sd
Line 3804: ,
Line 3804: ID = i
Line 3804: )
Line 3804: ;
Line 3805: }
Line 3806: }
Line 3808: Unrecognized token: 35
Line 3808: ID = endif
Line 3809: Unrecognized token: 35
Line 3809: ID = endif
Line 3811: Unrecognized token: 35
Line 3811: ID = define
Line 3811: ID = SCHED_DOMAIN_DEBUG
Line 3812: Unrecognized token: 35
Line 3812: ID = ifdef
Line 3812: ID = SCHED_DOMAIN_DEBUG
Line 3813: void
Line 3813: ID = sched_domain_debug
Line 3813: (
Line 3813: void
Line 3813: )
Line 3814: {
Line 3815: int
Line 3815: ID = i
Line 3815: ;
Line 3817: ID = for_each_cpu
Line 3817: (
Line 3817: ID = i
Line 3817: )
Line 3817: {
Line 3818: ID = runqueue_t
Line 3818: *
Line 3818: ID = rq
Line 3818: =
Line 3818: ID = cpu_rq
Line 3818: (
Line 3818: ID = i
Line 3818: )
Line 3818: ;
Line 3819: ID = struct
Line 3819: ID = sched_domain
Line 3819: *
Line 3819: ID = sd
Line 3819: ;
Line 3820: int
Line 3820: ID = level
Line 3820: =
Line 3820: INTCON = 0
Line 3820: ;
Line 3822: ID = sd
Line 3822: =
Line 3822: ID = rq
Line 3822: -
Line 3822: >
Line 3822: ID = sd
Line 3822: ;
Line 3824: ID = printk
Line 3824: (
Line 3824: ID = KERN_DEBUG
Line 3824: STRINGCON = "CPU%d: %s\n"
Line 3824: ,
Line 3825: ID = i
Line 3825: ,
Line 3825: (
Line 3825: ID = cpu_online
Line 3825: (
Line 3825: ID = i
Line 3825: )
Line 3825: Unrecognized token: 63
Line 3825: STRINGCON = " online"
Line 3825: Unrecognized token: 58
Line 3825: STRINGCON = "offline"
Line 3825: )
Line 3825: )
Line 3825: ;
Line 3827: ID = do
Line 3827: {
Line 3828: int
Line 3828: ID = j
Line 3828: ;
Line 3829: char
Line 3829: ID = str
Line 3829: [
Line 3829: ID = NR_CPUS
Line 3829: ]
Line 3829: ;
Line 3830: ID = struct
Line 3830: ID = sched_group
Line 3830: *
Line 3830: ID = group
Line 3830: =
Line 3830: ID = sd
Line 3830: -
Line 3830: >
Line 3830: ID = groups
Line 3830: ;
Line 3831: ID = cpumask_t
Line 3831: ID = groupmask
Line 3831: ;
Line 3833: ID = cpumask_scnprintf
Line 3833: (
Line 3833: ID = str
Line 3833: ,
Line 3833: ID = NR_CPUS
Line 3833: ,
Line 3833: ID = sd
Line 3833: -
Line 3833: >
Line 3833: ID = span
Line 3833: )
Line 3833: ;
Line 3834: ID = cpus_clear
Line 3834: (
Line 3834: ID = groupmask
Line 3834: )
Line 3834: ;
Line 3836: ID = printk
Line 3836: (
Line 3836: ID = KERN_DEBUG
Line 3836: )
Line 3836: ;
Line 3837: for
Line 3837: (
Line 3837: ID = j
Line 3837: =
Line 3837: INTCON = 0
Line 3837: ;
Line 3837: ID = j
Line 3837: <
Line 3837: ID = level
Line 3837: +
Line 3837: INTCON = 1
Line 3837: ;
Line 3837: ID = j
Line 3837: +
Line 3837: +
Line 3837: )
Line 3838: ID = printk
Line 3838: (
Line 3838: STRINGCON = " "
Line 3838: )
Line 3838: ;
Line 3839: ID = printk
Line 3839: (
Line 3839: STRINGCON = "domain %d: span %s\n"
Line 3839: ,
Line 3839: ID = level
Line 3839: ,
Line 3839: ID = str
Line 3839: )
Line 3839: ;
Line 3841: if
Line 3841: (
Line 3841: !
Line 3841: ID = cpu_isset
Line 3841: (
Line 3841: ID = i
Line 3841: ,
Line 3841: ID = sd
Line 3841: -
Line 3841: >
Line 3841: ID = span
Line 3841: )
Line 3841: )
Line 3842: ID = printk
Line 3842: (
Line 3842: ID = KERN_DEBUG
Line 3842: STRINGCON = "ERROR domain->span does not contain CPU%d\n"
Line 3842: ,
Line 3842: ID = i
Line 3842: )
Line 3842: ;
Line 3843: if
Line 3843: (
Line 3843: !
Line 3843: ID = cpu_isset
Line 3843: (
Line 3843: ID = i
Line 3843: ,
Line 3843: ID = group
Line 3843: -
Line 3843: >
Line 3843: ID = cpumask
Line 3843: )
Line 3843: )
Line 3844: ID = printk
Line 3844: (
Line 3844: ID = KERN_DEBUG
Line 3844: STRINGCON = "ERROR domain->groups does not contain CPU%d\n"
Line 3844: ,
Line 3844: ID = i
Line 3844: )
Line 3844: ;
Line 3845: if
Line 3845: (
Line 3845: !
Line 3845: ID = group
Line 3845: -
Line 3845: >
Line 3845: ID = cpu_power
Line 3845: )
Line 3846: ID = printk
Line 3846: (
Line 3846: ID = KERN_DEBUG
Line 3846: STRINGCON = "ERROR domain->cpu_power not set\n"
Line 3846: )
Line 3846: ;
Line 3848: ID = printk
Line 3848: (
Line 3848: ID = KERN_DEBUG
Line 3848: )
Line 3848: ;
Line 3849: for
Line 3849: (
Line 3849: ID = j
Line 3849: =
Line 3849: INTCON = 0
Line 3849: ;
Line 3849: ID = j
Line 3849: <
Line 3849: ID = level
Line 3849: +
Line 3849: INTCON = 2
Line 3849: ;
Line 3849: ID = j
Line 3849: +
Line 3849: +
Line 3849: )
Line 3850: ID = printk
Line 3850: (
Line 3850: STRINGCON = " "
Line 3850: )
Line 3850: ;
Line 3851: ID = printk
Line 3851: (
Line 3851: STRINGCON = "groups:"
Line 3851: )
Line 3851: ;
Line 3852: ID = do
Line 3852: {
Line 3853: if
Line 3853: (
Line 3853: !
Line 3853: ID = group
Line 3853: )
Line 3853: {
Line 3854: ID = printk
Line 3854: (
Line 3854: STRINGCON = " ERROR: NULL"
Line 3854: )
Line 3854: ;
Line 3855: ID = break
Line 3855: ;
Line 3856: }
Line 3858: if
Line 3858: (
Line 3858: !
Line 3858: ID = cpus_weight
Line 3858: (
Line 3858: ID = group
Line 3858: -
Line 3858: >
Line 3858: ID = cpumask
Line 3858: )
Line 3858: )
Line 3859: ID = printk
Line 3859: (
Line 3859: STRINGCON = " ERROR empty group:"
Line 3859: )
Line 3859: ;
Line 3861: if
Line 3861: (
Line 3861: ID = cpus_intersects
Line 3861: (
Line 3861: ID = groupmask
Line 3861: ,
Line 3861: ID = group
Line 3861: -
Line 3861: >
Line 3861: ID = cpumask
Line 3861: )
Line 3861: )
Line 3862: ID = printk
Line 3862: (
Line 3862: STRINGCON = " ERROR repeated CPUs:"
Line 3862: )
Line 3862: ;
Line 3864: ID = cpus_or
Line 3864: (
Line 3864: ID = groupmask
Line 3864: ,
Line 3864: ID = groupmask
Line 3864: ,
Line 3864: ID = group
Line 3864: -
Line 3864: >
Line 3864: ID = cpumask
Line 3864: )
Line 3864: ;
Line 3866: ID = cpumask_scnprintf
Line 3866: (
Line 3866: ID = str
Line 3866: ,
Line 3866: ID = NR_CPUS
Line 3866: ,
Line 3866: ID = group
Line 3866: -
Line 3866: >
Line 3866: ID = cpumask
Line 3866: )
Line 3866: ;
Line 3867: ID = printk
Line 3867: (
Line 3867: STRINGCON = " %s"
Line 3867: ,
Line 3867: ID = str
Line 3867: )
Line 3867: ;
Line 3869: ID = group
Line 3869: =
Line 3869: ID = group
Line 3869: -
Line 3869: >
Line 3869: ID = next
Line 3869: ;
Line 3870: }
Line 3870: while
Line 3870: (
Line 3870: ID = group
Line 3870: !=
Line 3870: ID = sd
Line 3870: -
Line 3870: >
Line 3870: ID = groups
Line 3870: )
Line 3870: ;
Line 3871: ID = printk
Line 3871: (
Line 3871: STRINGCON = "\n"
Line 3871: )
Line 3871: ;
Line 3873: if
Line 3873: (
Line 3873: !
Line 3873: ID = cpus_equal
Line 3873: (
Line 3873: ID = sd
Line 3873: -
Line 3873: >
Line 3873: ID = span
Line 3873: ,
Line 3873: ID = groupmask
Line 3873: )
Line 3873: )
Line 3874: ID = printk
Line 3874: (
Line 3874: ID = KERN_DEBUG
Line 3874: STRINGCON = "ERROR groups don't span domain->span\n"
Line 3874: )
Line 3874: ;
Line 3876: ID = level
Line 3876: +
Line 3876: +
Line 3876: ;
Line 3877: ID = sd
Line 3877: =
Line 3877: ID = sd
Line 3877: -
Line 3877: >
Line 3877: ID = parent
Line 3877: ;
Line 3879: if
Line 3879: (
Line 3879: ID = sd
Line 3879: )
Line 3879: {
Line 3880: if
Line 3880: (
Line 3880: !
Line 3880: ID = cpus_subset
Line 3880: (
Line 3880: ID = groupmask
Line 3880: ,
Line 3880: ID = sd
Line 3880: -
Line 3880: >
Line 3880: ID = span
Line 3880: )
Line 3880: )
Line 3881: ID = printk
Line 3881: (
Line 3881: ID = KERN_DEBUG
Line 3881: STRINGCON = "ERROR parent span is not a superset of domain->span\n"
Line 3881: )
Line 3881: ;
Line 3882: }
Line 3884: }
Line 3884: while
Line 3884: (
Line 3884: ID = sd
Line 3884: )
Line 3884: ;
Line 3885: }
Line 3886: }
Line 3887: Unrecognized token: 35
Line 3887: else
Line 3888: Unrecognized token: 35
Line 3888: ID = define
Line 3888: ID = sched_domain_debug
Line 3888: (
Line 3888: )
Line 3888: {
Line 3888: }
Line 3889: Unrecognized token: 35
Line 3889: ID = endif
Line 3891: void
Line 3891: Unrecognized token: 95
Line 3891: Unrecognized token: 95
Line 3891: ID = init
Line 3891: ID = sched_init_smp
Line 3891: (
Line 3891: void
Line 3891: )
Line 3892: {
Line 3893: ID = arch_init_sched_domains
Line 3893: (
Line 3893: )
Line 3893: ;
Line 3894: ID = sched_domain_debug
Line 3894: (
Line 3894: )
Line 3894: ;
Line 3895: }
Line 3896: Unrecognized token: 35
Line 3896: else
Line 3897: void
Line 3897: Unrecognized token: 95
Line 3897: Unrecognized token: 95
Line 3897: ID = init
Line 3897: ID = sched_init_smp
Line 3897: (
Line 3897: void
Line 3897: )
Line 3898: {
Line 3899: }
Line 3900: Unrecognized token: 35
Line 3900: ID = endif
Line 3902: int
Line 3902: ID = in_sched_functions
Line 3902: (
Line 3902: ID = unsigned
Line 3902: ID = long
Line 3902: ID = addr
Line 3902: )
Line 3903: {
Line 3905: extern
Line 3905: char
Line 3905: Unrecognized token: 95
Line 3905: Unrecognized token: 95
Line 3905: ID = sched_text_start
Line 3905: [
Line 3905: ]
Line 3905: ,
Line 3905: Unrecognized token: 95
Line 3905: Unrecognized token: 95
Line 3905: ID = sched_text_end
Line 3905: [
Line 3905: ]
Line 3905: ;
Line 3906: return
Line 3906: ID = addr
Line 3906: >=
Line 3906: (
Line 3906: ID = unsigned
Line 3906: ID = long
Line 3906: )
Line 3906: Unrecognized token: 95
Line 3906: Unrecognized token: 95
Line 3906: ID = sched_text_start
Line 3907: &&
Line 3907: ID = addr
Line 3907: <
Line 3907: (
Line 3907: ID = unsigned
Line 3907: ID = long
Line 3907: )
Line 3907: Unrecognized token: 95
Line 3907: Unrecognized token: 95
Line 3907: ID = sched_text_end
Line 3907: ;
Line 3908: }
Line 3910: void
Line 3910: Unrecognized token: 95
Line 3910: Unrecognized token: 95
Line 3910: ID = init
Line 3910: ID = sched_init
Line 3910: (
Line 3910: void
Line 3910: )
Line 3911: {
Line 3912: ID = runqueue_t
Line 3912: *
Line 3912: ID = rq
Line 3912: ;
Line 3913: int
Line 3913: ID = i
Line 3913: ,
Line 3913: ID = j
Line 3913: ,
Line 3913: ID = k
Line 3913: ;
Line 3915: Unrecognized token: 35
Line 3915: ID = ifdef
Line 3915: ID = CONFIG_SMP
Line 3917: ID = static
Line 3917: ID = struct
Line 3917: ID = sched_domain
Line 3917: ID = sched_domain_init
Line 3917: ;
Line 3918: ID = static
Line 3918: ID = struct
Line 3918: ID = sched_group
Line 3918: ID = sched_group_init
Line 3918: ;
Line 3920: ID = memset
Line 3920: (
Line 3920: Unrecognized token: 38
Line 3920: ID = sched_domain_init
Line 3920: ,
Line 3920: INTCON = 0
Line 3920: ,
Line 3920: ID = sizeof
Line 3920: (
Line 3920: ID = struct
Line 3920: ID = sched_domain
Line 3920: )
Line 3920: )
Line 3920: ;
Line 3921: ID = sched_domain_init
Line 3921: Unrecognized token: 46
Line 3921: ID = span
Line 3921: =
Line 3921: ID = CPU_MASK_ALL
Line 3921: ;
Line 3922: ID = sched_domain_init
Line 3922: Unrecognized token: 46
Line 3922: ID = groups
Line 3922: =
Line 3922: Unrecognized token: 38
Line 3922: ID = sched_group_init
Line 3922: ;
Line 3923: ID = sched_domain_init
Line 3923: Unrecognized token: 46
Line 3923: ID = last_balance
Line 3923: =
Line 3923: ID = jiffies
Line 3923: ;
Line 3924: ID = sched_domain_init
Line 3924: Unrecognized token: 46
Line 3924: ID = balance_interval
Line 3924: =
Line 3924: ID = INT_MAX
Line 3924: ;
Line 3925: ID = sched_domain_init
Line 3925: Unrecognized token: 46
Line 3925: ID = busy_factor
Line 3925: =
Line 3925: INTCON = 1
Line 3925: ;
Line 3927: ID = memset
Line 3927: (
Line 3927: Unrecognized token: 38
Line 3927: ID = sched_group_init
Line 3927: ,
Line 3927: INTCON = 0
Line 3927: ,
Line 3927: ID = sizeof
Line 3927: (
Line 3927: ID = struct
Line 3927: ID = sched_group
Line 3927: )
Line 3927: )
Line 3927: ;
Line 3928: ID = sched_group_init
Line 3928: Unrecognized token: 46
Line 3928: ID = cpumask
Line 3928: =
Line 3928: ID = CPU_MASK_ALL
Line 3928: ;
Line 3929: ID = sched_group_init
Line 3929: Unrecognized token: 46
Line 3929: ID = next
Line 3929: =
Line 3929: Unrecognized token: 38
Line 3929: ID = sched_group_init
Line 3929: ;
Line 3930: ID = sched_group_init
Line 3930: Unrecognized token: 46
Line 3930: ID = cpu_power
Line 3930: =
Line 3930: ID = SCHED_LOAD_SCALE
Line 3930: ;
Line 3931: Unrecognized token: 35
Line 3931: ID = endif
Line 3933: for
Line 3933: (
Line 3933: ID = i
Line 3933: =
Line 3933: INTCON = 0
Line 3933: ;
Line 3933: ID = i
Line 3933: <
Line 3933: ID = NR_CPUS
Line 3933: ;
Line 3933: ID = i
Line 3933: +
Line 3933: +
Line 3933: )
Line 3933: {
Line 3934: ID = prio_array_t
Line 3934: *
Line 3934: ID = array
Line 3934: ;
Line 3936: ID = rq
Line 3936: =
Line 3936: ID = cpu_rq
Line 3936: (
Line 3936: ID = i
Line 3936: )
Line 3936: ;
Line 3937: ID = spin_lock_init
Line 3937: (
Line 3937: Unrecognized token: 38
Line 3937: ID = rq
Line 3937: -
Line 3937: >
Line 3937: ID = lock
Line 3937: )
Line 3937: ;
Line 3938: ID = rq
Line 3938: -
Line 3938: >
Line 3938: ID = active
Line 3938: =
Line 3938: ID = rq
Line 3938: -
Line 3938: >
Line 3938: ID = arrays
Line 3938: ;
Line 3939: ID = rq
Line 3939: -
Line 3939: >
Line 3939: ID = expired
Line 3939: =
Line 3939: ID = rq
Line 3939: -
Line 3939: >
Line 3939: ID = arrays
Line 3939: +
Line 3939: INTCON = 1
Line 3939: ;
Line 3940: ID = rq
Line 3940: -
Line 3940: >
Line 3940: ID = best_expired_prio
Line 3940: =
Line 3940: ID = MAX_PRIO
Line 3940: ;
Line 3942: Unrecognized token: 35
Line 3942: ID = ifdef
Line 3942: ID = CONFIG_SMP
Line 3943: ID = rq
Line 3943: -
Line 3943: >
Line 3943: ID = sd
Line 3943: =
Line 3943: Unrecognized token: 38
Line 3943: ID = sched_domain_init
Line 3943: ;
Line 3944: ID = rq
Line 3944: -
Line 3944: >
Line 3944: ID = cpu_load
Line 3944: =
Line 3944: INTCON = 0
Line 3944: ;
Line 3945: ID = rq
Line 3945: -
Line 3945: >
Line 3945: ID = active_balance
Line 3945: =
Line 3945: INTCON = 0
Line 3945: ;
Line 3946: ID = rq
Line 3946: -
Line 3946: >
Line 3946: ID = push_cpu
Line 3946: =
Line 3946: INTCON = 0
Line 3946: ;
Line 3947: ID = rq
Line 3947: -
Line 3947: >
Line 3947: ID = migration_thread
Line 3947: =
Line 3947: ID = NULL
Line 3947: ;
Line 3948: ID = INIT_LIST_HEAD
Line 3948: (
Line 3948: Unrecognized token: 38
Line 3948: ID = rq
Line 3948: -
Line 3948: >
Line 3948: ID = migration_queue
Line 3948: )
Line 3948: ;
Line 3949: Unrecognized token: 35
Line 3949: ID = endif
Line 3950: ID = atomic_set
Line 3950: (
Line 3950: Unrecognized token: 38
Line 3950: ID = rq
Line 3950: -
Line 3950: >
Line 3950: ID = nr_iowait
Line 3950: ,
Line 3950: INTCON = 0
Line 3950: )
Line 3950: ;
Line 3952: for
Line 3952: (
Line 3952: ID = j
Line 3952: =
Line 3952: INTCON = 0
Line 3952: ;
Line 3952: ID = j
Line 3952: <
Line 3952: INTCON = 2
Line 3952: ;
Line 3952: ID = j
Line 3952: +
Line 3952: +
Line 3952: )
Line 3952: {
Line 3953: ID = array
Line 3953: =
Line 3953: ID = rq
Line 3953: -
Line 3953: >
Line 3953: ID = arrays
Line 3953: +
Line 3953: ID = j
Line 3953: ;
Line 3954: for
Line 3954: (
Line 3954: ID = k
Line 3954: =
Line 3954: INTCON = 0
Line 3954: ;
Line 3954: ID = k
Line 3954: <
Line 3954: ID = MAX_PRIO
Line 3954: ;
Line 3954: ID = k
Line 3954: +
Line 3954: +
Line 3954: )
Line 3954: {
Line 3955: ID = INIT_LIST_HEAD
Line 3955: (
Line 3955: ID = array
Line 3955: -
Line 3955: >
Line 3955: ID = queue
Line 3955: +
Line 3955: ID = k
Line 3955: )
Line 3955: ;
Line 3956: Unrecognized token: 95
Line 3956: Unrecognized token: 95
Line 3956: ID = clear_bit
Line 3956: (
Line 3956: ID = k
Line 3956: ,
Line 3956: ID = array
Line 3956: -
Line 3956: >
Line 3956: ID = bitmap
Line 3956: )
Line 3956: ;
Line 3957: }
Line 3958: /
Line 3958: /
Line 3958: ID = delimiter
Line 3958: for
Line 3958: ID = bitsearch
Line 3959: Unrecognized token: 95
Line 3959: Unrecognized token: 95
Line 3959: ID = set_bit
Line 3959: (
Line 3959: ID = MAX_PRIO
Line 3959: ,
Line 3959: ID = array
Line 3959: -
Line 3959: >
Line 3959: ID = bitmap
Line 3959: )
Line 3959: ;
Line 3960: }
Line 3961: }
Line 3966: ID = rq
Line 3966: =
Line 3966: ID = this_rq
Line 3966: (
Line 3966: )
Line 3966: ;
Line 3967: ID = rq
Line 3967: -
Line 3967: >
Line 3967: ID = curr
Line 3967: =
Line 3967: ID = current
Line 3967: ;
Line 3968: ID = rq
Line 3968: -
Line 3968: >
Line 3968: ID = idle
Line 3968: =
Line 3968: ID = current
Line 3968: ;
Line 3969: ID = set_task_cpu
Line 3969: (
Line 3969: ID = current
Line 3969: ,
Line 3969: ID = smp_processor_id
Line 3969: (
Line 3969: )
Line 3969: )
Line 3969: ;
Line 3970: ID = wake_up_forked_process
Line 3970: (
Line 3970: ID = current
Line 3970: )
Line 3970: ;
Line 3975: ID = atomic_inc
Line 3975: (
Line 3975: Unrecognized token: 38
Line 3975: ID = init_mm
Line 3975: Unrecognized token: 46
Line 3975: ID = mm_count
Line 3975: )
Line 3975: ;
Line 3976: ID = enter_lazy_tlb
Line 3976: (
Line 3976: Unrecognized token: 38
Line 3976: ID = init_mm
Line 3976: ,
Line 3976: ID = current
Line 3976: )
Line 3976: ;
Line 3977: }
Line 3979: Unrecognized token: 35
Line 3979: ID = ifdef
Line 3979: ID = CONFIG_DEBUG_SPINLOCK_SLEEP
Line 3980: void
Line 3980: Unrecognized token: 95
Line 3980: Unrecognized token: 95
Line 3980: ID = might_sleep
Line 3980: (
Line 3980: char
Line 3980: *
Line 3980: ID = file
Line 3980: ,
Line 3980: int
Line 3980: ID = line
Line 3980: )
Line 3981: {
Line 3982: Unrecognized token: 35
Line 3982: if
Line 3982: ID = defined
Line 3982: (
Line 3982: ID = in_atomic
Line 3982: )
Line 3983: ID = static
Line 3983: ID = unsigned
Line 3983: ID = long
Line 3983: ID = prev_jiffy
Line 3983: ;
Line 3985: if
Line 3985: (
Line 3985: (
Line 3985: ID = in_atomic
Line 3985: (
Line 3985: )
Line 3985: ||
Line 3985: ID = irqs_disabled
Line 3985: (
Line 3985: )
Line 3985: )
Line 3985: &&
Line 3986: ID = system_state
Line 3986: ==
Line 3986: ID = SYSTEM_RUNNING
Line 3986: )
Line 3986: {
Line 3987: if
Line 3987: (
Line 3987: ID = time_before
Line 3987: (
Line 3987: ID = jiffies
Line 3987: ,
Line 3987: ID = prev_jiffy
Line 3987: +
Line 3987: ID = HZ
Line 3987: )
Line 3987: &&
Line 3987: ID = prev_jiffy
Line 3987: )
Line 3988: return
Line 3988: ;
Line 3989: ID = prev_jiffy
Line 3989: =
Line 3989: ID = jiffies
Line 3989: ;
Line 3990: ID = printk
Line 3990: (
Line 3990: ID = KERN_ERR
Line 3990: STRINGCON = "Debug: sleeping function called from invalid"
Line 3991: STRINGCON = " context at %s:%d\n"
Line 3991: ,
Line 3991: ID = file
Line 3991: ,
Line 3991: ID = line
Line 3991: )
Line 3991: ;
Line 3992: ID = printk
Line 3992: (
Line 3992: STRINGCON = "in_atomic():%d, irqs_disabled():%d\n"
Line 3992: ,
Line 3993: ID = in_atomic
Line 3993: (
Line 3993: )
Line 3993: ,
Line 3993: ID = irqs_disabled
Line 3993: (
Line 3993: )
Line 3993: )
Line 3993: ;
Line 3994: ID = dump_stack
Line 3994: (
Line 3994: )
Line 3994: ;
Line 3995: }
Line 3996: Unrecognized token: 35
Line 3996: ID = endif
Line 3997: }
Line 3998: ID = EXPORT_SYMBOL
Line 3998: (
Line 3998: Unrecognized token: 95
Line 3998: Unrecognized token: 95
Line 3998: ID = might_sleep
Line 3998: )
Line 3998: ;
Line 3999: Unrecognized token: 35
Line 3999: ID = endif
Line 4002: Unrecognized token: 35
Line 4002: if
Line 4002: ID = defined
Line 4002: (
Line 4002: ID = CONFIG_SMP
Line 4002: )
Line 4002: &&
Line 4002: ID = defined
Line 4002: (
Line 4002: ID = CONFIG_PREEMPT
Line 4002: )
Line 4013: void
Line 4013: Unrecognized token: 95
Line 4013: Unrecognized token: 95
Line 4013: ID = sched
Line 4013: Unrecognized token: 95
Line 4013: Unrecognized token: 95
Line 4013: ID = preempt_spin_lock
Line 4013: (
Line 4013: ID = spinlock_t
Line 4013: *
Line 4013: ID = lock
Line 4013: )
Line 4014: {
Line 4015: if
Line 4015: (
Line 4015: ID = preempt_count
Line 4015: (
Line 4015: )
Line 4015: >
Line 4015: INTCON = 1
Line 4015: )
Line 4015: {
Line 4016: Unrecognized token: 95
Line 4016: ID = raw_spin_lock
Line 4016: (
Line 4016: ID = lock
Line 4016: )
Line 4016: ;
Line 4017: return
Line 4017: ;
Line 4018: }
Line 4019: ID = do
Line 4019: {
Line 4020: ID = preempt_enable
Line 4020: (
Line 4020: )
Line 4020: ;
Line 4021: while
Line 4021: (
Line 4021: ID = spin_is_locked
Line 4021: (
Line 4021: ID = lock
Line 4021: )
Line 4021: )
Line 4022: ID = cpu_relax
Line 4022: (
Line 4022: )
Line 4022: ;
Line 4023: ID = preempt_disable
Line 4023: (
Line 4023: )
Line 4023: ;
Line 4024: }
Line 4024: while
Line 4024: (
Line 4024: !
Line 4024: Unrecognized token: 95
Line 4024: ID = raw_spin_trylock
Line 4024: (
Line 4024: ID = lock
Line 4024: )
Line 4024: )
Line 4024: ;
Line 4025: }
Line 4027: ID = EXPORT_SYMBOL
Line 4027: (
Line 4027: Unrecognized token: 95
Line 4027: Unrecognized token: 95
Line 4027: ID = preempt_spin_lock
Line 4027: )
Line 4027: ;
Line 4029: void
Line 4029: Unrecognized token: 95
Line 4029: Unrecognized token: 95
Line 4029: ID = sched
Line 4029: Unrecognized token: 95
Line 4029: Unrecognized token: 95
Line 4029: ID = preempt_write_lock
Line 4029: (
Line 4029: ID = rwlock_t
Line 4029: *
Line 4029: ID = lock
Line 4029: )
Line 4030: {
Line 4031: if
Line 4031: (
Line 4031: ID = preempt_count
Line 4031: (
Line 4031: )
Line 4031: >
Line 4031: INTCON = 1
Line 4031: )
Line 4031: {
Line 4032: Unrecognized token: 95
Line 4032: ID = raw_write_lock
Line 4032: (
Line 4032: ID = lock
Line 4032: )
Line 4032: ;
Line 4033: return
Line 4033: ;
Line 4034: }
Line 4036: ID = do
Line 4036: {
Line 4037: ID = preempt_enable
Line 4037: (
Line 4037: )
Line 4037: ;
Line 4038: while
Line 4038: (
Line 4038: ID = rwlock_is_locked
Line 4038: (
Line 4038: ID = lock
Line 4038: )
Line 4038: )
Line 4039: ID = cpu_relax
Line 4039: (
Line 4039: )
Line 4039: ;
Line 4040: ID = preempt_disable
Line 4040: (
Line 4040: )
Line 4040: ;
Line 4041: }
Line 4041: while
Line 4041: (
Line 4041: !
Line 4041: Unrecognized token: 95
Line 4041: ID = raw_write_trylock
Line 4041: (
Line 4041: ID = lock
Line 4041: )
Line 4041: )
Line 4041: ;
Line 4042: }
Line 4044: ID = EXPORT_SYMBOL
Line 4044: (
Line 4044: Unrecognized token: 95
Line 4044: Unrecognized token: 95
Line 4044: ID = preempt_write_lock
Line 4044: )
Line 4044: ;
Line 4045: Unrecognized token: 35
Line 4045: ID = endif
Line 4046: -EOF-

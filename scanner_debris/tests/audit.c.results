Line 44: Unrecognized token: 35
Line 44: ID = include
Line 44: <
Line 44: ID = linux
Line 44: /
Line 44: ID = init
Line 44: Unrecognized token: 46
Line 44: ID = h
Line 44: >
Line 45: Unrecognized token: 35
Line 45: ID = include
Line 45: <
Line 45: ID = asm
Line 45: /
Line 45: ID = atomic
Line 45: Unrecognized token: 46
Line 45: ID = h
Line 45: >
Line 46: Unrecognized token: 35
Line 46: ID = include
Line 46: <
Line 46: ID = asm
Line 46: /
Line 46: ID = types
Line 46: Unrecognized token: 46
Line 46: ID = h
Line 46: >
Line 47: Unrecognized token: 35
Line 47: ID = include
Line 47: <
Line 47: ID = linux
Line 47: /
Line 47: ID = mm
Line 47: Unrecognized token: 46
Line 47: ID = h
Line 47: >
Line 48: Unrecognized token: 35
Line 48: ID = include
Line 48: <
Line 48: ID = linux
Line 48: /
Line 48: ID = module
Line 48: Unrecognized token: 46
Line 48: ID = h
Line 48: >
Line 50: Unrecognized token: 35
Line 50: ID = include
Line 50: <
Line 50: ID = linux
Line 50: /
Line 50: ID = audit
Line 50: Unrecognized token: 46
Line 50: ID = h
Line 50: >
Line 52: Unrecognized token: 35
Line 52: ID = include
Line 52: <
Line 52: ID = net
Line 52: /
Line 52: ID = sock
Line 52: Unrecognized token: 46
Line 52: ID = h
Line 52: >
Line 53: Unrecognized token: 35
Line 53: ID = include
Line 53: <
Line 53: ID = linux
Line 53: /
Line 53: ID = skbuff
Line 53: Unrecognized token: 46
Line 53: ID = h
Line 53: >
Line 54: Unrecognized token: 35
Line 54: ID = include
Line 54: <
Line 54: ID = linux
Line 54: /
Line 54: ID = netlink
Line 54: Unrecognized token: 46
Line 54: ID = h
Line 54: >
Line 58: ID = static
Line 58: int
Line 58: ID = audit_initialized
Line 58: ;
Line 61: int
Line 61: ID = audit_enabled
Line 61: ;
Line 64: ID = static
Line 64: int
Line 64: ID = audit_default
Line 64: ;
Line 67: ID = static
Line 67: int
Line 67: ID = audit_failure
Line 67: =
Line 67: ID = AUDIT_FAIL_PRINTK
Line 67: ;
Line 71: ID = static
Line 71: int
Line 71: ID = audit_pid
Line 71: ;
Line 76: ID = static
Line 76: int
Line 76: ID = audit_rate_limit
Line 76: ;
Line 79: ID = static
Line 79: int
Line 79: ID = audit_backlog_limit
Line 79: =
Line 79: INTCON = 64
Line 79: ;
Line 80: ID = static
Line 80: ID = atomic_t
Line 80: ID = audit_backlog
Line 80: =
Line 80: ID = ATOMIC_INIT
Line 80: (
Line 80: INTCON = 0
Line 80: )
Line 80: ;
Line 89: ID = static
Line 89: ID = atomic_t
Line 89: ID = audit_lost
Line 89: =
Line 89: ID = ATOMIC_INIT
Line 89: (
Line 89: INTCON = 0
Line 89: )
Line 89: ;
Line 92: ID = static
Line 92: ID = struct
Line 92: ID = sock
Line 92: *
Line 92: ID = audit_sock
Line 92: ;
Line 101: ID = static
Line 101: ID = spinlock_t
Line 101: ID = audit_txlist_lock
Line 101: =
Line 101: ID = SPIN_LOCK_UNLOCKED
Line 101: ;
Line 102: ID = static
Line 102: ID = spinlock_t
Line 102: ID = audit_freelist_lock
Line 102: =
Line 102: ID = SPIN_LOCK_UNLOCKED
Line 102: ;
Line 103: ID = static
Line 103: int
Line 103: ID = audit_freelist_count
Line 103: =
Line 103: INTCON = 0
Line 103: ;
Line 104: ID = static
Line 104: ID = LIST_HEAD
Line 104: (
Line 104: ID = audit_txlist
Line 104: )
Line 104: ;
Line 105: ID = static
Line 105: ID = LIST_HEAD
Line 105: (
Line 105: ID = audit_freelist
Line 105: )
Line 105: ;
Line 110: ID = static
Line 110: ID = LIST_HEAD
Line 110: (
Line 110: ID = audit_tsklist
Line 110: )
Line 110: ;
Line 111: ID = static
Line 111: ID = LIST_HEAD
Line 111: (
Line 111: ID = audit_entlist
Line 111: )
Line 111: ;
Line 112: ID = static
Line 112: ID = LIST_HEAD
Line 112: (
Line 112: ID = audit_extlist
Line 112: )
Line 112: ;
Line 117: ID = static
Line 117: ID = DECLARE_MUTEX
Line 117: (
Line 117: ID = audit_netlink_sem
Line 117: )
Line 117: ;
Line 122: Unrecognized token: 35
Line 122: ID = define
Line 122: ID = AUDIT_BUFSIZ
Line 122: INTCON = 1024
Line 126: Unrecognized token: 35
Line 126: ID = define
Line 126: ID = AUDIT_MAXFREE
Line 126: (
Line 126: INTCON = 2
Line 126: *
Line 126: ID = NR_CPUS
Line 126: )
Line 133: ID = struct
Line 133: ID = audit_buffer
Line 133: {
Line 134: ID = struct
Line 134: ID = list_head
Line 134: ID = list
Line 134: ;
Line 135: ID = struct
Line 135: ID = sk_buff_head
Line 135: ID = sklist
Line 135: ;
Line 136: ID = struct
Line 136: ID = audit_context
Line 136: *
Line 136: ID = ctx
Line 136: ;
Line 137: int
Line 137: ID = len
Line 137: ;
Line 138: char
Line 138: ID = tmp
Line 138: [
Line 138: ID = AUDIT_BUFSIZ
Line 138: ]
Line 138: ;
Line 141: ID = struct
Line 141: ID = nlmsghdr
Line 141: *
Line 141: ID = nlh
Line 141: ;
Line 142: int
Line 142: ID = total
Line 142: ;
Line 143: int
Line 143: ID = type
Line 143: ;
Line 144: int
Line 144: ID = pid
Line 144: ;
Line 145: int
Line 145: ID = count
Line 145: ;
Line 146: }
Line 146: ;
Line 148: ID = struct
Line 148: ID = audit_entry
Line 148: {
Line 149: ID = struct
Line 149: ID = list_head
Line 149: ID = list
Line 149: ;
Line 150: ID = struct
Line 150: ID = audit_rule
Line 150: ID = rule
Line 150: ;
Line 151: }
Line 151: ;
Line 153: ID = static
Line 153: void
Line 153: ID = audit_panic
Line 153: (
Line 153: ID = const
Line 153: char
Line 153: *
Line 153: ID = message
Line 153: )
Line 154: {
Line 155: ID = switch
Line 155: (
Line 155: ID = audit_failure
Line 155: )
Line 156: {
Line 157: ID = case
Line 157: ID = AUDIT_FAIL_SILENT
Line 157: Unrecognized token: 58
Line 158: ID = break
Line 158: ;
Line 159: ID = case
Line 159: ID = AUDIT_FAIL_PRINTK
Line 159: Unrecognized token: 58
Line 160: ID = printk
Line 160: (
Line 160: ID = KERN_ERR
Line 160: STRINGCON = "audit: %s\n"
Line 160: ,
Line 160: ID = message
Line 160: )
Line 160: ;
Line 161: ID = break
Line 161: ;
Line 162: ID = case
Line 162: ID = AUDIT_FAIL_PANIC
Line 162: Unrecognized token: 58
Line 163: ID = panic
Line 163: (
Line 163: ID = message
Line 163: )
Line 163: ;
Line 164: ID = break
Line 164: ;
Line 165: }
Line 166: }
Line 168: ID = static
Line 168: ID = inline
Line 168: int
Line 168: ID = audit_rate_check
Line 168: (
Line 168: void
Line 168: )
Line 169: {
Line 170: ID = static
Line 170: ID = unsigned
Line 170: ID = long
Line 170: ID = last_check
Line 170: =
Line 170: INTCON = 0
Line 170: ;
Line 171: ID = static
Line 171: int
Line 171: ID = messages
Line 171: =
Line 171: INTCON = 0
Line 171: ;
Line 172: ID = static
Line 172: ID = spinlock_t
Line 172: ID = lock
Line 172: =
Line 172: ID = SPIN_LOCK_UNLOCKED
Line 172: ;
Line 173: ID = unsigned
Line 173: ID = long
Line 173: ID = flags
Line 173: ;
Line 174: ID = unsigned
Line 174: ID = long
Line 174: ID = now
Line 174: ;
Line 175: ID = unsigned
Line 175: ID = long
Line 175: ID = elapsed
Line 175: ;
Line 176: int
Line 176: ID = retval
Line 176: =
Line 176: INTCON = 0
Line 176: ;
Line 178: if
Line 178: (
Line 178: !
Line 178: ID = audit_rate_limit
Line 178: )
Line 178: return
Line 178: INTCON = 1
Line 178: ;
Line 180: ID = spin_lock_irqsave
Line 180: (
Line 180: Unrecognized token: 38
Line 180: ID = lock
Line 180: ,
Line 180: ID = flags
Line 180: )
Line 180: ;
Line 181: if
Line 181: (
Line 181: +
Line 181: +
Line 181: ID = messages
Line 181: <
Line 181: ID = audit_rate_limit
Line 181: )
Line 181: {
Line 182: ID = retval
Line 182: =
Line 182: INTCON = 1
Line 182: ;
Line 183: }
Line 183: else
Line 183: {
Line 184: ID = now
Line 184: =
Line 184: ID = jiffies
Line 184: ;
Line 185: ID = elapsed
Line 185: =
Line 185: ID = now
Line 185: -
Line 185: ID = last_check
Line 185: ;
Line 186: if
Line 186: (
Line 186: ID = elapsed
Line 186: >
Line 186: ID = HZ
Line 186: )
Line 186: {
Line 187: ID = last_check
Line 187: =
Line 187: ID = now
Line 187: ;
Line 188: ID = messages
Line 188: =
Line 188: INTCON = 0
Line 188: ;
Line 189: ID = retval
Line 189: =
Line 189: INTCON = 1
Line 189: ;
Line 190: }
Line 191: }
Line 192: ID = spin_unlock_irqrestore
Line 192: (
Line 192: Unrecognized token: 38
Line 192: ID = lock
Line 192: ,
Line 192: ID = flags
Line 192: )
Line 192: ;
Line 194: return
Line 194: ID = retval
Line 194: ;
Line 195: }
Line 199: void
Line 199: ID = audit_log_lost
Line 199: (
Line 199: ID = const
Line 199: char
Line 199: *
Line 199: ID = message
Line 199: )
Line 200: {
Line 201: ID = static
Line 201: ID = unsigned
Line 201: ID = long
Line 201: ID = last_msg
Line 201: =
Line 201: INTCON = 0
Line 201: ;
Line 202: ID = static
Line 202: ID = spinlock_t
Line 202: ID = lock
Line 202: =
Line 202: ID = SPIN_LOCK_UNLOCKED
Line 202: ;
Line 203: ID = unsigned
Line 203: ID = long
Line 203: ID = flags
Line 203: ;
Line 204: ID = unsigned
Line 204: ID = long
Line 204: ID = now
Line 204: ;
Line 205: int
Line 205: ID = print
Line 205: ;
Line 207: ID = atomic_inc
Line 207: (
Line 207: Unrecognized token: 38
Line 207: ID = audit_lost
Line 207: )
Line 207: ;
Line 209: ID = print
Line 209: =
Line 209: (
Line 209: ID = audit_failure
Line 209: ==
Line 209: ID = AUDIT_FAIL_PANIC
Line 209: ||
Line 209: !
Line 209: ID = audit_rate_limit
Line 209: )
Line 209: ;
Line 211: if
Line 211: (
Line 211: !
Line 211: ID = print
Line 211: )
Line 211: {
Line 212: ID = spin_lock_irqsave
Line 212: (
Line 212: Unrecognized token: 38
Line 212: ID = lock
Line 212: ,
Line 212: ID = flags
Line 212: )
Line 212: ;
Line 213: ID = now
Line 213: =
Line 213: ID = jiffies
Line 213: ;
Line 214: if
Line 214: (
Line 214: ID = now
Line 214: -
Line 214: ID = last_msg
Line 214: >
Line 214: ID = HZ
Line 214: )
Line 214: {
Line 215: ID = print
Line 215: =
Line 215: INTCON = 1
Line 215: ;
Line 216: ID = last_msg
Line 216: =
Line 216: ID = now
Line 216: ;
Line 217: }
Line 218: ID = spin_unlock_irqrestore
Line 218: (
Line 218: Unrecognized token: 38
Line 218: ID = lock
Line 218: ,
Line 218: ID = flags
Line 218: )
Line 218: ;
Line 219: }
Line 221: if
Line 221: (
Line 221: ID = print
Line 221: )
Line 221: {
Line 222: ID = printk
Line 222: (
Line 222: ID = KERN_WARNING
Line 223: STRINGCON = "audit: audit_lost=%d audit_backlog=%d"
Line 224: STRINGCON = " audit_rate_limit=%d audit_backlog_limit=%d\n"
Line 224: ,
Line 225: ID = atomic_read
Line 225: (
Line 225: Unrecognized token: 38
Line 225: ID = audit_lost
Line 225: )
Line 225: ,
Line 226: ID = atomic_read
Line 226: (
Line 226: Unrecognized token: 38
Line 226: ID = audit_backlog
Line 226: )
Line 226: ,
Line 227: ID = audit_rate_limit
Line 227: ,
Line 228: ID = audit_backlog_limit
Line 228: )
Line 228: ;
Line 229: ID = audit_panic
Line 229: (
Line 229: ID = message
Line 229: )
Line 229: ;
Line 230: }
Line 232: }
Line 234: int
Line 234: ID = audit_set_rate_limit
Line 234: (
Line 234: int
Line 234: ID = limit
Line 234: )
Line 235: {
Line 236: int
Line 236: ID = old
Line 236: =
Line 236: ID = audit_rate_limit
Line 236: ;
Line 237: ID = audit_rate_limit
Line 237: =
Line 237: ID = limit
Line 237: ;
Line 238: ID = audit_log
Line 238: (
Line 238: ID = current
Line 238: -
Line 238: >
Line 238: ID = audit_context
Line 238: ,
Line 238: STRINGCON = "audit_rate_limit=%d old=%d"
Line 238: ,
Line 239: ID = audit_rate_limit
Line 239: ,
Line 239: ID = old
Line 239: )
Line 239: ;
Line 240: return
Line 240: ID = old
Line 240: ;
Line 241: }
Line 243: int
Line 243: ID = audit_set_backlog_limit
Line 243: (
Line 243: int
Line 243: ID = limit
Line 243: )
Line 244: {
Line 245: int
Line 245: ID = old
Line 245: =
Line 245: ID = audit_backlog_limit
Line 245: ;
Line 246: ID = audit_backlog_limit
Line 246: =
Line 246: ID = limit
Line 246: ;
Line 247: ID = audit_log
Line 247: (
Line 247: ID = current
Line 247: -
Line 247: >
Line 247: ID = audit_context
Line 247: ,
Line 247: STRINGCON = "audit_backlog_limit=%d old=%d"
Line 247: ,
Line 248: ID = audit_backlog_limit
Line 248: ,
Line 248: ID = old
Line 248: )
Line 248: ;
Line 249: return
Line 249: ID = old
Line 249: ;
Line 250: }
Line 252: int
Line 252: ID = audit_set_enabled
Line 252: (
Line 252: int
Line 252: ID = state
Line 252: )
Line 253: {
Line 254: int
Line 254: ID = old
Line 254: =
Line 254: ID = audit_enabled
Line 254: ;
Line 255: if
Line 255: (
Line 255: ID = state
Line 255: !=
Line 255: INTCON = 0
Line 255: &&
Line 255: ID = state
Line 255: !=
Line 255: INTCON = 1
Line 255: )
Line 256: return
Line 256: -
Line 256: ID = EINVAL
Line 256: ;
Line 257: ID = audit_enabled
Line 257: =
Line 257: ID = state
Line 257: ;
Line 258: ID = audit_log
Line 258: (
Line 258: ID = current
Line 258: -
Line 258: >
Line 258: ID = audit_context
Line 258: ,
Line 258: STRINGCON = "audit_enabled=%d old=%d"
Line 258: ,
Line 259: ID = audit_enabled
Line 259: ,
Line 259: ID = old
Line 259: )
Line 259: ;
Line 260: return
Line 260: ID = old
Line 260: ;
Line 261: }
Line 263: int
Line 263: ID = audit_set_failure
Line 263: (
Line 263: int
Line 263: ID = state
Line 263: )
Line 264: {
Line 265: int
Line 265: ID = old
Line 265: =
Line 265: ID = audit_failure
Line 265: ;
Line 266: if
Line 266: (
Line 266: ID = state
Line 266: !=
Line 266: ID = AUDIT_FAIL_SILENT
Line 267: &&
Line 267: ID = state
Line 267: !=
Line 267: ID = AUDIT_FAIL_PRINTK
Line 268: &&
Line 268: ID = state
Line 268: !=
Line 268: ID = AUDIT_FAIL_PANIC
Line 268: )
Line 269: return
Line 269: -
Line 269: ID = EINVAL
Line 269: ;
Line 270: ID = audit_failure
Line 270: =
Line 270: ID = state
Line 270: ;
Line 271: ID = audit_log
Line 271: (
Line 271: ID = current
Line 271: -
Line 271: >
Line 271: ID = audit_context
Line 271: ,
Line 271: STRINGCON = "audit_failure=%d old=%d"
Line 271: ,
Line 272: ID = audit_failure
Line 272: ,
Line 272: ID = old
Line 272: )
Line 272: ;
Line 273: return
Line 273: ID = old
Line 273: ;
Line 274: }
Line 276: Unrecognized token: 35
Line 276: ID = ifdef
Line 276: ID = CONFIG_NET
Line 277: void
Line 277: ID = audit_send_reply
Line 277: (
Line 277: int
Line 277: ID = pid
Line 277: ,
Line 277: int
Line 277: ID = seq
Line 277: ,
Line 277: int
Line 277: ID = type
Line 277: ,
Line 277: int
Line 277: ID = done
Line 277: ,
Line 277: int
Line 277: ID = multi
Line 277: ,
Line 278: void
Line 278: *
Line 278: ID = payload
Line 278: ,
Line 278: int
Line 278: ID = size
Line 278: )
Line 279: {
Line 280: ID = struct
Line 280: ID = sk_buff
Line 280: *
Line 280: ID = skb
Line 280: ;
Line 281: ID = struct
Line 281: ID = nlmsghdr
Line 281: *
Line 281: ID = nlh
Line 281: ;
Line 282: int
Line 282: ID = len
Line 282: =
Line 282: ID = NLMSG_SPACE
Line 282: (
Line 282: ID = size
Line 282: )
Line 282: ;
Line 283: void
Line 283: *
Line 283: ID = data
Line 283: ;
Line 284: int
Line 284: ID = flags
Line 284: =
Line 284: ID = multi
Line 284: Unrecognized token: 63
Line 284: ID = NLM_F_MULTI
Line 284: Unrecognized token: 58
Line 284: INTCON = 0
Line 284: ;
Line 285: int
Line 285: ID = t
Line 285: =
Line 285: ID = done
Line 285: Unrecognized token: 63
Line 285: ID = NLMSG_DONE
Line 285: Unrecognized token: 58
Line 285: ID = type
Line 285: ;
Line 287: ID = skb
Line 287: =
Line 287: ID = alloc_skb
Line 287: (
Line 287: ID = len
Line 287: ,
Line 287: ID = GFP_KERNEL
Line 287: )
Line 287: ;
Line 288: if
Line 288: (
Line 288: !
Line 288: ID = skb
Line 288: )
Line 289: ID = goto
Line 289: ID = nlmsg_failure
Line 289: ;
Line 291: ID = nlh
Line 291: =
Line 291: ID = NLMSG_PUT
Line 291: (
Line 291: ID = skb
Line 291: ,
Line 291: ID = pid
Line 291: ,
Line 291: ID = seq
Line 291: ,
Line 291: ID = t
Line 291: ,
Line 291: ID = len
Line 291: -
Line 291: ID = sizeof
Line 291: (
Line 291: *
Line 291: ID = nlh
Line 291: )
Line 291: )
Line 291: ;
Line 292: ID = nlh
Line 292: -
Line 292: >
Line 292: ID = nlmsg_flags
Line 292: =
Line 292: ID = flags
Line 292: ;
Line 293: ID = data
Line 293: =
Line 293: ID = NLMSG_DATA
Line 293: (
Line 293: ID = nlh
Line 293: )
Line 293: ;
Line 294: ID = memcpy
Line 294: (
Line 294: ID = data
Line 294: ,
Line 294: ID = payload
Line 294: ,
Line 294: ID = size
Line 294: )
Line 294: ;
Line 295: ID = netlink_unicast
Line 295: (
Line 295: ID = audit_sock
Line 295: ,
Line 295: ID = skb
Line 295: ,
Line 295: ID = pid
Line 295: ,
Line 295: ID = MSG_DONTWAIT
Line 295: )
Line 295: ;
Line 296: return
Line 296: ;
Line 298: ID = nlmsg_failure
Line 298: Unrecognized token: 58
Line 299: if
Line 299: (
Line 299: ID = skb
Line 299: )
Line 300: ID = kfree_skb
Line 300: (
Line 300: ID = skb
Line 300: )
Line 300: ;
Line 301: }
Line 303: ID = static
Line 303: int
Line 303: ID = audit_receive_msg
Line 303: (
Line 303: ID = struct
Line 303: ID = sk_buff
Line 303: *
Line 303: ID = skb
Line 303: ,
Line 303: ID = struct
Line 303: ID = nlmsghdr
Line 303: *
Line 303: ID = nlh
Line 303: )
Line 304: {
Line 305: ID = u32
Line 305: ID = uid
Line 305: ,
Line 305: ID = pid
Line 305: ,
Line 305: ID = seq
Line 305: ;
Line 306: void
Line 306: *
Line 306: ID = data
Line 306: ;
Line 307: ID = struct
Line 307: ID = audit_status
Line 307: *
Line 307: ID = status_get
Line 307: ,
Line 307: ID = status_set
Line 307: ;
Line 308: ID = struct
Line 308: ID = audit_login
Line 308: *
Line 308: ID = login
Line 308: ;
Line 309: int
Line 309: ID = err
Line 309: =
Line 309: INTCON = 0
Line 309: ;
Line 310: ID = struct
Line 310: ID = audit_buffer
Line 310: *
Line 310: ID = ab
Line 310: ;
Line 312: ID = pid
Line 312: =
Line 312: ID = NETLINK_CREDS
Line 312: (
Line 312: ID = skb
Line 312: )
Line 312: -
Line 312: >
Line 312: ID = pid
Line 312: ;
Line 313: ID = uid
Line 313: =
Line 313: ID = NETLINK_CREDS
Line 313: (
Line 313: ID = skb
Line 313: )
Line 313: -
Line 313: >
Line 313: ID = uid
Line 313: ;
Line 314: ID = seq
Line 314: =
Line 314: ID = nlh
Line 314: -
Line 314: >
Line 314: ID = nlmsg_seq
Line 314: ;
Line 315: ID = data
Line 315: =
Line 315: ID = NLMSG_DATA
Line 315: (
Line 315: ID = nlh
Line 315: )
Line 315: ;
Line 317: ID = switch
Line 317: (
Line 317: ID = nlh
Line 317: -
Line 317: >
Line 317: ID = nlmsg_type
Line 317: )
Line 317: {
Line 318: ID = case
Line 318: ID = AUDIT_GET
Line 318: Unrecognized token: 58
Line 319: ID = status_set
Line 319: Unrecognized token: 46
Line 319: ID = enabled
Line 319: =
Line 319: ID = audit_enabled
Line 319: ;
Line 320: ID = status_set
Line 320: Unrecognized token: 46
Line 320: ID = failure
Line 320: =
Line 320: ID = audit_failure
Line 320: ;
Line 321: ID = status_set
Line 321: Unrecognized token: 46
Line 321: ID = pid
Line 321: =
Line 321: ID = audit_pid
Line 321: ;
Line 322: ID = status_set
Line 322: Unrecognized token: 46
Line 322: ID = rate_limit
Line 322: =
Line 322: ID = audit_rate_limit
Line 322: ;
Line 323: ID = status_set
Line 323: Unrecognized token: 46
Line 323: ID = backlog_limit
Line 323: =
Line 323: ID = audit_backlog_limit
Line 323: ;
Line 324: ID = status_set
Line 324: Unrecognized token: 46
Line 324: ID = lost
Line 324: =
Line 324: ID = atomic_read
Line 324: (
Line 324: Unrecognized token: 38
Line 324: ID = audit_lost
Line 324: )
Line 324: ;
Line 325: ID = status_set
Line 325: Unrecognized token: 46
Line 325: ID = backlog
Line 325: =
Line 325: ID = atomic_read
Line 325: (
Line 325: Unrecognized token: 38
Line 325: ID = audit_backlog
Line 325: )
Line 325: ;
Line 326: ID = audit_send_reply
Line 326: (
Line 326: ID = pid
Line 326: ,
Line 326: ID = seq
Line 326: ,
Line 326: ID = AUDIT_GET
Line 326: ,
Line 326: INTCON = 0
Line 326: ,
Line 326: INTCON = 0
Line 326: ,
Line 327: Unrecognized token: 38
Line 327: ID = status_set
Line 327: ,
Line 327: ID = sizeof
Line 327: (
Line 327: ID = status_set
Line 327: )
Line 327: )
Line 327: ;
Line 328: ID = break
Line 328: ;
Line 329: ID = case
Line 329: ID = AUDIT_SET
Line 329: Unrecognized token: 58
Line 330: if
Line 330: (
Line 330: !
Line 330: ID = capable
Line 330: (
Line 330: ID = CAP_SYS_ADMIN
Line 330: )
Line 330: )
Line 331: return
Line 331: -
Line 331: ID = EPERM
Line 331: ;
Line 332: ID = status_get
Line 332: =
Line 332: (
Line 332: ID = struct
Line 332: ID = audit_status
Line 332: *
Line 332: )
Line 332: ID = data
Line 332: ;
Line 333: if
Line 333: (
Line 333: ID = status_get
Line 333: -
Line 333: >
Line 333: ID = mask
Line 333: Unrecognized token: 38
Line 333: ID = AUDIT_STATUS_ENABLED
Line 333: )
Line 333: {
Line 334: ID = err
Line 334: =
Line 334: ID = audit_set_enabled
Line 334: (
Line 334: ID = status_get
Line 334: -
Line 334: >
Line 334: ID = enabled
Line 334: )
Line 334: ;
Line 335: if
Line 335: (
Line 335: ID = err
Line 335: <
Line 335: INTCON = 0
Line 335: )
Line 335: return
Line 335: ID = err
Line 335: ;
Line 336: }
Line 337: if
Line 337: (
Line 337: ID = status_get
Line 337: -
Line 337: >
Line 337: ID = mask
Line 337: Unrecognized token: 38
Line 337: ID = AUDIT_STATUS_FAILURE
Line 337: )
Line 337: {
Line 338: ID = err
Line 338: =
Line 338: ID = audit_set_failure
Line 338: (
Line 338: ID = status_get
Line 338: -
Line 338: >
Line 338: ID = failure
Line 338: )
Line 338: ;
Line 339: if
Line 339: (
Line 339: ID = err
Line 339: <
Line 339: INTCON = 0
Line 339: )
Line 339: return
Line 339: ID = err
Line 339: ;
Line 340: }
Line 341: if
Line 341: (
Line 341: ID = status_get
Line 341: -
Line 341: >
Line 341: ID = mask
Line 341: Unrecognized token: 38
Line 341: ID = AUDIT_STATUS_PID
Line 341: )
Line 341: {
Line 342: int
Line 342: ID = old
Line 342: =
Line 342: ID = audit_pid
Line 342: ;
Line 343: ID = audit_pid
Line 343: =
Line 343: ID = status_get
Line 343: -
Line 343: >
Line 343: ID = pid
Line 343: ;
Line 344: ID = audit_log
Line 344: (
Line 344: ID = current
Line 344: -
Line 344: >
Line 344: ID = audit_context
Line 344: ,
Line 345: STRINGCON = "audit_pid=%d old=%d"
Line 345: ,
Line 345: ID = audit_pid
Line 345: ,
Line 345: ID = old
Line 345: )
Line 345: ;
Line 346: }
Line 347: if
Line 347: (
Line 347: ID = status_get
Line 347: -
Line 347: >
Line 347: ID = mask
Line 347: Unrecognized token: 38
Line 347: ID = AUDIT_STATUS_RATE_LIMIT
Line 347: )
Line 348: ID = audit_set_rate_limit
Line 348: (
Line 348: ID = status_get
Line 348: -
Line 348: >
Line 348: ID = rate_limit
Line 348: )
Line 348: ;
Line 349: if
Line 349: (
Line 349: ID = status_get
Line 349: -
Line 349: >
Line 349: ID = mask
Line 349: Unrecognized token: 38
Line 349: ID = AUDIT_STATUS_BACKLOG_LIMIT
Line 349: )
Line 350: ID = audit_set_backlog_limit
Line 350: (
Line 350: ID = status_get
Line 350: -
Line 350: >
Line 350: ID = backlog_limit
Line 350: )
Line 350: ;
Line 351: ID = break
Line 351: ;
Line 352: ID = case
Line 352: ID = AUDIT_USER
Line 352: Unrecognized token: 58
Line 353: ID = ab
Line 353: =
Line 353: ID = audit_log_start
Line 353: (
Line 353: ID = NULL
Line 353: )
Line 353: ;
Line 354: if
Line 354: (
Line 354: !
Line 354: ID = ab
Line 354: )
Line 355: ID = break
Line 355: ;
Line 356: ID = audit_log_format
Line 356: (
Line 356: ID = ab
Line 356: ,
Line 357: STRINGCON = "user pid=%d uid=%d length=%d msg='%.1024s'"
Line 357: ,
Line 358: ID = pid
Line 358: ,
Line 358: ID = uid
Line 358: ,
Line 359: (
Line 359: int
Line 359: )
Line 359: (
Line 359: ID = nlh
Line 359: -
Line 359: >
Line 359: ID = nlmsg_len
Line 360: -
Line 360: (
Line 360: (
Line 360: char
Line 360: *
Line 360: )
Line 360: ID = data
Line 360: -
Line 360: (
Line 360: char
Line 360: *
Line 360: )
Line 360: ID = nlh
Line 360: )
Line 360: )
Line 360: ,
Line 361: (
Line 361: char
Line 361: *
Line 361: )
Line 361: ID = data
Line 361: )
Line 361: ;
Line 362: ID = ab
Line 362: -
Line 362: >
Line 362: ID = type
Line 362: =
Line 362: ID = AUDIT_USER
Line 362: ;
Line 363: ID = ab
Line 363: -
Line 363: >
Line 363: ID = pid
Line 363: =
Line 363: ID = pid
Line 363: ;
Line 364: ID = audit_log_end
Line 364: (
Line 364: ID = ab
Line 364: )
Line 364: ;
Line 365: ID = break
Line 365: ;
Line 366: ID = case
Line 366: ID = AUDIT_LOGIN
Line 366: Unrecognized token: 58
Line 367: if
Line 367: (
Line 367: !
Line 367: ID = capable
Line 367: (
Line 367: ID = CAP_SYS_ADMIN
Line 367: )
Line 367: )
Line 368: return
Line 368: -
Line 368: ID = EPERM
Line 368: ;
Line 369: ID = login
Line 369: =
Line 369: (
Line 369: ID = struct
Line 369: ID = audit_login
Line 369: *
Line 369: )
Line 369: ID = data
Line 369: ;
Line 370: ID = ab
Line 370: =
Line 370: ID = audit_log_start
Line 370: (
Line 370: ID = NULL
Line 370: )
Line 370: ;
Line 371: if
Line 371: (
Line 371: ID = ab
Line 371: )
Line 371: {
Line 372: ID = audit_log_format
Line 372: (
Line 372: ID = ab
Line 372: ,
Line 372: STRINGCON = "login pid=%d uid=%d loginuid=%d"
Line 373: STRINGCON = " length=%d msg='%.1024s'"
Line 373: ,
Line 374: ID = pid
Line 374: ,
Line 374: ID = uid
Line 374: ,
Line 375: ID = login
Line 375: -
Line 375: >
Line 375: ID = loginuid
Line 375: ,
Line 376: ID = login
Line 376: -
Line 376: >
Line 376: ID = msglen
Line 376: ,
Line 377: ID = login
Line 377: -
Line 377: >
Line 377: ID = msg
Line 377: )
Line 377: ;
Line 378: ID = ab
Line 378: -
Line 378: >
Line 378: ID = type
Line 378: =
Line 378: ID = AUDIT_LOGIN
Line 378: ;
Line 379: ID = ab
Line 379: -
Line 379: >
Line 379: ID = pid
Line 379: =
Line 379: ID = pid
Line 379: ;
Line 380: ID = audit_log_end
Line 380: (
Line 380: ID = ab
Line 380: )
Line 380: ;
Line 381: }
Line 382: Unrecognized token: 35
Line 382: ID = ifdef
Line 382: ID = CONFIG_AUDITSYSCALL
Line 383: ID = err
Line 383: =
Line 383: ID = audit_set_loginuid
Line 383: (
Line 383: ID = current
Line 383: -
Line 383: >
Line 383: ID = audit_context
Line 383: ,
Line 384: ID = login
Line 384: -
Line 384: >
Line 384: ID = loginuid
Line 384: )
Line 384: ;
Line 385: Unrecognized token: 35
Line 385: ID = endif
Line 386: ID = break
Line 386: ;
Line 387: ID = case
Line 387: ID = AUDIT_LIST
Line 387: Unrecognized token: 58
Line 388: ID = case
Line 388: ID = AUDIT_ADD
Line 388: Unrecognized token: 58
Line 389: ID = case
Line 389: ID = AUDIT_DEL
Line 389: Unrecognized token: 58
Line 390: Unrecognized token: 35
Line 390: ID = ifdef
Line 390: ID = CONFIG_AUDITSYSCALL
Line 391: ID = err
Line 391: =
Line 391: ID = audit_receive_filter
Line 391: (
Line 391: ID = nlh
Line 391: -
Line 391: >
Line 391: ID = nlmsg_type
Line 391: ,
Line 391: ID = pid
Line 391: ,
Line 391: ID = uid
Line 391: ,
Line 391: ID = seq
Line 391: ,
Line 392: ID = data
Line 392: )
Line 392: ;
Line 393: Unrecognized token: 35
Line 393: else
Line 394: ID = err
Line 394: =
Line 394: -
Line 394: ID = EOPNOTSUPP
Line 394: ;
Line 395: Unrecognized token: 35
Line 395: ID = endif
Line 396: ID = break
Line 396: ;
Line 397: ID = default
Line 397: Unrecognized token: 58
Line 398: ID = err
Line 398: =
Line 398: -
Line 398: ID = EINVAL
Line 398: ;
Line 399: ID = break
Line 399: ;
Line 400: }
Line 402: return
Line 402: ID = err
Line 402: <
Line 402: INTCON = 0
Line 402: Unrecognized token: 63
Line 402: ID = err
Line 402: Unrecognized token: 58
Line 402: INTCON = 0
Line 402: ;
Line 403: }
Line 408: ID = static
Line 408: int
Line 408: ID = audit_receive_skb
Line 408: (
Line 408: ID = struct
Line 408: ID = sk_buff
Line 408: *
Line 408: ID = skb
Line 408: )
Line 409: {
Line 410: int
Line 410: ID = err
Line 410: ;
Line 411: ID = struct
Line 411: ID = nlmsghdr
Line 411: *
Line 411: ID = nlh
Line 411: ;
Line 412: ID = u32
Line 412: ID = rlen
Line 412: ;
Line 414: while
Line 414: (
Line 414: ID = skb
Line 414: -
Line 414: >
Line 414: ID = len
Line 414: >=
Line 414: ID = NLMSG_SPACE
Line 414: (
Line 414: INTCON = 0
Line 414: )
Line 414: )
Line 414: {
Line 415: ID = nlh
Line 415: =
Line 415: (
Line 415: ID = struct
Line 415: ID = nlmsghdr
Line 415: *
Line 415: )
Line 415: ID = skb
Line 415: -
Line 415: >
Line 415: ID = data
Line 415: ;
Line 416: if
Line 416: (
Line 416: ID = nlh
Line 416: -
Line 416: >
Line 416: ID = nlmsg_len
Line 416: <
Line 416: ID = sizeof
Line 416: (
Line 416: *
Line 416: ID = nlh
Line 416: )
Line 416: ||
Line 416: ID = skb
Line 416: -
Line 416: >
Line 416: ID = len
Line 416: <
Line 416: ID = nlh
Line 416: -
Line 416: >
Line 416: ID = nlmsg_len
Line 416: )
Line 417: return
Line 417: INTCON = 0
Line 417: ;
Line 418: ID = rlen
Line 418: =
Line 418: ID = NLMSG_ALIGN
Line 418: (
Line 418: ID = nlh
Line 418: -
Line 418: >
Line 418: ID = nlmsg_len
Line 418: )
Line 418: ;
Line 419: if
Line 419: (
Line 419: ID = rlen
Line 419: >
Line 419: ID = skb
Line 419: -
Line 419: >
Line 419: ID = len
Line 419: )
Line 420: ID = rlen
Line 420: =
Line 420: ID = skb
Line 420: -
Line 420: >
Line 420: ID = len
Line 420: ;
Line 421: if
Line 421: (
Line 421: (
Line 421: ID = err
Line 421: =
Line 421: ID = audit_receive_msg
Line 421: (
Line 421: ID = skb
Line 421: ,
Line 421: ID = nlh
Line 421: )
Line 421: )
Line 421: )
Line 421: {
Line 422: ID = netlink_ack
Line 422: (
Line 422: ID = skb
Line 422: ,
Line 422: ID = nlh
Line 422: ,
Line 422: -
Line 422: ID = err
Line 422: )
Line 422: ;
Line 423: }
Line 423: else
Line 423: if
Line 423: (
Line 423: ID = nlh
Line 423: -
Line 423: >
Line 423: ID = nlmsg_flags
Line 423: Unrecognized token: 38
Line 423: ID = NLM_F_ACK
Line 423: )
Line 424: ID = netlink_ack
Line 424: (
Line 424: ID = skb
Line 424: ,
Line 424: ID = nlh
Line 424: ,
Line 424: INTCON = 0
Line 424: )
Line 424: ;
Line 425: ID = skb_pull
Line 425: (
Line 425: ID = skb
Line 425: ,
Line 425: ID = rlen
Line 425: )
Line 425: ;
Line 426: }
Line 427: return
Line 427: INTCON = 0
Line 427: ;
Line 428: }
Line 431: ID = static
Line 431: void
Line 431: ID = audit_receive
Line 431: (
Line 431: ID = struct
Line 431: ID = sock
Line 431: *
Line 431: ID = sk
Line 431: ,
Line 431: int
Line 431: ID = length
Line 431: )
Line 432: {
Line 433: ID = struct
Line 433: ID = sk_buff
Line 433: *
Line 433: ID = skb
Line 433: ;
Line 435: if
Line 435: (
Line 435: ID = down_trylock
Line 435: (
Line 435: Unrecognized token: 38
Line 435: ID = audit_netlink_sem
Line 435: )
Line 435: )
Line 436: return
Line 436: ;
Line 439: while
Line 439: (
Line 439: (
Line 439: ID = skb
Line 439: =
Line 439: ID = skb_dequeue
Line 439: (
Line 439: Unrecognized token: 38
Line 439: ID = sk
Line 439: -
Line 439: >
Line 439: ID = sk_receive_queue
Line 439: )
Line 439: )
Line 439: )
Line 439: {
Line 440: if
Line 440: (
Line 440: ID = audit_receive_skb
Line 440: (
Line 440: ID = skb
Line 440: )
Line 440: &&
Line 440: ID = skb
Line 440: -
Line 440: >
Line 440: ID = len
Line 440: )
Line 441: ID = skb_queue_head
Line 441: (
Line 441: Unrecognized token: 38
Line 441: ID = sk
Line 441: -
Line 441: >
Line 441: ID = sk_receive_queue
Line 441: ,
Line 441: ID = skb
Line 441: )
Line 441: ;
Line 442: else
Line 443: ID = kfree_skb
Line 443: (
Line 443: ID = skb
Line 443: )
Line 443: ;
Line 444: }
Line 445: ID = up
Line 445: (
Line 445: Unrecognized token: 38
Line 445: ID = audit_netlink_sem
Line 445: )
Line 445: ;
Line 446: }
Line 454: ID = static
Line 454: void
Line 454: ID = audit_log_move
Line 454: (
Line 454: ID = struct
Line 454: ID = audit_buffer
Line 454: *
Line 454: ID = ab
Line 454: )
Line 455: {
Line 456: ID = struct
Line 456: ID = sk_buff
Line 456: *
Line 456: ID = skb
Line 456: ;
Line 457: char
Line 457: *
Line 457: ID = start
Line 457: ;
Line 458: int
Line 458: ID = extra
Line 458: =
Line 458: ID = ab
Line 458: -
Line 458: >
Line 458: ID = nlh
Line 458: Unrecognized token: 63
Line 458: INTCON = 0
Line 458: Unrecognized token: 58
Line 458: ID = NLMSG_SPACE
Line 458: (
Line 458: INTCON = 0
Line 458: )
Line 458: ;
Line 460: ID = skb
Line 460: =
Line 460: ID = skb_peek
Line 460: (
Line 460: Unrecognized token: 38
Line 460: ID = ab
Line 460: -
Line 460: >
Line 460: ID = sklist
Line 460: )
Line 460: ;
Line 461: if
Line 461: (
Line 461: !
Line 461: ID = skb
Line 461: ||
Line 461: ID = skb_tailroom
Line 461: (
Line 461: ID = skb
Line 461: )
Line 461: <=
Line 461: ID = ab
Line 461: -
Line 461: >
Line 461: ID = len
Line 461: +
Line 461: ID = extra
Line 461: )
Line 461: {
Line 462: ID = skb
Line 462: =
Line 462: ID = alloc_skb
Line 462: (
Line 462: INTCON = 2
Line 462: *
Line 462: ID = ab
Line 462: -
Line 462: >
Line 462: ID = len
Line 462: +
Line 462: ID = extra
Line 462: ,
Line 462: ID = GFP_ATOMIC
Line 462: )
Line 462: ;
Line 463: if
Line 463: (
Line 463: !
Line 463: ID = skb
Line 463: )
Line 463: {
Line 464: ID = ab
Line 464: -
Line 464: >
Line 464: ID = len
Line 464: =
Line 464: INTCON = 0
Line 464: ;
Line 465: ID = audit_log_lost
Line 465: (
Line 465: STRINGCON = "out of memory in audit_log_move"
Line 465: )
Line 465: ;
Line 466: return
Line 466: ;
Line 467: }
Line 468: Unrecognized token: 95
Line 468: Unrecognized token: 95
Line 468: ID = skb_queue_tail
Line 468: (
Line 468: Unrecognized token: 38
Line 468: ID = ab
Line 468: -
Line 468: >
Line 468: ID = sklist
Line 468: ,
Line 468: ID = skb
Line 468: )
Line 468: ;
Line 469: if
Line 469: (
Line 469: !
Line 469: ID = ab
Line 469: -
Line 469: >
Line 469: ID = nlh
Line 469: )
Line 470: ID = ab
Line 470: -
Line 470: >
Line 470: ID = nlh
Line 470: =
Line 470: (
Line 470: ID = struct
Line 470: ID = nlmsghdr
Line 470: *
Line 470: )
Line 470: ID = skb_put
Line 470: (
Line 470: ID = skb
Line 470: ,
Line 471: ID = NLMSG_SPACE
Line 471: (
Line 471: INTCON = 0
Line 471: )
Line 471: )
Line 471: ;
Line 472: }
Line 473: ID = start
Line 473: =
Line 473: ID = skb_put
Line 473: (
Line 473: ID = skb
Line 473: ,
Line 473: ID = ab
Line 473: -
Line 473: >
Line 473: ID = len
Line 473: )
Line 473: ;
Line 474: ID = memcpy
Line 474: (
Line 474: ID = start
Line 474: ,
Line 474: ID = ab
Line 474: -
Line 474: >
Line 474: ID = tmp
Line 474: ,
Line 474: ID = ab
Line 474: -
Line 474: >
Line 474: ID = len
Line 474: )
Line 474: ;
Line 475: ID = ab
Line 475: -
Line 475: >
Line 475: ID = len
Line 475: =
Line 475: INTCON = 0
Line 475: ;
Line 476: }
Line 480: ID = static
Line 480: ID = inline
Line 480: int
Line 480: ID = audit_log_drain
Line 480: (
Line 480: ID = struct
Line 480: ID = audit_buffer
Line 480: *
Line 480: ID = ab
Line 480: )
Line 481: {
Line 482: ID = struct
Line 482: ID = sk_buff
Line 482: *
Line 482: ID = skb
Line 482: ;
Line 484: while
Line 484: (
Line 484: (
Line 484: ID = skb
Line 484: =
Line 484: ID = skb_dequeue
Line 484: (
Line 484: Unrecognized token: 38
Line 484: ID = ab
Line 484: -
Line 484: >
Line 484: ID = sklist
Line 484: )
Line 484: )
Line 484: )
Line 484: {
Line 485: int
Line 485: ID = retval
Line 485: =
Line 485: INTCON = 0
Line 485: ;
Line 487: if
Line 487: (
Line 487: ID = audit_pid
Line 487: )
Line 487: {
Line 488: if
Line 488: (
Line 488: ID = ab
Line 488: -
Line 488: >
Line 488: ID = nlh
Line 488: )
Line 488: {
Line 489: ID = ab
Line 489: -
Line 489: >
Line 489: ID = nlh
Line 489: -
Line 489: >
Line 489: ID = nlmsg_len
Line 489: =
Line 489: ID = ab
Line 489: -
Line 489: >
Line 489: ID = total
Line 489: ;
Line 490: ID = ab
Line 490: -
Line 490: >
Line 490: ID = nlh
Line 490: -
Line 490: >
Line 490: ID = nlmsg_type
Line 490: =
Line 490: ID = ab
Line 490: -
Line 490: >
Line 490: ID = type
Line 490: ;
Line 491: ID = ab
Line 491: -
Line 491: >
Line 491: ID = nlh
Line 491: -
Line 491: >
Line 491: ID = nlmsg_flags
Line 491: =
Line 491: INTCON = 0
Line 491: ;
Line 492: ID = ab
Line 492: -
Line 492: >
Line 492: ID = nlh
Line 492: -
Line 492: >
Line 492: ID = nlmsg_seq
Line 492: =
Line 492: INTCON = 0
Line 492: ;
Line 493: ID = ab
Line 493: -
Line 493: >
Line 493: ID = nlh
Line 493: -
Line 493: >
Line 493: ID = nlmsg_pid
Line 493: =
Line 493: ID = ab
Line 493: -
Line 493: >
Line 493: ID = pid
Line 493: ;
Line 494: }
Line 495: ID = skb_get
Line 495: (
Line 495: ID = skb
Line 495: )
Line 495: ;
Line 496: ID = retval
Line 496: =
Line 496: ID = netlink_unicast
Line 496: (
Line 496: ID = audit_sock
Line 496: ,
Line 496: ID = skb
Line 496: ,
Line 496: ID = audit_pid
Line 496: ,
Line 497: ID = MSG_DONTWAIT
Line 497: )
Line 497: ;
Line 498: }
Line 499: if
Line 499: (
Line 499: ID = retval
Line 499: ==
Line 499: -
Line 499: ID = EAGAIN
Line 499: &&
Line 499: ID = ab
Line 499: -
Line 499: >
Line 499: ID = count
Line 499: <
Line 499: INTCON = 5
Line 499: )
Line 499: {
Line 500: +
Line 500: +
Line 500: ID = ab
Line 500: -
Line 500: >
Line 500: ID = count
Line 500: ;
Line 501: ID = audit_log_end_irq
Line 501: (
Line 501: ID = ab
Line 501: )
Line 501: ;
Line 502: return
Line 502: INTCON = 1
Line 502: ;
Line 503: }
Line 504: if
Line 504: (
Line 504: ID = retval
Line 504: <
Line 504: INTCON = 0
Line 504: )
Line 504: {
Line 505: if
Line 505: (
Line 505: ID = retval
Line 505: ==
Line 505: -
Line 505: ID = ECONNREFUSED
Line 505: )
Line 505: {
Line 506: ID = printk
Line 506: (
Line 506: ID = KERN_ERR
Line 507: STRINGCON = "audit: *NO* daemon at audit_pid=%d\n"
Line 507: ,
Line 508: ID = audit_pid
Line 508: )
Line 508: ;
Line 509: ID = audit_pid
Line 509: =
Line 509: INTCON = 0
Line 509: ;
Line 510: }
Line 510: else
Line 511: ID = audit_log_lost
Line 511: (
Line 511: STRINGCON = "netlink socket too busy"
Line 511: )
Line 511: ;
Line 512: }
Line 513: if
Line 513: (
Line 513: !
Line 513: ID = audit_pid
Line 513: )
Line 513: {
Line 514: int
Line 514: ID = offset
Line 514: =
Line 514: ID = ab
Line 514: -
Line 514: >
Line 514: ID = nlh
Line 514: Unrecognized token: 63
Line 514: ID = NLMSG_SPACE
Line 514: (
Line 514: INTCON = 0
Line 514: )
Line 514: Unrecognized token: 58
Line 514: INTCON = 0
Line 514: ;
Line 515: int
Line 515: ID = len
Line 515: =
Line 515: ID = skb
Line 515: -
Line 515: >
Line 515: ID = len
Line 515: -
Line 515: ID = offset
Line 515: ;
Line 516: ID = printk
Line 516: (
Line 516: ID = KERN_ERR
Line 516: STRINGCON = "%*.*s\n"
Line 516: ,
Line 517: ID = len
Line 517: ,
Line 517: ID = len
Line 517: ,
Line 517: ID = skb
Line 517: -
Line 517: >
Line 517: ID = data
Line 517: +
Line 517: ID = offset
Line 517: )
Line 517: ;
Line 518: }
Line 519: ID = kfree_skb
Line 519: (
Line 519: ID = skb
Line 519: )
Line 519: ;
Line 520: ID = ab
Line 520: -
Line 520: >
Line 520: ID = nlh
Line 520: =
Line 520: ID = NULL
Line 520: ;
Line 521: }
Line 522: return
Line 522: INTCON = 0
Line 522: ;
Line 523: }
Line 526: int
Line 526: Unrecognized token: 95
Line 526: Unrecognized token: 95
Line 526: ID = init
Line 526: ID = audit_init
Line 526: (
Line 526: void
Line 526: )
Line 527: {
Line 528: ID = printk
Line 528: (
Line 528: ID = KERN_INFO
Line 528: STRINGCON = "audit: initializing netlink socket (%s)\n"
Line 528: ,
Line 529: ID = audit_default
Line 529: Unrecognized token: 63
Line 529: STRINGCON = "enabled"
Line 529: Unrecognized token: 58
Line 529: STRINGCON = "disabled"
Line 529: )
Line 529: ;
Line 530: ID = audit_sock
Line 530: =
Line 530: ID = netlink_kernel_create
Line 530: (
Line 530: ID = NETLINK_AUDIT
Line 530: ,
Line 530: ID = audit_receive
Line 530: )
Line 530: ;
Line 531: if
Line 531: (
Line 531: !
Line 531: ID = audit_sock
Line 531: )
Line 532: ID = audit_panic
Line 532: (
Line 532: STRINGCON = "cannot initialize netlink socket"
Line 532: )
Line 532: ;
Line 534: ID = audit_initialized
Line 534: =
Line 534: INTCON = 1
Line 534: ;
Line 535: ID = audit_enabled
Line 535: =
Line 535: ID = audit_default
Line 535: ;
Line 536: ID = audit_log
Line 536: (
Line 536: ID = NULL
Line 536: ,
Line 536: STRINGCON = "initialized"
Line 536: )
Line 536: ;
Line 537: return
Line 537: INTCON = 0
Line 537: ;
Line 538: }
Line 540: Unrecognized token: 35
Line 540: else
Line 543: ID = static
Line 543: void
Line 543: ID = audit_log_move
Line 543: (
Line 543: ID = struct
Line 543: ID = audit_buffer
Line 543: *
Line 543: ID = ab
Line 543: )
Line 544: {
Line 545: ID = printk
Line 545: (
Line 545: ID = KERN_ERR
Line 545: STRINGCON = "%*.*s\n"
Line 545: ,
Line 545: ID = ab
Line 545: -
Line 545: >
Line 545: ID = len
Line 545: ,
Line 545: ID = ab
Line 545: -
Line 545: >
Line 545: ID = len
Line 545: ,
Line 545: ID = ab
Line 545: -
Line 545: >
Line 545: ID = tmp
Line 545: )
Line 545: ;
Line 546: ID = ab
Line 546: -
Line 546: >
Line 546: ID = len
Line 546: =
Line 546: INTCON = 0
Line 546: ;
Line 547: }
Line 549: ID = static
Line 549: ID = inline
Line 549: int
Line 549: ID = audit_log_drain
Line 549: (
Line 549: ID = struct
Line 549: ID = audit_buffer
Line 549: *
Line 549: ID = ab
Line 549: )
Line 550: {
Line 551: return
Line 551: INTCON = 0
Line 551: ;
Line 552: }
Line 555: int
Line 555: Unrecognized token: 95
Line 555: Unrecognized token: 95
Line 555: ID = init
Line 555: ID = audit_init
Line 555: (
Line 555: void
Line 555: )
Line 556: {
Line 557: ID = printk
Line 557: (
Line 557: ID = KERN_INFO
Line 557: STRINGCON = "audit: initializing WITHOUT netlink support\n"
Line 557: )
Line 557: ;
Line 558: ID = audit_sock
Line 558: =
Line 558: ID = NULL
Line 558: ;
Line 559: ID = audit_pid
Line 559: =
Line 559: INTCON = 0
Line 559: ;
Line 561: ID = audit_initialized
Line 561: =
Line 561: INTCON = 1
Line 561: ;
Line 562: ID = audit_enabled
Line 562: =
Line 562: ID = audit_default
Line 562: ;
Line 563: ID = audit_log
Line 563: (
Line 563: ID = NULL
Line 563: ,
Line 563: STRINGCON = "initialized"
Line 563: )
Line 563: ;
Line 564: return
Line 564: INTCON = 0
Line 564: ;
Line 565: }
Line 566: Unrecognized token: 35
Line 566: ID = endif
Line 568: Unrecognized token: 95
Line 568: Unrecognized token: 95
Line 568: ID = initcall
Line 568: (
Line 568: ID = audit_init
Line 568: )
Line 568: ;
Line 571: ID = static
Line 571: int
Line 571: Unrecognized token: 95
Line 571: Unrecognized token: 95
Line 571: ID = init
Line 571: ID = audit_enable
Line 571: (
Line 571: char
Line 571: *
Line 571: ID = str
Line 571: )
Line 572: {
Line 573: ID = audit_default
Line 573: =
Line 573: !
Line 573: !
Line 573: ID = simple_strtol
Line 573: (
Line 573: ID = str
Line 573: ,
Line 573: ID = NULL
Line 573: ,
Line 573: INTCON = 0
Line 573: )
Line 573: ;
Line 574: ID = printk
Line 574: (
Line 574: ID = KERN_INFO
Line 574: STRINGCON = "audit: %s%s\n"
Line 574: ,
Line 575: ID = audit_default
Line 575: Unrecognized token: 63
Line 575: STRINGCON = "enabled"
Line 575: Unrecognized token: 58
Line 575: STRINGCON = "disabled"
Line 575: ,
Line 576: ID = audit_initialized
Line 576: Unrecognized token: 63
Line 576: STRINGCON = ""
Line 576: Unrecognized token: 58
Line 576: STRINGCON = " (after initialization)"
Line 576: )
Line 576: ;
Line 577: if
Line 577: (
Line 577: ID = audit_initialized
Line 577: )
Line 578: ID = audit_enabled
Line 578: =
Line 578: ID = audit_default
Line 578: ;
Line 579: return
Line 579: INTCON = 0
Line 579: ;
Line 580: }
Line 582: Unrecognized token: 95
Line 582: Unrecognized token: 95
Line 582: ID = setup
Line 582: (
Line 582: STRINGCON = "audit="
Line 582: ,
Line 582: ID = audit_enable
Line 582: )
Line 582: ;
Line 591: ID = struct
Line 591: ID = audit_buffer
Line 591: *
Line 591: ID = audit_log_start
Line 591: (
Line 591: ID = struct
Line 591: ID = audit_context
Line 591: *
Line 591: ID = ctx
Line 591: )
Line 592: {
Line 593: ID = struct
Line 593: ID = audit_buffer
Line 593: *
Line 593: ID = ab
Line 593: =
Line 593: ID = NULL
Line 593: ;
Line 594: ID = unsigned
Line 594: ID = long
Line 594: ID = flags
Line 594: ;
Line 595: ID = struct
Line 595: ID = timespec
Line 595: ID = t
Line 595: ;
Line 596: int
Line 596: ID = serial
Line 596: =
Line 596: INTCON = 0
Line 596: ;
Line 598: if
Line 598: (
Line 598: !
Line 598: ID = audit_initialized
Line 598: )
Line 599: return
Line 599: ID = NULL
Line 599: ;
Line 601: if
Line 601: (
Line 601: ID = audit_backlog_limit
Line 602: &&
Line 602: ID = atomic_read
Line 602: (
Line 602: Unrecognized token: 38
Line 602: ID = audit_backlog
Line 602: )
Line 602: >
Line 602: ID = audit_backlog_limit
Line 602: )
Line 602: {
Line 603: if
Line 603: (
Line 603: ID = audit_rate_check
Line 603: (
Line 603: )
Line 603: )
Line 604: ID = printk
Line 604: (
Line 604: ID = KERN_WARNING
Line 605: STRINGCON = "audit: audit_backlog=%d > "
Line 606: STRINGCON = "audit_backlog_limit=%d\n"
Line 606: ,
Line 607: ID = atomic_read
Line 607: (
Line 607: Unrecognized token: 38
Line 607: ID = audit_backlog
Line 607: )
Line 607: ,
Line 608: ID = audit_backlog_limit
Line 608: )
Line 608: ;
Line 609: ID = audit_log_lost
Line 609: (
Line 609: STRINGCON = "backlog limit exceeded"
Line 609: )
Line 609: ;
Line 610: return
Line 610: ID = NULL
Line 610: ;
Line 611: }
Line 613: ID = spin_lock_irqsave
Line 613: (
Line 613: Unrecognized token: 38
Line 613: ID = audit_freelist_lock
Line 613: ,
Line 613: ID = flags
Line 613: )
Line 613: ;
Line 614: if
Line 614: (
Line 614: !
Line 614: ID = list_empty
Line 614: (
Line 614: Unrecognized token: 38
Line 614: ID = audit_freelist
Line 614: )
Line 614: )
Line 614: {
Line 615: ID = ab
Line 615: =
Line 615: ID = list_entry
Line 615: (
Line 615: ID = audit_freelist
Line 615: Unrecognized token: 46
Line 615: ID = next
Line 615: ,
Line 616: ID = struct
Line 616: ID = audit_buffer
Line 616: ,
Line 616: ID = list
Line 616: )
Line 616: ;
Line 617: ID = list_del
Line 617: (
Line 617: Unrecognized token: 38
Line 617: ID = ab
Line 617: -
Line 617: >
Line 617: ID = list
Line 617: )
Line 617: ;
Line 618: -
Line 618: -
Line 618: ID = audit_freelist_count
Line 618: ;
Line 619: }
Line 620: ID = spin_unlock_irqrestore
Line 620: (
Line 620: Unrecognized token: 38
Line 620: ID = audit_freelist_lock
Line 620: ,
Line 620: ID = flags
Line 620: )
Line 620: ;
Line 622: if
Line 622: (
Line 622: !
Line 622: ID = ab
Line 622: )
Line 623: ID = ab
Line 623: =
Line 623: ID = kmalloc
Line 623: (
Line 623: ID = sizeof
Line 623: (
Line 623: *
Line 623: ID = ab
Line 623: )
Line 623: ,
Line 623: ID = GFP_ATOMIC
Line 623: )
Line 623: ;
Line 624: if
Line 624: (
Line 624: !
Line 624: ID = ab
Line 624: )
Line 625: ID = audit_log_lost
Line 625: (
Line 625: STRINGCON = "audit: out of memory in audit_log_start"
Line 625: )
Line 625: ;
Line 626: if
Line 626: (
Line 626: !
Line 626: ID = ab
Line 626: )
Line 627: return
Line 627: ID = NULL
Line 627: ;
Line 629: ID = atomic_inc
Line 629: (
Line 629: Unrecognized token: 38
Line 629: ID = audit_backlog
Line 629: )
Line 629: ;
Line 630: ID = skb_queue_head_init
Line 630: (
Line 630: Unrecognized token: 38
Line 630: ID = ab
Line 630: -
Line 630: >
Line 630: ID = sklist
Line 630: )
Line 630: ;
Line 632: ID = ab
Line 632: -
Line 632: >
Line 632: ID = ctx
Line 632: =
Line 632: ID = ctx
Line 632: ;
Line 633: ID = ab
Line 633: -
Line 633: >
Line 633: ID = len
Line 633: =
Line 633: INTCON = 0
Line 633: ;
Line 634: ID = ab
Line 634: -
Line 634: >
Line 634: ID = nlh
Line 634: =
Line 634: ID = NULL
Line 634: ;
Line 635: ID = ab
Line 635: -
Line 635: >
Line 635: ID = total
Line 635: =
Line 635: INTCON = 0
Line 635: ;
Line 636: ID = ab
Line 636: -
Line 636: >
Line 636: ID = type
Line 636: =
Line 636: ID = AUDIT_KERNEL
Line 636: ;
Line 637: ID = ab
Line 637: -
Line 637: >
Line 637: ID = pid
Line 637: =
Line 637: INTCON = 0
Line 637: ;
Line 638: ID = ab
Line 638: -
Line 638: >
Line 638: ID = count
Line 638: =
Line 638: INTCON = 0
Line 638: ;
Line 640: Unrecognized token: 35
Line 640: ID = ifdef
Line 640: ID = CONFIG_AUDITSYSCALL
Line 641: if
Line 641: (
Line 641: ID = ab
Line 641: -
Line 641: >
Line 641: ID = ctx
Line 641: )
Line 642: ID = audit_get_stamp
Line 642: (
Line 642: ID = ab
Line 642: -
Line 642: >
Line 642: ID = ctx
Line 642: ,
Line 642: Unrecognized token: 38
Line 642: ID = t
Line 642: ,
Line 642: Unrecognized token: 38
Line 642: ID = serial
Line 642: )
Line 642: ;
Line 643: else
Line 644: Unrecognized token: 35
Line 644: ID = endif
Line 645: ID = t
Line 645: =
Line 645: ID = CURRENT_TIME
Line 645: ;
Line 647: ID = audit_log_format
Line 647: (
Line 647: ID = ab
Line 647: ,
Line 647: STRINGCON = "audit(%lu.%03lu:%u): "
Line 647: ,
Line 648: ID = t
Line 648: Unrecognized token: 46
Line 648: ID = tv_sec
Line 648: ,
Line 648: ID = t
Line 648: Unrecognized token: 46
Line 648: ID = tv_nsec
Line 648: /
Line 648: INTCON = 1000000
Line 648: ,
Line 648: ID = serial
Line 648: )
Line 648: ;
Line 649: return
Line 649: ID = ab
Line 649: ;
Line 650: }
Line 657: ID = static
Line 657: void
Line 657: ID = audit_log_vformat
Line 657: (
Line 657: ID = struct
Line 657: ID = audit_buffer
Line 657: *
Line 657: ID = ab
Line 657: ,
Line 657: ID = const
Line 657: char
Line 657: *
Line 657: ID = fmt
Line 657: ,
Line 658: ID = va_list
Line 658: ID = args
Line 658: )
Line 659: {
Line 660: int
Line 660: ID = len
Line 660: ,
Line 660: ID = avail
Line 660: ;
Line 662: if
Line 662: (
Line 662: !
Line 662: ID = ab
Line 662: )
Line 663: return
Line 663: ;
Line 665: ID = avail
Line 665: =
Line 665: ID = sizeof
Line 665: (
Line 665: ID = ab
Line 665: -
Line 665: >
Line 665: ID = tmp
Line 665: )
Line 665: -
Line 665: ID = ab
Line 665: -
Line 665: >
Line 665: ID = len
Line 665: ;
Line 666: if
Line 666: (
Line 666: ID = avail
Line 666: <=
Line 666: INTCON = 0
Line 666: )
Line 666: {
Line 667: ID = audit_log_move
Line 667: (
Line 667: ID = ab
Line 667: )
Line 667: ;
Line 668: ID = avail
Line 668: =
Line 668: ID = sizeof
Line 668: (
Line 668: ID = ab
Line 668: -
Line 668: >
Line 668: ID = tmp
Line 668: )
Line 668: -
Line 668: ID = ab
Line 668: -
Line 668: >
Line 668: ID = len
Line 668: ;
Line 669: }
Line 670: ID = len
Line 670: =
Line 670: ID = vsnprintf
Line 670: (
Line 670: ID = ab
Line 670: -
Line 670: >
Line 670: ID = tmp
Line 670: +
Line 670: ID = ab
Line 670: -
Line 670: >
Line 670: ID = len
Line 670: ,
Line 670: ID = avail
Line 670: ,
Line 670: ID = fmt
Line 670: ,
Line 670: ID = args
Line 670: )
Line 670: ;
Line 671: if
Line 671: (
Line 671: ID = len
Line 671: >=
Line 671: ID = avail
Line 671: )
Line 671: {
Line 675: ID = audit_log_move
Line 675: (
Line 675: ID = ab
Line 675: )
Line 675: ;
Line 676: ID = avail
Line 676: =
Line 676: ID = sizeof
Line 676: (
Line 676: ID = ab
Line 676: -
Line 676: >
Line 676: ID = tmp
Line 676: )
Line 676: -
Line 676: ID = ab
Line 676: -
Line 676: >
Line 676: ID = len
Line 676: ;
Line 677: ID = len
Line 677: =
Line 677: ID = vsnprintf
Line 677: (
Line 677: ID = ab
Line 677: -
Line 677: >
Line 677: ID = tmp
Line 677: +
Line 677: ID = ab
Line 677: -
Line 677: >
Line 677: ID = len
Line 677: ,
Line 677: ID = avail
Line 677: ,
Line 677: ID = fmt
Line 677: ,
Line 677: ID = args
Line 677: )
Line 677: ;
Line 678: }
Line 679: ID = ab
Line 679: -
Line 679: >
Line 679: ID = len
Line 679: +
Line 679: =
Line 679: (
Line 679: ID = len
Line 679: <
Line 679: ID = avail
Line 679: )
Line 679: Unrecognized token: 63
Line 679: ID = len
Line 679: Unrecognized token: 58
Line 679: ID = avail
Line 679: ;
Line 680: ID = ab
Line 680: -
Line 680: >
Line 680: ID = total
Line 680: +
Line 680: =
Line 680: (
Line 680: ID = len
Line 680: <
Line 680: ID = avail
Line 680: )
Line 680: Unrecognized token: 63
Line 680: ID = len
Line 680: Unrecognized token: 58
Line 680: ID = avail
Line 680: ;
Line 681: }
Line 685: void
Line 685: ID = audit_log_format
Line 685: (
Line 685: ID = struct
Line 685: ID = audit_buffer
Line 685: *
Line 685: ID = ab
Line 685: ,
Line 685: ID = const
Line 685: char
Line 685: *
Line 685: ID = fmt
Line 685: ,
Line 685: Unrecognized token: 46
Line 685: Unrecognized token: 46
Line 685: Unrecognized token: 46
Line 685: )
Line 686: {
Line 687: ID = va_list
Line 687: ID = args
Line 687: ;
Line 689: if
Line 689: (
Line 689: !
Line 689: ID = ab
Line 689: )
Line 690: return
Line 690: ;
Line 691: ID = va_start
Line 691: (
Line 691: ID = args
Line 691: ,
Line 691: ID = fmt
Line 691: )
Line 691: ;
Line 692: ID = audit_log_vformat
Line 692: (
Line 692: ID = ab
Line 692: ,
Line 692: ID = fmt
Line 692: ,
Line 692: ID = args
Line 692: )
Line 692: ;
Line 693: ID = va_end
Line 693: (
Line 693: ID = args
Line 693: )
Line 693: ;
Line 694: }
Line 699: void
Line 699: ID = audit_log_d_path
Line 699: (
Line 699: ID = struct
Line 699: ID = audit_buffer
Line 699: *
Line 699: ID = ab
Line 699: ,
Line 699: ID = const
Line 699: char
Line 699: *
Line 699: ID = prefix
Line 699: ,
Line 700: ID = struct
Line 700: ID = dentry
Line 700: *
Line 700: ID = dentry
Line 700: ,
Line 700: ID = struct
Line 700: ID = vfsmount
Line 700: *
Line 700: ID = vfsmnt
Line 700: )
Line 701: {
Line 702: char
Line 702: *
Line 702: ID = p
Line 702: ;
Line 703: int
Line 703: ID = len
Line 703: ,
Line 703: ID = avail
Line 703: ;
Line 705: if
Line 705: (
Line 705: ID = prefix
Line 705: )
Line 705: ID = audit_log_format
Line 705: (
Line 705: ID = ab
Line 705: ,
Line 705: STRINGCON = " %s"
Line 705: ,
Line 705: ID = prefix
Line 705: )
Line 705: ;
Line 707: if
Line 707: (
Line 707: ID = ab
Line 707: -
Line 707: >
Line 707: ID = len
Line 707: >
Line 707: INTCON = 128
Line 707: )
Line 708: ID = audit_log_move
Line 708: (
Line 708: ID = ab
Line 708: )
Line 708: ;
Line 709: ID = avail
Line 709: =
Line 709: ID = sizeof
Line 709: (
Line 709: ID = ab
Line 709: -
Line 709: >
Line 709: ID = tmp
Line 709: )
Line 709: -
Line 709: ID = ab
Line 709: -
Line 709: >
Line 709: ID = len
Line 709: ;
Line 710: ID = p
Line 710: =
Line 710: ID = d_path
Line 710: (
Line 710: ID = dentry
Line 710: ,
Line 710: ID = vfsmnt
Line 710: ,
Line 710: ID = ab
Line 710: -
Line 710: >
Line 710: ID = tmp
Line 710: +
Line 710: ID = ab
Line 710: -
Line 710: >
Line 710: ID = len
Line 710: ,
Line 710: ID = avail
Line 710: )
Line 710: ;
Line 711: if
Line 711: (
Line 711: ID = p
Line 711: ==
Line 711: ID = ERR_PTR
Line 711: (
Line 711: -
Line 711: ID = ENAMETOOLONG
Line 711: )
Line 711: )
Line 711: {
Line 713: ID = audit_log_format
Line 713: (
Line 713: ID = ab
Line 713: ,
Line 713: STRINGCON = "<toolong>"
Line 713: )
Line 713: ;
Line 714: }
Line 714: else
Line 714: {
Line 716: ID = len
Line 716: =
Line 716: (
Line 716: ID = ab
Line 716: -
Line 716: >
Line 716: ID = tmp
Line 716: +
Line 716: ID = sizeof
Line 716: (
Line 716: ID = ab
Line 716: -
Line 716: >
Line 716: ID = tmp
Line 716: )
Line 716: -
Line 716: INTCON = 1
Line 716: )
Line 716: -
Line 716: ID = p
Line 716: ;
Line 717: ID = memmove
Line 717: (
Line 717: ID = ab
Line 717: -
Line 717: >
Line 717: ID = tmp
Line 717: +
Line 717: ID = ab
Line 717: -
Line 717: >
Line 717: ID = len
Line 717: ,
Line 717: ID = p
Line 717: ,
Line 717: ID = len
Line 717: )
Line 717: ;
Line 718: ID = ab
Line 718: -
Line 718: >
Line 718: ID = len
Line 718: +
Line 718: =
Line 718: ID = len
Line 718: ;
Line 719: ID = ab
Line 719: -
Line 719: >
Line 719: ID = total
Line 719: +
Line 719: =
Line 719: ID = len
Line 719: ;
Line 720: }
Line 721: }
Line 724: ID = static
Line 724: void
Line 724: ID = audit_tasklet_handler
Line 724: (
Line 724: ID = unsigned
Line 724: ID = long
Line 724: ID = arg
Line 724: )
Line 725: {
Line 726: ID = LIST_HEAD
Line 726: (
Line 726: ID = list
Line 726: )
Line 726: ;
Line 727: ID = struct
Line 727: ID = audit_buffer
Line 727: *
Line 727: ID = ab
Line 727: ;
Line 728: ID = unsigned
Line 728: ID = long
Line 728: ID = flags
Line 728: ;
Line 730: ID = spin_lock_irqsave
Line 730: (
Line 730: Unrecognized token: 38
Line 730: ID = audit_txlist_lock
Line 730: ,
Line 730: ID = flags
Line 730: )
Line 730: ;
Line 731: ID = list_splice_init
Line 731: (
Line 731: Unrecognized token: 38
Line 731: ID = audit_txlist
Line 731: ,
Line 731: Unrecognized token: 38
Line 731: ID = list
Line 731: )
Line 731: ;
Line 732: ID = spin_unlock_irqrestore
Line 732: (
Line 732: Unrecognized token: 38
Line 732: ID = audit_txlist_lock
Line 732: ,
Line 732: ID = flags
Line 732: )
Line 732: ;
Line 734: while
Line 734: (
Line 734: !
Line 734: ID = list_empty
Line 734: (
Line 734: Unrecognized token: 38
Line 734: ID = list
Line 734: )
Line 734: )
Line 734: {
Line 735: ID = ab
Line 735: =
Line 735: ID = list_entry
Line 735: (
Line 735: ID = list
Line 735: Unrecognized token: 46
Line 735: ID = next
Line 735: ,
Line 735: ID = struct
Line 735: ID = audit_buffer
Line 735: ,
Line 735: ID = list
Line 735: )
Line 735: ;
Line 736: ID = list_del
Line 736: (
Line 736: Unrecognized token: 38
Line 736: ID = ab
Line 736: -
Line 736: >
Line 736: ID = list
Line 736: )
Line 736: ;
Line 737: ID = audit_log_end_fast
Line 737: (
Line 737: ID = ab
Line 737: )
Line 737: ;
Line 738: }
Line 739: }
Line 741: ID = static
Line 741: ID = DECLARE_TASKLET
Line 741: (
Line 741: ID = audit_tasklet
Line 741: ,
Line 741: ID = audit_tasklet_handler
Line 741: ,
Line 741: INTCON = 0
Line 741: )
Line 741: ;
Line 747: void
Line 747: ID = audit_log_end_irq
Line 747: (
Line 747: ID = struct
Line 747: ID = audit_buffer
Line 747: *
Line 747: ID = ab
Line 747: )
Line 748: {
Line 749: ID = unsigned
Line 749: ID = long
Line 749: ID = flags
Line 749: ;
Line 751: if
Line 751: (
Line 751: !
Line 751: ID = ab
Line 751: )
Line 752: return
Line 752: ;
Line 753: ID = spin_lock_irqsave
Line 753: (
Line 753: Unrecognized token: 38
Line 753: ID = audit_txlist_lock
Line 753: ,
Line 753: ID = flags
Line 753: )
Line 753: ;
Line 754: ID = list_add_tail
Line 754: (
Line 754: Unrecognized token: 38
Line 754: ID = ab
Line 754: -
Line 754: >
Line 754: ID = list
Line 754: ,
Line 754: Unrecognized token: 38
Line 754: ID = audit_txlist
Line 754: )
Line 754: ;
Line 755: ID = spin_unlock_irqrestore
Line 755: (
Line 755: Unrecognized token: 38
Line 755: ID = audit_txlist_lock
Line 755: ,
Line 755: ID = flags
Line 755: )
Line 755: ;
Line 757: ID = tasklet_schedule
Line 757: (
Line 757: Unrecognized token: 38
Line 757: ID = audit_tasklet
Line 757: )
Line 757: ;
Line 758: }
Line 762: void
Line 762: ID = audit_log_end_fast
Line 762: (
Line 762: ID = struct
Line 762: ID = audit_buffer
Line 762: *
Line 762: ID = ab
Line 762: )
Line 763: {
Line 764: ID = unsigned
Line 764: ID = long
Line 764: ID = flags
Line 764: ;
Line 766: ID = BUG_ON
Line 766: (
Line 766: ID = in_irq
Line 766: (
Line 766: )
Line 766: )
Line 766: ;
Line 767: if
Line 767: (
Line 767: !
Line 767: ID = ab
Line 767: )
Line 768: return
Line 768: ;
Line 769: if
Line 769: (
Line 769: !
Line 769: ID = audit_rate_check
Line 769: (
Line 769: )
Line 769: )
Line 769: {
Line 770: ID = audit_log_lost
Line 770: (
Line 770: STRINGCON = "rate limit exceeded"
Line 770: )
Line 770: ;
Line 771: }
Line 771: else
Line 771: {
Line 772: ID = audit_log_move
Line 772: (
Line 772: ID = ab
Line 772: )
Line 772: ;
Line 773: if
Line 773: (
Line 773: ID = audit_log_drain
Line 773: (
Line 773: ID = ab
Line 773: )
Line 773: )
Line 774: return
Line 774: ;
Line 775: }
Line 777: ID = atomic_dec
Line 777: (
Line 777: Unrecognized token: 38
Line 777: ID = audit_backlog
Line 777: )
Line 777: ;
Line 778: ID = spin_lock_irqsave
Line 778: (
Line 778: Unrecognized token: 38
Line 778: ID = audit_freelist_lock
Line 778: ,
Line 778: ID = flags
Line 778: )
Line 778: ;
Line 779: if
Line 779: (
Line 779: +
Line 779: +
Line 779: ID = audit_freelist_count
Line 779: >
Line 779: ID = AUDIT_MAXFREE
Line 779: )
Line 780: ID = kfree
Line 780: (
Line 780: ID = ab
Line 780: )
Line 780: ;
Line 781: else
Line 782: ID = list_add
Line 782: (
Line 782: Unrecognized token: 38
Line 782: ID = ab
Line 782: -
Line 782: >
Line 782: ID = list
Line 782: ,
Line 782: Unrecognized token: 38
Line 782: ID = audit_freelist
Line 782: )
Line 782: ;
Line 783: ID = spin_unlock_irqrestore
Line 783: (
Line 783: Unrecognized token: 38
Line 783: ID = audit_freelist_lock
Line 783: ,
Line 783: ID = flags
Line 783: )
Line 783: ;
Line 784: }
Line 789: void
Line 789: ID = audit_log_end
Line 789: (
Line 789: ID = struct
Line 789: ID = audit_buffer
Line 789: *
Line 789: ID = ab
Line 789: )
Line 790: {
Line 791: if
Line 791: (
Line 791: ID = in_irq
Line 791: (
Line 791: )
Line 791: )
Line 792: ID = audit_log_end_irq
Line 792: (
Line 792: ID = ab
Line 792: )
Line 792: ;
Line 793: else
Line 794: ID = audit_log_end_fast
Line 794: (
Line 794: ID = ab
Line 794: )
Line 794: ;
Line 795: }
Line 800: void
Line 800: ID = audit_log
Line 800: (
Line 800: ID = struct
Line 800: ID = audit_context
Line 800: *
Line 800: ID = ctx
Line 800: ,
Line 800: ID = const
Line 800: char
Line 800: *
Line 800: ID = fmt
Line 800: ,
Line 800: Unrecognized token: 46
Line 800: Unrecognized token: 46
Line 800: Unrecognized token: 46
Line 800: )
Line 801: {
Line 802: ID = struct
Line 802: ID = audit_buffer
Line 802: *
Line 802: ID = ab
Line 802: ;
Line 803: ID = va_list
Line 803: ID = args
Line 803: ;
Line 805: ID = ab
Line 805: =
Line 805: ID = audit_log_start
Line 805: (
Line 805: ID = ctx
Line 805: )
Line 805: ;
Line 806: if
Line 806: (
Line 806: ID = ab
Line 806: )
Line 806: {
Line 807: ID = va_start
Line 807: (
Line 807: ID = args
Line 807: ,
Line 807: ID = fmt
Line 807: )
Line 807: ;
Line 808: ID = audit_log_vformat
Line 808: (
Line 808: ID = ab
Line 808: ,
Line 808: ID = fmt
Line 808: ,
Line 808: ID = args
Line 808: )
Line 808: ;
Line 809: ID = va_end
Line 809: (
Line 809: ID = args
Line 809: )
Line 809: ;
Line 810: ID = audit_log_end
Line 810: (
Line 810: ID = ab
Line 810: )
Line 810: ;
Line 811: }
Line 812: }
Line 814: ID = EXPORT_SYMBOL_GPL
Line 814: (
Line 814: ID = audit_set_rate_limit
Line 814: )
Line 814: ;
Line 815: ID = EXPORT_SYMBOL_GPL
Line 815: (
Line 815: ID = audit_set_backlog_limit
Line 815: )
Line 815: ;
Line 816: ID = EXPORT_SYMBOL_GPL
Line 816: (
Line 816: ID = audit_set_enabled
Line 816: )
Line 816: ;
Line 817: ID = EXPORT_SYMBOL_GPL
Line 817: (
Line 817: ID = audit_set_failure
Line 817: )
Line 817: ;
Line 819: ID = EXPORT_SYMBOL_GPL
Line 819: (
Line 819: ID = audit_log_start
Line 819: )
Line 819: ;
Line 820: ID = EXPORT_SYMBOL_GPL
Line 820: (
Line 820: ID = audit_log_format
Line 820: )
Line 820: ;
Line 821: ID = EXPORT_SYMBOL_GPL
Line 821: (
Line 821: ID = audit_log_end_irq
Line 821: )
Line 821: ;
Line 822: ID = EXPORT_SYMBOL_GPL
Line 822: (
Line 822: ID = audit_log_end_fast
Line 822: )
Line 822: ;
Line 823: ID = EXPORT_SYMBOL_GPL
Line 823: (
Line 823: ID = audit_log_end
Line 823: )
Line 823: ;
Line 824: ID = EXPORT_SYMBOL_GPL
Line 824: (
Line 824: ID = audit_log
Line 824: )
Line 824: ;
Line 825: ID = EXPORT_SYMBOL_GPL
Line 825: (
Line 825: ID = audit_log_d_path
Line 825: )
Line 825: ;
Line 826: -EOF-

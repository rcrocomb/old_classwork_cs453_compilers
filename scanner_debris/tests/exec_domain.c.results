Line 10: Unrecognized token: 35
Line 10: ID = include
Line 10: <
Line 10: ID = linux
Line 10: /
Line 10: ID = config
Line 10: Unrecognized token: 46
Line 10: ID = h
Line 10: >
Line 11: Unrecognized token: 35
Line 11: ID = include
Line 11: <
Line 11: ID = linux
Line 11: /
Line 11: ID = init
Line 11: Unrecognized token: 46
Line 11: ID = h
Line 11: >
Line 12: Unrecognized token: 35
Line 12: ID = include
Line 12: <
Line 12: ID = linux
Line 12: /
Line 12: ID = kernel
Line 12: Unrecognized token: 46
Line 12: ID = h
Line 12: >
Line 13: Unrecognized token: 35
Line 13: ID = include
Line 13: <
Line 13: ID = linux
Line 13: /
Line 13: ID = kmod
Line 13: Unrecognized token: 46
Line 13: ID = h
Line 13: >
Line 14: Unrecognized token: 35
Line 14: ID = include
Line 14: <
Line 14: ID = linux
Line 14: /
Line 14: ID = module
Line 14: Unrecognized token: 46
Line 14: ID = h
Line 14: >
Line 15: Unrecognized token: 35
Line 15: ID = include
Line 15: <
Line 15: ID = linux
Line 15: /
Line 15: ID = personality
Line 15: Unrecognized token: 46
Line 15: ID = h
Line 15: >
Line 16: Unrecognized token: 35
Line 16: ID = include
Line 16: <
Line 16: ID = linux
Line 16: /
Line 16: ID = sched
Line 16: Unrecognized token: 46
Line 16: ID = h
Line 16: >
Line 17: Unrecognized token: 35
Line 17: ID = include
Line 17: <
Line 17: ID = linux
Line 17: /
Line 17: ID = sysctl
Line 17: Unrecognized token: 46
Line 17: ID = h
Line 17: >
Line 18: Unrecognized token: 35
Line 18: ID = include
Line 18: <
Line 18: ID = linux
Line 18: /
Line 18: ID = types
Line 18: Unrecognized token: 46
Line 18: ID = h
Line 18: >
Line 21: ID = static
Line 21: void
Line 21: ID = default_handler
Line 21: (
Line 21: int
Line 21: ,
Line 21: ID = struct
Line 21: ID = pt_regs
Line 21: *
Line 21: )
Line 21: ;
Line 23: ID = static
Line 23: ID = struct
Line 23: ID = exec_domain
Line 23: *
Line 23: ID = exec_domains
Line 23: =
Line 23: Unrecognized token: 38
Line 23: ID = default_exec_domain
Line 23: ;
Line 24: ID = static
Line 24: ID = rwlock_t
Line 24: ID = exec_domains_lock
Line 24: =
Line 24: ID = RW_LOCK_UNLOCKED
Line 24: ;
Line 27: ID = static
Line 27: ID = u_long
Line 27: ID = ident_map
Line 27: [
Line 27: INTCON = 32
Line 27: ]
Line 27: =
Line 27: {
Line 28: INTCON = 0
Line 28: ,
Line 28: INTCON = 1
Line 28: ,
Line 28: INTCON = 2
Line 28: ,
Line 28: INTCON = 3
Line 28: ,
Line 28: INTCON = 4
Line 28: ,
Line 28: INTCON = 5
Line 28: ,
Line 28: INTCON = 6
Line 28: ,
Line 28: INTCON = 7
Line 28: ,
Line 29: INTCON = 8
Line 29: ,
Line 29: INTCON = 9
Line 29: ,
Line 29: INTCON = 10
Line 29: ,
Line 29: INTCON = 11
Line 29: ,
Line 29: INTCON = 12
Line 29: ,
Line 29: INTCON = 13
Line 29: ,
Line 29: INTCON = 14
Line 29: ,
Line 29: INTCON = 15
Line 29: ,
Line 30: INTCON = 16
Line 30: ,
Line 30: INTCON = 17
Line 30: ,
Line 30: INTCON = 18
Line 30: ,
Line 30: INTCON = 19
Line 30: ,
Line 30: INTCON = 20
Line 30: ,
Line 30: INTCON = 21
Line 30: ,
Line 30: INTCON = 22
Line 30: ,
Line 30: INTCON = 23
Line 30: ,
Line 31: INTCON = 24
Line 31: ,
Line 31: INTCON = 25
Line 31: ,
Line 31: INTCON = 26
Line 31: ,
Line 31: INTCON = 27
Line 31: ,
Line 31: INTCON = 28
Line 31: ,
Line 31: INTCON = 29
Line 31: ,
Line 31: INTCON = 30
Line 31: ,
Line 31: INTCON = 31
Line 32: }
Line 32: ;
Line 34: ID = struct
Line 34: ID = exec_domain
Line 34: ID = default_exec_domain
Line 34: =
Line 34: {
Line 35: Unrecognized token: 46
Line 35: ID = name
Line 35: =
Line 35: STRINGCON = "Linux"
Line 35: ,
Line 36: Unrecognized token: 46
Line 36: ID = handler
Line 36: =
Line 36: ID = default_handler
Line 36: ,
Line 37: Unrecognized token: 46
Line 37: ID = pers_low
Line 37: =
Line 37: INTCON = 0
Line 37: ,
Line 38: Unrecognized token: 46
Line 38: ID = pers_high
Line 38: =
Line 38: INTCON = 0
Line 38: ,
Line 39: Unrecognized token: 46
Line 39: ID = signal_map
Line 39: =
Line 39: ID = ident_map
Line 39: ,
Line 40: Unrecognized token: 46
Line 40: ID = signal_invmap
Line 40: =
Line 40: ID = ident_map
Line 40: ,
Line 41: }
Line 41: ;
Line 44: ID = static
Line 44: void
Line 45: ID = default_handler
Line 45: (
Line 45: int
Line 45: ID = segment
Line 45: ,
Line 45: ID = struct
Line 45: ID = pt_regs
Line 45: *
Line 45: ID = regp
Line 45: )
Line 46: {
Line 47: ID = u_long
Line 47: ID = pers
Line 47: =
Line 47: INTCON = 0
Line 47: ;
Line 59: ID = switch
Line 59: (
Line 59: ID = segment
Line 59: )
Line 59: {
Line 60: Unrecognized token: 35
Line 60: ID = ifdef
Line 60: Unrecognized token: 95
Line 60: Unrecognized token: 95
Line 60: ID = i386__
Line 61: ID = case
Line 61: INTCON = 0
Line 61: ID = x07
Line 61: Unrecognized token: 58
Line 62: ID = pers
Line 62: =
Line 62: ID = abi_defhandler_lcall7
Line 62: ;
Line 63: ID = break
Line 63: ;
Line 64: ID = case
Line 64: INTCON = 0
Line 64: ID = x27
Line 64: Unrecognized token: 58
Line 65: ID = pers
Line 65: =
Line 65: ID = PER_SOLARIS
Line 65: ;
Line 66: ID = break
Line 66: ;
Line 67: Unrecognized token: 35
Line 67: ID = endif
Line 68: }
Line 69: ID = set_personality
Line 69: (
Line 69: ID = pers
Line 69: )
Line 69: ;
Line 71: if
Line 71: (
Line 71: ID = current_thread_info
Line 71: (
Line 71: )
Line 71: -
Line 71: >
Line 71: ID = exec_domain
Line 71: -
Line 71: >
Line 71: ID = handler
Line 71: !=
Line 71: ID = default_handler
Line 71: )
Line 72: ID = current_thread_info
Line 72: (
Line 72: )
Line 72: -
Line 72: >
Line 72: ID = exec_domain
Line 72: -
Line 72: >
Line 72: ID = handler
Line 72: (
Line 72: ID = segment
Line 72: ,
Line 72: ID = regp
Line 72: )
Line 72: ;
Line 73: else
Line 74: ID = send_sig
Line 74: (
Line 74: ID = SIGSEGV
Line 74: ,
Line 74: ID = current
Line 74: ,
Line 74: INTCON = 1
Line 74: )
Line 74: ;
Line 75: }
Line 77: ID = static
Line 77: ID = struct
Line 77: ID = exec_domain
Line 77: *
Line 78: ID = lookup_exec_domain
Line 78: (
Line 78: ID = u_long
Line 78: ID = personality
Line 78: )
Line 79: {
Line 80: ID = struct
Line 80: ID = exec_domain
Line 80: *
Line 80: ID = ep
Line 80: ;
Line 81: ID = u_long
Line 81: ID = pers
Line 81: =
Line 81: ID = personality
Line 81: (
Line 81: ID = personality
Line 81: )
Line 81: ;
Line 83: ID = read_lock
Line 83: (
Line 83: Unrecognized token: 38
Line 83: ID = exec_domains_lock
Line 83: )
Line 83: ;
Line 84: for
Line 84: (
Line 84: ID = ep
Line 84: =
Line 84: ID = exec_domains
Line 84: ;
Line 84: ID = ep
Line 84: ;
Line 84: ID = ep
Line 84: =
Line 84: ID = ep
Line 84: -
Line 84: >
Line 84: ID = next
Line 84: )
Line 84: {
Line 85: if
Line 85: (
Line 85: ID = pers
Line 85: >=
Line 85: ID = ep
Line 85: -
Line 85: >
Line 85: ID = pers_low
Line 85: &&
Line 85: ID = pers
Line 85: <=
Line 85: ID = ep
Line 85: -
Line 85: >
Line 85: ID = pers_high
Line 85: )
Line 86: if
Line 86: (
Line 86: ID = try_module_get
Line 86: (
Line 86: ID = ep
Line 86: -
Line 86: >
Line 86: ID = module
Line 86: )
Line 86: )
Line 87: ID = goto
Line 87: ID = out
Line 87: ;
Line 88: }
Line 90: Unrecognized token: 35
Line 90: ID = ifdef
Line 90: ID = CONFIG_KMOD
Line 91: ID = read_unlock
Line 91: (
Line 91: Unrecognized token: 38
Line 91: ID = exec_domains_lock
Line 91: )
Line 91: ;
Line 92: ID = request_module
Line 92: (
Line 92: STRINGCON = "personality-%ld"
Line 92: ,
Line 92: ID = pers
Line 92: )
Line 92: ;
Line 93: ID = read_lock
Line 93: (
Line 93: Unrecognized token: 38
Line 93: ID = exec_domains_lock
Line 93: )
Line 93: ;
Line 95: for
Line 95: (
Line 95: ID = ep
Line 95: =
Line 95: ID = exec_domains
Line 95: ;
Line 95: ID = ep
Line 95: ;
Line 95: ID = ep
Line 95: =
Line 95: ID = ep
Line 95: -
Line 95: >
Line 95: ID = next
Line 95: )
Line 95: {
Line 96: if
Line 96: (
Line 96: ID = pers
Line 96: >=
Line 96: ID = ep
Line 96: -
Line 96: >
Line 96: ID = pers_low
Line 96: &&
Line 96: ID = pers
Line 96: <=
Line 96: ID = ep
Line 96: -
Line 96: >
Line 96: ID = pers_high
Line 96: )
Line 97: if
Line 97: (
Line 97: ID = try_module_get
Line 97: (
Line 97: ID = ep
Line 97: -
Line 97: >
Line 97: ID = module
Line 97: )
Line 97: )
Line 98: ID = goto
Line 98: ID = out
Line 98: ;
Line 99: }
Line 100: Unrecognized token: 35
Line 100: ID = endif
Line 102: ID = ep
Line 102: =
Line 102: Unrecognized token: 38
Line 102: ID = default_exec_domain
Line 102: ;
Line 103: ID = out
Line 103: Unrecognized token: 58
Line 104: ID = read_unlock
Line 104: (
Line 104: Unrecognized token: 38
Line 104: ID = exec_domains_lock
Line 104: )
Line 104: ;
Line 105: return
Line 105: (
Line 105: ID = ep
Line 105: )
Line 105: ;
Line 106: }
Line 108: int
Line 109: ID = register_exec_domain
Line 109: (
Line 109: ID = struct
Line 109: ID = exec_domain
Line 109: *
Line 109: ID = ep
Line 109: )
Line 110: {
Line 111: ID = struct
Line 111: ID = exec_domain
Line 111: *
Line 111: ID = tmp
Line 111: ;
Line 112: int
Line 112: ID = err
Line 112: =
Line 112: -
Line 112: ID = EBUSY
Line 112: ;
Line 114: if
Line 114: (
Line 114: ID = ep
Line 114: ==
Line 114: ID = NULL
Line 114: )
Line 115: return
Line 115: -
Line 115: ID = EINVAL
Line 115: ;
Line 117: if
Line 117: (
Line 117: ID = ep
Line 117: -
Line 117: >
Line 117: ID = next
Line 117: !=
Line 117: ID = NULL
Line 117: )
Line 118: return
Line 118: -
Line 118: ID = EBUSY
Line 118: ;
Line 120: ID = write_lock
Line 120: (
Line 120: Unrecognized token: 38
Line 120: ID = exec_domains_lock
Line 120: )
Line 120: ;
Line 121: for
Line 121: (
Line 121: ID = tmp
Line 121: =
Line 121: ID = exec_domains
Line 121: ;
Line 121: ID = tmp
Line 121: ;
Line 121: ID = tmp
Line 121: =
Line 121: ID = tmp
Line 121: -
Line 121: >
Line 121: ID = next
Line 121: )
Line 121: {
Line 122: if
Line 122: (
Line 122: ID = tmp
Line 122: ==
Line 122: ID = ep
Line 122: )
Line 123: ID = goto
Line 123: ID = out
Line 123: ;
Line 124: }
Line 126: ID = ep
Line 126: -
Line 126: >
Line 126: ID = next
Line 126: =
Line 126: ID = exec_domains
Line 126: ;
Line 127: ID = exec_domains
Line 127: =
Line 127: ID = ep
Line 127: ;
Line 128: ID = err
Line 128: =
Line 128: INTCON = 0
Line 128: ;
Line 130: ID = out
Line 130: Unrecognized token: 58
Line 131: ID = write_unlock
Line 131: (
Line 131: Unrecognized token: 38
Line 131: ID = exec_domains_lock
Line 131: )
Line 131: ;
Line 132: return
Line 132: (
Line 132: ID = err
Line 132: )
Line 132: ;
Line 133: }
Line 135: int
Line 136: ID = unregister_exec_domain
Line 136: (
Line 136: ID = struct
Line 136: ID = exec_domain
Line 136: *
Line 136: ID = ep
Line 136: )
Line 137: {
Line 138: ID = struct
Line 138: ID = exec_domain
Line 138: *
Line 138: *
Line 138: ID = epp
Line 138: ;
Line 140: ID = epp
Line 140: =
Line 140: Unrecognized token: 38
Line 140: ID = exec_domains
Line 140: ;
Line 141: ID = write_lock
Line 141: (
Line 141: Unrecognized token: 38
Line 141: ID = exec_domains_lock
Line 141: )
Line 141: ;
Line 142: for
Line 142: (
Line 142: ID = epp
Line 142: =
Line 142: Unrecognized token: 38
Line 142: ID = exec_domains
Line 142: ;
Line 142: *
Line 142: ID = epp
Line 142: ;
Line 142: ID = epp
Line 142: =
Line 142: Unrecognized token: 38
Line 142: (
Line 142: *
Line 142: ID = epp
Line 142: )
Line 142: -
Line 142: >
Line 142: ID = next
Line 142: )
Line 142: {
Line 143: if
Line 143: (
Line 143: ID = ep
Line 143: ==
Line 143: *
Line 143: ID = epp
Line 143: )
Line 144: ID = goto
Line 144: ID = unregister
Line 144: ;
Line 145: }
Line 146: ID = write_unlock
Line 146: (
Line 146: Unrecognized token: 38
Line 146: ID = exec_domains_lock
Line 146: )
Line 146: ;
Line 147: return
Line 147: -
Line 147: ID = EINVAL
Line 147: ;
Line 149: ID = unregister
Line 149: Unrecognized token: 58
Line 150: *
Line 150: ID = epp
Line 150: =
Line 150: ID = ep
Line 150: -
Line 150: >
Line 150: ID = next
Line 150: ;
Line 151: ID = ep
Line 151: -
Line 151: >
Line 151: ID = next
Line 151: =
Line 151: ID = NULL
Line 151: ;
Line 152: ID = write_unlock
Line 152: (
Line 152: Unrecognized token: 38
Line 152: ID = exec_domains_lock
Line 152: )
Line 152: ;
Line 153: return
Line 153: INTCON = 0
Line 153: ;
Line 154: }
Line 156: int
Line 157: Unrecognized token: 95
Line 157: Unrecognized token: 95
Line 157: ID = set_personality
Line 157: (
Line 157: ID = u_long
Line 157: ID = personality
Line 157: )
Line 158: {
Line 159: ID = struct
Line 159: ID = exec_domain
Line 159: *
Line 159: ID = ep
Line 159: ,
Line 159: *
Line 159: ID = oep
Line 159: ;
Line 161: ID = ep
Line 161: =
Line 161: ID = lookup_exec_domain
Line 161: (
Line 161: ID = personality
Line 161: )
Line 161: ;
Line 162: if
Line 162: (
Line 162: ID = ep
Line 162: ==
Line 162: ID = current_thread_info
Line 162: (
Line 162: )
Line 162: -
Line 162: >
Line 162: ID = exec_domain
Line 162: )
Line 162: {
Line 163: ID = current
Line 163: -
Line 163: >
Line 163: ID = personality
Line 163: =
Line 163: ID = personality
Line 163: ;
Line 164: return
Line 164: INTCON = 0
Line 164: ;
Line 165: }
Line 167: if
Line 167: (
Line 167: ID = atomic_read
Line 167: (
Line 167: Unrecognized token: 38
Line 167: ID = current
Line 167: -
Line 167: >
Line 167: ID = fs
Line 167: -
Line 167: >
Line 167: ID = count
Line 167: )
Line 167: !=
Line 167: INTCON = 1
Line 167: )
Line 167: {
Line 168: ID = struct
Line 168: ID = fs_struct
Line 168: *
Line 168: ID = fsp
Line 168: ,
Line 168: *
Line 168: ID = ofsp
Line 168: ;
Line 170: ID = fsp
Line 170: =
Line 170: ID = copy_fs_struct
Line 170: (
Line 170: ID = current
Line 170: -
Line 170: >
Line 170: ID = fs
Line 170: )
Line 170: ;
Line 171: if
Line 171: (
Line 171: ID = fsp
Line 171: ==
Line 171: ID = NULL
Line 171: )
Line 171: {
Line 172: ID = module_put
Line 172: (
Line 172: ID = ep
Line 172: -
Line 172: >
Line 172: ID = module
Line 172: )
Line 172: ;
Line 173: return
Line 173: -
Line 173: ID = ENOMEM
Line 173: ;
Line 174: }
Line 176: ID = task_lock
Line 176: (
Line 176: ID = current
Line 176: )
Line 176: ;
Line 177: ID = ofsp
Line 177: =
Line 177: ID = current
Line 177: -
Line 177: >
Line 177: ID = fs
Line 177: ;
Line 178: ID = current
Line 178: -
Line 178: >
Line 178: ID = fs
Line 178: =
Line 178: ID = fsp
Line 178: ;
Line 179: ID = task_unlock
Line 179: (
Line 179: ID = current
Line 179: )
Line 179: ;
Line 181: ID = put_fs_struct
Line 181: (
Line 181: ID = ofsp
Line 181: )
Line 181: ;
Line 182: }
Line 189: ID = current
Line 189: -
Line 189: >
Line 189: ID = personality
Line 189: =
Line 189: ID = personality
Line 189: ;
Line 190: ID = oep
Line 190: =
Line 190: ID = current_thread_info
Line 190: (
Line 190: )
Line 190: -
Line 190: >
Line 190: ID = exec_domain
Line 190: ;
Line 191: ID = current_thread_info
Line 191: (
Line 191: )
Line 191: -
Line 191: >
Line 191: ID = exec_domain
Line 191: =
Line 191: ID = ep
Line 191: ;
Line 192: ID = set_fs_altroot
Line 192: (
Line 192: )
Line 192: ;
Line 194: ID = module_put
Line 194: (
Line 194: ID = oep
Line 194: -
Line 194: >
Line 194: ID = module
Line 194: )
Line 194: ;
Line 195: return
Line 195: INTCON = 0
Line 195: ;
Line 196: }
Line 198: int
Line 199: ID = get_exec_domain_list
Line 199: (
Line 199: char
Line 199: *
Line 199: ID = page
Line 199: )
Line 200: {
Line 201: ID = struct
Line 201: ID = exec_domain
Line 201: *
Line 201: ID = ep
Line 201: ;
Line 202: int
Line 202: ID = len
Line 202: =
Line 202: INTCON = 0
Line 202: ;
Line 204: ID = read_lock
Line 204: (
Line 204: Unrecognized token: 38
Line 204: ID = exec_domains_lock
Line 204: )
Line 204: ;
Line 205: for
Line 205: (
Line 205: ID = ep
Line 205: =
Line 205: ID = exec_domains
Line 205: ;
Line 205: ID = ep
Line 205: &&
Line 205: ID = len
Line 205: <
Line 205: ID = PAGE_SIZE
Line 205: -
Line 205: INTCON = 80
Line 205: ;
Line 205: ID = ep
Line 205: =
Line 205: ID = ep
Line 205: -
Line 205: >
Line 205: ID = next
Line 205: )
Line 206: ID = len
Line 206: +
Line 206: =
Line 206: ID = sprintf
Line 206: (
Line 206: ID = page
Line 206: +
Line 206: ID = len
Line 206: ,
Line 206: STRINGCON = "%d-%d\t%-16s\t[%s]\n"
Line 206: ,
Line 207: ID = ep
Line 207: -
Line 207: >
Line 207: ID = pers_low
Line 207: ,
Line 207: ID = ep
Line 207: -
Line 207: >
Line 207: ID = pers_high
Line 207: ,
Line 207: ID = ep
Line 207: -
Line 207: >
Line 207: ID = name
Line 207: ,
Line 208: ID = module_name
Line 208: (
Line 208: ID = ep
Line 208: -
Line 208: >
Line 208: ID = module
Line 208: )
Line 208: )
Line 208: ;
Line 209: ID = read_unlock
Line 209: (
Line 209: Unrecognized token: 38
Line 209: ID = exec_domains_lock
Line 209: )
Line 209: ;
Line 210: return
Line 210: (
Line 210: ID = len
Line 210: )
Line 210: ;
Line 211: }
Line 213: ID = asmlinkage
Line 213: ID = long
Line 214: ID = sys_personality
Line 214: (
Line 214: ID = u_long
Line 214: ID = personality
Line 214: )
Line 215: {
Line 216: ID = u_long
Line 216: ID = old
Line 216: =
Line 216: ID = current
Line 216: -
Line 216: >
Line 216: ID = personality
Line 216: ;
Line 218: if
Line 218: (
Line 218: ID = personality
Line 218: !=
Line 218: INTCON = 0
Line 218: ID = xffffffff
Line 218: )
Line 218: {
Line 219: ID = set_personality
Line 219: (
Line 219: ID = personality
Line 219: )
Line 219: ;
Line 220: if
Line 220: (
Line 220: ID = current
Line 220: -
Line 220: >
Line 220: ID = personality
Line 220: !=
Line 220: ID = personality
Line 220: )
Line 221: return
Line 221: -
Line 221: ID = EINVAL
Line 221: ;
Line 222: }
Line 224: return
Line 224: (
Line 224: ID = long
Line 224: )
Line 224: ID = old
Line 224: ;
Line 225: }
Line 228: ID = EXPORT_SYMBOL
Line 228: (
Line 228: ID = register_exec_domain
Line 228: )
Line 228: ;
Line 229: ID = EXPORT_SYMBOL
Line 229: (
Line 229: ID = unregister_exec_domain
Line 229: )
Line 229: ;
Line 230: ID = EXPORT_SYMBOL
Line 230: (
Line 230: Unrecognized token: 95
Line 230: Unrecognized token: 95
Line 230: ID = set_personality
Line 230: )
Line 230: ;
Line 243: ID = u_long
Line 243: ID = abi_defhandler_coff
Line 243: =
Line 243: ID = PER_SCOSVR3
Line 243: ;
Line 244: ID = u_long
Line 244: ID = abi_defhandler_elf
Line 244: =
Line 244: ID = PER_LINUX
Line 244: ;
Line 245: ID = u_long
Line 245: ID = abi_defhandler_lcall7
Line 245: =
Line 245: ID = PER_SVR4
Line 245: ;
Line 246: ID = u_long
Line 246: ID = abi_defhandler_libcso
Line 246: =
Line 246: ID = PER_SVR4
Line 246: ;
Line 247: ID = u_int
Line 247: ID = abi_traceflg
Line 247: ;
Line 248: int
Line 248: ID = abi_fake_utsname
Line 248: ;
Line 250: ID = static
Line 250: ID = struct
Line 250: ID = ctl_table
Line 250: ID = abi_table
Line 250: [
Line 250: ]
Line 250: =
Line 250: {
Line 251: {
Line 252: Unrecognized token: 46
Line 252: ID = ctl_name
Line 252: =
Line 252: ID = ABI_DEFHANDLER_COFF
Line 252: ,
Line 253: Unrecognized token: 46
Line 253: ID = procname
Line 253: =
Line 253: STRINGCON = "defhandler_coff"
Line 253: ,
Line 254: Unrecognized token: 46
Line 254: ID = data
Line 254: =
Line 254: Unrecognized token: 38
Line 254: ID = abi_defhandler_coff
Line 254: ,
Line 255: Unrecognized token: 46
Line 255: ID = maxlen
Line 255: =
Line 255: ID = sizeof
Line 255: (
Line 255: int
Line 255: )
Line 255: ,
Line 256: Unrecognized token: 46
Line 256: ID = mode
Line 256: =
Line 256: INTCON = 0644
Line 256: ,
Line 257: Unrecognized token: 46
Line 257: ID = proc_handler
Line 257: =
Line 257: Unrecognized token: 38
Line 257: ID = proc_doulongvec_minmax
Line 257: ,
Line 258: }
Line 258: ,
Line 259: {
Line 260: Unrecognized token: 46
Line 260: ID = ctl_name
Line 260: =
Line 260: ID = ABI_DEFHANDLER_ELF
Line 260: ,
Line 261: Unrecognized token: 46
Line 261: ID = procname
Line 261: =
Line 261: STRINGCON = "defhandler_elf"
Line 261: ,
Line 262: Unrecognized token: 46
Line 262: ID = data
Line 262: =
Line 262: Unrecognized token: 38
Line 262: ID = abi_defhandler_elf
Line 262: ,
Line 263: Unrecognized token: 46
Line 263: ID = maxlen
Line 263: =
Line 263: ID = sizeof
Line 263: (
Line 263: int
Line 263: )
Line 263: ,
Line 264: Unrecognized token: 46
Line 264: ID = mode
Line 264: =
Line 264: INTCON = 0644
Line 264: ,
Line 265: Unrecognized token: 46
Line 265: ID = proc_handler
Line 265: =
Line 265: Unrecognized token: 38
Line 265: ID = proc_doulongvec_minmax
Line 265: ,
Line 266: }
Line 266: ,
Line 267: {
Line 268: Unrecognized token: 46
Line 268: ID = ctl_name
Line 268: =
Line 268: ID = ABI_DEFHANDLER_LCALL7
Line 268: ,
Line 269: Unrecognized token: 46
Line 269: ID = procname
Line 269: =
Line 269: STRINGCON = "defhandler_lcall7"
Line 269: ,
Line 270: Unrecognized token: 46
Line 270: ID = data
Line 270: =
Line 270: Unrecognized token: 38
Line 270: ID = abi_defhandler_lcall7
Line 270: ,
Line 271: Unrecognized token: 46
Line 271: ID = maxlen
Line 271: =
Line 271: ID = sizeof
Line 271: (
Line 271: int
Line 271: )
Line 271: ,
Line 272: Unrecognized token: 46
Line 272: ID = mode
Line 272: =
Line 272: INTCON = 0644
Line 272: ,
Line 273: Unrecognized token: 46
Line 273: ID = proc_handler
Line 273: =
Line 273: Unrecognized token: 38
Line 273: ID = proc_doulongvec_minmax
Line 273: ,
Line 274: }
Line 274: ,
Line 275: {
Line 276: Unrecognized token: 46
Line 276: ID = ctl_name
Line 276: =
Line 276: ID = ABI_DEFHANDLER_LIBCSO
Line 276: ,
Line 277: Unrecognized token: 46
Line 277: ID = procname
Line 277: =
Line 277: STRINGCON = "defhandler_libcso"
Line 277: ,
Line 278: Unrecognized token: 46
Line 278: ID = data
Line 278: =
Line 278: Unrecognized token: 38
Line 278: ID = abi_defhandler_libcso
Line 278: ,
Line 279: Unrecognized token: 46
Line 279: ID = maxlen
Line 279: =
Line 279: ID = sizeof
Line 279: (
Line 279: int
Line 279: )
Line 279: ,
Line 280: Unrecognized token: 46
Line 280: ID = mode
Line 280: =
Line 280: INTCON = 0644
Line 280: ,
Line 281: Unrecognized token: 46
Line 281: ID = proc_handler
Line 281: =
Line 281: Unrecognized token: 38
Line 281: ID = proc_doulongvec_minmax
Line 281: ,
Line 282: }
Line 282: ,
Line 283: {
Line 284: Unrecognized token: 46
Line 284: ID = ctl_name
Line 284: =
Line 284: ID = ABI_TRACE
Line 284: ,
Line 285: Unrecognized token: 46
Line 285: ID = procname
Line 285: =
Line 285: STRINGCON = "trace"
Line 285: ,
Line 286: Unrecognized token: 46
Line 286: ID = data
Line 286: =
Line 286: Unrecognized token: 38
Line 286: ID = abi_traceflg
Line 286: ,
Line 287: Unrecognized token: 46
Line 287: ID = maxlen
Line 287: =
Line 287: ID = sizeof
Line 287: (
Line 287: ID = u_int
Line 287: )
Line 287: ,
Line 288: Unrecognized token: 46
Line 288: ID = mode
Line 288: =
Line 288: INTCON = 0644
Line 288: ,
Line 289: Unrecognized token: 46
Line 289: ID = proc_handler
Line 289: =
Line 289: Unrecognized token: 38
Line 289: ID = proc_dointvec
Line 289: ,
Line 290: }
Line 290: ,
Line 291: {
Line 292: Unrecognized token: 46
Line 292: ID = ctl_name
Line 292: =
Line 292: ID = ABI_FAKE_UTSNAME
Line 292: ,
Line 293: Unrecognized token: 46
Line 293: ID = procname
Line 293: =
Line 293: STRINGCON = "fake_utsname"
Line 293: ,
Line 294: Unrecognized token: 46
Line 294: ID = data
Line 294: =
Line 294: Unrecognized token: 38
Line 294: ID = abi_fake_utsname
Line 294: ,
Line 295: Unrecognized token: 46
Line 295: ID = maxlen
Line 295: =
Line 295: ID = sizeof
Line 295: (
Line 295: int
Line 295: )
Line 295: ,
Line 296: Unrecognized token: 46
Line 296: ID = mode
Line 296: =
Line 296: INTCON = 0644
Line 296: ,
Line 297: Unrecognized token: 46
Line 297: ID = proc_handler
Line 297: =
Line 297: Unrecognized token: 38
Line 297: ID = proc_dointvec
Line 297: ,
Line 298: }
Line 298: ,
Line 299: {
Line 299: Unrecognized token: 46
Line 299: ID = ctl_name
Line 299: =
Line 299: INTCON = 0
Line 299: }
Line 300: }
Line 300: ;
Line 302: ID = static
Line 302: ID = struct
Line 302: ID = ctl_table
Line 302: ID = abi_root_table
Line 302: [
Line 302: ]
Line 302: =
Line 302: {
Line 303: {
Line 304: Unrecognized token: 46
Line 304: ID = ctl_name
Line 304: =
Line 304: ID = CTL_ABI
Line 304: ,
Line 305: Unrecognized token: 46
Line 305: ID = procname
Line 305: =
Line 305: STRINGCON = "abi"
Line 305: ,
Line 306: Unrecognized token: 46
Line 306: ID = mode
Line 306: =
Line 306: INTCON = 0555
Line 306: ,
Line 307: Unrecognized token: 46
Line 307: ID = child
Line 307: =
Line 307: ID = abi_table
Line 307: ,
Line 308: }
Line 308: ,
Line 309: {
Line 309: Unrecognized token: 46
Line 309: ID = ctl_name
Line 309: =
Line 309: INTCON = 0
Line 309: }
Line 310: }
Line 310: ;
Line 312: ID = static
Line 312: int
Line 312: Unrecognized token: 95
Line 312: Unrecognized token: 95
Line 312: ID = init
Line 313: ID = abi_register_sysctl
Line 313: (
Line 313: void
Line 313: )
Line 314: {
Line 315: ID = register_sysctl_table
Line 315: (
Line 315: ID = abi_root_table
Line 315: ,
Line 315: INTCON = 1
Line 315: )
Line 315: ;
Line 316: return
Line 316: INTCON = 0
Line 316: ;
Line 317: }
Line 319: Unrecognized token: 95
Line 319: Unrecognized token: 95
Line 319: ID = initcall
Line 319: (
Line 319: ID = abi_register_sysctl
Line 319: )
Line 319: ;
Line 322: ID = EXPORT_SYMBOL
Line 322: (
Line 322: ID = abi_defhandler_coff
Line 322: )
Line 322: ;
Line 323: ID = EXPORT_SYMBOL
Line 323: (
Line 323: ID = abi_defhandler_elf
Line 323: )
Line 323: ;
Line 324: ID = EXPORT_SYMBOL
Line 324: (
Line 324: ID = abi_defhandler_lcall7
Line 324: )
Line 324: ;
Line 325: ID = EXPORT_SYMBOL
Line 325: (
Line 325: ID = abi_defhandler_libcso
Line 325: )
Line 325: ;
Line 326: ID = EXPORT_SYMBOL
Line 326: (
Line 326: ID = abi_traceflg
Line 326: )
Line 326: ;
Line 327: ID = EXPORT_SYMBOL
Line 327: (
Line 327: ID = abi_fake_utsname
Line 327: )
Line 327: ;
Line 328: -EOF-

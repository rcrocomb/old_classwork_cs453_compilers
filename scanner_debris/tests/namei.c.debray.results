Line 17: Unrecognized token: 35
Line 17: ID = include
Line 17: <
Line 17: ID = linux
Line 17: /
Line 17: ID = init
Line 17: Unrecognized token: 46
Line 17: ID = h
Line 17: >
Line 18: Unrecognized token: 35
Line 18: ID = include
Line 18: <
Line 18: ID = linux
Line 18: /
Line 18: ID = module
Line 18: Unrecognized token: 46
Line 18: ID = h
Line 18: >
Line 19: Unrecognized token: 35
Line 19: ID = include
Line 19: <
Line 19: ID = linux
Line 19: /
Line 19: ID = slab
Line 19: Unrecognized token: 46
Line 19: ID = h
Line 19: >
Line 20: Unrecognized token: 35
Line 20: ID = include
Line 20: <
Line 20: ID = linux
Line 20: /
Line 20: ID = fs
Line 20: Unrecognized token: 46
Line 20: ID = h
Line 20: >
Line 21: Unrecognized token: 35
Line 21: ID = include
Line 21: <
Line 21: ID = linux
Line 21: /
Line 21: ID = namei
Line 21: Unrecognized token: 46
Line 21: ID = h
Line 21: >
Line 22: Unrecognized token: 35
Line 22: ID = include
Line 22: <
Line 22: ID = linux
Line 22: /
Line 22: ID = quotaops
Line 22: Unrecognized token: 46
Line 22: ID = h
Line 22: >
Line 23: Unrecognized token: 35
Line 23: ID = include
Line 23: <
Line 23: ID = linux
Line 23: /
Line 23: ID = pagemap
Line 23: Unrecognized token: 46
Line 23: ID = h
Line 23: >
Line 24: Unrecognized token: 35
Line 24: ID = include
Line 24: <
Line 24: ID = linux
Line 24: /
Line 24: ID = dnotify
Line 24: Unrecognized token: 46
Line 24: ID = h
Line 24: >
Line 25: Unrecognized token: 35
Line 25: ID = include
Line 25: <
Line 25: ID = linux
Line 25: /
Line 25: ID = smp_lock
Line 25: Unrecognized token: 46
Line 25: ID = h
Line 25: >
Line 26: Unrecognized token: 35
Line 26: ID = include
Line 26: <
Line 26: ID = linux
Line 26: /
Line 26: ID = personality
Line 26: Unrecognized token: 46
Line 26: ID = h
Line 26: >
Line 27: Unrecognized token: 35
Line 27: ID = include
Line 27: <
Line 27: ID = linux
Line 27: /
Line 27: ID = security
Line 27: Unrecognized token: 46
Line 27: ID = h
Line 27: >
Line 28: Unrecognized token: 35
Line 28: ID = include
Line 28: <
Line 28: ID = linux
Line 28: /
Line 28: ID = mount
Line 28: Unrecognized token: 46
Line 28: ID = h
Line 28: >
Line 29: Unrecognized token: 35
Line 29: ID = include
Line 29: <
Line 29: ID = linux
Line 29: /
Line 29: ID = audit
Line 29: Unrecognized token: 46
Line 29: ID = h
Line 29: >
Line 30: Unrecognized token: 35
Line 30: ID = include
Line 30: <
Line 30: ID = asm
Line 30: /
Line 30: ID = namei
Line 30: Unrecognized token: 46
Line 30: ID = h
Line 30: >
Line 31: Unrecognized token: 35
Line 31: ID = include
Line 31: <
Line 31: ID = asm
Line 31: /
Line 31: ID = uaccess
Line 31: Unrecognized token: 46
Line 31: ID = h
Line 31: >
Line 33: Unrecognized token: 35
Line 33: ID = define
Line 33: ID = ACC_MODE
Line 33: (
Line 33: ID = x
Line 33: )
Line 33: (
Line 33: STRINGCON = "\000\004\002\006"
Line 33: [
Line 33: (
Line 33: ID = x
Line 33: )
Line 33: Unrecognized token: 38
Line 33: ID = O_ACCMODE
Line 33: ]
Line 33: )
Line 113: ID = static
Line 113: ID = inline
Line 113: int
Line 113: ID = do_getname
Line 113: (
Line 113: ID = const
Line 113: char
Line 113: Unrecognized token: 95
Line 113: Unrecognized token: 95
Line 113: ID = user
Line 113: *
Line 113: ID = filename
Line 113: ,
Line 113: char
Line 113: *
Line 113: ID = page
Line 113: )
Line 114: {
Line 115: int
Line 115: ID = retval
Line 115: ;
Line 116: ID = unsigned
Line 116: ID = long
Line 116: ID = len
Line 116: =
Line 116: ID = PATH_MAX
Line 116: ;
Line 118: if
Line 118: (
Line 118: (
Line 118: ID = unsigned
Line 118: ID = long
Line 118: )
Line 118: ID = filename
Line 118: >=
Line 118: ID = TASK_SIZE
Line 118: )
Line 118: {
Line 119: if
Line 119: (
Line 119: !
Line 119: ID = segment_eq
Line 119: (
Line 119: ID = get_fs
Line 119: (
Line 119: )
Line 119: ,
Line 119: ID = KERNEL_DS
Line 119: )
Line 119: )
Line 120: return
Line 120: -
Line 120: ID = EFAULT
Line 120: ;
Line 121: }
Line 121: else
Line 121: if
Line 121: (
Line 121: ID = TASK_SIZE
Line 121: -
Line 121: (
Line 121: ID = unsigned
Line 121: ID = long
Line 121: )
Line 121: ID = filename
Line 121: <
Line 121: ID = PATH_MAX
Line 121: )
Line 122: ID = len
Line 122: =
Line 122: ID = TASK_SIZE
Line 122: -
Line 122: (
Line 122: ID = unsigned
Line 122: ID = long
Line 122: )
Line 122: ID = filename
Line 122: ;
Line 124: ID = retval
Line 124: =
Line 124: ID = strncpy_from_user
Line 124: (
Line 124: (
Line 124: char
Line 124: *
Line 124: )
Line 124: ID = page
Line 124: ,
Line 124: ID = filename
Line 124: ,
Line 124: ID = len
Line 124: )
Line 124: ;
Line 125: if
Line 125: (
Line 125: ID = retval
Line 125: >
Line 125: INTCON = 0
Line 125: )
Line 125: {
Line 126: if
Line 126: (
Line 126: ID = retval
Line 126: <
Line 126: ID = len
Line 126: )
Line 127: return
Line 127: INTCON = 0
Line 127: ;
Line 128: return
Line 128: -
Line 128: ID = ENAMETOOLONG
Line 128: ;
Line 129: }
Line 129: else
Line 129: if
Line 129: (
Line 129: !
Line 129: ID = retval
Line 129: )
Line 130: ID = retval
Line 130: =
Line 130: -
Line 130: ID = ENOENT
Line 130: ;
Line 131: return
Line 131: ID = retval
Line 131: ;
Line 132: }
Line 134: char
Line 134: *
Line 134: ID = getname
Line 134: (
Line 134: ID = const
Line 134: char
Line 134: Unrecognized token: 95
Line 134: Unrecognized token: 95
Line 134: ID = user
Line 134: *
Line 134: ID = filename
Line 134: )
Line 135: {
Line 136: char
Line 136: *
Line 136: ID = tmp
Line 136: ,
Line 136: *
Line 136: ID = result
Line 136: ;
Line 138: ID = result
Line 138: =
Line 138: ID = ERR_PTR
Line 138: (
Line 138: -
Line 138: ID = ENOMEM
Line 138: )
Line 138: ;
Line 139: ID = tmp
Line 139: =
Line 139: Unrecognized token: 95
Line 139: Unrecognized token: 95
Line 139: ID = getname
Line 139: (
Line 139: )
Line 139: ;
Line 140: if
Line 140: (
Line 140: ID = tmp
Line 140: )
Line 140: {
Line 141: int
Line 141: ID = retval
Line 141: =
Line 141: ID = do_getname
Line 141: (
Line 141: ID = filename
Line 141: ,
Line 141: ID = tmp
Line 141: )
Line 141: ;
Line 143: ID = result
Line 143: =
Line 143: ID = tmp
Line 143: ;
Line 144: if
Line 144: (
Line 144: ID = retval
Line 144: <
Line 144: INTCON = 0
Line 144: )
Line 144: {
Line 145: Unrecognized token: 95
Line 145: Unrecognized token: 95
Line 145: ID = putname
Line 145: (
Line 145: ID = tmp
Line 145: )
Line 145: ;
Line 146: ID = result
Line 146: =
Line 146: ID = ERR_PTR
Line 146: (
Line 146: ID = retval
Line 146: )
Line 146: ;
Line 147: }
Line 148: }
Line 149: if
Line 149: (
Line 149: ID = unlikely
Line 149: (
Line 149: ID = current
Line 149: -
Line 149: >
Line 149: ID = audit_context
Line 149: )
Line 149: &&
Line 149: !
Line 149: ID = IS_ERR
Line 149: (
Line 149: ID = result
Line 149: )
Line 149: &&
Line 149: ID = result
Line 149: )
Line 150: ID = audit_getname
Line 150: (
Line 150: ID = result
Line 150: )
Line 150: ;
Line 151: return
Line 151: ID = result
Line 151: ;
Line 152: }
Line 162: int
Line 162: ID = vfs_permission
Line 162: (
Line 162: ID = struct
Line 162: ID = inode
Line 162: *
Line 162: ID = inode
Line 162: ,
Line 162: int
Line 162: ID = mask
Line 162: )
Line 163: {
Line 164: ID = umode_t
Line 164: ID = mode
Line 164: =
Line 164: ID = inode
Line 164: -
Line 164: >
Line 164: ID = i_mode
Line 164: ;
Line 166: if
Line 166: (
Line 166: ID = mask
Line 166: Unrecognized token: 38
Line 166: ID = MAY_WRITE
Line 166: )
Line 166: {
Line 170: if
Line 170: (
Line 170: ID = IS_RDONLY
Line 170: (
Line 170: ID = inode
Line 170: )
Line 170: &&
Line 171: (
Line 171: ID = S_ISREG
Line 171: (
Line 171: ID = mode
Line 171: )
Line 171: ||
Line 171: ID = S_ISDIR
Line 171: (
Line 171: ID = mode
Line 171: )
Line 171: ||
Line 171: ID = S_ISLNK
Line 171: (
Line 171: ID = mode
Line 171: )
Line 171: )
Line 171: )
Line 172: return
Line 172: -
Line 172: ID = EROFS
Line 172: ;
Line 177: if
Line 177: (
Line 177: ID = IS_IMMUTABLE
Line 177: (
Line 177: ID = inode
Line 177: )
Line 177: )
Line 178: return
Line 178: -
Line 178: ID = EACCES
Line 178: ;
Line 179: }
Line 181: if
Line 181: (
Line 181: ID = current
Line 181: -
Line 181: >
Line 181: ID = fsuid
Line 181: ==
Line 181: ID = inode
Line 181: -
Line 181: >
Line 181: ID = i_uid
Line 181: )
Line 182: ID = mode
Line 182: >
Line 182: >=
Line 182: INTCON = 6
Line 182: ;
Line 183: else
Line 183: if
Line 183: (
Line 183: ID = in_group_p
Line 183: (
Line 183: ID = inode
Line 183: -
Line 183: >
Line 183: ID = i_gid
Line 183: )
Line 183: )
Line 184: ID = mode
Line 184: >
Line 184: >=
Line 184: INTCON = 3
Line 184: ;
Line 189: if
Line 189: (
Line 189: (
Line 189: (
Line 189: ID = mode
Line 189: Unrecognized token: 38
Line 189: ID = mask
Line 189: Unrecognized token: 38
Line 189: (
Line 189: ID = MAY_READ
Line 189: Unrecognized token: 124
Line 189: ID = MAY_WRITE
Line 189: Unrecognized token: 124
Line 189: ID = MAY_EXEC
Line 189: )
Line 189: )
Line 189: ==
Line 189: ID = mask
Line 189: )
Line 189: )
Line 190: return
Line 190: INTCON = 0
Line 190: ;
Line 196: if
Line 196: (
Line 196: !
Line 196: (
Line 196: ID = mask
Line 196: Unrecognized token: 38
Line 196: ID = MAY_EXEC
Line 196: )
Line 196: ||
Line 197: (
Line 197: ID = inode
Line 197: -
Line 197: >
Line 197: ID = i_mode
Line 197: Unrecognized token: 38
Line 197: ID = S_IXUGO
Line 197: )
Line 197: ||
Line 197: ID = S_ISDIR
Line 197: (
Line 197: ID = inode
Line 197: -
Line 197: >
Line 197: ID = i_mode
Line 197: )
Line 197: )
Line 198: if
Line 198: (
Line 198: ID = capable
Line 198: (
Line 198: ID = CAP_DAC_OVERRIDE
Line 198: )
Line 198: )
Line 199: return
Line 199: INTCON = 0
Line 199: ;
Line 204: if
Line 204: (
Line 204: ID = mask
Line 204: ==
Line 204: ID = MAY_READ
Line 204: ||
Line 204: (
Line 204: ID = S_ISDIR
Line 204: (
Line 204: ID = inode
Line 204: -
Line 204: >
Line 204: ID = i_mode
Line 204: )
Line 204: &&
Line 204: !
Line 204: (
Line 204: ID = mask
Line 204: Unrecognized token: 38
Line 204: ID = MAY_WRITE
Line 204: )
Line 204: )
Line 204: )
Line 205: if
Line 205: (
Line 205: ID = capable
Line 205: (
Line 205: ID = CAP_DAC_READ_SEARCH
Line 205: )
Line 205: )
Line 206: return
Line 206: INTCON = 0
Line 206: ;
Line 208: return
Line 208: -
Line 208: ID = EACCES
Line 208: ;
Line 209: }
Line 211: int
Line 211: ID = permission
Line 211: (
Line 211: ID = struct
Line 211: ID = inode
Line 211: *
Line 211: ID = inode
Line 211: ,
Line 211: int
Line 211: ID = mask
Line 211: ,
Line 211: ID = struct
Line 211: ID = nameidata
Line 211: *
Line 211: ID = nd
Line 211: )
Line 212: {
Line 213: int
Line 213: ID = retval
Line 213: ;
Line 214: int
Line 214: ID = submask
Line 214: ;
Line 217: ID = submask
Line 217: =
Line 217: ID = mask
Line 217: Unrecognized token: 38
Line 217: Unrecognized token: 126
Line 217: ID = MAY_APPEND
Line 217: ;
Line 219: if
Line 219: (
Line 219: ID = inode
Line 219: -
Line 219: >
Line 219: ID = i_op
Line 219: &&
Line 219: ID = inode
Line 219: -
Line 219: >
Line 219: ID = i_op
Line 219: -
Line 219: >
Line 219: ID = permission
Line 219: )
Line 220: ID = retval
Line 220: =
Line 220: ID = inode
Line 220: -
Line 220: >
Line 220: ID = i_op
Line 220: -
Line 220: >
Line 220: ID = permission
Line 220: (
Line 220: ID = inode
Line 220: ,
Line 220: ID = submask
Line 220: ,
Line 220: ID = nd
Line 220: )
Line 220: ;
Line 221: else
Line 222: ID = retval
Line 222: =
Line 222: ID = vfs_permission
Line 222: (
Line 222: ID = inode
Line 222: ,
Line 222: ID = submask
Line 222: )
Line 222: ;
Line 223: if
Line 223: (
Line 223: ID = retval
Line 223: )
Line 224: return
Line 224: ID = retval
Line 224: ;
Line 226: return
Line 226: ID = security_inode_permission
Line 226: (
Line 226: ID = inode
Line 226: ,
Line 226: ID = mask
Line 226: ,
Line 226: ID = nd
Line 226: )
Line 226: ;
Line 227: }
Line 247: int
Line 247: ID = get_write_access
Line 247: (
Line 247: ID = struct
Line 247: ID = inode
Line 247: *
Line 247: ID = inode
Line 247: )
Line 248: {
Line 249: ID = spin_lock
Line 249: (
Line 249: Unrecognized token: 38
Line 249: ID = inode
Line 249: -
Line 249: >
Line 249: ID = i_lock
Line 249: )
Line 249: ;
Line 250: if
Line 250: (
Line 250: ID = atomic_read
Line 250: (
Line 250: Unrecognized token: 38
Line 250: ID = inode
Line 250: -
Line 250: >
Line 250: ID = i_writecount
Line 250: )
Line 250: <
Line 250: INTCON = 0
Line 250: )
Line 250: {
Line 251: ID = spin_unlock
Line 251: (
Line 251: Unrecognized token: 38
Line 251: ID = inode
Line 251: -
Line 251: >
Line 251: ID = i_lock
Line 251: )
Line 251: ;
Line 252: return
Line 252: -
Line 252: ID = ETXTBSY
Line 252: ;
Line 253: }
Line 254: ID = atomic_inc
Line 254: (
Line 254: Unrecognized token: 38
Line 254: ID = inode
Line 254: -
Line 254: >
Line 254: ID = i_writecount
Line 254: )
Line 254: ;
Line 255: ID = spin_unlock
Line 255: (
Line 255: Unrecognized token: 38
Line 255: ID = inode
Line 255: -
Line 255: >
Line 255: ID = i_lock
Line 255: )
Line 255: ;
Line 257: return
Line 257: INTCON = 0
Line 257: ;
Line 258: }
Line 260: int
Line 260: ID = deny_write_access
Line 260: (
Line 260: ID = struct
Line 260: ID = file
Line 260: *
Line 260: ID = file
Line 260: )
Line 261: {
Line 262: ID = struct
Line 262: ID = inode
Line 262: *
Line 262: ID = inode
Line 262: =
Line 262: ID = file
Line 262: -
Line 262: >
Line 262: ID = f_dentry
Line 262: -
Line 262: >
Line 262: ID = d_inode
Line 262: ;
Line 264: ID = spin_lock
Line 264: (
Line 264: Unrecognized token: 38
Line 264: ID = inode
Line 264: -
Line 264: >
Line 264: ID = i_lock
Line 264: )
Line 264: ;
Line 265: if
Line 265: (
Line 265: ID = atomic_read
Line 265: (
Line 265: Unrecognized token: 38
Line 265: ID = inode
Line 265: -
Line 265: >
Line 265: ID = i_writecount
Line 265: )
Line 265: >
Line 265: INTCON = 0
Line 265: )
Line 265: {
Line 266: ID = spin_unlock
Line 266: (
Line 266: Unrecognized token: 38
Line 266: ID = inode
Line 266: -
Line 266: >
Line 266: ID = i_lock
Line 266: )
Line 266: ;
Line 267: return
Line 267: -
Line 267: ID = ETXTBSY
Line 267: ;
Line 268: }
Line 269: ID = atomic_dec
Line 269: (
Line 269: Unrecognized token: 38
Line 269: ID = inode
Line 269: -
Line 269: >
Line 269: ID = i_writecount
Line 269: )
Line 269: ;
Line 270: ID = spin_unlock
Line 270: (
Line 270: Unrecognized token: 38
Line 270: ID = inode
Line 270: -
Line 270: >
Line 270: ID = i_lock
Line 270: )
Line 270: ;
Line 272: return
Line 272: INTCON = 0
Line 272: ;
Line 273: }
Line 275: void
Line 275: ID = path_release
Line 275: (
Line 275: ID = struct
Line 275: ID = nameidata
Line 275: *
Line 275: ID = nd
Line 275: )
Line 276: {
Line 277: ID = dput
Line 277: (
Line 277: ID = nd
Line 277: -
Line 277: >
Line 277: ID = dentry
Line 277: )
Line 277: ;
Line 278: ID = mntput
Line 278: (
Line 278: ID = nd
Line 278: -
Line 278: >
Line 278: ID = mnt
Line 278: )
Line 278: ;
Line 279: }
Line 285: void
Line 285: ID = path_release_on_umount
Line 285: (
Line 285: ID = struct
Line 285: ID = nameidata
Line 285: *
Line 285: ID = nd
Line 285: )
Line 286: {
Line 287: ID = dput
Line 287: (
Line 287: ID = nd
Line 287: -
Line 287: >
Line 287: ID = dentry
Line 287: )
Line 287: ;
Line 288: Unrecognized token: 95
Line 288: ID = mntput
Line 288: (
Line 288: ID = nd
Line 288: -
Line 288: >
Line 288: ID = mnt
Line 288: )
Line 288: ;
Line 289: }
Line 295: ID = static
Line 295: ID = struct
Line 295: ID = dentry
Line 295: *
Line 295: ID = cached_lookup
Line 295: (
Line 295: ID = struct
Line 295: ID = dentry
Line 295: *
Line 295: ID = parent
Line 295: ,
Line 295: ID = struct
Line 295: ID = qstr
Line 295: *
Line 295: ID = name
Line 295: ,
Line 295: ID = struct
Line 295: ID = nameidata
Line 295: *
Line 295: ID = nd
Line 295: )
Line 296: {
Line 297: ID = struct
Line 297: ID = dentry
Line 297: *
Line 297: ID = dentry
Line 297: =
Line 297: Unrecognized token: 95
Line 297: Unrecognized token: 95
Line 297: ID = d_lookup
Line 297: (
Line 297: ID = parent
Line 297: ,
Line 297: ID = name
Line 297: )
Line 297: ;
Line 302: if
Line 302: (
Line 302: !
Line 302: ID = dentry
Line 302: )
Line 303: ID = dentry
Line 303: =
Line 303: ID = d_lookup
Line 303: (
Line 303: ID = parent
Line 303: ,
Line 303: ID = name
Line 303: )
Line 303: ;
Line 305: if
Line 305: (
Line 305: ID = dentry
Line 305: &&
Line 305: ID = dentry
Line 305: -
Line 305: >
Line 305: ID = d_op
Line 305: &&
Line 305: ID = dentry
Line 305: -
Line 305: >
Line 305: ID = d_op
Line 305: -
Line 305: >
Line 305: ID = d_revalidate
Line 305: )
Line 305: {
Line 306: if
Line 306: (
Line 306: !
Line 306: ID = dentry
Line 306: -
Line 306: >
Line 306: ID = d_op
Line 306: -
Line 306: >
Line 306: ID = d_revalidate
Line 306: (
Line 306: ID = dentry
Line 306: ,
Line 306: ID = nd
Line 306: )
Line 306: &&
Line 306: !
Line 306: ID = d_invalidate
Line 306: (
Line 306: ID = dentry
Line 306: )
Line 306: )
Line 306: {
Line 307: ID = dput
Line 307: (
Line 307: ID = dentry
Line 307: )
Line 307: ;
Line 308: ID = dentry
Line 308: =
Line 308: ID = NULL
Line 308: ;
Line 309: }
Line 310: }
Line 311: return
Line 311: ID = dentry
Line 311: ;
Line 312: }
Line 324: ID = static
Line 324: ID = inline
Line 324: int
Line 324: ID = exec_permission_lite
Line 324: (
Line 324: ID = struct
Line 324: ID = inode
Line 324: *
Line 324: ID = inode
Line 324: ,
Line 325: ID = struct
Line 325: ID = nameidata
Line 325: *
Line 325: ID = nd
Line 325: )
Line 326: {
Line 327: ID = umode_t
Line 327: ID = mode
Line 327: =
Line 327: ID = inode
Line 327: -
Line 327: >
Line 327: ID = i_mode
Line 327: ;
Line 329: if
Line 329: (
Line 329: ID = inode
Line 329: -
Line 329: >
Line 329: ID = i_op
Line 329: &&
Line 329: ID = inode
Line 329: -
Line 329: >
Line 329: ID = i_op
Line 329: -
Line 329: >
Line 329: ID = permission
Line 329: )
Line 330: return
Line 330: -
Line 330: ID = EAGAIN
Line 330: ;
Line 332: if
Line 332: (
Line 332: ID = current
Line 332: -
Line 332: >
Line 332: ID = fsuid
Line 332: ==
Line 332: ID = inode
Line 332: -
Line 332: >
Line 332: ID = i_uid
Line 332: )
Line 333: ID = mode
Line 333: >
Line 333: >=
Line 333: INTCON = 6
Line 333: ;
Line 334: else
Line 334: if
Line 334: (
Line 334: ID = in_group_p
Line 334: (
Line 334: ID = inode
Line 334: -
Line 334: >
Line 334: ID = i_gid
Line 334: )
Line 334: )
Line 335: ID = mode
Line 335: >
Line 335: >=
Line 335: INTCON = 3
Line 335: ;
Line 337: if
Line 337: (
Line 337: ID = mode
Line 337: Unrecognized token: 38
Line 337: ID = MAY_EXEC
Line 337: )
Line 338: ID = goto
Line 338: ID = ok
Line 338: ;
Line 340: if
Line 340: (
Line 340: (
Line 340: ID = inode
Line 340: -
Line 340: >
Line 340: ID = i_mode
Line 340: Unrecognized token: 38
Line 340: ID = S_IXUGO
Line 340: )
Line 340: &&
Line 340: ID = capable
Line 340: (
Line 340: ID = CAP_DAC_OVERRIDE
Line 340: )
Line 340: )
Line 341: ID = goto
Line 341: ID = ok
Line 341: ;
Line 343: if
Line 343: (
Line 343: ID = S_ISDIR
Line 343: (
Line 343: ID = inode
Line 343: -
Line 343: >
Line 343: ID = i_mode
Line 343: )
Line 343: &&
Line 343: ID = capable
Line 343: (
Line 343: ID = CAP_DAC_OVERRIDE
Line 343: )
Line 343: )
Line 344: ID = goto
Line 344: ID = ok
Line 344: ;
Line 346: if
Line 346: (
Line 346: ID = S_ISDIR
Line 346: (
Line 346: ID = inode
Line 346: -
Line 346: >
Line 346: ID = i_mode
Line 346: )
Line 346: &&
Line 346: ID = capable
Line 346: (
Line 346: ID = CAP_DAC_READ_SEARCH
Line 346: )
Line 346: )
Line 347: ID = goto
Line 347: ID = ok
Line 347: ;
Line 349: return
Line 349: -
Line 349: ID = EACCES
Line 349: ;
Line 350: ID = ok
Line 350: Unrecognized token: 58
Line 351: return
Line 351: ID = security_inode_permission
Line 351: (
Line 351: ID = inode
Line 351: ,
Line 351: ID = MAY_EXEC
Line 351: ,
Line 351: ID = nd
Line 351: )
Line 351: ;
Line 352: }
Line 362: ID = static
Line 362: ID = struct
Line 362: ID = dentry
Line 362: *
Line 362: ID = real_lookup
Line 362: (
Line 362: ID = struct
Line 362: ID = dentry
Line 362: *
Line 362: ID = parent
Line 362: ,
Line 362: ID = struct
Line 362: ID = qstr
Line 362: *
Line 362: ID = name
Line 362: ,
Line 362: ID = struct
Line 362: ID = nameidata
Line 362: *
Line 362: ID = nd
Line 362: )
Line 363: {
Line 364: ID = struct
Line 364: ID = dentry
Line 364: *
Line 364: ID = result
Line 364: ;
Line 365: ID = struct
Line 365: ID = inode
Line 365: *
Line 365: ID = dir
Line 365: =
Line 365: ID = parent
Line 365: -
Line 365: >
Line 365: ID = d_inode
Line 365: ;
Line 367: ID = down
Line 367: (
Line 367: Unrecognized token: 38
Line 367: ID = dir
Line 367: -
Line 367: >
Line 367: ID = i_sem
Line 367: )
Line 367: ;
Line 382: ID = result
Line 382: =
Line 382: ID = d_lookup
Line 382: (
Line 382: ID = parent
Line 382: ,
Line 382: ID = name
Line 382: )
Line 382: ;
Line 383: if
Line 383: (
Line 383: !
Line 383: ID = result
Line 383: )
Line 383: {
Line 384: ID = struct
Line 384: ID = dentry
Line 384: *
Line 384: ID = dentry
Line 384: =
Line 384: ID = d_alloc
Line 384: (
Line 384: ID = parent
Line 384: ,
Line 384: ID = name
Line 384: )
Line 384: ;
Line 385: ID = result
Line 385: =
Line 385: ID = ERR_PTR
Line 385: (
Line 385: -
Line 385: ID = ENOMEM
Line 385: )
Line 385: ;
Line 386: if
Line 386: (
Line 386: ID = dentry
Line 386: )
Line 386: {
Line 387: ID = result
Line 387: =
Line 387: ID = dir
Line 387: -
Line 387: >
Line 387: ID = i_op
Line 387: -
Line 387: >
Line 387: ID = lookup
Line 387: (
Line 387: ID = dir
Line 387: ,
Line 387: ID = dentry
Line 387: ,
Line 387: ID = nd
Line 387: )
Line 387: ;
Line 388: if
Line 388: (
Line 388: ID = result
Line 388: )
Line 389: ID = dput
Line 389: (
Line 389: ID = dentry
Line 389: )
Line 389: ;
Line 390: else
Line 391: ID = result
Line 391: =
Line 391: ID = dentry
Line 391: ;
Line 392: }
Line 393: ID = up
Line 393: (
Line 393: Unrecognized token: 38
Line 393: ID = dir
Line 393: -
Line 393: >
Line 393: ID = i_sem
Line 393: )
Line 393: ;
Line 394: return
Line 394: ID = result
Line 394: ;
Line 395: }
Line 401: ID = up
Line 401: (
Line 401: Unrecognized token: 38
Line 401: ID = dir
Line 401: -
Line 401: >
Line 401: ID = i_sem
Line 401: )
Line 401: ;
Line 402: if
Line 402: (
Line 402: ID = result
Line 402: -
Line 402: >
Line 402: ID = d_op
Line 402: &&
Line 402: ID = result
Line 402: -
Line 402: >
Line 402: ID = d_op
Line 402: -
Line 402: >
Line 402: ID = d_revalidate
Line 402: )
Line 402: {
Line 403: if
Line 403: (
Line 403: !
Line 403: ID = result
Line 403: -
Line 403: >
Line 403: ID = d_op
Line 403: -
Line 403: >
Line 403: ID = d_revalidate
Line 403: (
Line 403: ID = result
Line 403: ,
Line 403: ID = nd
Line 403: )
Line 403: &&
Line 403: !
Line 403: ID = d_invalidate
Line 403: (
Line 403: ID = result
Line 403: )
Line 403: )
Line 403: {
Line 404: ID = dput
Line 404: (
Line 404: ID = result
Line 404: )
Line 404: ;
Line 405: ID = result
Line 405: =
Line 405: ID = ERR_PTR
Line 405: (
Line 405: -
Line 405: ID = ENOENT
Line 405: )
Line 405: ;
Line 406: }
Line 407: }
Line 408: return
Line 408: ID = result
Line 408: ;
Line 409: }
Line 411: ID = static
Line 411: int
Line 411: Unrecognized token: 95
Line 411: Unrecognized token: 95
Line 411: ID = emul_lookup_dentry
Line 411: (
Line 411: ID = const
Line 411: char
Line 411: *
Line 411: ,
Line 411: ID = struct
Line 411: ID = nameidata
Line 411: *
Line 411: )
Line 411: ;
Line 414: ID = static
Line 414: ID = inline
Line 414: int
Line 415: ID = walk_init_root
Line 415: (
Line 415: ID = const
Line 415: char
Line 415: *
Line 415: ID = name
Line 415: ,
Line 415: ID = struct
Line 415: ID = nameidata
Line 415: *
Line 415: ID = nd
Line 415: )
Line 416: {
Line 417: ID = read_lock
Line 417: (
Line 417: Unrecognized token: 38
Line 417: ID = current
Line 417: -
Line 417: >
Line 417: ID = fs
Line 417: -
Line 417: >
Line 417: ID = lock
Line 417: )
Line 417: ;
Line 418: if
Line 418: (
Line 418: ID = current
Line 418: -
Line 418: >
Line 418: ID = fs
Line 418: -
Line 418: >
Line 418: ID = altroot
Line 418: &&
Line 418: !
Line 418: (
Line 418: ID = nd
Line 418: -
Line 418: >
Line 418: ID = flags
Line 418: Unrecognized token: 38
Line 418: ID = LOOKUP_NOALT
Line 418: )
Line 418: )
Line 418: {
Line 419: ID = nd
Line 419: -
Line 419: >
Line 419: ID = mnt
Line 419: =
Line 419: ID = mntget
Line 419: (
Line 419: ID = current
Line 419: -
Line 419: >
Line 419: ID = fs
Line 419: -
Line 419: >
Line 419: ID = altrootmnt
Line 419: )
Line 419: ;
Line 420: ID = nd
Line 420: -
Line 420: >
Line 420: ID = dentry
Line 420: =
Line 420: ID = dget
Line 420: (
Line 420: ID = current
Line 420: -
Line 420: >
Line 420: ID = fs
Line 420: -
Line 420: >
Line 420: ID = altroot
Line 420: )
Line 420: ;
Line 421: ID = read_unlock
Line 421: (
Line 421: Unrecognized token: 38
Line 421: ID = current
Line 421: -
Line 421: >
Line 421: ID = fs
Line 421: -
Line 421: >
Line 421: ID = lock
Line 421: )
Line 421: ;
Line 422: if
Line 422: (
Line 422: Unrecognized token: 95
Line 422: Unrecognized token: 95
Line 422: ID = emul_lookup_dentry
Line 422: (
Line 422: ID = name
Line 422: ,
Line 422: ID = nd
Line 422: )
Line 422: )
Line 423: return
Line 423: INTCON = 0
Line 423: ;
Line 424: ID = read_lock
Line 424: (
Line 424: Unrecognized token: 38
Line 424: ID = current
Line 424: -
Line 424: >
Line 424: ID = fs
Line 424: -
Line 424: >
Line 424: ID = lock
Line 424: )
Line 424: ;
Line 425: }
Line 426: ID = nd
Line 426: -
Line 426: >
Line 426: ID = mnt
Line 426: =
Line 426: ID = mntget
Line 426: (
Line 426: ID = current
Line 426: -
Line 426: >
Line 426: ID = fs
Line 426: -
Line 426: >
Line 426: ID = rootmnt
Line 426: )
Line 426: ;
Line 427: ID = nd
Line 427: -
Line 427: >
Line 427: ID = dentry
Line 427: =
Line 427: ID = dget
Line 427: (
Line 427: ID = current
Line 427: -
Line 427: >
Line 427: ID = fs
Line 427: -
Line 427: >
Line 427: ID = root
Line 427: )
Line 427: ;
Line 428: ID = read_unlock
Line 428: (
Line 428: Unrecognized token: 38
Line 428: ID = current
Line 428: -
Line 428: >
Line 428: ID = fs
Line 428: -
Line 428: >
Line 428: ID = lock
Line 428: )
Line 428: ;
Line 429: return
Line 429: INTCON = 1
Line 429: ;
Line 430: }
Line 432: ID = static
Line 432: ID = inline
Line 432: int
Line 432: Unrecognized token: 95
Line 432: Unrecognized token: 95
Line 432: ID = vfs_follow_link
Line 432: (
Line 432: ID = struct
Line 432: ID = nameidata
Line 432: *
Line 432: ID = nd
Line 432: ,
Line 432: ID = const
Line 432: char
Line 432: *
Line 432: ID = link
Line 432: )
Line 433: {
Line 434: int
Line 434: ID = res
Line 434: =
Line 434: INTCON = 0
Line 434: ;
Line 435: char
Line 435: *
Line 435: ID = name
Line 435: ;
Line 436: if
Line 436: (
Line 436: ID = IS_ERR
Line 436: (
Line 436: ID = link
Line 436: )
Line 436: )
Line 437: ID = goto
Line 437: ID = fail
Line 437: ;
Line 439: if
Line 439: (
Line 439: *
Line 439: ID = link
Line 439: ==
Line 439: CHARCON = '/'
Line 439: )
Line 439: {
Line 440: ID = path_release
Line 440: (
Line 440: ID = nd
Line 440: )
Line 440: ;
Line 441: if
Line 441: (
Line 441: !
Line 441: ID = walk_init_root
Line 441: (
Line 441: ID = link
Line 441: ,
Line 441: ID = nd
Line 441: )
Line 441: )
Line 443: ID = goto
Line 443: ID = out
Line 443: ;
Line 444: }
Line 445: ID = res
Line 445: =
Line 445: ID = link_path_walk
Line 445: (
Line 445: ID = link
Line 445: ,
Line 445: ID = nd
Line 445: )
Line 445: ;
Line 446: ID = out
Line 446: Unrecognized token: 58
Line 447: if
Line 447: (
Line 447: ID = nd
Line 447: -
Line 447: >
Line 447: ID = depth
Line 447: ||
Line 447: ID = res
Line 447: ||
Line 447: ID = nd
Line 447: -
Line 447: >
Line 447: ID = last_type
Line 447: !=
Line 447: ID = LAST_NORM
Line 447: )
Line 448: return
Line 448: ID = res
Line 448: ;
Line 454: ID = name
Line 454: =
Line 454: Unrecognized token: 95
Line 454: Unrecognized token: 95
Line 454: ID = getname
Line 454: (
Line 454: )
Line 454: ;
Line 455: if
Line 455: (
Line 455: ID = unlikely
Line 455: (
Line 455: !
Line 455: ID = name
Line 455: )
Line 455: )
Line 455: {
Line 456: ID = path_release
Line 456: (
Line 456: ID = nd
Line 456: )
Line 456: ;
Line 457: return
Line 457: -
Line 457: ID = ENOMEM
Line 457: ;
Line 458: }
Line 459: ID = strcpy
Line 459: (
Line 459: ID = name
Line 459: ,
Line 459: ID = nd
Line 459: -
Line 459: >
Line 459: ID = last
Line 459: Unrecognized token: 46
Line 459: ID = name
Line 459: )
Line 459: ;
Line 460: ID = nd
Line 460: -
Line 460: >
Line 460: ID = last
Line 460: Unrecognized token: 46
Line 460: ID = name
Line 460: =
Line 460: ID = name
Line 460: ;
Line 461: return
Line 461: INTCON = 0
Line 461: ;
Line 462: ID = fail
Line 462: Unrecognized token: 58
Line 463: ID = path_release
Line 463: (
Line 463: ID = nd
Line 463: )
Line 463: ;
Line 464: return
Line 464: ID = PTR_ERR
Line 464: (
Line 464: ID = link
Line 464: )
Line 464: ;
Line 465: }
Line 474: ID = static
Line 474: ID = inline
Line 474: int
Line 474: ID = do_follow_link
Line 474: (
Line 474: ID = struct
Line 474: ID = dentry
Line 474: *
Line 474: ID = dentry
Line 474: ,
Line 474: ID = struct
Line 474: ID = nameidata
Line 474: *
Line 474: ID = nd
Line 474: )
Line 475: {
Line 476: int
Line 476: ID = err
Line 476: =
Line 476: -
Line 476: ID = ELOOP
Line 476: ;
Line 477: if
Line 477: (
Line 477: ID = current
Line 477: -
Line 477: >
Line 477: ID = link_count
Line 477: >=
Line 477: ID = MAX_NESTED_LINKS
Line 477: )
Line 478: ID = goto
Line 478: ID = loop
Line 478: ;
Line 479: if
Line 479: (
Line 479: ID = current
Line 479: -
Line 479: >
Line 479: ID = total_link_count
Line 479: >=
Line 479: INTCON = 40
Line 479: )
Line 480: ID = goto
Line 480: ID = loop
Line 480: ;
Line 481: ID = BUG_ON
Line 481: (
Line 481: ID = nd
Line 481: -
Line 481: >
Line 481: ID = depth
Line 481: >=
Line 481: ID = MAX_NESTED_LINKS
Line 481: )
Line 481: ;
Line 482: ID = cond_resched
Line 482: (
Line 482: )
Line 482: ;
Line 483: ID = err
Line 483: =
Line 483: ID = security_inode_follow_link
Line 483: (
Line 483: ID = dentry
Line 483: ,
Line 483: ID = nd
Line 483: )
Line 483: ;
Line 484: if
Line 484: (
Line 484: ID = err
Line 484: )
Line 485: ID = goto
Line 485: ID = loop
Line 485: ;
Line 486: ID = current
Line 486: -
Line 486: >
Line 486: ID = link_count
Line 486: +
Line 486: +
Line 486: ;
Line 487: ID = current
Line 487: -
Line 487: >
Line 487: ID = total_link_count
Line 487: +
Line 487: +
Line 487: ;
Line 488: ID = nd
Line 488: -
Line 488: >
Line 488: ID = depth
Line 488: +
Line 488: +
Line 488: ;
Line 489: ID = touch_atime
Line 489: (
Line 489: ID = nd
Line 489: -
Line 489: >
Line 489: ID = mnt
Line 489: ,
Line 489: ID = dentry
Line 489: )
Line 489: ;
Line 490: ID = nd_set_link
Line 490: (
Line 490: ID = nd
Line 490: ,
Line 490: ID = NULL
Line 490: )
Line 490: ;
Line 491: ID = err
Line 491: =
Line 491: ID = dentry
Line 491: -
Line 491: >
Line 491: ID = d_inode
Line 491: -
Line 491: >
Line 491: ID = i_op
Line 491: -
Line 491: >
Line 491: ID = follow_link
Line 491: (
Line 491: ID = dentry
Line 491: ,
Line 491: ID = nd
Line 491: )
Line 491: ;
Line 492: if
Line 492: (
Line 492: !
Line 492: ID = err
Line 492: )
Line 492: {
Line 493: char
Line 493: *
Line 493: ID = s
Line 493: =
Line 493: ID = nd_get_link
Line 493: (
Line 493: ID = nd
Line 493: )
Line 493: ;
Line 494: if
Line 494: (
Line 494: ID = s
Line 494: )
Line 495: ID = err
Line 495: =
Line 495: Unrecognized token: 95
Line 495: Unrecognized token: 95
Line 495: ID = vfs_follow_link
Line 495: (
Line 495: ID = nd
Line 495: ,
Line 495: ID = s
Line 495: )
Line 495: ;
Line 496: if
Line 496: (
Line 496: ID = dentry
Line 496: -
Line 496: >
Line 496: ID = d_inode
Line 496: -
Line 496: >
Line 496: ID = i_op
Line 496: -
Line 496: >
Line 496: ID = put_link
Line 496: )
Line 497: ID = dentry
Line 497: -
Line 497: >
Line 497: ID = d_inode
Line 497: -
Line 497: >
Line 497: ID = i_op
Line 497: -
Line 497: >
Line 497: ID = put_link
Line 497: (
Line 497: ID = dentry
Line 497: ,
Line 497: ID = nd
Line 497: )
Line 497: ;
Line 498: }
Line 499: ID = current
Line 499: -
Line 499: >
Line 499: ID = link_count
Line 499: -
Line 499: -
Line 499: ;
Line 500: ID = nd
Line 500: -
Line 500: >
Line 500: ID = depth
Line 500: -
Line 500: -
Line 500: ;
Line 501: return
Line 501: ID = err
Line 501: ;
Line 502: ID = loop
Line 502: Unrecognized token: 58
Line 503: ID = path_release
Line 503: (
Line 503: ID = nd
Line 503: )
Line 503: ;
Line 504: return
Line 504: ID = err
Line 504: ;
Line 505: }
Line 507: int
Line 507: ID = follow_up
Line 507: (
Line 507: ID = struct
Line 507: ID = vfsmount
Line 507: *
Line 507: *
Line 507: ID = mnt
Line 507: ,
Line 507: ID = struct
Line 507: ID = dentry
Line 507: *
Line 507: *
Line 507: ID = dentry
Line 507: )
Line 508: {
Line 509: ID = struct
Line 509: ID = vfsmount
Line 509: *
Line 509: ID = parent
Line 509: ;
Line 510: ID = struct
Line 510: ID = dentry
Line 510: *
Line 510: ID = mountpoint
Line 510: ;
Line 511: ID = spin_lock
Line 511: (
Line 511: Unrecognized token: 38
Line 511: ID = vfsmount_lock
Line 511: )
Line 511: ;
Line 512: ID = parent
Line 512: =
Line 512: (
Line 512: *
Line 512: ID = mnt
Line 512: )
Line 512: -
Line 512: >
Line 512: ID = mnt_parent
Line 512: ;
Line 513: if
Line 513: (
Line 513: ID = parent
Line 513: ==
Line 513: *
Line 513: ID = mnt
Line 513: )
Line 513: {
Line 514: ID = spin_unlock
Line 514: (
Line 514: Unrecognized token: 38
Line 514: ID = vfsmount_lock
Line 514: )
Line 514: ;
Line 515: return
Line 515: INTCON = 0
Line 515: ;
Line 516: }
Line 517: ID = mntget
Line 517: (
Line 517: ID = parent
Line 517: )
Line 517: ;
Line 518: ID = mountpoint
Line 518: =
Line 518: ID = dget
Line 518: (
Line 518: (
Line 518: *
Line 518: ID = mnt
Line 518: )
Line 518: -
Line 518: >
Line 518: ID = mnt_mountpoint
Line 518: )
Line 518: ;
Line 519: ID = spin_unlock
Line 519: (
Line 519: Unrecognized token: 38
Line 519: ID = vfsmount_lock
Line 519: )
Line 519: ;
Line 520: ID = dput
Line 520: (
Line 520: *
Line 520: ID = dentry
Line 520: )
Line 520: ;
Line 521: *
Line 521: ID = dentry
Line 521: =
Line 521: ID = mountpoint
Line 521: ;
Line 522: ID = mntput
Line 522: (
Line 522: *
Line 522: ID = mnt
Line 522: )
Line 522: ;
Line 523: *
Line 523: ID = mnt
Line 523: =
Line 523: ID = parent
Line 523: ;
Line 524: return
Line 524: INTCON = 1
Line 524: ;
Line 525: }
Line 530: ID = static
Line 530: int
Line 530: ID = follow_mount
Line 530: (
Line 530: ID = struct
Line 530: ID = vfsmount
Line 530: *
Line 530: *
Line 530: ID = mnt
Line 530: ,
Line 530: ID = struct
Line 530: ID = dentry
Line 530: *
Line 530: *
Line 530: ID = dentry
Line 530: )
Line 531: {
Line 532: int
Line 532: ID = res
Line 532: =
Line 532: INTCON = 0
Line 532: ;
Line 533: while
Line 533: (
Line 533: ID = d_mountpoint
Line 533: (
Line 533: *
Line 533: ID = dentry
Line 533: )
Line 533: )
Line 533: {
Line 534: ID = struct
Line 534: ID = vfsmount
Line 534: *
Line 534: ID = mounted
Line 534: =
Line 534: ID = lookup_mnt
Line 534: (
Line 534: *
Line 534: ID = mnt
Line 534: ,
Line 534: *
Line 534: ID = dentry
Line 534: )
Line 534: ;
Line 535: if
Line 535: (
Line 535: !
Line 535: ID = mounted
Line 535: )
Line 536: ID = break
Line 536: ;
Line 537: ID = mntput
Line 537: (
Line 537: *
Line 537: ID = mnt
Line 537: )
Line 537: ;
Line 538: *
Line 538: ID = mnt
Line 538: =
Line 538: ID = mounted
Line 538: ;
Line 539: ID = dput
Line 539: (
Line 539: *
Line 539: ID = dentry
Line 539: )
Line 539: ;
Line 540: *
Line 540: ID = dentry
Line 540: =
Line 540: ID = dget
Line 540: (
Line 540: ID = mounted
Line 540: -
Line 540: >
Line 540: ID = mnt_root
Line 540: )
Line 540: ;
Line 541: ID = res
Line 541: =
Line 541: INTCON = 1
Line 541: ;
Line 542: }
Line 543: return
Line 543: ID = res
Line 543: ;
Line 544: }
Line 549: ID = static
Line 549: ID = inline
Line 549: int
Line 549: Unrecognized token: 95
Line 549: Unrecognized token: 95
Line 549: ID = follow_down
Line 549: (
Line 549: ID = struct
Line 549: ID = vfsmount
Line 549: *
Line 549: *
Line 549: ID = mnt
Line 549: ,
Line 549: ID = struct
Line 549: ID = dentry
Line 549: *
Line 549: *
Line 549: ID = dentry
Line 549: )
Line 550: {
Line 551: ID = struct
Line 551: ID = vfsmount
Line 551: *
Line 551: ID = mounted
Line 551: ;
Line 553: ID = mounted
Line 553: =
Line 553: ID = lookup_mnt
Line 553: (
Line 553: *
Line 553: ID = mnt
Line 553: ,
Line 553: *
Line 553: ID = dentry
Line 553: )
Line 553: ;
Line 554: if
Line 554: (
Line 554: ID = mounted
Line 554: )
Line 554: {
Line 555: ID = mntput
Line 555: (
Line 555: *
Line 555: ID = mnt
Line 555: )
Line 555: ;
Line 556: *
Line 556: ID = mnt
Line 556: =
Line 556: ID = mounted
Line 556: ;
Line 557: ID = dput
Line 557: (
Line 557: *
Line 557: ID = dentry
Line 557: )
Line 557: ;
Line 558: *
Line 558: ID = dentry
Line 558: =
Line 558: ID = dget
Line 558: (
Line 558: ID = mounted
Line 558: -
Line 558: >
Line 558: ID = mnt_root
Line 558: )
Line 558: ;
Line 559: return
Line 559: INTCON = 1
Line 559: ;
Line 560: }
Line 561: return
Line 561: INTCON = 0
Line 561: ;
Line 562: }
Line 564: int
Line 564: ID = follow_down
Line 564: (
Line 564: ID = struct
Line 564: ID = vfsmount
Line 564: *
Line 564: *
Line 564: ID = mnt
Line 564: ,
Line 564: ID = struct
Line 564: ID = dentry
Line 564: *
Line 564: *
Line 564: ID = dentry
Line 564: )
Line 565: {
Line 566: return
Line 566: Unrecognized token: 95
Line 566: Unrecognized token: 95
Line 566: ID = follow_down
Line 566: (
Line 566: ID = mnt
Line 566: ,
Line 566: ID = dentry
Line 566: )
Line 566: ;
Line 567: }
Line 569: ID = static
Line 569: ID = inline
Line 569: void
Line 569: ID = follow_dotdot
Line 569: (
Line 569: ID = struct
Line 569: ID = vfsmount
Line 569: *
Line 569: *
Line 569: ID = mnt
Line 569: ,
Line 569: ID = struct
Line 569: ID = dentry
Line 569: *
Line 569: *
Line 569: ID = dentry
Line 569: )
Line 570: {
Line 571: while
Line 571: (
Line 571: INTCON = 1
Line 571: )
Line 571: {
Line 572: ID = struct
Line 572: ID = vfsmount
Line 572: *
Line 572: ID = parent
Line 572: ;
Line 573: ID = struct
Line 573: ID = dentry
Line 573: *
Line 573: ID = old
Line 573: =
Line 573: *
Line 573: ID = dentry
Line 573: ;
Line 575: ID = read_lock
Line 575: (
Line 575: Unrecognized token: 38
Line 575: ID = current
Line 575: -
Line 575: >
Line 575: ID = fs
Line 575: -
Line 575: >
Line 575: ID = lock
Line 575: )
Line 575: ;
Line 576: if
Line 576: (
Line 576: *
Line 576: ID = dentry
Line 576: ==
Line 576: ID = current
Line 576: -
Line 576: >
Line 576: ID = fs
Line 576: -
Line 576: >
Line 576: ID = root
Line 576: &&
Line 577: *
Line 577: ID = mnt
Line 577: ==
Line 577: ID = current
Line 577: -
Line 577: >
Line 577: ID = fs
Line 577: -
Line 577: >
Line 577: ID = rootmnt
Line 577: )
Line 577: {
Line 578: ID = read_unlock
Line 578: (
Line 578: Unrecognized token: 38
Line 578: ID = current
Line 578: -
Line 578: >
Line 578: ID = fs
Line 578: -
Line 578: >
Line 578: ID = lock
Line 578: )
Line 578: ;
Line 579: ID = break
Line 579: ;
Line 580: }
Line 581: ID = read_unlock
Line 581: (
Line 581: Unrecognized token: 38
Line 581: ID = current
Line 581: -
Line 581: >
Line 581: ID = fs
Line 581: -
Line 581: >
Line 581: ID = lock
Line 581: )
Line 581: ;
Line 582: ID = spin_lock
Line 582: (
Line 582: Unrecognized token: 38
Line 582: ID = dcache_lock
Line 582: )
Line 582: ;
Line 583: if
Line 583: (
Line 583: *
Line 583: ID = dentry
Line 583: !=
Line 583: (
Line 583: *
Line 583: ID = mnt
Line 583: )
Line 583: -
Line 583: >
Line 583: ID = mnt_root
Line 583: )
Line 583: {
Line 584: *
Line 584: ID = dentry
Line 584: =
Line 584: ID = dget
Line 584: (
Line 584: (
Line 584: *
Line 584: ID = dentry
Line 584: )
Line 584: -
Line 584: >
Line 584: ID = d_parent
Line 584: )
Line 584: ;
Line 585: ID = spin_unlock
Line 585: (
Line 585: Unrecognized token: 38
Line 585: ID = dcache_lock
Line 585: )
Line 585: ;
Line 586: ID = dput
Line 586: (
Line 586: ID = old
Line 586: )
Line 586: ;
Line 587: ID = break
Line 587: ;
Line 588: }
Line 589: ID = spin_unlock
Line 589: (
Line 589: Unrecognized token: 38
Line 589: ID = dcache_lock
Line 589: )
Line 589: ;
Line 590: ID = spin_lock
Line 590: (
Line 590: Unrecognized token: 38
Line 590: ID = vfsmount_lock
Line 590: )
Line 590: ;
Line 591: ID = parent
Line 591: =
Line 591: (
Line 591: *
Line 591: ID = mnt
Line 591: )
Line 591: -
Line 591: >
Line 591: ID = mnt_parent
Line 591: ;
Line 592: if
Line 592: (
Line 592: ID = parent
Line 592: ==
Line 592: *
Line 592: ID = mnt
Line 592: )
Line 592: {
Line 593: ID = spin_unlock
Line 593: (
Line 593: Unrecognized token: 38
Line 593: ID = vfsmount_lock
Line 593: )
Line 593: ;
Line 594: ID = break
Line 594: ;
Line 595: }
Line 596: ID = mntget
Line 596: (
Line 596: ID = parent
Line 596: )
Line 596: ;
Line 597: *
Line 597: ID = dentry
Line 597: =
Line 597: ID = dget
Line 597: (
Line 597: (
Line 597: *
Line 597: ID = mnt
Line 597: )
Line 597: -
Line 597: >
Line 597: ID = mnt_mountpoint
Line 597: )
Line 597: ;
Line 598: ID = spin_unlock
Line 598: (
Line 598: Unrecognized token: 38
Line 598: ID = vfsmount_lock
Line 598: )
Line 598: ;
Line 599: ID = dput
Line 599: (
Line 599: ID = old
Line 599: )
Line 599: ;
Line 600: ID = mntput
Line 600: (
Line 600: *
Line 600: ID = mnt
Line 600: )
Line 600: ;
Line 601: *
Line 601: ID = mnt
Line 601: =
Line 601: ID = parent
Line 601: ;
Line 602: }
Line 603: ID = follow_mount
Line 603: (
Line 603: ID = mnt
Line 603: ,
Line 603: ID = dentry
Line 603: )
Line 603: ;
Line 604: }
Line 606: ID = struct
Line 606: ID = path
Line 606: {
Line 607: ID = struct
Line 607: ID = vfsmount
Line 607: *
Line 607: ID = mnt
Line 607: ;
Line 608: ID = struct
Line 608: ID = dentry
Line 608: *
Line 608: ID = dentry
Line 608: ;
Line 609: }
Line 609: ;
Line 616: ID = static
Line 616: int
Line 616: ID = do_lookup
Line 616: (
Line 616: ID = struct
Line 616: ID = nameidata
Line 616: *
Line 616: ID = nd
Line 616: ,
Line 616: ID = struct
Line 616: ID = qstr
Line 616: *
Line 616: ID = name
Line 616: ,
Line 617: ID = struct
Line 617: ID = path
Line 617: *
Line 617: ID = path
Line 617: )
Line 618: {
Line 619: ID = struct
Line 619: ID = vfsmount
Line 619: *
Line 619: ID = mnt
Line 619: =
Line 619: ID = nd
Line 619: -
Line 619: >
Line 619: ID = mnt
Line 619: ;
Line 620: ID = struct
Line 620: ID = dentry
Line 620: *
Line 620: ID = dentry
Line 620: =
Line 620: Unrecognized token: 95
Line 620: Unrecognized token: 95
Line 620: ID = d_lookup
Line 620: (
Line 620: ID = nd
Line 620: -
Line 620: >
Line 620: ID = dentry
Line 620: ,
Line 620: ID = name
Line 620: )
Line 620: ;
Line 622: if
Line 622: (
Line 622: !
Line 622: ID = dentry
Line 622: )
Line 623: ID = goto
Line 623: ID = need_lookup
Line 623: ;
Line 624: if
Line 624: (
Line 624: ID = dentry
Line 624: -
Line 624: >
Line 624: ID = d_op
Line 624: &&
Line 624: ID = dentry
Line 624: -
Line 624: >
Line 624: ID = d_op
Line 624: -
Line 624: >
Line 624: ID = d_revalidate
Line 624: )
Line 625: ID = goto
Line 625: ID = need_revalidate
Line 625: ;
Line 626: ID = done
Line 626: Unrecognized token: 58
Line 627: ID = path
Line 627: -
Line 627: >
Line 627: ID = mnt
Line 627: =
Line 627: ID = mnt
Line 627: ;
Line 628: ID = path
Line 628: -
Line 628: >
Line 628: ID = dentry
Line 628: =
Line 628: ID = dentry
Line 628: ;
Line 629: return
Line 629: INTCON = 0
Line 629: ;
Line 631: ID = need_lookup
Line 631: Unrecognized token: 58
Line 632: ID = dentry
Line 632: =
Line 632: ID = real_lookup
Line 632: (
Line 632: ID = nd
Line 632: -
Line 632: >
Line 632: ID = dentry
Line 632: ,
Line 632: ID = name
Line 632: ,
Line 632: ID = nd
Line 632: )
Line 632: ;
Line 633: if
Line 633: (
Line 633: ID = IS_ERR
Line 633: (
Line 633: ID = dentry
Line 633: )
Line 633: )
Line 634: ID = goto
Line 634: ID = fail
Line 634: ;
Line 635: ID = goto
Line 635: ID = done
Line 635: ;
Line 637: ID = need_revalidate
Line 637: Unrecognized token: 58
Line 638: if
Line 638: (
Line 638: ID = dentry
Line 638: -
Line 638: >
Line 638: ID = d_op
Line 638: -
Line 638: >
Line 638: ID = d_revalidate
Line 638: (
Line 638: ID = dentry
Line 638: ,
Line 638: ID = nd
Line 638: )
Line 638: )
Line 639: ID = goto
Line 639: ID = done
Line 639: ;
Line 640: if
Line 640: (
Line 640: ID = d_invalidate
Line 640: (
Line 640: ID = dentry
Line 640: )
Line 640: )
Line 641: ID = goto
Line 641: ID = done
Line 641: ;
Line 642: ID = dput
Line 642: (
Line 642: ID = dentry
Line 642: )
Line 642: ;
Line 643: ID = goto
Line 643: ID = need_lookup
Line 643: ;
Line 645: ID = fail
Line 645: Unrecognized token: 58
Line 646: return
Line 646: ID = PTR_ERR
Line 646: (
Line 646: ID = dentry
Line 646: )
Line 646: ;
Line 647: }
Line 657: int
Line 657: ID = fastcall
Line 657: ID = link_path_walk
Line 657: (
Line 657: ID = const
Line 657: char
Line 657: *
Line 657: ID = name
Line 657: ,
Line 657: ID = struct
Line 657: ID = nameidata
Line 657: *
Line 657: ID = nd
Line 657: )
Line 658: {
Line 659: ID = struct
Line 659: ID = path
Line 659: ID = next
Line 659: ;
Line 660: ID = struct
Line 660: ID = inode
Line 660: *
Line 660: ID = inode
Line 660: ;
Line 661: int
Line 661: ID = err
Line 661: ;
Line 662: ID = unsigned
Line 662: int
Line 662: ID = lookup_flags
Line 662: =
Line 662: ID = nd
Line 662: -
Line 662: >
Line 662: ID = flags
Line 662: ;
Line 664: while
Line 664: (
Line 664: *
Line 664: ID = name
Line 664: ==
Line 664: CHARCON = '/'
Line 664: )
Line 665: ID = name
Line 665: +
Line 665: +
Line 665: ;
Line 666: if
Line 666: (
Line 666: !
Line 666: *
Line 666: ID = name
Line 666: )
Line 667: ID = goto
Line 667: ID = return_reval
Line 667: ;
Line 669: ID = inode
Line 669: =
Line 669: ID = nd
Line 669: -
Line 669: >
Line 669: ID = dentry
Line 669: -
Line 669: >
Line 669: ID = d_inode
Line 669: ;
Line 670: if
Line 670: (
Line 670: ID = nd
Line 670: -
Line 670: >
Line 670: ID = depth
Line 670: )
Line 671: ID = lookup_flags
Line 671: =
Line 671: ID = LOOKUP_FOLLOW
Line 671: ;
Line 674: for
Line 674: (
Line 674: ;
Line 674: ;
Line 674: )
Line 674: {
Line 675: ID = unsigned
Line 675: ID = long
Line 675: ID = hash
Line 675: ;
Line 676: ID = struct
Line 676: ID = qstr
Line 676: ID = this
Line 676: ;
Line 677: ID = unsigned
Line 677: int
Line 677: ID = c
Line 677: ;
Line 679: ID = err
Line 679: =
Line 679: ID = exec_permission_lite
Line 679: (
Line 679: ID = inode
Line 679: ,
Line 679: ID = nd
Line 679: )
Line 679: ;
Line 680: if
Line 680: (
Line 680: ID = err
Line 680: ==
Line 680: -
Line 680: ID = EAGAIN
Line 680: )
Line 680: {
Line 681: ID = err
Line 681: =
Line 681: ID = permission
Line 681: (
Line 681: ID = inode
Line 681: ,
Line 681: ID = MAY_EXEC
Line 681: ,
Line 681: ID = nd
Line 681: )
Line 681: ;
Line 682: }
Line 683: if
Line 683: (
Line 683: ID = err
Line 683: )
Line 684: ID = break
Line 684: ;
Line 686: ID = this
Line 686: Unrecognized token: 46
Line 686: ID = name
Line 686: =
Line 686: ID = name
Line 686: ;
Line 687: ID = c
Line 687: =
Line 687: *
Line 687: (
Line 687: ID = const
Line 687: ID = unsigned
Line 687: char
Line 687: *
Line 687: )
Line 687: ID = name
Line 687: ;
Line 689: ID = hash
Line 689: =
Line 689: ID = init_name_hash
Line 689: (
Line 689: )
Line 689: ;
Line 690: ID = do
Line 690: {
Line 691: ID = name
Line 691: +
Line 691: +
Line 691: ;
Line 692: ID = hash
Line 692: =
Line 692: ID = partial_name_hash
Line 692: (
Line 692: ID = c
Line 692: ,
Line 692: ID = hash
Line 692: )
Line 692: ;
Line 693: ID = c
Line 693: =
Line 693: *
Line 693: (
Line 693: ID = const
Line 693: ID = unsigned
Line 693: char
Line 693: *
Line 693: )
Line 693: ID = name
Line 693: ;
Line 694: }
Line 694: while
Line 694: (
Line 694: ID = c
Line 694: &&
Line 694: (
Line 694: ID = c
Line 694: !=
Line 694: CHARCON = '/'
Line 694: )
Line 694: )
Line 694: ;
Line 695: ID = this
Line 695: Unrecognized token: 46
Line 695: ID = len
Line 695: =
Line 695: ID = name
Line 695: -
Line 695: (
Line 695: ID = const
Line 695: char
Line 695: *
Line 695: )
Line 695: ID = this
Line 695: Unrecognized token: 46
Line 695: ID = name
Line 695: ;
Line 696: ID = this
Line 696: Unrecognized token: 46
Line 696: ID = hash
Line 696: =
Line 696: ID = end_name_hash
Line 696: (
Line 696: ID = hash
Line 696: )
Line 696: ;
Line 699: if
Line 699: (
Line 699: !
Line 699: ID = c
Line 699: )
Line 700: ID = goto
Line 700: ID = last_component
Line 700: ;
Line 701: while
Line 701: (
Line 701: *
Line 701: +
Line 701: +
Line 701: ID = name
Line 701: ==
Line 701: CHARCON = '/'
Line 701: )
Line 701: ;
Line 702: if
Line 702: (
Line 702: !
Line 702: *
Line 702: ID = name
Line 702: )
Line 703: ID = goto
Line 703: ID = last_with_slashes
Line 703: ;
Line 710: if
Line 710: (
Line 710: ID = this
Line 710: Unrecognized token: 46
Line 710: ID = name
Line 710: [
Line 710: INTCON = 0
Line 710: ]
Line 710: ==
Line 710: CHARCON = '.'
Line 710: )
Line 710: ID = switch
Line 710: (
Line 710: ID = this
Line 710: Unrecognized token: 46
Line 710: ID = len
Line 710: )
Line 710: {
Line 711: ID = default
Line 711: Unrecognized token: 58
Line 712: ID = break
Line 712: ;
Line 713: ID = case
Line 713: INTCON = 2
Line 713: Unrecognized token: 58
Line 714: if
Line 714: (
Line 714: ID = this
Line 714: Unrecognized token: 46
Line 714: ID = name
Line 714: [
Line 714: INTCON = 1
Line 714: ]
Line 714: !=
Line 714: CHARCON = '.'
Line 714: )
Line 715: ID = break
Line 715: ;
Line 716: ID = follow_dotdot
Line 716: (
Line 716: Unrecognized token: 38
Line 716: ID = nd
Line 716: -
Line 716: >
Line 716: ID = mnt
Line 716: ,
Line 716: Unrecognized token: 38
Line 716: ID = nd
Line 716: -
Line 716: >
Line 716: ID = dentry
Line 716: )
Line 716: ;
Line 717: ID = inode
Line 717: =
Line 717: ID = nd
Line 717: -
Line 717: >
Line 717: ID = dentry
Line 717: -
Line 717: >
Line 717: ID = d_inode
Line 717: ;
Line 719: ID = case
Line 719: INTCON = 1
Line 719: Unrecognized token: 58
Line 720: ID = continue
Line 720: ;
Line 721: }
Line 726: if
Line 726: (
Line 726: ID = nd
Line 726: -
Line 726: >
Line 726: ID = dentry
Line 726: -
Line 726: >
Line 726: ID = d_op
Line 726: &&
Line 726: ID = nd
Line 726: -
Line 726: >
Line 726: ID = dentry
Line 726: -
Line 726: >
Line 726: ID = d_op
Line 726: -
Line 726: >
Line 726: ID = d_hash
Line 726: )
Line 726: {
Line 727: ID = err
Line 727: =
Line 727: ID = nd
Line 727: -
Line 727: >
Line 727: ID = dentry
Line 727: -
Line 727: >
Line 727: ID = d_op
Line 727: -
Line 727: >
Line 727: ID = d_hash
Line 727: (
Line 727: ID = nd
Line 727: -
Line 727: >
Line 727: ID = dentry
Line 727: ,
Line 727: Unrecognized token: 38
Line 727: ID = this
Line 727: )
Line 727: ;
Line 728: if
Line 728: (
Line 728: ID = err
Line 728: <
Line 728: INTCON = 0
Line 728: )
Line 729: ID = break
Line 729: ;
Line 730: }
Line 731: ID = nd
Line 731: -
Line 731: >
Line 731: ID = flags
Line 731: Unrecognized token: 124
Line 731: =
Line 731: ID = LOOKUP_CONTINUE
Line 731: ;
Line 733: ID = err
Line 733: =
Line 733: ID = do_lookup
Line 733: (
Line 733: ID = nd
Line 733: ,
Line 733: Unrecognized token: 38
Line 733: ID = this
Line 733: ,
Line 733: Unrecognized token: 38
Line 733: ID = next
Line 733: )
Line 733: ;
Line 734: if
Line 734: (
Line 734: ID = err
Line 734: )
Line 735: ID = break
Line 735: ;
Line 737: ID = follow_mount
Line 737: (
Line 737: Unrecognized token: 38
Line 737: ID = next
Line 737: Unrecognized token: 46
Line 737: ID = mnt
Line 737: ,
Line 737: Unrecognized token: 38
Line 737: ID = next
Line 737: Unrecognized token: 46
Line 737: ID = dentry
Line 737: )
Line 737: ;
Line 739: ID = err
Line 739: =
Line 739: -
Line 739: ID = ENOENT
Line 739: ;
Line 740: ID = inode
Line 740: =
Line 740: ID = next
Line 740: Unrecognized token: 46
Line 740: ID = dentry
Line 740: -
Line 740: >
Line 740: ID = d_inode
Line 740: ;
Line 741: if
Line 741: (
Line 741: !
Line 741: ID = inode
Line 741: )
Line 742: ID = goto
Line 742: ID = out_dput
Line 742: ;
Line 743: ID = err
Line 743: =
Line 743: -
Line 743: ID = ENOTDIR
Line 743: ;
Line 744: if
Line 744: (
Line 744: !
Line 744: ID = inode
Line 744: -
Line 744: >
Line 744: ID = i_op
Line 744: )
Line 745: ID = goto
Line 745: ID = out_dput
Line 745: ;
Line 747: if
Line 747: (
Line 747: ID = inode
Line 747: -
Line 747: >
Line 747: ID = i_op
Line 747: -
Line 747: >
Line 747: ID = follow_link
Line 747: )
Line 747: {
Line 748: ID = mntget
Line 748: (
Line 748: ID = next
Line 748: Unrecognized token: 46
Line 748: ID = mnt
Line 748: )
Line 748: ;
Line 749: ID = err
Line 749: =
Line 749: ID = do_follow_link
Line 749: (
Line 749: ID = next
Line 749: Unrecognized token: 46
Line 749: ID = dentry
Line 749: ,
Line 749: ID = nd
Line 749: )
Line 749: ;
Line 750: ID = dput
Line 750: (
Line 750: ID = next
Line 750: Unrecognized token: 46
Line 750: ID = dentry
Line 750: )
Line 750: ;
Line 751: ID = mntput
Line 751: (
Line 751: ID = next
Line 751: Unrecognized token: 46
Line 751: ID = mnt
Line 751: )
Line 751: ;
Line 752: if
Line 752: (
Line 752: ID = err
Line 752: )
Line 753: ID = goto
Line 753: ID = return_err
Line 753: ;
Line 754: ID = err
Line 754: =
Line 754: -
Line 754: ID = ENOENT
Line 754: ;
Line 755: ID = inode
Line 755: =
Line 755: ID = nd
Line 755: -
Line 755: >
Line 755: ID = dentry
Line 755: -
Line 755: >
Line 755: ID = d_inode
Line 755: ;
Line 756: if
Line 756: (
Line 756: !
Line 756: ID = inode
Line 756: )
Line 757: ID = break
Line 757: ;
Line 758: ID = err
Line 758: =
Line 758: -
Line 758: ID = ENOTDIR
Line 758: ;
Line 759: if
Line 759: (
Line 759: !
Line 759: ID = inode
Line 759: -
Line 759: >
Line 759: ID = i_op
Line 759: )
Line 760: ID = break
Line 760: ;
Line 761: }
Line 761: else
Line 761: {
Line 762: ID = dput
Line 762: (
Line 762: ID = nd
Line 762: -
Line 762: >
Line 762: ID = dentry
Line 762: )
Line 762: ;
Line 763: ID = nd
Line 763: -
Line 763: >
Line 763: ID = mnt
Line 763: =
Line 763: ID = next
Line 763: Unrecognized token: 46
Line 763: ID = mnt
Line 763: ;
Line 764: ID = nd
Line 764: -
Line 764: >
Line 764: ID = dentry
Line 764: =
Line 764: ID = next
Line 764: Unrecognized token: 46
Line 764: ID = dentry
Line 764: ;
Line 765: }
Line 766: ID = err
Line 766: =
Line 766: -
Line 766: ID = ENOTDIR
Line 766: ;
Line 767: if
Line 767: (
Line 767: !
Line 767: ID = inode
Line 767: -
Line 767: >
Line 767: ID = i_op
Line 767: -
Line 767: >
Line 767: ID = lookup
Line 767: )
Line 768: ID = break
Line 768: ;
Line 769: ID = continue
Line 769: ;
Line 772: ID = last_with_slashes
Line 772: Unrecognized token: 58
Line 773: ID = lookup_flags
Line 773: Unrecognized token: 124
Line 773: =
Line 773: ID = LOOKUP_FOLLOW
Line 773: Unrecognized token: 124
Line 773: ID = LOOKUP_DIRECTORY
Line 773: ;
Line 774: ID = last_component
Line 774: Unrecognized token: 58
Line 775: ID = nd
Line 775: -
Line 775: >
Line 775: ID = flags
Line 775: Unrecognized token: 38
Line 775: =
Line 775: Unrecognized token: 126
Line 775: ID = LOOKUP_CONTINUE
Line 775: ;
Line 776: if
Line 776: (
Line 776: ID = lookup_flags
Line 776: Unrecognized token: 38
Line 776: ID = LOOKUP_PARENT
Line 776: )
Line 777: ID = goto
Line 777: ID = lookup_parent
Line 777: ;
Line 778: if
Line 778: (
Line 778: ID = this
Line 778: Unrecognized token: 46
Line 778: ID = name
Line 778: [
Line 778: INTCON = 0
Line 778: ]
Line 778: ==
Line 778: CHARCON = '.'
Line 778: )
Line 778: ID = switch
Line 778: (
Line 778: ID = this
Line 778: Unrecognized token: 46
Line 778: ID = len
Line 778: )
Line 778: {
Line 779: ID = default
Line 779: Unrecognized token: 58
Line 780: ID = break
Line 780: ;
Line 781: ID = case
Line 781: INTCON = 2
Line 781: Unrecognized token: 58
Line 782: if
Line 782: (
Line 782: ID = this
Line 782: Unrecognized token: 46
Line 782: ID = name
Line 782: [
Line 782: INTCON = 1
Line 782: ]
Line 782: !=
Line 782: CHARCON = '.'
Line 782: )
Line 783: ID = break
Line 783: ;
Line 784: ID = follow_dotdot
Line 784: (
Line 784: Unrecognized token: 38
Line 784: ID = nd
Line 784: -
Line 784: >
Line 784: ID = mnt
Line 784: ,
Line 784: Unrecognized token: 38
Line 784: ID = nd
Line 784: -
Line 784: >
Line 784: ID = dentry
Line 784: )
Line 784: ;
Line 785: ID = inode
Line 785: =
Line 785: ID = nd
Line 785: -
Line 785: >
Line 785: ID = dentry
Line 785: -
Line 785: >
Line 785: ID = d_inode
Line 785: ;
Line 787: ID = case
Line 787: INTCON = 1
Line 787: Unrecognized token: 58
Line 788: ID = goto
Line 788: ID = return_reval
Line 788: ;
Line 789: }
Line 790: if
Line 790: (
Line 790: ID = nd
Line 790: -
Line 790: >
Line 790: ID = dentry
Line 790: -
Line 790: >
Line 790: ID = d_op
Line 790: &&
Line 790: ID = nd
Line 790: -
Line 790: >
Line 790: ID = dentry
Line 790: -
Line 790: >
Line 790: ID = d_op
Line 790: -
Line 790: >
Line 790: ID = d_hash
Line 790: )
Line 790: {
Line 791: ID = err
Line 791: =
Line 791: ID = nd
Line 791: -
Line 791: >
Line 791: ID = dentry
Line 791: -
Line 791: >
Line 791: ID = d_op
Line 791: -
Line 791: >
Line 791: ID = d_hash
Line 791: (
Line 791: ID = nd
Line 791: -
Line 791: >
Line 791: ID = dentry
Line 791: ,
Line 791: Unrecognized token: 38
Line 791: ID = this
Line 791: )
Line 791: ;
Line 792: if
Line 792: (
Line 792: ID = err
Line 792: <
Line 792: INTCON = 0
Line 792: )
Line 793: ID = break
Line 793: ;
Line 794: }
Line 795: ID = err
Line 795: =
Line 795: ID = do_lookup
Line 795: (
Line 795: ID = nd
Line 795: ,
Line 795: Unrecognized token: 38
Line 795: ID = this
Line 795: ,
Line 795: Unrecognized token: 38
Line 795: ID = next
Line 795: )
Line 795: ;
Line 796: if
Line 796: (
Line 796: ID = err
Line 796: )
Line 797: ID = break
Line 797: ;
Line 798: ID = follow_mount
Line 798: (
Line 798: Unrecognized token: 38
Line 798: ID = next
Line 798: Unrecognized token: 46
Line 798: ID = mnt
Line 798: ,
Line 798: Unrecognized token: 38
Line 798: ID = next
Line 798: Unrecognized token: 46
Line 798: ID = dentry
Line 798: )
Line 798: ;
Line 799: ID = inode
Line 799: =
Line 799: ID = next
Line 799: Unrecognized token: 46
Line 799: ID = dentry
Line 799: -
Line 799: >
Line 799: ID = d_inode
Line 799: ;
Line 800: if
Line 800: (
Line 800: (
Line 800: ID = lookup_flags
Line 800: Unrecognized token: 38
Line 800: ID = LOOKUP_FOLLOW
Line 800: )
Line 801: &&
Line 801: ID = inode
Line 801: &&
Line 801: ID = inode
Line 801: -
Line 801: >
Line 801: ID = i_op
Line 801: &&
Line 801: ID = inode
Line 801: -
Line 801: >
Line 801: ID = i_op
Line 801: -
Line 801: >
Line 801: ID = follow_link
Line 801: )
Line 801: {
Line 802: ID = mntget
Line 802: (
Line 802: ID = next
Line 802: Unrecognized token: 46
Line 802: ID = mnt
Line 802: )
Line 802: ;
Line 803: ID = err
Line 803: =
Line 803: ID = do_follow_link
Line 803: (
Line 803: ID = next
Line 803: Unrecognized token: 46
Line 803: ID = dentry
Line 803: ,
Line 803: ID = nd
Line 803: )
Line 803: ;
Line 804: ID = dput
Line 804: (
Line 804: ID = next
Line 804: Unrecognized token: 46
Line 804: ID = dentry
Line 804: )
Line 804: ;
Line 805: ID = mntput
Line 805: (
Line 805: ID = next
Line 805: Unrecognized token: 46
Line 805: ID = mnt
Line 805: )
Line 805: ;
Line 806: if
Line 806: (
Line 806: ID = err
Line 806: )
Line 807: ID = goto
Line 807: ID = return_err
Line 807: ;
Line 808: ID = inode
Line 808: =
Line 808: ID = nd
Line 808: -
Line 808: >
Line 808: ID = dentry
Line 808: -
Line 808: >
Line 808: ID = d_inode
Line 808: ;
Line 809: }
Line 809: else
Line 809: {
Line 810: ID = dput
Line 810: (
Line 810: ID = nd
Line 810: -
Line 810: >
Line 810: ID = dentry
Line 810: )
Line 810: ;
Line 811: ID = nd
Line 811: -
Line 811: >
Line 811: ID = mnt
Line 811: =
Line 811: ID = next
Line 811: Unrecognized token: 46
Line 811: ID = mnt
Line 811: ;
Line 812: ID = nd
Line 812: -
Line 812: >
Line 812: ID = dentry
Line 812: =
Line 812: ID = next
Line 812: Unrecognized token: 46
Line 812: ID = dentry
Line 812: ;
Line 813: }
Line 814: ID = err
Line 814: =
Line 814: -
Line 814: ID = ENOENT
Line 814: ;
Line 815: if
Line 815: (
Line 815: !
Line 815: ID = inode
Line 815: )
Line 816: ID = break
Line 816: ;
Line 817: if
Line 817: (
Line 817: ID = lookup_flags
Line 817: Unrecognized token: 38
Line 817: ID = LOOKUP_DIRECTORY
Line 817: )
Line 817: {
Line 818: ID = err
Line 818: =
Line 818: -
Line 818: ID = ENOTDIR
Line 818: ;
Line 819: if
Line 819: (
Line 819: !
Line 819: ID = inode
Line 819: -
Line 819: >
Line 819: ID = i_op
Line 819: ||
Line 819: !
Line 819: ID = inode
Line 819: -
Line 819: >
Line 819: ID = i_op
Line 819: -
Line 819: >
Line 819: ID = lookup
Line 819: )
Line 820: ID = break
Line 820: ;
Line 821: }
Line 822: ID = goto
Line 822: ID = return_base
Line 822: ;
Line 823: ID = lookup_parent
Line 823: Unrecognized token: 58
Line 824: ID = nd
Line 824: -
Line 824: >
Line 824: ID = last
Line 824: =
Line 824: ID = this
Line 824: ;
Line 825: ID = nd
Line 825: -
Line 825: >
Line 825: ID = last_type
Line 825: =
Line 825: ID = LAST_NORM
Line 825: ;
Line 826: if
Line 826: (
Line 826: ID = this
Line 826: Unrecognized token: 46
Line 826: ID = name
Line 826: [
Line 826: INTCON = 0
Line 826: ]
Line 826: !=
Line 826: CHARCON = '.'
Line 826: )
Line 827: ID = goto
Line 827: ID = return_base
Line 827: ;
Line 828: if
Line 828: (
Line 828: ID = this
Line 828: Unrecognized token: 46
Line 828: ID = len
Line 828: ==
Line 828: INTCON = 1
Line 828: )
Line 829: ID = nd
Line 829: -
Line 829: >
Line 829: ID = last_type
Line 829: =
Line 829: ID = LAST_DOT
Line 829: ;
Line 830: else
Line 830: if
Line 830: (
Line 830: ID = this
Line 830: Unrecognized token: 46
Line 830: ID = len
Line 830: ==
Line 830: INTCON = 2
Line 830: &&
Line 830: ID = this
Line 830: Unrecognized token: 46
Line 830: ID = name
Line 830: [
Line 830: INTCON = 1
Line 830: ]
Line 830: ==
Line 830: CHARCON = '.'
Line 830: )
Line 831: ID = nd
Line 831: -
Line 831: >
Line 831: ID = last_type
Line 831: =
Line 831: ID = LAST_DOTDOT
Line 831: ;
Line 832: else
Line 833: ID = goto
Line 833: ID = return_base
Line 833: ;
Line 834: ID = return_reval
Line 834: Unrecognized token: 58
Line 839: if
Line 839: (
Line 839: ID = nd
Line 839: -
Line 839: >
Line 839: ID = dentry
Line 839: &&
Line 839: ID = nd
Line 839: -
Line 839: >
Line 839: ID = dentry
Line 839: -
Line 839: >
Line 839: ID = d_sb
Line 839: &&
Line 840: (
Line 840: ID = nd
Line 840: -
Line 840: >
Line 840: ID = dentry
Line 840: -
Line 840: >
Line 840: ID = d_sb
Line 840: -
Line 840: >
Line 840: ID = s_type
Line 840: -
Line 840: >
Line 840: ID = fs_flags
Line 840: Unrecognized token: 38
Line 840: ID = FS_REVAL_DOT
Line 840: )
Line 840: )
Line 840: {
Line 841: ID = err
Line 841: =
Line 841: -
Line 841: ID = ESTALE
Line 841: ;
Line 843: if
Line 843: (
Line 843: !
Line 843: ID = nd
Line 843: -
Line 843: >
Line 843: ID = dentry
Line 843: -
Line 843: >
Line 843: ID = d_op
Line 843: -
Line 843: >
Line 843: ID = d_revalidate
Line 843: (
Line 843: ID = nd
Line 843: -
Line 843: >
Line 843: ID = dentry
Line 843: ,
Line 843: ID = nd
Line 843: )
Line 843: )
Line 844: ID = break
Line 844: ;
Line 845: }
Line 846: ID = return_base
Line 846: Unrecognized token: 58
Line 847: return
Line 847: INTCON = 0
Line 847: ;
Line 848: ID = out_dput
Line 848: Unrecognized token: 58
Line 849: ID = dput
Line 849: (
Line 849: ID = next
Line 849: Unrecognized token: 46
Line 849: ID = dentry
Line 849: )
Line 849: ;
Line 850: ID = break
Line 850: ;
Line 851: }
Line 852: ID = path_release
Line 852: (
Line 852: ID = nd
Line 852: )
Line 852: ;
Line 853: ID = return_err
Line 853: Unrecognized token: 58
Line 854: return
Line 854: ID = err
Line 854: ;
Line 855: }
Line 857: int
Line 857: ID = fastcall
Line 857: ID = path_walk
Line 857: (
Line 857: ID = const
Line 857: char
Line 857: *
Line 857: ID = name
Line 857: ,
Line 857: ID = struct
Line 857: ID = nameidata
Line 857: *
Line 857: ID = nd
Line 857: )
Line 858: {
Line 859: ID = current
Line 859: -
Line 859: >
Line 859: ID = total_link_count
Line 859: =
Line 859: INTCON = 0
Line 859: ;
Line 860: return
Line 860: ID = link_path_walk
Line 860: (
Line 860: ID = name
Line 860: ,
Line 860: ID = nd
Line 860: )
Line 860: ;
Line 861: }
Line 865: ID = static
Line 865: int
Line 865: Unrecognized token: 95
Line 865: Unrecognized token: 95
Line 865: ID = emul_lookup_dentry
Line 865: (
Line 865: ID = const
Line 865: char
Line 865: *
Line 865: ID = name
Line 865: ,
Line 865: ID = struct
Line 865: ID = nameidata
Line 865: *
Line 865: ID = nd
Line 865: )
Line 866: {
Line 867: if
Line 867: (
Line 867: ID = path_walk
Line 867: (
Line 867: ID = name
Line 867: ,
Line 867: ID = nd
Line 867: )
Line 867: )
Line 868: return
Line 868: INTCON = 0
Line 868: ;
Line 870: if
Line 870: (
Line 870: !
Line 870: ID = nd
Line 870: -
Line 870: >
Line 870: ID = dentry
Line 870: -
Line 870: >
Line 870: ID = d_inode
Line 870: ||
Line 870: ID = S_ISDIR
Line 870: (
Line 870: ID = nd
Line 870: -
Line 870: >
Line 870: ID = dentry
Line 870: -
Line 870: >
Line 870: ID = d_inode
Line 870: -
Line 870: >
Line 870: ID = i_mode
Line 870: )
Line 870: )
Line 870: {
Line 871: ID = struct
Line 871: ID = nameidata
Line 871: ID = nd_root
Line 871: ;
Line 876: ID = nd_root
Line 876: Unrecognized token: 46
Line 876: ID = last_type
Line 876: =
Line 876: ID = LAST_ROOT
Line 876: ;
Line 877: ID = nd_root
Line 877: Unrecognized token: 46
Line 877: ID = flags
Line 877: =
Line 877: ID = nd
Line 877: -
Line 877: >
Line 877: ID = flags
Line 877: ;
Line 878: ID = nd_root
Line 878: Unrecognized token: 46
Line 878: ID = depth
Line 878: =
Line 878: INTCON = 0
Line 878: ;
Line 879: ID = memcpy
Line 879: (
Line 879: Unrecognized token: 38
Line 879: ID = nd_root
Line 879: Unrecognized token: 46
Line 879: ID = intent
Line 879: ,
Line 879: Unrecognized token: 38
Line 879: ID = nd
Line 879: -
Line 879: >
Line 879: ID = intent
Line 879: ,
Line 879: ID = sizeof
Line 879: (
Line 879: ID = nd_root
Line 879: Unrecognized token: 46
Line 879: ID = intent
Line 879: )
Line 879: )
Line 879: ;
Line 880: ID = read_lock
Line 880: (
Line 880: Unrecognized token: 38
Line 880: ID = current
Line 880: -
Line 880: >
Line 880: ID = fs
Line 880: -
Line 880: >
Line 880: ID = lock
Line 880: )
Line 880: ;
Line 881: ID = nd_root
Line 881: Unrecognized token: 46
Line 881: ID = mnt
Line 881: =
Line 881: ID = mntget
Line 881: (
Line 881: ID = current
Line 881: -
Line 881: >
Line 881: ID = fs
Line 881: -
Line 881: >
Line 881: ID = rootmnt
Line 881: )
Line 881: ;
Line 882: ID = nd_root
Line 882: Unrecognized token: 46
Line 882: ID = dentry
Line 882: =
Line 882: ID = dget
Line 882: (
Line 882: ID = current
Line 882: -
Line 882: >
Line 882: ID = fs
Line 882: -
Line 882: >
Line 882: ID = root
Line 882: )
Line 882: ;
Line 883: ID = read_unlock
Line 883: (
Line 883: Unrecognized token: 38
Line 883: ID = current
Line 883: -
Line 883: >
Line 883: ID = fs
Line 883: -
Line 883: >
Line 883: ID = lock
Line 883: )
Line 883: ;
Line 884: if
Line 884: (
Line 884: ID = path_walk
Line 884: (
Line 884: ID = name
Line 884: ,
Line 884: Unrecognized token: 38
Line 884: ID = nd_root
Line 884: )
Line 884: )
Line 885: return
Line 885: INTCON = 1
Line 885: ;
Line 886: if
Line 886: (
Line 886: ID = nd_root
Line 886: Unrecognized token: 46
Line 886: ID = dentry
Line 886: -
Line 886: >
Line 886: ID = d_inode
Line 886: )
Line 886: {
Line 887: ID = path_release
Line 887: (
Line 887: ID = nd
Line 887: )
Line 887: ;
Line 888: ID = nd
Line 888: -
Line 888: >
Line 888: ID = dentry
Line 888: =
Line 888: ID = nd_root
Line 888: Unrecognized token: 46
Line 888: ID = dentry
Line 888: ;
Line 889: ID = nd
Line 889: -
Line 889: >
Line 889: ID = mnt
Line 889: =
Line 889: ID = nd_root
Line 889: Unrecognized token: 46
Line 889: ID = mnt
Line 889: ;
Line 890: ID = nd
Line 890: -
Line 890: >
Line 890: ID = last
Line 890: =
Line 890: ID = nd_root
Line 890: Unrecognized token: 46
Line 890: ID = last
Line 890: ;
Line 891: return
Line 891: INTCON = 1
Line 891: ;
Line 892: }
Line 893: ID = path_release
Line 893: (
Line 893: Unrecognized token: 38
Line 893: ID = nd_root
Line 893: )
Line 893: ;
Line 894: }
Line 895: return
Line 895: INTCON = 1
Line 895: ;
Line 896: }
Line 898: void
Line 898: ID = set_fs_altroot
Line 898: (
Line 898: void
Line 898: )
Line 899: {
Line 900: char
Line 900: *
Line 900: ID = emul
Line 900: =
Line 900: Unrecognized token: 95
Line 900: Unrecognized token: 95
Line 900: ID = emul_prefix
Line 900: (
Line 900: )
Line 900: ;
Line 901: ID = struct
Line 901: ID = nameidata
Line 901: ID = nd
Line 901: ;
Line 902: ID = struct
Line 902: ID = vfsmount
Line 902: *
Line 902: ID = mnt
Line 902: =
Line 902: ID = NULL
Line 902: ,
Line 902: *
Line 902: ID = oldmnt
Line 902: ;
Line 903: ID = struct
Line 903: ID = dentry
Line 903: *
Line 903: ID = dentry
Line 903: =
Line 903: ID = NULL
Line 903: ,
Line 903: *
Line 903: ID = olddentry
Line 903: ;
Line 904: int
Line 904: ID = err
Line 904: ;
Line 906: if
Line 906: (
Line 906: !
Line 906: ID = emul
Line 906: )
Line 907: ID = goto
Line 907: ID = set_it
Line 907: ;
Line 908: ID = err
Line 908: =
Line 908: ID = path_lookup
Line 908: (
Line 908: ID = emul
Line 908: ,
Line 908: ID = LOOKUP_FOLLOW
Line 908: Unrecognized token: 124
Line 908: ID = LOOKUP_DIRECTORY
Line 908: Unrecognized token: 124
Line 908: ID = LOOKUP_NOALT
Line 908: ,
Line 908: Unrecognized token: 38
Line 908: ID = nd
Line 908: )
Line 908: ;
Line 909: if
Line 909: (
Line 909: !
Line 909: ID = err
Line 909: )
Line 909: {
Line 910: ID = mnt
Line 910: =
Line 910: ID = nd
Line 910: Unrecognized token: 46
Line 910: ID = mnt
Line 910: ;
Line 911: ID = dentry
Line 911: =
Line 911: ID = nd
Line 911: Unrecognized token: 46
Line 911: ID = dentry
Line 911: ;
Line 912: }
Line 913: ID = set_it
Line 913: Unrecognized token: 58
Line 914: ID = write_lock
Line 914: (
Line 914: Unrecognized token: 38
Line 914: ID = current
Line 914: -
Line 914: >
Line 914: ID = fs
Line 914: -
Line 914: >
Line 914: ID = lock
Line 914: )
Line 914: ;
Line 915: ID = oldmnt
Line 915: =
Line 915: ID = current
Line 915: -
Line 915: >
Line 915: ID = fs
Line 915: -
Line 915: >
Line 915: ID = altrootmnt
Line 915: ;
Line 916: ID = olddentry
Line 916: =
Line 916: ID = current
Line 916: -
Line 916: >
Line 916: ID = fs
Line 916: -
Line 916: >
Line 916: ID = altroot
Line 916: ;
Line 917: ID = current
Line 917: -
Line 917: >
Line 917: ID = fs
Line 917: -
Line 917: >
Line 917: ID = altrootmnt
Line 917: =
Line 917: ID = mnt
Line 917: ;
Line 918: ID = current
Line 918: -
Line 918: >
Line 918: ID = fs
Line 918: -
Line 918: >
Line 918: ID = altroot
Line 918: =
Line 918: ID = dentry
Line 918: ;
Line 919: ID = write_unlock
Line 919: (
Line 919: Unrecognized token: 38
Line 919: ID = current
Line 919: -
Line 919: >
Line 919: ID = fs
Line 919: -
Line 919: >
Line 919: ID = lock
Line 919: )
Line 919: ;
Line 920: if
Line 920: (
Line 920: ID = olddentry
Line 920: )
Line 920: {
Line 921: ID = dput
Line 921: (
Line 921: ID = olddentry
Line 921: )
Line 921: ;
Line 922: ID = mntput
Line 922: (
Line 922: ID = oldmnt
Line 922: )
Line 922: ;
Line 923: }
Line 924: }
Line 926: int
Line 926: ID = fastcall
Line 926: ID = path_lookup
Line 926: (
Line 926: ID = const
Line 926: char
Line 926: *
Line 926: ID = name
Line 926: ,
Line 926: ID = unsigned
Line 926: int
Line 926: ID = flags
Line 926: ,
Line 926: ID = struct
Line 926: ID = nameidata
Line 926: *
Line 926: ID = nd
Line 926: )
Line 927: {
Line 928: int
Line 928: ID = retval
Line 928: ;
Line 930: ID = nd
Line 930: -
Line 930: >
Line 930: ID = last_type
Line 930: =
Line 930: ID = LAST_ROOT
Line 930: ;
Line 931: ID = nd
Line 931: -
Line 931: >
Line 931: ID = flags
Line 931: =
Line 931: ID = flags
Line 931: ;
Line 932: ID = nd
Line 932: -
Line 932: >
Line 932: ID = depth
Line 932: =
Line 932: INTCON = 0
Line 932: ;
Line 934: ID = read_lock
Line 934: (
Line 934: Unrecognized token: 38
Line 934: ID = current
Line 934: -
Line 934: >
Line 934: ID = fs
Line 934: -
Line 934: >
Line 934: ID = lock
Line 934: )
Line 934: ;
Line 935: if
Line 935: (
Line 935: *
Line 935: ID = name
Line 935: ==
Line 935: CHARCON = '/'
Line 935: )
Line 935: {
Line 936: if
Line 936: (
Line 936: ID = current
Line 936: -
Line 936: >
Line 936: ID = fs
Line 936: -
Line 936: >
Line 936: ID = altroot
Line 936: &&
Line 936: !
Line 936: (
Line 936: ID = nd
Line 936: -
Line 936: >
Line 936: ID = flags
Line 936: Unrecognized token: 38
Line 936: ID = LOOKUP_NOALT
Line 936: )
Line 936: )
Line 936: {
Line 937: ID = nd
Line 937: -
Line 937: >
Line 937: ID = mnt
Line 937: =
Line 937: ID = mntget
Line 937: (
Line 937: ID = current
Line 937: -
Line 937: >
Line 937: ID = fs
Line 937: -
Line 937: >
Line 937: ID = altrootmnt
Line 937: )
Line 937: ;
Line 938: ID = nd
Line 938: -
Line 938: >
Line 938: ID = dentry
Line 938: =
Line 938: ID = dget
Line 938: (
Line 938: ID = current
Line 938: -
Line 938: >
Line 938: ID = fs
Line 938: -
Line 938: >
Line 938: ID = altroot
Line 938: )
Line 938: ;
Line 939: ID = read_unlock
Line 939: (
Line 939: Unrecognized token: 38
Line 939: ID = current
Line 939: -
Line 939: >
Line 939: ID = fs
Line 939: -
Line 939: >
Line 939: ID = lock
Line 939: )
Line 939: ;
Line 940: if
Line 940: (
Line 940: Unrecognized token: 95
Line 940: Unrecognized token: 95
Line 940: ID = emul_lookup_dentry
Line 940: (
Line 940: ID = name
Line 940: ,
Line 940: ID = nd
Line 940: )
Line 940: )
Line 941: return
Line 941: INTCON = 0
Line 941: ;
Line 942: ID = read_lock
Line 942: (
Line 942: Unrecognized token: 38
Line 942: ID = current
Line 942: -
Line 942: >
Line 942: ID = fs
Line 942: -
Line 942: >
Line 942: ID = lock
Line 942: )
Line 942: ;
Line 943: }
Line 944: ID = nd
Line 944: -
Line 944: >
Line 944: ID = mnt
Line 944: =
Line 944: ID = mntget
Line 944: (
Line 944: ID = current
Line 944: -
Line 944: >
Line 944: ID = fs
Line 944: -
Line 944: >
Line 944: ID = rootmnt
Line 944: )
Line 944: ;
Line 945: ID = nd
Line 945: -
Line 945: >
Line 945: ID = dentry
Line 945: =
Line 945: ID = dget
Line 945: (
Line 945: ID = current
Line 945: -
Line 945: >
Line 945: ID = fs
Line 945: -
Line 945: >
Line 945: ID = root
Line 945: )
Line 945: ;
Line 946: }
Line 947: else
Line 947: {
Line 948: ID = nd
Line 948: -
Line 948: >
Line 948: ID = mnt
Line 948: =
Line 948: ID = mntget
Line 948: (
Line 948: ID = current
Line 948: -
Line 948: >
Line 948: ID = fs
Line 948: -
Line 948: >
Line 948: ID = pwdmnt
Line 948: )
Line 948: ;
Line 949: ID = nd
Line 949: -
Line 949: >
Line 949: ID = dentry
Line 949: =
Line 949: ID = dget
Line 949: (
Line 949: ID = current
Line 949: -
Line 949: >
Line 949: ID = fs
Line 949: -
Line 949: >
Line 949: ID = pwd
Line 949: )
Line 949: ;
Line 950: }
Line 951: ID = read_unlock
Line 951: (
Line 951: Unrecognized token: 38
Line 951: ID = current
Line 951: -
Line 951: >
Line 951: ID = fs
Line 951: -
Line 951: >
Line 951: ID = lock
Line 951: )
Line 951: ;
Line 952: ID = current
Line 952: -
Line 952: >
Line 952: ID = total_link_count
Line 952: =
Line 952: INTCON = 0
Line 952: ;
Line 953: ID = retval
Line 953: =
Line 953: ID = link_path_walk
Line 953: (
Line 953: ID = name
Line 953: ,
Line 953: ID = nd
Line 953: )
Line 953: ;
Line 954: if
Line 954: (
Line 954: ID = unlikely
Line 954: (
Line 954: ID = current
Line 954: -
Line 954: >
Line 954: ID = audit_context
Line 955: &&
Line 955: ID = nd
Line 955: &&
Line 955: ID = nd
Line 955: -
Line 955: >
Line 955: ID = dentry
Line 955: &&
Line 955: ID = nd
Line 955: -
Line 955: >
Line 955: ID = dentry
Line 955: -
Line 955: >
Line 955: ID = d_inode
Line 955: )
Line 955: )
Line 956: ID = audit_inode
Line 956: (
Line 956: ID = name
Line 956: ,
Line 957: ID = nd
Line 957: -
Line 957: >
Line 957: ID = dentry
Line 957: -
Line 957: >
Line 957: ID = d_inode
Line 957: -
Line 957: >
Line 957: ID = i_ino
Line 957: ,
Line 958: ID = nd
Line 958: -
Line 958: >
Line 958: ID = dentry
Line 958: -
Line 958: >
Line 958: ID = d_inode
Line 958: -
Line 958: >
Line 958: ID = i_rdev
Line 958: )
Line 958: ;
Line 959: return
Line 959: ID = retval
Line 959: ;
Line 960: }
Line 967: ID = static
Line 967: ID = struct
Line 967: ID = dentry
Line 967: *
Line 967: Unrecognized token: 95
Line 967: Unrecognized token: 95
Line 967: ID = lookup_hash
Line 967: (
Line 967: ID = struct
Line 967: ID = qstr
Line 967: *
Line 967: ID = name
Line 967: ,
Line 967: ID = struct
Line 967: ID = dentry
Line 967: *
Line 967: ID = base
Line 967: ,
Line 967: ID = struct
Line 967: ID = nameidata
Line 967: *
Line 967: ID = nd
Line 967: )
Line 968: {
Line 969: ID = struct
Line 969: ID = dentry
Line 969: *
Line 969: ID = dentry
Line 969: ;
Line 970: ID = struct
Line 970: ID = inode
Line 970: *
Line 970: ID = inode
Line 970: ;
Line 971: int
Line 971: ID = err
Line 971: ;
Line 973: ID = inode
Line 973: =
Line 973: ID = base
Line 973: -
Line 973: >
Line 973: ID = d_inode
Line 973: ;
Line 974: ID = err
Line 974: =
Line 974: ID = permission
Line 974: (
Line 974: ID = inode
Line 974: ,
Line 974: ID = MAY_EXEC
Line 974: ,
Line 974: ID = nd
Line 974: )
Line 974: ;
Line 975: ID = dentry
Line 975: =
Line 975: ID = ERR_PTR
Line 975: (
Line 975: ID = err
Line 975: )
Line 975: ;
Line 976: if
Line 976: (
Line 976: ID = err
Line 976: )
Line 977: ID = goto
Line 977: ID = out
Line 977: ;
Line 983: if
Line 983: (
Line 983: ID = base
Line 983: -
Line 983: >
Line 983: ID = d_op
Line 983: &&
Line 983: ID = base
Line 983: -
Line 983: >
Line 983: ID = d_op
Line 983: -
Line 983: >
Line 983: ID = d_hash
Line 983: )
Line 983: {
Line 984: ID = err
Line 984: =
Line 984: ID = base
Line 984: -
Line 984: >
Line 984: ID = d_op
Line 984: -
Line 984: >
Line 984: ID = d_hash
Line 984: (
Line 984: ID = base
Line 984: ,
Line 984: ID = name
Line 984: )
Line 984: ;
Line 985: ID = dentry
Line 985: =
Line 985: ID = ERR_PTR
Line 985: (
Line 985: ID = err
Line 985: )
Line 985: ;
Line 986: if
Line 986: (
Line 986: ID = err
Line 986: <
Line 986: INTCON = 0
Line 986: )
Line 987: ID = goto
Line 987: ID = out
Line 987: ;
Line 988: }
Line 990: ID = dentry
Line 990: =
Line 990: ID = cached_lookup
Line 990: (
Line 990: ID = base
Line 990: ,
Line 990: ID = name
Line 990: ,
Line 990: ID = nd
Line 990: )
Line 990: ;
Line 991: if
Line 991: (
Line 991: !
Line 991: ID = dentry
Line 991: )
Line 991: {
Line 992: ID = struct
Line 992: ID = dentry
Line 992: *
Line 992: ID = new
Line 992: =
Line 992: ID = d_alloc
Line 992: (
Line 992: ID = base
Line 992: ,
Line 992: ID = name
Line 992: )
Line 992: ;
Line 993: ID = dentry
Line 993: =
Line 993: ID = ERR_PTR
Line 993: (
Line 993: -
Line 993: ID = ENOMEM
Line 993: )
Line 993: ;
Line 994: if
Line 994: (
Line 994: !
Line 994: ID = new
Line 994: )
Line 995: ID = goto
Line 995: ID = out
Line 995: ;
Line 996: ID = dentry
Line 996: =
Line 996: ID = inode
Line 996: -
Line 996: >
Line 996: ID = i_op
Line 996: -
Line 996: >
Line 996: ID = lookup
Line 996: (
Line 996: ID = inode
Line 996: ,
Line 996: ID = new
Line 996: ,
Line 996: ID = nd
Line 996: )
Line 996: ;
Line 997: if
Line 997: (
Line 997: !
Line 997: ID = dentry
Line 997: )
Line 998: ID = dentry
Line 998: =
Line 998: ID = new
Line 998: ;
Line 999: else
Line 1000: ID = dput
Line 1000: (
Line 1000: ID = new
Line 1000: )
Line 1000: ;
Line 1001: }
Line 1002: ID = out
Line 1002: Unrecognized token: 58
Line 1003: return
Line 1003: ID = dentry
Line 1003: ;
Line 1004: }
Line 1006: ID = struct
Line 1006: ID = dentry
Line 1006: *
Line 1006: ID = lookup_hash
Line 1006: (
Line 1006: ID = struct
Line 1006: ID = qstr
Line 1006: *
Line 1006: ID = name
Line 1006: ,
Line 1006: ID = struct
Line 1006: ID = dentry
Line 1006: *
Line 1006: ID = base
Line 1006: )
Line 1007: {
Line 1008: return
Line 1008: Unrecognized token: 95
Line 1008: Unrecognized token: 95
Line 1008: ID = lookup_hash
Line 1008: (
Line 1008: ID = name
Line 1008: ,
Line 1008: ID = base
Line 1008: ,
Line 1008: ID = NULL
Line 1008: )
Line 1008: ;
Line 1009: }
Line 1012: ID = struct
Line 1012: ID = dentry
Line 1012: *
Line 1012: ID = lookup_one_len
Line 1012: (
Line 1012: ID = const
Line 1012: char
Line 1012: *
Line 1012: ID = name
Line 1012: ,
Line 1012: ID = struct
Line 1012: ID = dentry
Line 1012: *
Line 1012: ID = base
Line 1012: ,
Line 1012: int
Line 1012: ID = len
Line 1012: )
Line 1013: {
Line 1014: ID = unsigned
Line 1014: ID = long
Line 1014: ID = hash
Line 1014: ;
Line 1015: ID = struct
Line 1015: ID = qstr
Line 1015: ID = this
Line 1015: ;
Line 1016: ID = unsigned
Line 1016: int
Line 1016: ID = c
Line 1016: ;
Line 1018: ID = this
Line 1018: Unrecognized token: 46
Line 1018: ID = name
Line 1018: =
Line 1018: ID = name
Line 1018: ;
Line 1019: ID = this
Line 1019: Unrecognized token: 46
Line 1019: ID = len
Line 1019: =
Line 1019: ID = len
Line 1019: ;
Line 1020: if
Line 1020: (
Line 1020: !
Line 1020: ID = len
Line 1020: )
Line 1021: ID = goto
Line 1021: ID = access
Line 1021: ;
Line 1023: ID = hash
Line 1023: =
Line 1023: ID = init_name_hash
Line 1023: (
Line 1023: )
Line 1023: ;
Line 1024: while
Line 1024: (
Line 1024: ID = len
Line 1024: -
Line 1024: -
Line 1024: )
Line 1024: {
Line 1025: ID = c
Line 1025: =
Line 1025: *
Line 1025: (
Line 1025: ID = const
Line 1025: ID = unsigned
Line 1025: char
Line 1025: *
Line 1025: )
Line 1025: ID = name
Line 1025: +
Line 1025: +
Line 1025: ;
Line 1026: if
Line 1026: (
Line 1026: ID = c
Line 1026: ==
Line 1026: CHARCON = '/'
Line 1026: ||
Line 1026: ID = c
Line 1026: ==
Line 1026: CHARCON = '\0'
Line 1026: )
Line 1027: ID = goto
Line 1027: ID = access
Line 1027: ;
Line 1028: ID = hash
Line 1028: =
Line 1028: ID = partial_name_hash
Line 1028: (
Line 1028: ID = c
Line 1028: ,
Line 1028: ID = hash
Line 1028: )
Line 1028: ;
Line 1029: }
Line 1030: ID = this
Line 1030: Unrecognized token: 46
Line 1030: ID = hash
Line 1030: =
Line 1030: ID = end_name_hash
Line 1030: (
Line 1030: ID = hash
Line 1030: )
Line 1030: ;
Line 1032: return
Line 1032: ID = lookup_hash
Line 1032: (
Line 1032: Unrecognized token: 38
Line 1032: ID = this
Line 1032: ,
Line 1032: ID = base
Line 1032: )
Line 1032: ;
Line 1033: ID = access
Line 1033: Unrecognized token: 58
Line 1034: return
Line 1034: ID = ERR_PTR
Line 1034: (
Line 1034: -
Line 1034: ID = EACCES
Line 1034: )
Line 1034: ;
Line 1035: }
Line 1048: int
Line 1048: ID = fastcall
Line 1048: Unrecognized token: 95
Line 1048: Unrecognized token: 95
Line 1048: ID = user_walk
Line 1048: (
Line 1048: ID = const
Line 1048: char
Line 1048: Unrecognized token: 95
Line 1048: Unrecognized token: 95
Line 1048: ID = user
Line 1048: *
Line 1048: ID = name
Line 1048: ,
Line 1048: ID = unsigned
Line 1048: ID = flags
Line 1048: ,
Line 1048: ID = struct
Line 1048: ID = nameidata
Line 1048: *
Line 1048: ID = nd
Line 1048: )
Line 1049: {
Line 1050: char
Line 1050: *
Line 1050: ID = tmp
Line 1050: =
Line 1050: ID = getname
Line 1050: (
Line 1050: ID = name
Line 1050: )
Line 1050: ;
Line 1051: int
Line 1051: ID = err
Line 1051: =
Line 1051: ID = PTR_ERR
Line 1051: (
Line 1051: ID = tmp
Line 1051: )
Line 1051: ;
Line 1053: if
Line 1053: (
Line 1053: !
Line 1053: ID = IS_ERR
Line 1053: (
Line 1053: ID = tmp
Line 1053: )
Line 1053: )
Line 1053: {
Line 1054: ID = err
Line 1054: =
Line 1054: ID = path_lookup
Line 1054: (
Line 1054: ID = tmp
Line 1054: ,
Line 1054: ID = flags
Line 1054: ,
Line 1054: ID = nd
Line 1054: )
Line 1054: ;
Line 1055: ID = putname
Line 1055: (
Line 1055: ID = tmp
Line 1055: )
Line 1055: ;
Line 1056: }
Line 1057: return
Line 1057: ID = err
Line 1057: ;
Line 1058: }
Line 1064: ID = static
Line 1064: ID = inline
Line 1064: int
Line 1064: ID = check_sticky
Line 1064: (
Line 1064: ID = struct
Line 1064: ID = inode
Line 1064: *
Line 1064: ID = dir
Line 1064: ,
Line 1064: ID = struct
Line 1064: ID = inode
Line 1064: *
Line 1064: ID = inode
Line 1064: )
Line 1065: {
Line 1066: if
Line 1066: (
Line 1066: !
Line 1066: (
Line 1066: ID = dir
Line 1066: -
Line 1066: >
Line 1066: ID = i_mode
Line 1066: Unrecognized token: 38
Line 1066: ID = S_ISVTX
Line 1066: )
Line 1066: )
Line 1067: return
Line 1067: INTCON = 0
Line 1067: ;
Line 1068: if
Line 1068: (
Line 1068: ID = inode
Line 1068: -
Line 1068: >
Line 1068: ID = i_uid
Line 1068: ==
Line 1068: ID = current
Line 1068: -
Line 1068: >
Line 1068: ID = fsuid
Line 1068: )
Line 1069: return
Line 1069: INTCON = 0
Line 1069: ;
Line 1070: if
Line 1070: (
Line 1070: ID = dir
Line 1070: -
Line 1070: >
Line 1070: ID = i_uid
Line 1070: ==
Line 1070: ID = current
Line 1070: -
Line 1070: >
Line 1070: ID = fsuid
Line 1070: )
Line 1071: return
Line 1071: INTCON = 0
Line 1071: ;
Line 1072: return
Line 1072: !
Line 1072: ID = capable
Line 1072: (
Line 1072: ID = CAP_FOWNER
Line 1072: )
Line 1072: ;
Line 1073: }
Line 1094: ID = static
Line 1094: ID = inline
Line 1094: int
Line 1094: ID = may_delete
Line 1094: (
Line 1094: ID = struct
Line 1094: ID = inode
Line 1094: *
Line 1094: ID = dir
Line 1094: ,
Line 1094: ID = struct
Line 1094: ID = dentry
Line 1094: *
Line 1094: ID = victim
Line 1094: ,
Line 1094: int
Line 1094: ID = isdir
Line 1094: )
Line 1095: {
Line 1096: int
Line 1096: ID = error
Line 1096: ;
Line 1097: if
Line 1097: (
Line 1097: !
Line 1097: ID = victim
Line 1097: -
Line 1097: >
Line 1097: ID = d_inode
Line 1097: ||
Line 1097: ID = victim
Line 1097: -
Line 1097: >
Line 1097: ID = d_parent
Line 1097: -
Line 1097: >
Line 1097: ID = d_inode
Line 1097: !=
Line 1097: ID = dir
Line 1097: )
Line 1098: return
Line 1098: -
Line 1098: ID = ENOENT
Line 1098: ;
Line 1099: ID = error
Line 1099: =
Line 1099: ID = permission
Line 1099: (
Line 1099: ID = dir
Line 1099: ,
Line 1099: ID = MAY_WRITE
Line 1099: Unrecognized token: 124
Line 1099: ID = MAY_EXEC
Line 1099: ,
Line 1099: ID = NULL
Line 1099: )
Line 1099: ;
Line 1100: if
Line 1100: (
Line 1100: ID = error
Line 1100: )
Line 1101: return
Line 1101: ID = error
Line 1101: ;
Line 1102: if
Line 1102: (
Line 1102: ID = IS_APPEND
Line 1102: (
Line 1102: ID = dir
Line 1102: )
Line 1102: )
Line 1103: return
Line 1103: -
Line 1103: ID = EPERM
Line 1103: ;
Line 1104: if
Line 1104: (
Line 1104: ID = check_sticky
Line 1104: (
Line 1104: ID = dir
Line 1104: ,
Line 1104: ID = victim
Line 1104: -
Line 1104: >
Line 1104: ID = d_inode
Line 1104: )
Line 1104: ||
Line 1104: ID = IS_APPEND
Line 1104: (
Line 1104: ID = victim
Line 1104: -
Line 1104: >
Line 1104: ID = d_inode
Line 1104: )
Line 1104: ||
Line 1105: ID = IS_IMMUTABLE
Line 1105: (
Line 1105: ID = victim
Line 1105: -
Line 1105: >
Line 1105: ID = d_inode
Line 1105: )
Line 1105: )
Line 1106: return
Line 1106: -
Line 1106: ID = EPERM
Line 1106: ;
Line 1107: if
Line 1107: (
Line 1107: ID = isdir
Line 1107: )
Line 1107: {
Line 1108: if
Line 1108: (
Line 1108: !
Line 1108: ID = S_ISDIR
Line 1108: (
Line 1108: ID = victim
Line 1108: -
Line 1108: >
Line 1108: ID = d_inode
Line 1108: -
Line 1108: >
Line 1108: ID = i_mode
Line 1108: )
Line 1108: )
Line 1109: return
Line 1109: -
Line 1109: ID = ENOTDIR
Line 1109: ;
Line 1110: if
Line 1110: (
Line 1110: ID = IS_ROOT
Line 1110: (
Line 1110: ID = victim
Line 1110: )
Line 1110: )
Line 1111: return
Line 1111: -
Line 1111: ID = EBUSY
Line 1111: ;
Line 1112: }
Line 1112: else
Line 1112: if
Line 1112: (
Line 1112: ID = S_ISDIR
Line 1112: (
Line 1112: ID = victim
Line 1112: -
Line 1112: >
Line 1112: ID = d_inode
Line 1112: -
Line 1112: >
Line 1112: ID = i_mode
Line 1112: )
Line 1112: )
Line 1113: return
Line 1113: -
Line 1113: ID = EISDIR
Line 1113: ;
Line 1114: if
Line 1114: (
Line 1114: ID = IS_DEADDIR
Line 1114: (
Line 1114: ID = dir
Line 1114: )
Line 1114: )
Line 1115: return
Line 1115: -
Line 1115: ID = ENOENT
Line 1115: ;
Line 1116: if
Line 1116: (
Line 1116: ID = victim
Line 1116: -
Line 1116: >
Line 1116: ID = d_flags
Line 1116: Unrecognized token: 38
Line 1116: ID = DCACHE_NFSFS_RENAMED
Line 1116: )
Line 1117: return
Line 1117: -
Line 1117: ID = EBUSY
Line 1117: ;
Line 1118: return
Line 1118: INTCON = 0
Line 1118: ;
Line 1119: }
Line 1129: ID = static
Line 1129: ID = inline
Line 1129: int
Line 1129: ID = may_create
Line 1129: (
Line 1129: ID = struct
Line 1129: ID = inode
Line 1129: *
Line 1129: ID = dir
Line 1129: ,
Line 1129: ID = struct
Line 1129: ID = dentry
Line 1129: *
Line 1129: ID = child
Line 1129: ,
Line 1130: ID = struct
Line 1130: ID = nameidata
Line 1130: *
Line 1130: ID = nd
Line 1130: )
Line 1131: {
Line 1132: if
Line 1132: (
Line 1132: ID = child
Line 1132: -
Line 1132: >
Line 1132: ID = d_inode
Line 1132: )
Line 1133: return
Line 1133: -
Line 1133: ID = EEXIST
Line 1133: ;
Line 1134: if
Line 1134: (
Line 1134: ID = IS_DEADDIR
Line 1134: (
Line 1134: ID = dir
Line 1134: )
Line 1134: )
Line 1135: return
Line 1135: -
Line 1135: ID = ENOENT
Line 1135: ;
Line 1136: return
Line 1136: ID = permission
Line 1136: (
Line 1136: ID = dir
Line 1136: ,
Line 1136: ID = MAY_WRITE
Line 1136: Unrecognized token: 124
Line 1136: ID = MAY_EXEC
Line 1136: ,
Line 1136: ID = nd
Line 1136: )
Line 1136: ;
Line 1137: }
Line 1145: ID = static
Line 1145: ID = inline
Line 1145: int
Line 1145: ID = lookup_flags
Line 1145: (
Line 1145: ID = unsigned
Line 1145: int
Line 1145: ID = f
Line 1145: )
Line 1146: {
Line 1147: ID = unsigned
Line 1147: ID = long
Line 1147: ID = retval
Line 1147: =
Line 1147: ID = LOOKUP_FOLLOW
Line 1147: ;
Line 1149: if
Line 1149: (
Line 1149: ID = f
Line 1149: Unrecognized token: 38
Line 1149: ID = O_NOFOLLOW
Line 1149: )
Line 1150: ID = retval
Line 1150: Unrecognized token: 38
Line 1150: =
Line 1150: Unrecognized token: 126
Line 1150: ID = LOOKUP_FOLLOW
Line 1150: ;
Line 1152: if
Line 1152: (
Line 1152: (
Line 1152: ID = f
Line 1152: Unrecognized token: 38
Line 1152: (
Line 1152: ID = O_CREAT
Line 1152: Unrecognized token: 124
Line 1152: ID = O_EXCL
Line 1152: )
Line 1152: )
Line 1152: ==
Line 1152: (
Line 1152: ID = O_CREAT
Line 1152: Unrecognized token: 124
Line 1152: ID = O_EXCL
Line 1152: )
Line 1152: )
Line 1153: ID = retval
Line 1153: Unrecognized token: 38
Line 1153: =
Line 1153: Unrecognized token: 126
Line 1153: ID = LOOKUP_FOLLOW
Line 1153: ;
Line 1155: if
Line 1155: (
Line 1155: ID = f
Line 1155: Unrecognized token: 38
Line 1155: ID = O_DIRECTORY
Line 1155: )
Line 1156: ID = retval
Line 1156: Unrecognized token: 124
Line 1156: =
Line 1156: ID = LOOKUP_DIRECTORY
Line 1156: ;
Line 1158: return
Line 1158: ID = retval
Line 1158: ;
Line 1159: }
Line 1164: ID = struct
Line 1164: ID = dentry
Line 1164: *
Line 1164: ID = lock_rename
Line 1164: (
Line 1164: ID = struct
Line 1164: ID = dentry
Line 1164: *
Line 1164: ID = p1
Line 1164: ,
Line 1164: ID = struct
Line 1164: ID = dentry
Line 1164: *
Line 1164: ID = p2
Line 1164: )
Line 1165: {
Line 1166: ID = struct
Line 1166: ID = dentry
Line 1166: *
Line 1166: ID = p
Line 1166: ;
Line 1168: if
Line 1168: (
Line 1168: ID = p1
Line 1168: ==
Line 1168: ID = p2
Line 1168: )
Line 1168: {
Line 1169: ID = down
Line 1169: (
Line 1169: Unrecognized token: 38
Line 1169: ID = p1
Line 1169: -
Line 1169: >
Line 1169: ID = d_inode
Line 1169: -
Line 1169: >
Line 1169: ID = i_sem
Line 1169: )
Line 1169: ;
Line 1170: return
Line 1170: ID = NULL
Line 1170: ;
Line 1171: }
Line 1173: ID = down
Line 1173: (
Line 1173: Unrecognized token: 38
Line 1173: ID = p1
Line 1173: -
Line 1173: >
Line 1173: ID = d_inode
Line 1173: -
Line 1173: >
Line 1173: ID = i_sb
Line 1173: -
Line 1173: >
Line 1173: ID = s_vfs_rename_sem
Line 1173: )
Line 1173: ;
Line 1175: for
Line 1175: (
Line 1175: ID = p
Line 1175: =
Line 1175: ID = p1
Line 1175: ;
Line 1175: ID = p
Line 1175: -
Line 1175: >
Line 1175: ID = d_parent
Line 1175: !=
Line 1175: ID = p
Line 1175: ;
Line 1175: ID = p
Line 1175: =
Line 1175: ID = p
Line 1175: -
Line 1175: >
Line 1175: ID = d_parent
Line 1175: )
Line 1175: {
Line 1176: if
Line 1176: (
Line 1176: ID = p
Line 1176: -
Line 1176: >
Line 1176: ID = d_parent
Line 1176: ==
Line 1176: ID = p2
Line 1176: )
Line 1176: {
Line 1177: ID = down
Line 1177: (
Line 1177: Unrecognized token: 38
Line 1177: ID = p2
Line 1177: -
Line 1177: >
Line 1177: ID = d_inode
Line 1177: -
Line 1177: >
Line 1177: ID = i_sem
Line 1177: )
Line 1177: ;
Line 1178: ID = down
Line 1178: (
Line 1178: Unrecognized token: 38
Line 1178: ID = p1
Line 1178: -
Line 1178: >
Line 1178: ID = d_inode
Line 1178: -
Line 1178: >
Line 1178: ID = i_sem
Line 1178: )
Line 1178: ;
Line 1179: return
Line 1179: ID = p
Line 1179: ;
Line 1180: }
Line 1181: }
Line 1183: for
Line 1183: (
Line 1183: ID = p
Line 1183: =
Line 1183: ID = p2
Line 1183: ;
Line 1183: ID = p
Line 1183: -
Line 1183: >
Line 1183: ID = d_parent
Line 1183: !=
Line 1183: ID = p
Line 1183: ;
Line 1183: ID = p
Line 1183: =
Line 1183: ID = p
Line 1183: -
Line 1183: >
Line 1183: ID = d_parent
Line 1183: )
Line 1183: {
Line 1184: if
Line 1184: (
Line 1184: ID = p
Line 1184: -
Line 1184: >
Line 1184: ID = d_parent
Line 1184: ==
Line 1184: ID = p1
Line 1184: )
Line 1184: {
Line 1185: ID = down
Line 1185: (
Line 1185: Unrecognized token: 38
Line 1185: ID = p1
Line 1185: -
Line 1185: >
Line 1185: ID = d_inode
Line 1185: -
Line 1185: >
Line 1185: ID = i_sem
Line 1185: )
Line 1185: ;
Line 1186: ID = down
Line 1186: (
Line 1186: Unrecognized token: 38
Line 1186: ID = p2
Line 1186: -
Line 1186: >
Line 1186: ID = d_inode
Line 1186: -
Line 1186: >
Line 1186: ID = i_sem
Line 1186: )
Line 1186: ;
Line 1187: return
Line 1187: ID = p
Line 1187: ;
Line 1188: }
Line 1189: }
Line 1191: ID = down
Line 1191: (
Line 1191: Unrecognized token: 38
Line 1191: ID = p1
Line 1191: -
Line 1191: >
Line 1191: ID = d_inode
Line 1191: -
Line 1191: >
Line 1191: ID = i_sem
Line 1191: )
Line 1191: ;
Line 1192: ID = down
Line 1192: (
Line 1192: Unrecognized token: 38
Line 1192: ID = p2
Line 1192: -
Line 1192: >
Line 1192: ID = d_inode
Line 1192: -
Line 1192: >
Line 1192: ID = i_sem
Line 1192: )
Line 1192: ;
Line 1193: return
Line 1193: ID = NULL
Line 1193: ;
Line 1194: }
Line 1196: void
Line 1196: ID = unlock_rename
Line 1196: (
Line 1196: ID = struct
Line 1196: ID = dentry
Line 1196: *
Line 1196: ID = p1
Line 1196: ,
Line 1196: ID = struct
Line 1196: ID = dentry
Line 1196: *
Line 1196: ID = p2
Line 1196: )
Line 1197: {
Line 1198: ID = up
Line 1198: (
Line 1198: Unrecognized token: 38
Line 1198: ID = p1
Line 1198: -
Line 1198: >
Line 1198: ID = d_inode
Line 1198: -
Line 1198: >
Line 1198: ID = i_sem
Line 1198: )
Line 1198: ;
Line 1199: if
Line 1199: (
Line 1199: ID = p1
Line 1199: !=
Line 1199: ID = p2
Line 1199: )
Line 1199: {
Line 1200: ID = up
Line 1200: (
Line 1200: Unrecognized token: 38
Line 1200: ID = p2
Line 1200: -
Line 1200: >
Line 1200: ID = d_inode
Line 1200: -
Line 1200: >
Line 1200: ID = i_sem
Line 1200: )
Line 1200: ;
Line 1201: ID = up
Line 1201: (
Line 1201: Unrecognized token: 38
Line 1201: ID = p1
Line 1201: -
Line 1201: >
Line 1201: ID = d_inode
Line 1201: -
Line 1201: >
Line 1201: ID = i_sb
Line 1201: -
Line 1201: >
Line 1201: ID = s_vfs_rename_sem
Line 1201: )
Line 1201: ;
Line 1202: }
Line 1203: }
Line 1205: int
Line 1205: ID = vfs_create
Line 1205: (
Line 1205: ID = struct
Line 1205: ID = inode
Line 1205: *
Line 1205: ID = dir
Line 1205: ,
Line 1205: ID = struct
Line 1205: ID = dentry
Line 1205: *
Line 1205: ID = dentry
Line 1205: ,
Line 1205: int
Line 1205: ID = mode
Line 1205: ,
Line 1206: ID = struct
Line 1206: ID = nameidata
Line 1206: *
Line 1206: ID = nd
Line 1206: )
Line 1207: {
Line 1208: int
Line 1208: ID = error
Line 1208: =
Line 1208: ID = may_create
Line 1208: (
Line 1208: ID = dir
Line 1208: ,
Line 1208: ID = dentry
Line 1208: ,
Line 1208: ID = nd
Line 1208: )
Line 1208: ;
Line 1210: if
Line 1210: (
Line 1210: ID = error
Line 1210: )
Line 1211: return
Line 1211: ID = error
Line 1211: ;
Line 1213: if
Line 1213: (
Line 1213: !
Line 1213: ID = dir
Line 1213: -
Line 1213: >
Line 1213: ID = i_op
Line 1213: ||
Line 1213: !
Line 1213: ID = dir
Line 1213: -
Line 1213: >
Line 1213: ID = i_op
Line 1213: -
Line 1213: >
Line 1213: ID = create
Line 1213: )
Line 1214: return
Line 1214: -
Line 1214: ID = EACCES
Line 1214: ;
Line 1215: ID = mode
Line 1215: Unrecognized token: 38
Line 1215: =
Line 1215: ID = S_IALLUGO
Line 1215: ;
Line 1216: ID = mode
Line 1216: Unrecognized token: 124
Line 1216: =
Line 1216: ID = S_IFREG
Line 1216: ;
Line 1217: ID = error
Line 1217: =
Line 1217: ID = security_inode_create
Line 1217: (
Line 1217: ID = dir
Line 1217: ,
Line 1217: ID = dentry
Line 1217: ,
Line 1217: ID = mode
Line 1217: )
Line 1217: ;
Line 1218: if
Line 1218: (
Line 1218: ID = error
Line 1218: )
Line 1219: return
Line 1219: ID = error
Line 1219: ;
Line 1220: ID = DQUOT_INIT
Line 1220: (
Line 1220: ID = dir
Line 1220: )
Line 1220: ;
Line 1221: ID = error
Line 1221: =
Line 1221: ID = dir
Line 1221: -
Line 1221: >
Line 1221: ID = i_op
Line 1221: -
Line 1221: >
Line 1221: ID = create
Line 1221: (
Line 1221: ID = dir
Line 1221: ,
Line 1221: ID = dentry
Line 1221: ,
Line 1221: ID = mode
Line 1221: ,
Line 1221: ID = nd
Line 1221: )
Line 1221: ;
Line 1222: if
Line 1222: (
Line 1222: !
Line 1222: ID = error
Line 1222: )
Line 1222: {
Line 1223: ID = inode_dir_notify
Line 1223: (
Line 1223: ID = dir
Line 1223: ,
Line 1223: ID = DN_CREATE
Line 1223: )
Line 1223: ;
Line 1224: ID = security_inode_post_create
Line 1224: (
Line 1224: ID = dir
Line 1224: ,
Line 1224: ID = dentry
Line 1224: ,
Line 1224: ID = mode
Line 1224: )
Line 1224: ;
Line 1225: }
Line 1226: return
Line 1226: ID = error
Line 1226: ;
Line 1227: }
Line 1229: int
Line 1229: ID = may_open
Line 1229: (
Line 1229: ID = struct
Line 1229: ID = nameidata
Line 1229: *
Line 1229: ID = nd
Line 1229: ,
Line 1229: int
Line 1229: ID = acc_mode
Line 1229: ,
Line 1229: int
Line 1229: ID = flag
Line 1229: )
Line 1230: {
Line 1231: ID = struct
Line 1231: ID = dentry
Line 1231: *
Line 1231: ID = dentry
Line 1231: =
Line 1231: ID = nd
Line 1231: -
Line 1231: >
Line 1231: ID = dentry
Line 1231: ;
Line 1232: ID = struct
Line 1232: ID = inode
Line 1232: *
Line 1232: ID = inode
Line 1232: =
Line 1232: ID = dentry
Line 1232: -
Line 1232: >
Line 1232: ID = d_inode
Line 1232: ;
Line 1233: int
Line 1233: ID = error
Line 1233: ;
Line 1235: if
Line 1235: (
Line 1235: !
Line 1235: ID = inode
Line 1235: )
Line 1236: return
Line 1236: -
Line 1236: ID = ENOENT
Line 1236: ;
Line 1238: if
Line 1238: (
Line 1238: ID = S_ISLNK
Line 1238: (
Line 1238: ID = inode
Line 1238: -
Line 1238: >
Line 1238: ID = i_mode
Line 1238: )
Line 1238: )
Line 1239: return
Line 1239: -
Line 1239: ID = ELOOP
Line 1239: ;
Line 1241: if
Line 1241: (
Line 1241: ID = S_ISDIR
Line 1241: (
Line 1241: ID = inode
Line 1241: -
Line 1241: >
Line 1241: ID = i_mode
Line 1241: )
Line 1241: &&
Line 1241: (
Line 1241: ID = flag
Line 1241: Unrecognized token: 38
Line 1241: ID = FMODE_WRITE
Line 1241: )
Line 1241: )
Line 1242: return
Line 1242: -
Line 1242: ID = EISDIR
Line 1242: ;
Line 1244: ID = error
Line 1244: =
Line 1244: ID = permission
Line 1244: (
Line 1244: ID = inode
Line 1244: ,
Line 1244: ID = acc_mode
Line 1244: ,
Line 1244: ID = nd
Line 1244: )
Line 1244: ;
Line 1245: if
Line 1245: (
Line 1245: ID = error
Line 1245: )
Line 1246: return
Line 1246: ID = error
Line 1246: ;
Line 1253: if
Line 1253: (
Line 1253: ID = S_ISFIFO
Line 1253: (
Line 1253: ID = inode
Line 1253: -
Line 1253: >
Line 1253: ID = i_mode
Line 1253: )
Line 1253: ||
Line 1253: ID = S_ISSOCK
Line 1253: (
Line 1253: ID = inode
Line 1253: -
Line 1253: >
Line 1253: ID = i_mode
Line 1253: )
Line 1253: )
Line 1253: {
Line 1254: ID = flag
Line 1254: Unrecognized token: 38
Line 1254: =
Line 1254: Unrecognized token: 126
Line 1254: ID = O_TRUNC
Line 1254: ;
Line 1255: }
Line 1255: else
Line 1255: if
Line 1255: (
Line 1255: ID = S_ISBLK
Line 1255: (
Line 1255: ID = inode
Line 1255: -
Line 1255: >
Line 1255: ID = i_mode
Line 1255: )
Line 1255: ||
Line 1255: ID = S_ISCHR
Line 1255: (
Line 1255: ID = inode
Line 1255: -
Line 1255: >
Line 1255: ID = i_mode
Line 1255: )
Line 1255: )
Line 1255: {
Line 1256: if
Line 1256: (
Line 1256: ID = nd
Line 1256: -
Line 1256: >
Line 1256: ID = mnt
Line 1256: -
Line 1256: >
Line 1256: ID = mnt_flags
Line 1256: Unrecognized token: 38
Line 1256: ID = MNT_NODEV
Line 1256: )
Line 1257: return
Line 1257: -
Line 1257: ID = EACCES
Line 1257: ;
Line 1259: ID = flag
Line 1259: Unrecognized token: 38
Line 1259: =
Line 1259: Unrecognized token: 126
Line 1259: ID = O_TRUNC
Line 1259: ;
Line 1260: }
Line 1260: else
Line 1260: if
Line 1260: (
Line 1260: ID = IS_RDONLY
Line 1260: (
Line 1260: ID = inode
Line 1260: )
Line 1260: &&
Line 1260: (
Line 1260: ID = flag
Line 1260: Unrecognized token: 38
Line 1260: ID = FMODE_WRITE
Line 1260: )
Line 1260: )
Line 1261: return
Line 1261: -
Line 1261: ID = EROFS
Line 1261: ;
Line 1265: if
Line 1265: (
Line 1265: ID = IS_APPEND
Line 1265: (
Line 1265: ID = inode
Line 1265: )
Line 1265: )
Line 1265: {
Line 1266: if
Line 1266: (
Line 1266: (
Line 1266: ID = flag
Line 1266: Unrecognized token: 38
Line 1266: ID = FMODE_WRITE
Line 1266: )
Line 1266: &&
Line 1266: !
Line 1266: (
Line 1266: ID = flag
Line 1266: Unrecognized token: 38
Line 1266: ID = O_APPEND
Line 1266: )
Line 1266: )
Line 1267: return
Line 1267: -
Line 1267: ID = EPERM
Line 1267: ;
Line 1268: if
Line 1268: (
Line 1268: ID = flag
Line 1268: Unrecognized token: 38
Line 1268: ID = O_TRUNC
Line 1268: )
Line 1269: return
Line 1269: -
Line 1269: ID = EPERM
Line 1269: ;
Line 1270: }
Line 1273: if
Line 1273: (
Line 1273: ID = flag
Line 1273: Unrecognized token: 38
Line 1273: ID = O_NOATIME
Line 1273: )
Line 1274: if
Line 1274: (
Line 1274: ID = current
Line 1274: -
Line 1274: >
Line 1274: ID = fsuid
Line 1274: !=
Line 1274: ID = inode
Line 1274: -
Line 1274: >
Line 1274: ID = i_uid
Line 1274: &&
Line 1274: !
Line 1274: ID = capable
Line 1274: (
Line 1274: ID = CAP_FOWNER
Line 1274: )
Line 1274: )
Line 1275: return
Line 1275: -
Line 1275: ID = EPERM
Line 1275: ;
Line 1280: ID = error
Line 1280: =
Line 1280: ID = break_lease
Line 1280: (
Line 1280: ID = inode
Line 1280: ,
Line 1280: ID = flag
Line 1280: )
Line 1280: ;
Line 1281: if
Line 1281: (
Line 1281: ID = error
Line 1281: )
Line 1282: return
Line 1282: ID = error
Line 1282: ;
Line 1284: if
Line 1284: (
Line 1284: ID = flag
Line 1284: Unrecognized token: 38
Line 1284: ID = O_TRUNC
Line 1284: )
Line 1284: {
Line 1285: ID = error
Line 1285: =
Line 1285: ID = get_write_access
Line 1285: (
Line 1285: ID = inode
Line 1285: )
Line 1285: ;
Line 1286: if
Line 1286: (
Line 1286: ID = error
Line 1286: )
Line 1287: return
Line 1287: ID = error
Line 1287: ;
Line 1292: ID = error
Line 1292: =
Line 1292: ID = locks_verify_locked
Line 1292: (
Line 1292: ID = inode
Line 1292: )
Line 1292: ;
Line 1293: if
Line 1293: (
Line 1293: !
Line 1293: ID = error
Line 1293: )
Line 1293: {
Line 1294: ID = DQUOT_INIT
Line 1294: (
Line 1294: ID = inode
Line 1294: )
Line 1294: ;
Line 1296: ID = error
Line 1296: =
Line 1296: ID = do_truncate
Line 1296: (
Line 1296: ID = dentry
Line 1296: ,
Line 1296: INTCON = 0
Line 1296: )
Line 1296: ;
Line 1297: }
Line 1298: ID = put_write_access
Line 1298: (
Line 1298: ID = inode
Line 1298: )
Line 1298: ;
Line 1299: if
Line 1299: (
Line 1299: ID = error
Line 1299: )
Line 1300: return
Line 1300: ID = error
Line 1300: ;
Line 1301: }
Line 1301: else
Line 1302: if
Line 1302: (
Line 1302: ID = flag
Line 1302: Unrecognized token: 38
Line 1302: ID = FMODE_WRITE
Line 1302: )
Line 1303: ID = DQUOT_INIT
Line 1303: (
Line 1303: ID = inode
Line 1303: )
Line 1303: ;
Line 1305: return
Line 1305: INTCON = 0
Line 1305: ;
Line 1306: }
Line 1322: int
Line 1322: ID = open_namei
Line 1322: (
Line 1322: ID = const
Line 1322: char
Line 1322: *
Line 1322: ID = pathname
Line 1322: ,
Line 1322: int
Line 1322: ID = flag
Line 1322: ,
Line 1322: int
Line 1322: ID = mode
Line 1322: ,
Line 1322: ID = struct
Line 1322: ID = nameidata
Line 1322: *
Line 1322: ID = nd
Line 1322: )
Line 1323: {
Line 1324: int
Line 1324: ID = acc_mode
Line 1324: ,
Line 1324: ID = error
Line 1324: =
Line 1324: INTCON = 0
Line 1324: ;
Line 1325: ID = struct
Line 1325: ID = dentry
Line 1325: *
Line 1325: ID = dentry
Line 1325: ;
Line 1326: ID = struct
Line 1326: ID = dentry
Line 1326: *
Line 1326: ID = dir
Line 1326: ;
Line 1327: int
Line 1327: ID = count
Line 1327: =
Line 1327: INTCON = 0
Line 1327: ;
Line 1329: ID = acc_mode
Line 1329: =
Line 1329: ID = ACC_MODE
Line 1329: (
Line 1329: ID = flag
Line 1329: )
Line 1329: ;
Line 1333: if
Line 1333: (
Line 1333: ID = flag
Line 1333: Unrecognized token: 38
Line 1333: ID = O_APPEND
Line 1333: )
Line 1334: ID = acc_mode
Line 1334: Unrecognized token: 124
Line 1334: =
Line 1334: ID = MAY_APPEND
Line 1334: ;
Line 1337: ID = nd
Line 1337: -
Line 1337: >
Line 1337: ID = intent
Line 1337: Unrecognized token: 46
Line 1337: ID = open
Line 1337: Unrecognized token: 46
Line 1337: ID = flags
Line 1337: =
Line 1337: ID = flag
Line 1337: ;
Line 1338: ID = nd
Line 1338: -
Line 1338: >
Line 1338: ID = intent
Line 1338: Unrecognized token: 46
Line 1338: ID = open
Line 1338: Unrecognized token: 46
Line 1338: ID = create_mode
Line 1338: =
Line 1338: ID = mode
Line 1338: ;
Line 1343: if
Line 1343: (
Line 1343: !
Line 1343: (
Line 1343: ID = flag
Line 1343: Unrecognized token: 38
Line 1343: ID = O_CREAT
Line 1343: )
Line 1343: )
Line 1343: {
Line 1344: ID = error
Line 1344: =
Line 1344: ID = path_lookup
Line 1344: (
Line 1344: ID = pathname
Line 1344: ,
Line 1344: ID = lookup_flags
Line 1344: (
Line 1344: ID = flag
Line 1344: )
Line 1344: Unrecognized token: 124
Line 1344: ID = LOOKUP_OPEN
Line 1344: ,
Line 1344: ID = nd
Line 1344: )
Line 1344: ;
Line 1345: if
Line 1345: (
Line 1345: ID = error
Line 1345: )
Line 1346: return
Line 1346: ID = error
Line 1346: ;
Line 1347: ID = goto
Line 1347: ID = ok
Line 1347: ;
Line 1348: }
Line 1353: ID = error
Line 1353: =
Line 1353: ID = path_lookup
Line 1353: (
Line 1353: ID = pathname
Line 1353: ,
Line 1353: ID = LOOKUP_PARENT
Line 1353: Unrecognized token: 124
Line 1353: ID = LOOKUP_OPEN
Line 1353: Unrecognized token: 124
Line 1353: ID = LOOKUP_CREATE
Line 1353: ,
Line 1353: ID = nd
Line 1353: )
Line 1353: ;
Line 1354: if
Line 1354: (
Line 1354: ID = error
Line 1354: )
Line 1355: return
Line 1355: ID = error
Line 1355: ;
Line 1362: ID = error
Line 1362: =
Line 1362: -
Line 1362: ID = EISDIR
Line 1362: ;
Line 1363: if
Line 1363: (
Line 1363: ID = nd
Line 1363: -
Line 1363: >
Line 1363: ID = last_type
Line 1363: !=
Line 1363: ID = LAST_NORM
Line 1363: ||
Line 1363: ID = nd
Line 1363: -
Line 1363: >
Line 1363: ID = last
Line 1363: Unrecognized token: 46
Line 1363: ID = name
Line 1363: [
Line 1363: ID = nd
Line 1363: -
Line 1363: >
Line 1363: ID = last
Line 1363: Unrecognized token: 46
Line 1363: ID = len
Line 1363: ]
Line 1363: )
Line 1364: ID = goto
Line 1364: ID = exit
Line 1364: ;
Line 1366: ID = dir
Line 1366: =
Line 1366: ID = nd
Line 1366: -
Line 1366: >
Line 1366: ID = dentry
Line 1366: ;
Line 1367: ID = nd
Line 1367: -
Line 1367: >
Line 1367: ID = flags
Line 1367: Unrecognized token: 38
Line 1367: =
Line 1367: Unrecognized token: 126
Line 1367: ID = LOOKUP_PARENT
Line 1367: ;
Line 1368: ID = down
Line 1368: (
Line 1368: Unrecognized token: 38
Line 1368: ID = dir
Line 1368: -
Line 1368: >
Line 1368: ID = d_inode
Line 1368: -
Line 1368: >
Line 1368: ID = i_sem
Line 1368: )
Line 1368: ;
Line 1369: ID = dentry
Line 1369: =
Line 1369: Unrecognized token: 95
Line 1369: Unrecognized token: 95
Line 1369: ID = lookup_hash
Line 1369: (
Line 1369: Unrecognized token: 38
Line 1369: ID = nd
Line 1369: -
Line 1369: >
Line 1369: ID = last
Line 1369: ,
Line 1369: ID = nd
Line 1369: -
Line 1369: >
Line 1369: ID = dentry
Line 1369: ,
Line 1369: ID = nd
Line 1369: )
Line 1369: ;
Line 1371: ID = do_last
Line 1371: Unrecognized token: 58
Line 1372: ID = error
Line 1372: =
Line 1372: ID = PTR_ERR
Line 1372: (
Line 1372: ID = dentry
Line 1372: )
Line 1372: ;
Line 1373: if
Line 1373: (
Line 1373: ID = IS_ERR
Line 1373: (
Line 1373: ID = dentry
Line 1373: )
Line 1373: )
Line 1373: {
Line 1374: ID = up
Line 1374: (
Line 1374: Unrecognized token: 38
Line 1374: ID = dir
Line 1374: -
Line 1374: >
Line 1374: ID = d_inode
Line 1374: -
Line 1374: >
Line 1374: ID = i_sem
Line 1374: )
Line 1374: ;
Line 1375: ID = goto
Line 1375: ID = exit
Line 1375: ;
Line 1376: }
Line 1379: if
Line 1379: (
Line 1379: !
Line 1379: ID = dentry
Line 1379: -
Line 1379: >
Line 1379: ID = d_inode
Line 1379: )
Line 1379: {
Line 1380: if
Line 1380: (
Line 1380: !
Line 1380: ID = IS_POSIXACL
Line 1380: (
Line 1380: ID = dir
Line 1380: -
Line 1380: >
Line 1380: ID = d_inode
Line 1380: )
Line 1380: )
Line 1381: ID = mode
Line 1381: Unrecognized token: 38
Line 1381: =
Line 1381: Unrecognized token: 126
Line 1381: ID = current
Line 1381: -
Line 1381: >
Line 1381: ID = fs
Line 1381: -
Line 1381: >
Line 1381: ID = umask
Line 1381: ;
Line 1382: ID = error
Line 1382: =
Line 1382: ID = vfs_create
Line 1382: (
Line 1382: ID = dir
Line 1382: -
Line 1382: >
Line 1382: ID = d_inode
Line 1382: ,
Line 1382: ID = dentry
Line 1382: ,
Line 1382: ID = mode
Line 1382: ,
Line 1382: ID = nd
Line 1382: )
Line 1382: ;
Line 1383: ID = up
Line 1383: (
Line 1383: Unrecognized token: 38
Line 1383: ID = dir
Line 1383: -
Line 1383: >
Line 1383: ID = d_inode
Line 1383: -
Line 1383: >
Line 1383: ID = i_sem
Line 1383: )
Line 1383: ;
Line 1384: ID = dput
Line 1384: (
Line 1384: ID = nd
Line 1384: -
Line 1384: >
Line 1384: ID = dentry
Line 1384: )
Line 1384: ;
Line 1385: ID = nd
Line 1385: -
Line 1385: >
Line 1385: ID = dentry
Line 1385: =
Line 1385: ID = dentry
Line 1385: ;
Line 1386: if
Line 1386: (
Line 1386: ID = error
Line 1386: )
Line 1387: ID = goto
Line 1387: ID = exit
Line 1387: ;
Line 1389: ID = acc_mode
Line 1389: =
Line 1389: INTCON = 0
Line 1389: ;
Line 1390: ID = flag
Line 1390: Unrecognized token: 38
Line 1390: =
Line 1390: Unrecognized token: 126
Line 1390: ID = O_TRUNC
Line 1390: ;
Line 1391: ID = goto
Line 1391: ID = ok
Line 1391: ;
Line 1392: }
Line 1397: ID = up
Line 1397: (
Line 1397: Unrecognized token: 38
Line 1397: ID = dir
Line 1397: -
Line 1397: >
Line 1397: ID = d_inode
Line 1397: -
Line 1397: >
Line 1397: ID = i_sem
Line 1397: )
Line 1397: ;
Line 1399: ID = error
Line 1399: =
Line 1399: -
Line 1399: ID = EEXIST
Line 1399: ;
Line 1400: if
Line 1400: (
Line 1400: ID = flag
Line 1400: Unrecognized token: 38
Line 1400: ID = O_EXCL
Line 1400: )
Line 1401: ID = goto
Line 1401: ID = exit_dput
Line 1401: ;
Line 1403: if
Line 1403: (
Line 1403: ID = d_mountpoint
Line 1403: (
Line 1403: ID = dentry
Line 1403: )
Line 1403: )
Line 1403: {
Line 1404: ID = error
Line 1404: =
Line 1404: -
Line 1404: ID = ELOOP
Line 1404: ;
Line 1405: if
Line 1405: (
Line 1405: ID = flag
Line 1405: Unrecognized token: 38
Line 1405: ID = O_NOFOLLOW
Line 1405: )
Line 1406: ID = goto
Line 1406: ID = exit_dput
Line 1406: ;
Line 1407: while
Line 1407: (
Line 1407: Unrecognized token: 95
Line 1407: Unrecognized token: 95
Line 1407: ID = follow_down
Line 1407: (
Line 1407: Unrecognized token: 38
Line 1407: ID = nd
Line 1407: -
Line 1407: >
Line 1407: ID = mnt
Line 1407: ,
Line 1407: Unrecognized token: 38
Line 1407: ID = dentry
Line 1407: )
Line 1407: &&
Line 1407: ID = d_mountpoint
Line 1407: (
Line 1407: ID = dentry
Line 1407: )
Line 1407: )
Line 1407: ;
Line 1408: }
Line 1409: ID = error
Line 1409: =
Line 1409: -
Line 1409: ID = ENOENT
Line 1409: ;
Line 1410: if
Line 1410: (
Line 1410: !
Line 1410: ID = dentry
Line 1410: -
Line 1410: >
Line 1410: ID = d_inode
Line 1410: )
Line 1411: ID = goto
Line 1411: ID = exit_dput
Line 1411: ;
Line 1412: if
Line 1412: (
Line 1412: ID = dentry
Line 1412: -
Line 1412: >
Line 1412: ID = d_inode
Line 1412: -
Line 1412: >
Line 1412: ID = i_op
Line 1412: &&
Line 1412: ID = dentry
Line 1412: -
Line 1412: >
Line 1412: ID = d_inode
Line 1412: -
Line 1412: >
Line 1412: ID = i_op
Line 1412: -
Line 1412: >
Line 1412: ID = follow_link
Line 1412: )
Line 1413: ID = goto
Line 1413: ID = do_link
Line 1413: ;
Line 1415: ID = dput
Line 1415: (
Line 1415: ID = nd
Line 1415: -
Line 1415: >
Line 1415: ID = dentry
Line 1415: )
Line 1415: ;
Line 1416: ID = nd
Line 1416: -
Line 1416: >
Line 1416: ID = dentry
Line 1416: =
Line 1416: ID = dentry
Line 1416: ;
Line 1417: ID = error
Line 1417: =
Line 1417: -
Line 1417: ID = EISDIR
Line 1417: ;
Line 1418: if
Line 1418: (
Line 1418: ID = dentry
Line 1418: -
Line 1418: >
Line 1418: ID = d_inode
Line 1418: &&
Line 1418: ID = S_ISDIR
Line 1418: (
Line 1418: ID = dentry
Line 1418: -
Line 1418: >
Line 1418: ID = d_inode
Line 1418: -
Line 1418: >
Line 1418: ID = i_mode
Line 1418: )
Line 1418: )
Line 1419: ID = goto
Line 1419: ID = exit
Line 1419: ;
Line 1420: ID = ok
Line 1420: Unrecognized token: 58
Line 1421: ID = error
Line 1421: =
Line 1421: ID = may_open
Line 1421: (
Line 1421: ID = nd
Line 1421: ,
Line 1421: ID = acc_mode
Line 1421: ,
Line 1421: ID = flag
Line 1421: )
Line 1421: ;
Line 1422: if
Line 1422: (
Line 1422: ID = error
Line 1422: )
Line 1423: ID = goto
Line 1423: ID = exit
Line 1423: ;
Line 1424: return
Line 1424: INTCON = 0
Line 1424: ;
Line 1426: ID = exit_dput
Line 1426: Unrecognized token: 58
Line 1427: ID = dput
Line 1427: (
Line 1427: ID = dentry
Line 1427: )
Line 1427: ;
Line 1428: ID = exit
Line 1428: Unrecognized token: 58
Line 1429: ID = path_release
Line 1429: (
Line 1429: ID = nd
Line 1429: )
Line 1429: ;
Line 1430: return
Line 1430: ID = error
Line 1430: ;
Line 1432: ID = do_link
Line 1432: Unrecognized token: 58
Line 1433: ID = error
Line 1433: =
Line 1433: -
Line 1433: ID = ELOOP
Line 1433: ;
Line 1434: if
Line 1434: (
Line 1434: ID = flag
Line 1434: Unrecognized token: 38
Line 1434: ID = O_NOFOLLOW
Line 1434: )
Line 1435: ID = goto
Line 1435: ID = exit_dput
Line 1435: ;
Line 1446: ID = nd
Line 1446: -
Line 1446: >
Line 1446: ID = flags
Line 1446: Unrecognized token: 124
Line 1446: =
Line 1446: ID = LOOKUP_PARENT
Line 1446: ;
Line 1447: ID = error
Line 1447: =
Line 1447: ID = security_inode_follow_link
Line 1447: (
Line 1447: ID = dentry
Line 1447: ,
Line 1447: ID = nd
Line 1447: )
Line 1447: ;
Line 1448: if
Line 1448: (
Line 1448: ID = error
Line 1448: )
Line 1449: ID = goto
Line 1449: ID = exit_dput
Line 1449: ;
Line 1450: ID = touch_atime
Line 1450: (
Line 1450: ID = nd
Line 1450: -
Line 1450: >
Line 1450: ID = mnt
Line 1450: ,
Line 1450: ID = dentry
Line 1450: )
Line 1450: ;
Line 1451: ID = nd_set_link
Line 1451: (
Line 1451: ID = nd
Line 1451: ,
Line 1451: ID = NULL
Line 1451: )
Line 1451: ;
Line 1452: ID = error
Line 1452: =
Line 1452: ID = dentry
Line 1452: -
Line 1452: >
Line 1452: ID = d_inode
Line 1452: -
Line 1452: >
Line 1452: ID = i_op
Line 1452: -
Line 1452: >
Line 1452: ID = follow_link
Line 1452: (
Line 1452: ID = dentry
Line 1452: ,
Line 1452: ID = nd
Line 1452: )
Line 1452: ;
Line 1453: if
Line 1453: (
Line 1453: !
Line 1453: ID = error
Line 1453: )
Line 1453: {
Line 1454: char
Line 1454: *
Line 1454: ID = s
Line 1454: =
Line 1454: ID = nd_get_link
Line 1454: (
Line 1454: ID = nd
Line 1454: )
Line 1454: ;
Line 1455: if
Line 1455: (
Line 1455: ID = s
Line 1455: )
Line 1456: ID = error
Line 1456: =
Line 1456: Unrecognized token: 95
Line 1456: Unrecognized token: 95
Line 1456: ID = vfs_follow_link
Line 1456: (
Line 1456: ID = nd
Line 1456: ,
Line 1456: ID = s
Line 1456: )
Line 1456: ;
Line 1457: if
Line 1457: (
Line 1457: ID = dentry
Line 1457: -
Line 1457: >
Line 1457: ID = d_inode
Line 1457: -
Line 1457: >
Line 1457: ID = i_op
Line 1457: -
Line 1457: >
Line 1457: ID = put_link
Line 1457: )
Line 1458: ID = dentry
Line 1458: -
Line 1458: >
Line 1458: ID = d_inode
Line 1458: -
Line 1458: >
Line 1458: ID = i_op
Line 1458: -
Line 1458: >
Line 1458: ID = put_link
Line 1458: (
Line 1458: ID = dentry
Line 1458: ,
Line 1458: ID = nd
Line 1458: )
Line 1458: ;
Line 1459: }
Line 1460: ID = dput
Line 1460: (
Line 1460: ID = dentry
Line 1460: )
Line 1460: ;
Line 1461: if
Line 1461: (
Line 1461: ID = error
Line 1461: )
Line 1462: return
Line 1462: ID = error
Line 1462: ;
Line 1463: ID = nd
Line 1463: -
Line 1463: >
Line 1463: ID = flags
Line 1463: Unrecognized token: 38
Line 1463: =
Line 1463: Unrecognized token: 126
Line 1463: ID = LOOKUP_PARENT
Line 1463: ;
Line 1464: if
Line 1464: (
Line 1464: ID = nd
Line 1464: -
Line 1464: >
Line 1464: ID = last_type
Line 1464: ==
Line 1464: ID = LAST_BIND
Line 1464: )
Line 1464: {
Line 1465: ID = dentry
Line 1465: =
Line 1465: ID = nd
Line 1465: -
Line 1465: >
Line 1465: ID = dentry
Line 1465: ;
Line 1466: ID = goto
Line 1466: ID = ok
Line 1466: ;
Line 1467: }
Line 1468: ID = error
Line 1468: =
Line 1468: -
Line 1468: ID = EISDIR
Line 1468: ;
Line 1469: if
Line 1469: (
Line 1469: ID = nd
Line 1469: -
Line 1469: >
Line 1469: ID = last_type
Line 1469: !=
Line 1469: ID = LAST_NORM
Line 1469: )
Line 1470: ID = goto
Line 1470: ID = exit
Line 1470: ;
Line 1471: if
Line 1471: (
Line 1471: ID = nd
Line 1471: -
Line 1471: >
Line 1471: ID = last
Line 1471: Unrecognized token: 46
Line 1471: ID = name
Line 1471: [
Line 1471: ID = nd
Line 1471: -
Line 1471: >
Line 1471: ID = last
Line 1471: Unrecognized token: 46
Line 1471: ID = len
Line 1471: ]
Line 1471: )
Line 1471: {
Line 1472: ID = putname
Line 1472: (
Line 1472: ID = nd
Line 1472: -
Line 1472: >
Line 1472: ID = last
Line 1472: Unrecognized token: 46
Line 1472: ID = name
Line 1472: )
Line 1472: ;
Line 1473: ID = goto
Line 1473: ID = exit
Line 1473: ;
Line 1474: }
Line 1475: ID = error
Line 1475: =
Line 1475: -
Line 1475: ID = ELOOP
Line 1475: ;
Line 1476: if
Line 1476: (
Line 1476: ID = count
Line 1476: +
Line 1476: +
Line 1476: ==
Line 1476: INTCON = 32
Line 1476: )
Line 1476: {
Line 1477: ID = putname
Line 1477: (
Line 1477: ID = nd
Line 1477: -
Line 1477: >
Line 1477: ID = last
Line 1477: Unrecognized token: 46
Line 1477: ID = name
Line 1477: )
Line 1477: ;
Line 1478: ID = goto
Line 1478: ID = exit
Line 1478: ;
Line 1479: }
Line 1480: ID = dir
Line 1480: =
Line 1480: ID = nd
Line 1480: -
Line 1480: >
Line 1480: ID = dentry
Line 1480: ;
Line 1481: ID = down
Line 1481: (
Line 1481: Unrecognized token: 38
Line 1481: ID = dir
Line 1481: -
Line 1481: >
Line 1481: ID = d_inode
Line 1481: -
Line 1481: >
Line 1481: ID = i_sem
Line 1481: )
Line 1481: ;
Line 1482: ID = dentry
Line 1482: =
Line 1482: Unrecognized token: 95
Line 1482: Unrecognized token: 95
Line 1482: ID = lookup_hash
Line 1482: (
Line 1482: Unrecognized token: 38
Line 1482: ID = nd
Line 1482: -
Line 1482: >
Line 1482: ID = last
Line 1482: ,
Line 1482: ID = nd
Line 1482: -
Line 1482: >
Line 1482: ID = dentry
Line 1482: ,
Line 1482: ID = nd
Line 1482: )
Line 1482: ;
Line 1483: ID = putname
Line 1483: (
Line 1483: ID = nd
Line 1483: -
Line 1483: >
Line 1483: ID = last
Line 1483: Unrecognized token: 46
Line 1483: ID = name
Line 1483: )
Line 1483: ;
Line 1484: ID = goto
Line 1484: ID = do_last
Line 1484: ;
Line 1485: }
Line 1495: ID = struct
Line 1495: ID = dentry
Line 1495: *
Line 1495: ID = lookup_create
Line 1495: (
Line 1495: ID = struct
Line 1495: ID = nameidata
Line 1495: *
Line 1495: ID = nd
Line 1495: ,
Line 1495: int
Line 1495: ID = is_dir
Line 1495: )
Line 1496: {
Line 1497: ID = struct
Line 1497: ID = dentry
Line 1497: *
Line 1497: ID = dentry
Line 1497: ;
Line 1499: ID = down
Line 1499: (
Line 1499: Unrecognized token: 38
Line 1499: ID = nd
Line 1499: -
Line 1499: >
Line 1499: ID = dentry
Line 1499: -
Line 1499: >
Line 1499: ID = d_inode
Line 1499: -
Line 1499: >
Line 1499: ID = i_sem
Line 1499: )
Line 1499: ;
Line 1500: ID = dentry
Line 1500: =
Line 1500: ID = ERR_PTR
Line 1500: (
Line 1500: -
Line 1500: ID = EEXIST
Line 1500: )
Line 1500: ;
Line 1501: if
Line 1501: (
Line 1501: ID = nd
Line 1501: -
Line 1501: >
Line 1501: ID = last_type
Line 1501: !=
Line 1501: ID = LAST_NORM
Line 1501: )
Line 1502: ID = goto
Line 1502: ID = fail
Line 1502: ;
Line 1503: ID = nd
Line 1503: -
Line 1503: >
Line 1503: ID = flags
Line 1503: Unrecognized token: 38
Line 1503: =
Line 1503: Unrecognized token: 126
Line 1503: ID = LOOKUP_PARENT
Line 1503: ;
Line 1504: ID = dentry
Line 1504: =
Line 1504: ID = lookup_hash
Line 1504: (
Line 1504: Unrecognized token: 38
Line 1504: ID = nd
Line 1504: -
Line 1504: >
Line 1504: ID = last
Line 1504: ,
Line 1504: ID = nd
Line 1504: -
Line 1504: >
Line 1504: ID = dentry
Line 1504: )
Line 1504: ;
Line 1505: if
Line 1505: (
Line 1505: ID = IS_ERR
Line 1505: (
Line 1505: ID = dentry
Line 1505: )
Line 1505: )
Line 1506: ID = goto
Line 1506: ID = fail
Line 1506: ;
Line 1507: if
Line 1507: (
Line 1507: !
Line 1507: ID = is_dir
Line 1507: &&
Line 1507: ID = nd
Line 1507: -
Line 1507: >
Line 1507: ID = last
Line 1507: Unrecognized token: 46
Line 1507: ID = name
Line 1507: [
Line 1507: ID = nd
Line 1507: -
Line 1507: >
Line 1507: ID = last
Line 1507: Unrecognized token: 46
Line 1507: ID = len
Line 1507: ]
Line 1507: &&
Line 1507: !
Line 1507: ID = dentry
Line 1507: -
Line 1507: >
Line 1507: ID = d_inode
Line 1507: )
Line 1508: ID = goto
Line 1508: ID = enoent
Line 1508: ;
Line 1509: return
Line 1509: ID = dentry
Line 1509: ;
Line 1510: ID = enoent
Line 1510: Unrecognized token: 58
Line 1511: ID = dput
Line 1511: (
Line 1511: ID = dentry
Line 1511: )
Line 1511: ;
Line 1512: ID = dentry
Line 1512: =
Line 1512: ID = ERR_PTR
Line 1512: (
Line 1512: -
Line 1512: ID = ENOENT
Line 1512: )
Line 1512: ;
Line 1513: ID = fail
Line 1513: Unrecognized token: 58
Line 1514: return
Line 1514: ID = dentry
Line 1514: ;
Line 1515: }
Line 1517: int
Line 1517: ID = vfs_mknod
Line 1517: (
Line 1517: ID = struct
Line 1517: ID = inode
Line 1517: *
Line 1517: ID = dir
Line 1517: ,
Line 1517: ID = struct
Line 1517: ID = dentry
Line 1517: *
Line 1517: ID = dentry
Line 1517: ,
Line 1517: int
Line 1517: ID = mode
Line 1517: ,
Line 1517: ID = dev_t
Line 1517: ID = dev
Line 1517: )
Line 1518: {
Line 1519: int
Line 1519: ID = error
Line 1519: =
Line 1519: ID = may_create
Line 1519: (
Line 1519: ID = dir
Line 1519: ,
Line 1519: ID = dentry
Line 1519: ,
Line 1519: ID = NULL
Line 1519: )
Line 1519: ;
Line 1521: if
Line 1521: (
Line 1521: ID = error
Line 1521: )
Line 1522: return
Line 1522: ID = error
Line 1522: ;
Line 1524: if
Line 1524: (
Line 1524: (
Line 1524: ID = S_ISCHR
Line 1524: (
Line 1524: ID = mode
Line 1524: )
Line 1524: ||
Line 1524: ID = S_ISBLK
Line 1524: (
Line 1524: ID = mode
Line 1524: )
Line 1524: )
Line 1524: &&
Line 1524: !
Line 1524: ID = capable
Line 1524: (
Line 1524: ID = CAP_MKNOD
Line 1524: )
Line 1524: )
Line 1525: return
Line 1525: -
Line 1525: ID = EPERM
Line 1525: ;
Line 1527: if
Line 1527: (
Line 1527: !
Line 1527: ID = dir
Line 1527: -
Line 1527: >
Line 1527: ID = i_op
Line 1527: ||
Line 1527: !
Line 1527: ID = dir
Line 1527: -
Line 1527: >
Line 1527: ID = i_op
Line 1527: -
Line 1527: >
Line 1527: ID = mknod
Line 1527: )
Line 1528: return
Line 1528: -
Line 1528: ID = EPERM
Line 1528: ;
Line 1530: ID = error
Line 1530: =
Line 1530: ID = security_inode_mknod
Line 1530: (
Line 1530: ID = dir
Line 1530: ,
Line 1530: ID = dentry
Line 1530: ,
Line 1530: ID = mode
Line 1530: ,
Line 1530: ID = dev
Line 1530: )
Line 1530: ;
Line 1531: if
Line 1531: (
Line 1531: ID = error
Line 1531: )
Line 1532: return
Line 1532: ID = error
Line 1532: ;
Line 1534: ID = DQUOT_INIT
Line 1534: (
Line 1534: ID = dir
Line 1534: )
Line 1534: ;
Line 1535: ID = error
Line 1535: =
Line 1535: ID = dir
Line 1535: -
Line 1535: >
Line 1535: ID = i_op
Line 1535: -
Line 1535: >
Line 1535: ID = mknod
Line 1535: (
Line 1535: ID = dir
Line 1535: ,
Line 1535: ID = dentry
Line 1535: ,
Line 1535: ID = mode
Line 1535: ,
Line 1535: ID = dev
Line 1535: )
Line 1535: ;
Line 1536: if
Line 1536: (
Line 1536: !
Line 1536: ID = error
Line 1536: )
Line 1536: {
Line 1537: ID = inode_dir_notify
Line 1537: (
Line 1537: ID = dir
Line 1537: ,
Line 1537: ID = DN_CREATE
Line 1537: )
Line 1537: ;
Line 1538: ID = security_inode_post_mknod
Line 1538: (
Line 1538: ID = dir
Line 1538: ,
Line 1538: ID = dentry
Line 1538: ,
Line 1538: ID = mode
Line 1538: ,
Line 1538: ID = dev
Line 1538: )
Line 1538: ;
Line 1539: }
Line 1540: return
Line 1540: ID = error
Line 1540: ;
Line 1541: }
Line 1543: ID = asmlinkage
Line 1543: ID = long
Line 1543: ID = sys_mknod
Line 1543: (
Line 1543: ID = const
Line 1543: char
Line 1543: Unrecognized token: 95
Line 1543: Unrecognized token: 95
Line 1543: ID = user
Line 1543: *
Line 1543: ID = filename
Line 1543: ,
Line 1543: int
Line 1543: ID = mode
Line 1543: ,
Line 1543: ID = unsigned
Line 1543: ID = dev
Line 1543: )
Line 1544: {
Line 1545: int
Line 1545: ID = error
Line 1545: =
Line 1545: INTCON = 0
Line 1545: ;
Line 1546: char
Line 1546: *
Line 1546: ID = tmp
Line 1546: ;
Line 1547: ID = struct
Line 1547: ID = dentry
Line 1547: *
Line 1547: ID = dentry
Line 1547: ;
Line 1548: ID = struct
Line 1548: ID = nameidata
Line 1548: ID = nd
Line 1548: ;
Line 1550: if
Line 1550: (
Line 1550: ID = S_ISDIR
Line 1550: (
Line 1550: ID = mode
Line 1550: )
Line 1550: )
Line 1551: return
Line 1551: -
Line 1551: ID = EPERM
Line 1551: ;
Line 1552: ID = tmp
Line 1552: =
Line 1552: ID = getname
Line 1552: (
Line 1552: ID = filename
Line 1552: )
Line 1552: ;
Line 1553: if
Line 1553: (
Line 1553: ID = IS_ERR
Line 1553: (
Line 1553: ID = tmp
Line 1553: )
Line 1553: )
Line 1554: return
Line 1554: ID = PTR_ERR
Line 1554: (
Line 1554: ID = tmp
Line 1554: )
Line 1554: ;
Line 1556: ID = error
Line 1556: =
Line 1556: ID = path_lookup
Line 1556: (
Line 1556: ID = tmp
Line 1556: ,
Line 1556: ID = LOOKUP_PARENT
Line 1556: ,
Line 1556: Unrecognized token: 38
Line 1556: ID = nd
Line 1556: )
Line 1556: ;
Line 1557: if
Line 1557: (
Line 1557: ID = error
Line 1557: )
Line 1558: ID = goto
Line 1558: ID = out
Line 1558: ;
Line 1559: ID = dentry
Line 1559: =
Line 1559: ID = lookup_create
Line 1559: (
Line 1559: Unrecognized token: 38
Line 1559: ID = nd
Line 1559: ,
Line 1559: INTCON = 0
Line 1559: )
Line 1559: ;
Line 1560: ID = error
Line 1560: =
Line 1560: ID = PTR_ERR
Line 1560: (
Line 1560: ID = dentry
Line 1560: )
Line 1560: ;
Line 1562: if
Line 1562: (
Line 1562: !
Line 1562: ID = IS_POSIXACL
Line 1562: (
Line 1562: ID = nd
Line 1562: Unrecognized token: 46
Line 1562: ID = dentry
Line 1562: -
Line 1562: >
Line 1562: ID = d_inode
Line 1562: )
Line 1562: )
Line 1563: ID = mode
Line 1563: Unrecognized token: 38
Line 1563: =
Line 1563: Unrecognized token: 126
Line 1563: ID = current
Line 1563: -
Line 1563: >
Line 1563: ID = fs
Line 1563: -
Line 1563: >
Line 1563: ID = umask
Line 1563: ;
Line 1564: if
Line 1564: (
Line 1564: !
Line 1564: ID = IS_ERR
Line 1564: (
Line 1564: ID = dentry
Line 1564: )
Line 1564: )
Line 1564: {
Line 1565: ID = switch
Line 1565: (
Line 1565: ID = mode
Line 1565: Unrecognized token: 38
Line 1565: ID = S_IFMT
Line 1565: )
Line 1565: {
Line 1566: ID = case
Line 1566: INTCON = 0
Line 1566: Unrecognized token: 58
Line 1566: ID = case
Line 1566: ID = S_IFREG
Line 1566: Unrecognized token: 58
Line 1567: ID = error
Line 1567: =
Line 1567: ID = vfs_create
Line 1567: (
Line 1567: ID = nd
Line 1567: Unrecognized token: 46
Line 1567: ID = dentry
Line 1567: -
Line 1567: >
Line 1567: ID = d_inode
Line 1567: ,
Line 1567: ID = dentry
Line 1567: ,
Line 1567: ID = mode
Line 1567: ,
Line 1567: Unrecognized token: 38
Line 1567: ID = nd
Line 1567: )
Line 1567: ;
Line 1568: ID = break
Line 1568: ;
Line 1569: ID = case
Line 1569: ID = S_IFCHR
Line 1569: Unrecognized token: 58
Line 1569: ID = case
Line 1569: ID = S_IFBLK
Line 1569: Unrecognized token: 58
Line 1570: ID = error
Line 1570: =
Line 1570: ID = vfs_mknod
Line 1570: (
Line 1570: ID = nd
Line 1570: Unrecognized token: 46
Line 1570: ID = dentry
Line 1570: -
Line 1570: >
Line 1570: ID = d_inode
Line 1570: ,
Line 1570: ID = dentry
Line 1570: ,
Line 1570: ID = mode
Line 1570: ,
Line 1571: ID = new_decode_dev
Line 1571: (
Line 1571: ID = dev
Line 1571: )
Line 1571: )
Line 1571: ;
Line 1572: ID = break
Line 1572: ;
Line 1573: ID = case
Line 1573: ID = S_IFIFO
Line 1573: Unrecognized token: 58
Line 1573: ID = case
Line 1573: ID = S_IFSOCK
Line 1573: Unrecognized token: 58
Line 1574: ID = error
Line 1574: =
Line 1574: ID = vfs_mknod
Line 1574: (
Line 1574: ID = nd
Line 1574: Unrecognized token: 46
Line 1574: ID = dentry
Line 1574: -
Line 1574: >
Line 1574: ID = d_inode
Line 1574: ,
Line 1574: ID = dentry
Line 1574: ,
Line 1574: ID = mode
Line 1574: ,
Line 1574: INTCON = 0
Line 1574: )
Line 1574: ;
Line 1575: ID = break
Line 1575: ;
Line 1576: ID = case
Line 1576: ID = S_IFDIR
Line 1576: Unrecognized token: 58
Line 1577: ID = error
Line 1577: =
Line 1577: -
Line 1577: ID = EPERM
Line 1577: ;
Line 1578: ID = break
Line 1578: ;
Line 1579: ID = default
Line 1579: Unrecognized token: 58
Line 1580: ID = error
Line 1580: =
Line 1580: -
Line 1580: ID = EINVAL
Line 1580: ;
Line 1581: }
Line 1582: ID = dput
Line 1582: (
Line 1582: ID = dentry
Line 1582: )
Line 1582: ;
Line 1583: }
Line 1584: ID = up
Line 1584: (
Line 1584: Unrecognized token: 38
Line 1584: ID = nd
Line 1584: Unrecognized token: 46
Line 1584: ID = dentry
Line 1584: -
Line 1584: >
Line 1584: ID = d_inode
Line 1584: -
Line 1584: >
Line 1584: ID = i_sem
Line 1584: )
Line 1584: ;
Line 1585: ID = path_release
Line 1585: (
Line 1585: Unrecognized token: 38
Line 1585: ID = nd
Line 1585: )
Line 1585: ;
Line 1586: ID = out
Line 1586: Unrecognized token: 58
Line 1587: ID = putname
Line 1587: (
Line 1587: ID = tmp
Line 1587: )
Line 1587: ;
Line 1589: return
Line 1589: ID = error
Line 1589: ;
Line 1590: }
Line 1592: int
Line 1592: ID = vfs_mkdir
Line 1592: (
Line 1592: ID = struct
Line 1592: ID = inode
Line 1592: *
Line 1592: ID = dir
Line 1592: ,
Line 1592: ID = struct
Line 1592: ID = dentry
Line 1592: *
Line 1592: ID = dentry
Line 1592: ,
Line 1592: int
Line 1592: ID = mode
Line 1592: )
Line 1593: {
Line 1594: int
Line 1594: ID = error
Line 1594: =
Line 1594: ID = may_create
Line 1594: (
Line 1594: ID = dir
Line 1594: ,
Line 1594: ID = dentry
Line 1594: ,
Line 1594: ID = NULL
Line 1594: )
Line 1594: ;
Line 1596: if
Line 1596: (
Line 1596: ID = error
Line 1596: )
Line 1597: return
Line 1597: ID = error
Line 1597: ;
Line 1599: if
Line 1599: (
Line 1599: !
Line 1599: ID = dir
Line 1599: -
Line 1599: >
Line 1599: ID = i_op
Line 1599: ||
Line 1599: !
Line 1599: ID = dir
Line 1599: -
Line 1599: >
Line 1599: ID = i_op
Line 1599: -
Line 1599: >
Line 1599: ID = mkdir
Line 1599: )
Line 1600: return
Line 1600: -
Line 1600: ID = EPERM
Line 1600: ;
Line 1602: ID = mode
Line 1602: Unrecognized token: 38
Line 1602: =
Line 1602: (
Line 1602: ID = S_IRWXUGO
Line 1602: Unrecognized token: 124
Line 1602: ID = S_ISVTX
Line 1602: )
Line 1602: ;
Line 1603: ID = error
Line 1603: =
Line 1603: ID = security_inode_mkdir
Line 1603: (
Line 1603: ID = dir
Line 1603: ,
Line 1603: ID = dentry
Line 1603: ,
Line 1603: ID = mode
Line 1603: )
Line 1603: ;
Line 1604: if
Line 1604: (
Line 1604: ID = error
Line 1604: )
Line 1605: return
Line 1605: ID = error
Line 1605: ;
Line 1607: ID = DQUOT_INIT
Line 1607: (
Line 1607: ID = dir
Line 1607: )
Line 1607: ;
Line 1608: ID = error
Line 1608: =
Line 1608: ID = dir
Line 1608: -
Line 1608: >
Line 1608: ID = i_op
Line 1608: -
Line 1608: >
Line 1608: ID = mkdir
Line 1608: (
Line 1608: ID = dir
Line 1608: ,
Line 1608: ID = dentry
Line 1608: ,
Line 1608: ID = mode
Line 1608: )
Line 1608: ;
Line 1609: if
Line 1609: (
Line 1609: !
Line 1609: ID = error
Line 1609: )
Line 1609: {
Line 1610: ID = inode_dir_notify
Line 1610: (
Line 1610: ID = dir
Line 1610: ,
Line 1610: ID = DN_CREATE
Line 1610: )
Line 1610: ;
Line 1611: ID = security_inode_post_mkdir
Line 1611: (
Line 1611: ID = dir
Line 1611: ,
Line 1611: ID = dentry
Line 1611: ,
Line 1611: ID = mode
Line 1611: )
Line 1611: ;
Line 1612: }
Line 1613: return
Line 1613: ID = error
Line 1613: ;
Line 1614: }
Line 1616: ID = asmlinkage
Line 1616: ID = long
Line 1616: ID = sys_mkdir
Line 1616: (
Line 1616: ID = const
Line 1616: char
Line 1616: Unrecognized token: 95
Line 1616: Unrecognized token: 95
Line 1616: ID = user
Line 1616: *
Line 1616: ID = pathname
Line 1616: ,
Line 1616: int
Line 1616: ID = mode
Line 1616: )
Line 1617: {
Line 1618: int
Line 1618: ID = error
Line 1618: =
Line 1618: INTCON = 0
Line 1618: ;
Line 1619: char
Line 1619: *
Line 1619: ID = tmp
Line 1619: ;
Line 1621: ID = tmp
Line 1621: =
Line 1621: ID = getname
Line 1621: (
Line 1621: ID = pathname
Line 1621: )
Line 1621: ;
Line 1622: ID = error
Line 1622: =
Line 1622: ID = PTR_ERR
Line 1622: (
Line 1622: ID = tmp
Line 1622: )
Line 1622: ;
Line 1623: if
Line 1623: (
Line 1623: !
Line 1623: ID = IS_ERR
Line 1623: (
Line 1623: ID = tmp
Line 1623: )
Line 1623: )
Line 1623: {
Line 1624: ID = struct
Line 1624: ID = dentry
Line 1624: *
Line 1624: ID = dentry
Line 1624: ;
Line 1625: ID = struct
Line 1625: ID = nameidata
Line 1625: ID = nd
Line 1625: ;
Line 1627: ID = error
Line 1627: =
Line 1627: ID = path_lookup
Line 1627: (
Line 1627: ID = tmp
Line 1627: ,
Line 1627: ID = LOOKUP_PARENT
Line 1627: ,
Line 1627: Unrecognized token: 38
Line 1627: ID = nd
Line 1627: )
Line 1627: ;
Line 1628: if
Line 1628: (
Line 1628: ID = error
Line 1628: )
Line 1629: ID = goto
Line 1629: ID = out
Line 1629: ;
Line 1630: ID = dentry
Line 1630: =
Line 1630: ID = lookup_create
Line 1630: (
Line 1630: Unrecognized token: 38
Line 1630: ID = nd
Line 1630: ,
Line 1630: INTCON = 1
Line 1630: )
Line 1630: ;
Line 1631: ID = error
Line 1631: =
Line 1631: ID = PTR_ERR
Line 1631: (
Line 1631: ID = dentry
Line 1631: )
Line 1631: ;
Line 1632: if
Line 1632: (
Line 1632: !
Line 1632: ID = IS_ERR
Line 1632: (
Line 1632: ID = dentry
Line 1632: )
Line 1632: )
Line 1632: {
Line 1633: if
Line 1633: (
Line 1633: !
Line 1633: ID = IS_POSIXACL
Line 1633: (
Line 1633: ID = nd
Line 1633: Unrecognized token: 46
Line 1633: ID = dentry
Line 1633: -
Line 1633: >
Line 1633: ID = d_inode
Line 1633: )
Line 1633: )
Line 1634: ID = mode
Line 1634: Unrecognized token: 38
Line 1634: =
Line 1634: Unrecognized token: 126
Line 1634: ID = current
Line 1634: -
Line 1634: >
Line 1634: ID = fs
Line 1634: -
Line 1634: >
Line 1634: ID = umask
Line 1634: ;
Line 1635: ID = error
Line 1635: =
Line 1635: ID = vfs_mkdir
Line 1635: (
Line 1635: ID = nd
Line 1635: Unrecognized token: 46
Line 1635: ID = dentry
Line 1635: -
Line 1635: >
Line 1635: ID = d_inode
Line 1635: ,
Line 1635: ID = dentry
Line 1635: ,
Line 1635: ID = mode
Line 1635: )
Line 1635: ;
Line 1636: ID = dput
Line 1636: (
Line 1636: ID = dentry
Line 1636: )
Line 1636: ;
Line 1637: }
Line 1638: ID = up
Line 1638: (
Line 1638: Unrecognized token: 38
Line 1638: ID = nd
Line 1638: Unrecognized token: 46
Line 1638: ID = dentry
Line 1638: -
Line 1638: >
Line 1638: ID = d_inode
Line 1638: -
Line 1638: >
Line 1638: ID = i_sem
Line 1638: )
Line 1638: ;
Line 1639: ID = path_release
Line 1639: (
Line 1639: Unrecognized token: 38
Line 1639: ID = nd
Line 1639: )
Line 1639: ;
Line 1640: ID = out
Line 1640: Unrecognized token: 58
Line 1641: ID = putname
Line 1641: (
Line 1641: ID = tmp
Line 1641: )
Line 1641: ;
Line 1642: }
Line 1644: return
Line 1644: ID = error
Line 1644: ;
Line 1645: }
Line 1662: ID = static
Line 1662: void
Line 1662: ID = d_unhash
Line 1662: (
Line 1662: ID = struct
Line 1662: ID = dentry
Line 1662: *
Line 1662: ID = dentry
Line 1662: )
Line 1663: {
Line 1664: ID = dget
Line 1664: (
Line 1664: ID = dentry
Line 1664: )
Line 1664: ;
Line 1665: ID = spin_lock
Line 1665: (
Line 1665: Unrecognized token: 38
Line 1665: ID = dcache_lock
Line 1665: )
Line 1665: ;
Line 1666: ID = switch
Line 1666: (
Line 1666: ID = atomic_read
Line 1666: (
Line 1666: Unrecognized token: 38
Line 1666: ID = dentry
Line 1666: -
Line 1666: >
Line 1666: ID = d_count
Line 1666: )
Line 1666: )
Line 1666: {
Line 1667: ID = default
Line 1667: Unrecognized token: 58
Line 1668: ID = spin_unlock
Line 1668: (
Line 1668: Unrecognized token: 38
Line 1668: ID = dcache_lock
Line 1668: )
Line 1668: ;
Line 1669: ID = shrink_dcache_parent
Line 1669: (
Line 1669: ID = dentry
Line 1669: )
Line 1669: ;
Line 1670: ID = spin_lock
Line 1670: (
Line 1670: Unrecognized token: 38
Line 1670: ID = dcache_lock
Line 1670: )
Line 1670: ;
Line 1671: if
Line 1671: (
Line 1671: ID = atomic_read
Line 1671: (
Line 1671: Unrecognized token: 38
Line 1671: ID = dentry
Line 1671: -
Line 1671: >
Line 1671: ID = d_count
Line 1671: )
Line 1671: !=
Line 1671: INTCON = 2
Line 1671: )
Line 1672: ID = break
Line 1672: ;
Line 1673: ID = case
Line 1673: INTCON = 2
Line 1673: Unrecognized token: 58
Line 1674: Unrecognized token: 95
Line 1674: Unrecognized token: 95
Line 1674: ID = d_drop
Line 1674: (
Line 1674: ID = dentry
Line 1674: )
Line 1674: ;
Line 1675: }
Line 1676: ID = spin_unlock
Line 1676: (
Line 1676: Unrecognized token: 38
Line 1676: ID = dcache_lock
Line 1676: )
Line 1676: ;
Line 1677: }
Line 1679: int
Line 1679: ID = vfs_rmdir
Line 1679: (
Line 1679: ID = struct
Line 1679: ID = inode
Line 1679: *
Line 1679: ID = dir
Line 1679: ,
Line 1679: ID = struct
Line 1679: ID = dentry
Line 1679: *
Line 1679: ID = dentry
Line 1679: )
Line 1680: {
Line 1681: int
Line 1681: ID = error
Line 1681: =
Line 1681: ID = may_delete
Line 1681: (
Line 1681: ID = dir
Line 1681: ,
Line 1681: ID = dentry
Line 1681: ,
Line 1681: INTCON = 1
Line 1681: )
Line 1681: ;
Line 1683: if
Line 1683: (
Line 1683: ID = error
Line 1683: )
Line 1684: return
Line 1684: ID = error
Line 1684: ;
Line 1686: if
Line 1686: (
Line 1686: !
Line 1686: ID = dir
Line 1686: -
Line 1686: >
Line 1686: ID = i_op
Line 1686: ||
Line 1686: !
Line 1686: ID = dir
Line 1686: -
Line 1686: >
Line 1686: ID = i_op
Line 1686: -
Line 1686: >
Line 1686: ID = rmdir
Line 1686: )
Line 1687: return
Line 1687: -
Line 1687: ID = EPERM
Line 1687: ;
Line 1689: ID = DQUOT_INIT
Line 1689: (
Line 1689: ID = dir
Line 1689: )
Line 1689: ;
Line 1691: ID = down
Line 1691: (
Line 1691: Unrecognized token: 38
Line 1691: ID = dentry
Line 1691: -
Line 1691: >
Line 1691: ID = d_inode
Line 1691: -
Line 1691: >
Line 1691: ID = i_sem
Line 1691: )
Line 1691: ;
Line 1692: ID = d_unhash
Line 1692: (
Line 1692: ID = dentry
Line 1692: )
Line 1692: ;
Line 1693: if
Line 1693: (
Line 1693: ID = d_mountpoint
Line 1693: (
Line 1693: ID = dentry
Line 1693: )
Line 1693: )
Line 1694: ID = error
Line 1694: =
Line 1694: -
Line 1694: ID = EBUSY
Line 1694: ;
Line 1695: else
Line 1695: {
Line 1696: ID = error
Line 1696: =
Line 1696: ID = security_inode_rmdir
Line 1696: (
Line 1696: ID = dir
Line 1696: ,
Line 1696: ID = dentry
Line 1696: )
Line 1696: ;
Line 1697: if
Line 1697: (
Line 1697: !
Line 1697: ID = error
Line 1697: )
Line 1697: {
Line 1698: ID = error
Line 1698: =
Line 1698: ID = dir
Line 1698: -
Line 1698: >
Line 1698: ID = i_op
Line 1698: -
Line 1698: >
Line 1698: ID = rmdir
Line 1698: (
Line 1698: ID = dir
Line 1698: ,
Line 1698: ID = dentry
Line 1698: )
Line 1698: ;
Line 1699: if
Line 1699: (
Line 1699: !
Line 1699: ID = error
Line 1699: )
Line 1700: ID = dentry
Line 1700: -
Line 1700: >
Line 1700: ID = d_inode
Line 1700: -
Line 1700: >
Line 1700: ID = i_flags
Line 1700: Unrecognized token: 124
Line 1700: =
Line 1700: ID = S_DEAD
Line 1700: ;
Line 1701: }
Line 1702: }
Line 1703: ID = up
Line 1703: (
Line 1703: Unrecognized token: 38
Line 1703: ID = dentry
Line 1703: -
Line 1703: >
Line 1703: ID = d_inode
Line 1703: -
Line 1703: >
Line 1703: ID = i_sem
Line 1703: )
Line 1703: ;
Line 1704: if
Line 1704: (
Line 1704: !
Line 1704: ID = error
Line 1704: )
Line 1704: {
Line 1705: ID = inode_dir_notify
Line 1705: (
Line 1705: ID = dir
Line 1705: ,
Line 1705: ID = DN_DELETE
Line 1705: )
Line 1705: ;
Line 1706: ID = d_delete
Line 1706: (
Line 1706: ID = dentry
Line 1706: )
Line 1706: ;
Line 1707: }
Line 1708: ID = dput
Line 1708: (
Line 1708: ID = dentry
Line 1708: )
Line 1708: ;
Line 1710: return
Line 1710: ID = error
Line 1710: ;
Line 1711: }
Line 1713: ID = asmlinkage
Line 1713: ID = long
Line 1713: ID = sys_rmdir
Line 1713: (
Line 1713: ID = const
Line 1713: char
Line 1713: Unrecognized token: 95
Line 1713: Unrecognized token: 95
Line 1713: ID = user
Line 1713: *
Line 1713: ID = pathname
Line 1713: )
Line 1714: {
Line 1715: int
Line 1715: ID = error
Line 1715: =
Line 1715: INTCON = 0
Line 1715: ;
Line 1716: char
Line 1716: *
Line 1716: ID = name
Line 1716: ;
Line 1717: ID = struct
Line 1717: ID = dentry
Line 1717: *
Line 1717: ID = dentry
Line 1717: ;
Line 1718: ID = struct
Line 1718: ID = nameidata
Line 1718: ID = nd
Line 1718: ;
Line 1720: ID = name
Line 1720: =
Line 1720: ID = getname
Line 1720: (
Line 1720: ID = pathname
Line 1720: )
Line 1720: ;
Line 1721: if
Line 1721: (
Line 1721: ID = IS_ERR
Line 1721: (
Line 1721: ID = name
Line 1721: )
Line 1721: )
Line 1722: return
Line 1722: ID = PTR_ERR
Line 1722: (
Line 1722: ID = name
Line 1722: )
Line 1722: ;
Line 1724: ID = error
Line 1724: =
Line 1724: ID = path_lookup
Line 1724: (
Line 1724: ID = name
Line 1724: ,
Line 1724: ID = LOOKUP_PARENT
Line 1724: ,
Line 1724: Unrecognized token: 38
Line 1724: ID = nd
Line 1724: )
Line 1724: ;
Line 1725: if
Line 1725: (
Line 1725: ID = error
Line 1725: )
Line 1726: ID = goto
Line 1726: ID = exit
Line 1726: ;
Line 1728: ID = switch
Line 1728: (
Line 1728: ID = nd
Line 1728: Unrecognized token: 46
Line 1728: ID = last_type
Line 1728: )
Line 1728: {
Line 1729: ID = case
Line 1729: ID = LAST_DOTDOT
Line 1729: Unrecognized token: 58
Line 1730: ID = error
Line 1730: =
Line 1730: -
Line 1730: ID = ENOTEMPTY
Line 1730: ;
Line 1731: ID = goto
Line 1731: ID = exit1
Line 1731: ;
Line 1732: ID = case
Line 1732: ID = LAST_DOT
Line 1732: Unrecognized token: 58
Line 1733: ID = error
Line 1733: =
Line 1733: -
Line 1733: ID = EINVAL
Line 1733: ;
Line 1734: ID = goto
Line 1734: ID = exit1
Line 1734: ;
Line 1735: ID = case
Line 1735: ID = LAST_ROOT
Line 1735: Unrecognized token: 58
Line 1736: ID = error
Line 1736: =
Line 1736: -
Line 1736: ID = EBUSY
Line 1736: ;
Line 1737: ID = goto
Line 1737: ID = exit1
Line 1737: ;
Line 1738: }
Line 1739: ID = down
Line 1739: (
Line 1739: Unrecognized token: 38
Line 1739: ID = nd
Line 1739: Unrecognized token: 46
Line 1739: ID = dentry
Line 1739: -
Line 1739: >
Line 1739: ID = d_inode
Line 1739: -
Line 1739: >
Line 1739: ID = i_sem
Line 1739: )
Line 1739: ;
Line 1740: ID = dentry
Line 1740: =
Line 1740: ID = lookup_hash
Line 1740: (
Line 1740: Unrecognized token: 38
Line 1740: ID = nd
Line 1740: Unrecognized token: 46
Line 1740: ID = last
Line 1740: ,
Line 1740: ID = nd
Line 1740: Unrecognized token: 46
Line 1740: ID = dentry
Line 1740: )
Line 1740: ;
Line 1741: ID = error
Line 1741: =
Line 1741: ID = PTR_ERR
Line 1741: (
Line 1741: ID = dentry
Line 1741: )
Line 1741: ;
Line 1742: if
Line 1742: (
Line 1742: !
Line 1742: ID = IS_ERR
Line 1742: (
Line 1742: ID = dentry
Line 1742: )
Line 1742: )
Line 1742: {
Line 1743: ID = error
Line 1743: =
Line 1743: ID = vfs_rmdir
Line 1743: (
Line 1743: ID = nd
Line 1743: Unrecognized token: 46
Line 1743: ID = dentry
Line 1743: -
Line 1743: >
Line 1743: ID = d_inode
Line 1743: ,
Line 1743: ID = dentry
Line 1743: )
Line 1743: ;
Line 1744: ID = dput
Line 1744: (
Line 1744: ID = dentry
Line 1744: )
Line 1744: ;
Line 1745: }
Line 1746: ID = up
Line 1746: (
Line 1746: Unrecognized token: 38
Line 1746: ID = nd
Line 1746: Unrecognized token: 46
Line 1746: ID = dentry
Line 1746: -
Line 1746: >
Line 1746: ID = d_inode
Line 1746: -
Line 1746: >
Line 1746: ID = i_sem
Line 1746: )
Line 1746: ;
Line 1747: ID = exit1
Line 1747: Unrecognized token: 58
Line 1748: ID = path_release
Line 1748: (
Line 1748: Unrecognized token: 38
Line 1748: ID = nd
Line 1748: )
Line 1748: ;
Line 1749: ID = exit
Line 1749: Unrecognized token: 58
Line 1750: ID = putname
Line 1750: (
Line 1750: ID = name
Line 1750: )
Line 1750: ;
Line 1751: return
Line 1751: ID = error
Line 1751: ;
Line 1752: }
Line 1754: int
Line 1754: ID = vfs_unlink
Line 1754: (
Line 1754: ID = struct
Line 1754: ID = inode
Line 1754: *
Line 1754: ID = dir
Line 1754: ,
Line 1754: ID = struct
Line 1754: ID = dentry
Line 1754: *
Line 1754: ID = dentry
Line 1754: )
Line 1755: {
Line 1756: int
Line 1756: ID = error
Line 1756: =
Line 1756: ID = may_delete
Line 1756: (
Line 1756: ID = dir
Line 1756: ,
Line 1756: ID = dentry
Line 1756: ,
Line 1756: INTCON = 0
Line 1756: )
Line 1756: ;
Line 1758: if
Line 1758: (
Line 1758: ID = error
Line 1758: )
Line 1759: return
Line 1759: ID = error
Line 1759: ;
Line 1761: if
Line 1761: (
Line 1761: !
Line 1761: ID = dir
Line 1761: -
Line 1761: >
Line 1761: ID = i_op
Line 1761: ||
Line 1761: !
Line 1761: ID = dir
Line 1761: -
Line 1761: >
Line 1761: ID = i_op
Line 1761: -
Line 1761: >
Line 1761: ID = unlink
Line 1761: )
Line 1762: return
Line 1762: -
Line 1762: ID = EPERM
Line 1762: ;
Line 1764: ID = DQUOT_INIT
Line 1764: (
Line 1764: ID = dir
Line 1764: )
Line 1764: ;
Line 1766: ID = down
Line 1766: (
Line 1766: Unrecognized token: 38
Line 1766: ID = dentry
Line 1766: -
Line 1766: >
Line 1766: ID = d_inode
Line 1766: -
Line 1766: >
Line 1766: ID = i_sem
Line 1766: )
Line 1766: ;
Line 1767: if
Line 1767: (
Line 1767: ID = d_mountpoint
Line 1767: (
Line 1767: ID = dentry
Line 1767: )
Line 1767: )
Line 1768: ID = error
Line 1768: =
Line 1768: -
Line 1768: ID = EBUSY
Line 1768: ;
Line 1769: else
Line 1769: {
Line 1770: ID = error
Line 1770: =
Line 1770: ID = security_inode_unlink
Line 1770: (
Line 1770: ID = dir
Line 1770: ,
Line 1770: ID = dentry
Line 1770: )
Line 1770: ;
Line 1771: if
Line 1771: (
Line 1771: !
Line 1771: ID = error
Line 1771: )
Line 1772: ID = error
Line 1772: =
Line 1772: ID = dir
Line 1772: -
Line 1772: >
Line 1772: ID = i_op
Line 1772: -
Line 1772: >
Line 1772: ID = unlink
Line 1772: (
Line 1772: ID = dir
Line 1772: ,
Line 1772: ID = dentry
Line 1772: )
Line 1772: ;
Line 1773: }
Line 1774: ID = up
Line 1774: (
Line 1774: Unrecognized token: 38
Line 1774: ID = dentry
Line 1774: -
Line 1774: >
Line 1774: ID = d_inode
Line 1774: -
Line 1774: >
Line 1774: ID = i_sem
Line 1774: )
Line 1774: ;
Line 1777: if
Line 1777: (
Line 1777: !
Line 1777: ID = error
Line 1777: &&
Line 1777: !
Line 1777: (
Line 1777: ID = dentry
Line 1777: -
Line 1777: >
Line 1777: ID = d_flags
Line 1777: Unrecognized token: 38
Line 1777: ID = DCACHE_NFSFS_RENAMED
Line 1777: )
Line 1777: )
Line 1777: {
Line 1778: ID = d_delete
Line 1778: (
Line 1778: ID = dentry
Line 1778: )
Line 1778: ;
Line 1779: ID = inode_dir_notify
Line 1779: (
Line 1779: ID = dir
Line 1779: ,
Line 1779: ID = DN_DELETE
Line 1779: )
Line 1779: ;
Line 1780: }
Line 1781: return
Line 1781: ID = error
Line 1781: ;
Line 1782: }
Line 1790: ID = asmlinkage
Line 1790: ID = long
Line 1790: ID = sys_unlink
Line 1790: (
Line 1790: ID = const
Line 1790: char
Line 1790: Unrecognized token: 95
Line 1790: Unrecognized token: 95
Line 1790: ID = user
Line 1790: *
Line 1790: ID = pathname
Line 1790: )
Line 1791: {
Line 1792: int
Line 1792: ID = error
Line 1792: =
Line 1792: INTCON = 0
Line 1792: ;
Line 1793: char
Line 1793: *
Line 1793: ID = name
Line 1793: ;
Line 1794: ID = struct
Line 1794: ID = dentry
Line 1794: *
Line 1794: ID = dentry
Line 1794: ;
Line 1795: ID = struct
Line 1795: ID = nameidata
Line 1795: ID = nd
Line 1795: ;
Line 1796: ID = struct
Line 1796: ID = inode
Line 1796: *
Line 1796: ID = inode
Line 1796: =
Line 1796: ID = NULL
Line 1796: ;
Line 1798: ID = name
Line 1798: =
Line 1798: ID = getname
Line 1798: (
Line 1798: ID = pathname
Line 1798: )
Line 1798: ;
Line 1799: if
Line 1799: (
Line 1799: ID = IS_ERR
Line 1799: (
Line 1799: ID = name
Line 1799: )
Line 1799: )
Line 1800: return
Line 1800: ID = PTR_ERR
Line 1800: (
Line 1800: ID = name
Line 1800: )
Line 1800: ;
Line 1802: ID = error
Line 1802: =
Line 1802: ID = path_lookup
Line 1802: (
Line 1802: ID = name
Line 1802: ,
Line 1802: ID = LOOKUP_PARENT
Line 1802: ,
Line 1802: Unrecognized token: 38
Line 1802: ID = nd
Line 1802: )
Line 1802: ;
Line 1803: if
Line 1803: (
Line 1803: ID = error
Line 1803: )
Line 1804: ID = goto
Line 1804: ID = exit
Line 1804: ;
Line 1805: ID = error
Line 1805: =
Line 1805: -
Line 1805: ID = EISDIR
Line 1805: ;
Line 1806: if
Line 1806: (
Line 1806: ID = nd
Line 1806: Unrecognized token: 46
Line 1806: ID = last_type
Line 1806: !=
Line 1806: ID = LAST_NORM
Line 1806: )
Line 1807: ID = goto
Line 1807: ID = exit1
Line 1807: ;
Line 1808: ID = down
Line 1808: (
Line 1808: Unrecognized token: 38
Line 1808: ID = nd
Line 1808: Unrecognized token: 46
Line 1808: ID = dentry
Line 1808: -
Line 1808: >
Line 1808: ID = d_inode
Line 1808: -
Line 1808: >
Line 1808: ID = i_sem
Line 1808: )
Line 1808: ;
Line 1809: ID = dentry
Line 1809: =
Line 1809: ID = lookup_hash
Line 1809: (
Line 1809: Unrecognized token: 38
Line 1809: ID = nd
Line 1809: Unrecognized token: 46
Line 1809: ID = last
Line 1809: ,
Line 1809: ID = nd
Line 1809: Unrecognized token: 46
Line 1809: ID = dentry
Line 1809: )
Line 1809: ;
Line 1810: ID = error
Line 1810: =
Line 1810: ID = PTR_ERR
Line 1810: (
Line 1810: ID = dentry
Line 1810: )
Line 1810: ;
Line 1811: if
Line 1811: (
Line 1811: !
Line 1811: ID = IS_ERR
Line 1811: (
Line 1811: ID = dentry
Line 1811: )
Line 1811: )
Line 1811: {
Line 1813: if
Line 1813: (
Line 1813: ID = nd
Line 1813: Unrecognized token: 46
Line 1813: ID = last
Line 1813: Unrecognized token: 46
Line 1813: ID = name
Line 1813: [
Line 1813: ID = nd
Line 1813: Unrecognized token: 46
Line 1813: ID = last
Line 1813: Unrecognized token: 46
Line 1813: ID = len
Line 1813: ]
Line 1813: )
Line 1814: ID = goto
Line 1814: ID = slashes
Line 1814: ;
Line 1815: ID = inode
Line 1815: =
Line 1815: ID = dentry
Line 1815: -
Line 1815: >
Line 1815: ID = d_inode
Line 1815: ;
Line 1816: if
Line 1816: (
Line 1816: ID = inode
Line 1816: )
Line 1817: ID = atomic_inc
Line 1817: (
Line 1817: Unrecognized token: 38
Line 1817: ID = inode
Line 1817: -
Line 1817: >
Line 1817: ID = i_count
Line 1817: )
Line 1817: ;
Line 1818: ID = error
Line 1818: =
Line 1818: ID = vfs_unlink
Line 1818: (
Line 1818: ID = nd
Line 1818: Unrecognized token: 46
Line 1818: ID = dentry
Line 1818: -
Line 1818: >
Line 1818: ID = d_inode
Line 1818: ,
Line 1818: ID = dentry
Line 1818: )
Line 1818: ;
Line 1819: ID = exit2
Line 1819: Unrecognized token: 58
Line 1820: ID = dput
Line 1820: (
Line 1820: ID = dentry
Line 1820: )
Line 1820: ;
Line 1821: }
Line 1822: ID = up
Line 1822: (
Line 1822: Unrecognized token: 38
Line 1822: ID = nd
Line 1822: Unrecognized token: 46
Line 1822: ID = dentry
Line 1822: -
Line 1822: >
Line 1822: ID = d_inode
Line 1822: -
Line 1822: >
Line 1822: ID = i_sem
Line 1822: )
Line 1822: ;
Line 1823: ID = exit1
Line 1823: Unrecognized token: 58
Line 1824: ID = path_release
Line 1824: (
Line 1824: Unrecognized token: 38
Line 1824: ID = nd
Line 1824: )
Line 1824: ;
Line 1825: ID = exit
Line 1825: Unrecognized token: 58
Line 1826: ID = putname
Line 1826: (
Line 1826: ID = name
Line 1826: )
Line 1826: ;
Line 1828: if
Line 1828: (
Line 1828: ID = inode
Line 1828: )
Line 1829: ID = iput
Line 1829: (
Line 1829: ID = inode
Line 1829: )
Line 1829: ;
Line 1830: return
Line 1830: ID = error
Line 1830: ;
Line 1832: ID = slashes
Line 1832: Unrecognized token: 58
Line 1833: ID = error
Line 1833: =
Line 1833: !
Line 1833: ID = dentry
Line 1833: -
Line 1833: >
Line 1833: ID = d_inode
Line 1833: Unrecognized token: 63
Line 1833: -
Line 1833: ID = ENOENT
Line 1833: Unrecognized token: 58
Line 1834: ID = S_ISDIR
Line 1834: (
Line 1834: ID = dentry
Line 1834: -
Line 1834: >
Line 1834: ID = d_inode
Line 1834: -
Line 1834: >
Line 1834: ID = i_mode
Line 1834: )
Line 1834: Unrecognized token: 63
Line 1834: -
Line 1834: ID = EISDIR
Line 1834: Unrecognized token: 58
Line 1834: -
Line 1834: ID = ENOTDIR
Line 1834: ;
Line 1835: ID = goto
Line 1835: ID = exit2
Line 1835: ;
Line 1836: }
Line 1838: int
Line 1838: ID = vfs_symlink
Line 1838: (
Line 1838: ID = struct
Line 1838: ID = inode
Line 1838: *
Line 1838: ID = dir
Line 1838: ,
Line 1838: ID = struct
Line 1838: ID = dentry
Line 1838: *
Line 1838: ID = dentry
Line 1838: ,
Line 1838: ID = const
Line 1838: char
Line 1838: *
Line 1838: ID = oldname
Line 1838: ,
Line 1838: int
Line 1838: ID = mode
Line 1838: )
Line 1839: {
Line 1840: int
Line 1840: ID = error
Line 1840: =
Line 1840: ID = may_create
Line 1840: (
Line 1840: ID = dir
Line 1840: ,
Line 1840: ID = dentry
Line 1840: ,
Line 1840: ID = NULL
Line 1840: )
Line 1840: ;
Line 1842: if
Line 1842: (
Line 1842: ID = error
Line 1842: )
Line 1843: return
Line 1843: ID = error
Line 1843: ;
Line 1845: if
Line 1845: (
Line 1845: !
Line 1845: ID = dir
Line 1845: -
Line 1845: >
Line 1845: ID = i_op
Line 1845: ||
Line 1845: !
Line 1845: ID = dir
Line 1845: -
Line 1845: >
Line 1845: ID = i_op
Line 1845: -
Line 1845: >
Line 1845: ID = symlink
Line 1845: )
Line 1846: return
Line 1846: -
Line 1846: ID = EPERM
Line 1846: ;
Line 1848: ID = error
Line 1848: =
Line 1848: ID = security_inode_symlink
Line 1848: (
Line 1848: ID = dir
Line 1848: ,
Line 1848: ID = dentry
Line 1848: ,
Line 1848: ID = oldname
Line 1848: )
Line 1848: ;
Line 1849: if
Line 1849: (
Line 1849: ID = error
Line 1849: )
Line 1850: return
Line 1850: ID = error
Line 1850: ;
Line 1852: ID = DQUOT_INIT
Line 1852: (
Line 1852: ID = dir
Line 1852: )
Line 1852: ;
Line 1853: ID = error
Line 1853: =
Line 1853: ID = dir
Line 1853: -
Line 1853: >
Line 1853: ID = i_op
Line 1853: -
Line 1853: >
Line 1853: ID = symlink
Line 1853: (
Line 1853: ID = dir
Line 1853: ,
Line 1853: ID = dentry
Line 1853: ,
Line 1853: ID = oldname
Line 1853: )
Line 1853: ;
Line 1854: if
Line 1854: (
Line 1854: !
Line 1854: ID = error
Line 1854: )
Line 1854: {
Line 1855: ID = inode_dir_notify
Line 1855: (
Line 1855: ID = dir
Line 1855: ,
Line 1855: ID = DN_CREATE
Line 1855: )
Line 1855: ;
Line 1856: ID = security_inode_post_symlink
Line 1856: (
Line 1856: ID = dir
Line 1856: ,
Line 1856: ID = dentry
Line 1856: ,
Line 1856: ID = oldname
Line 1856: )
Line 1856: ;
Line 1857: }
Line 1858: return
Line 1858: ID = error
Line 1858: ;
Line 1859: }
Line 1861: ID = asmlinkage
Line 1861: ID = long
Line 1861: ID = sys_symlink
Line 1861: (
Line 1861: ID = const
Line 1861: char
Line 1861: Unrecognized token: 95
Line 1861: Unrecognized token: 95
Line 1861: ID = user
Line 1861: *
Line 1861: ID = oldname
Line 1861: ,
Line 1861: ID = const
Line 1861: char
Line 1861: Unrecognized token: 95
Line 1861: Unrecognized token: 95
Line 1861: ID = user
Line 1861: *
Line 1861: ID = newname
Line 1861: )
Line 1862: {
Line 1863: int
Line 1863: ID = error
Line 1863: =
Line 1863: INTCON = 0
Line 1863: ;
Line 1864: char
Line 1864: *
Line 1864: ID = from
Line 1864: ;
Line 1865: char
Line 1865: *
Line 1865: ID = to
Line 1865: ;
Line 1867: ID = from
Line 1867: =
Line 1867: ID = getname
Line 1867: (
Line 1867: ID = oldname
Line 1867: )
Line 1867: ;
Line 1868: if
Line 1868: (
Line 1868: ID = IS_ERR
Line 1868: (
Line 1868: ID = from
Line 1868: )
Line 1868: )
Line 1869: return
Line 1869: ID = PTR_ERR
Line 1869: (
Line 1869: ID = from
Line 1869: )
Line 1869: ;
Line 1870: ID = to
Line 1870: =
Line 1870: ID = getname
Line 1870: (
Line 1870: ID = newname
Line 1870: )
Line 1870: ;
Line 1871: ID = error
Line 1871: =
Line 1871: ID = PTR_ERR
Line 1871: (
Line 1871: ID = to
Line 1871: )
Line 1871: ;
Line 1872: if
Line 1872: (
Line 1872: !
Line 1872: ID = IS_ERR
Line 1872: (
Line 1872: ID = to
Line 1872: )
Line 1872: )
Line 1872: {
Line 1873: ID = struct
Line 1873: ID = dentry
Line 1873: *
Line 1873: ID = dentry
Line 1873: ;
Line 1874: ID = struct
Line 1874: ID = nameidata
Line 1874: ID = nd
Line 1874: ;
Line 1876: ID = error
Line 1876: =
Line 1876: ID = path_lookup
Line 1876: (
Line 1876: ID = to
Line 1876: ,
Line 1876: ID = LOOKUP_PARENT
Line 1876: ,
Line 1876: Unrecognized token: 38
Line 1876: ID = nd
Line 1876: )
Line 1876: ;
Line 1877: if
Line 1877: (
Line 1877: ID = error
Line 1877: )
Line 1878: ID = goto
Line 1878: ID = out
Line 1878: ;
Line 1879: ID = dentry
Line 1879: =
Line 1879: ID = lookup_create
Line 1879: (
Line 1879: Unrecognized token: 38
Line 1879: ID = nd
Line 1879: ,
Line 1879: INTCON = 0
Line 1879: )
Line 1879: ;
Line 1880: ID = error
Line 1880: =
Line 1880: ID = PTR_ERR
Line 1880: (
Line 1880: ID = dentry
Line 1880: )
Line 1880: ;
Line 1881: if
Line 1881: (
Line 1881: !
Line 1881: ID = IS_ERR
Line 1881: (
Line 1881: ID = dentry
Line 1881: )
Line 1881: )
Line 1881: {
Line 1882: ID = error
Line 1882: =
Line 1882: ID = vfs_symlink
Line 1882: (
Line 1882: ID = nd
Line 1882: Unrecognized token: 46
Line 1882: ID = dentry
Line 1882: -
Line 1882: >
Line 1882: ID = d_inode
Line 1882: ,
Line 1882: ID = dentry
Line 1882: ,
Line 1882: ID = from
Line 1882: ,
Line 1882: ID = S_IALLUGO
Line 1882: )
Line 1882: ;
Line 1883: ID = dput
Line 1883: (
Line 1883: ID = dentry
Line 1883: )
Line 1883: ;
Line 1884: }
Line 1885: ID = up
Line 1885: (
Line 1885: Unrecognized token: 38
Line 1885: ID = nd
Line 1885: Unrecognized token: 46
Line 1885: ID = dentry
Line 1885: -
Line 1885: >
Line 1885: ID = d_inode
Line 1885: -
Line 1885: >
Line 1885: ID = i_sem
Line 1885: )
Line 1885: ;
Line 1886: ID = path_release
Line 1886: (
Line 1886: Unrecognized token: 38
Line 1886: ID = nd
Line 1886: )
Line 1886: ;
Line 1887: ID = out
Line 1887: Unrecognized token: 58
Line 1888: ID = putname
Line 1888: (
Line 1888: ID = to
Line 1888: )
Line 1888: ;
Line 1889: }
Line 1890: ID = putname
Line 1890: (
Line 1890: ID = from
Line 1890: )
Line 1890: ;
Line 1891: return
Line 1891: ID = error
Line 1891: ;
Line 1892: }
Line 1894: int
Line 1894: ID = vfs_link
Line 1894: (
Line 1894: ID = struct
Line 1894: ID = dentry
Line 1894: *
Line 1894: ID = old_dentry
Line 1894: ,
Line 1894: ID = struct
Line 1894: ID = inode
Line 1894: *
Line 1894: ID = dir
Line 1894: ,
Line 1894: ID = struct
Line 1894: ID = dentry
Line 1894: *
Line 1894: ID = new_dentry
Line 1894: )
Line 1895: {
Line 1896: ID = struct
Line 1896: ID = inode
Line 1896: *
Line 1896: ID = inode
Line 1896: =
Line 1896: ID = old_dentry
Line 1896: -
Line 1896: >
Line 1896: ID = d_inode
Line 1896: ;
Line 1897: int
Line 1897: ID = error
Line 1897: ;
Line 1899: if
Line 1899: (
Line 1899: !
Line 1899: ID = inode
Line 1899: )
Line 1900: return
Line 1900: -
Line 1900: ID = ENOENT
Line 1900: ;
Line 1902: ID = error
Line 1902: =
Line 1902: ID = may_create
Line 1902: (
Line 1902: ID = dir
Line 1902: ,
Line 1902: ID = new_dentry
Line 1902: ,
Line 1902: ID = NULL
Line 1902: )
Line 1902: ;
Line 1903: if
Line 1903: (
Line 1903: ID = error
Line 1903: )
Line 1904: return
Line 1904: ID = error
Line 1904: ;
Line 1906: if
Line 1906: (
Line 1906: ID = dir
Line 1906: -
Line 1906: >
Line 1906: ID = i_sb
Line 1906: !=
Line 1906: ID = inode
Line 1906: -
Line 1906: >
Line 1906: ID = i_sb
Line 1906: )
Line 1907: return
Line 1907: -
Line 1907: ID = EXDEV
Line 1907: ;
Line 1912: if
Line 1912: (
Line 1912: ID = IS_APPEND
Line 1912: (
Line 1912: ID = inode
Line 1912: )
Line 1912: ||
Line 1912: ID = IS_IMMUTABLE
Line 1912: (
Line 1912: ID = inode
Line 1912: )
Line 1912: )
Line 1913: return
Line 1913: -
Line 1913: ID = EPERM
Line 1913: ;
Line 1914: if
Line 1914: (
Line 1914: !
Line 1914: ID = dir
Line 1914: -
Line 1914: >
Line 1914: ID = i_op
Line 1914: ||
Line 1914: !
Line 1914: ID = dir
Line 1914: -
Line 1914: >
Line 1914: ID = i_op
Line 1914: -
Line 1914: >
Line 1914: ID = link
Line 1914: )
Line 1915: return
Line 1915: -
Line 1915: ID = EPERM
Line 1915: ;
Line 1916: if
Line 1916: (
Line 1916: ID = S_ISDIR
Line 1916: (
Line 1916: ID = old_dentry
Line 1916: -
Line 1916: >
Line 1916: ID = d_inode
Line 1916: -
Line 1916: >
Line 1916: ID = i_mode
Line 1916: )
Line 1916: )
Line 1917: return
Line 1917: -
Line 1917: ID = EPERM
Line 1917: ;
Line 1919: ID = error
Line 1919: =
Line 1919: ID = security_inode_link
Line 1919: (
Line 1919: ID = old_dentry
Line 1919: ,
Line 1919: ID = dir
Line 1919: ,
Line 1919: ID = new_dentry
Line 1919: )
Line 1919: ;
Line 1920: if
Line 1920: (
Line 1920: ID = error
Line 1920: )
Line 1921: return
Line 1921: ID = error
Line 1921: ;
Line 1923: ID = down
Line 1923: (
Line 1923: Unrecognized token: 38
Line 1923: ID = old_dentry
Line 1923: -
Line 1923: >
Line 1923: ID = d_inode
Line 1923: -
Line 1923: >
Line 1923: ID = i_sem
Line 1923: )
Line 1923: ;
Line 1924: ID = DQUOT_INIT
Line 1924: (
Line 1924: ID = dir
Line 1924: )
Line 1924: ;
Line 1925: ID = error
Line 1925: =
Line 1925: ID = dir
Line 1925: -
Line 1925: >
Line 1925: ID = i_op
Line 1925: -
Line 1925: >
Line 1925: ID = link
Line 1925: (
Line 1925: ID = old_dentry
Line 1925: ,
Line 1925: ID = dir
Line 1925: ,
Line 1925: ID = new_dentry
Line 1925: )
Line 1925: ;
Line 1926: ID = up
Line 1926: (
Line 1926: Unrecognized token: 38
Line 1926: ID = old_dentry
Line 1926: -
Line 1926: >
Line 1926: ID = d_inode
Line 1926: -
Line 1926: >
Line 1926: ID = i_sem
Line 1926: )
Line 1926: ;
Line 1927: if
Line 1927: (
Line 1927: !
Line 1927: ID = error
Line 1927: )
Line 1927: {
Line 1928: ID = inode_dir_notify
Line 1928: (
Line 1928: ID = dir
Line 1928: ,
Line 1928: ID = DN_CREATE
Line 1928: )
Line 1928: ;
Line 1929: ID = security_inode_post_link
Line 1929: (
Line 1929: ID = old_dentry
Line 1929: ,
Line 1929: ID = dir
Line 1929: ,
Line 1929: ID = new_dentry
Line 1929: )
Line 1929: ;
Line 1930: }
Line 1931: return
Line 1931: ID = error
Line 1931: ;
Line 1932: }
Line 1943: ID = asmlinkage
Line 1943: ID = long
Line 1943: ID = sys_link
Line 1943: (
Line 1943: ID = const
Line 1943: char
Line 1943: Unrecognized token: 95
Line 1943: Unrecognized token: 95
Line 1943: ID = user
Line 1943: *
Line 1943: ID = oldname
Line 1943: ,
Line 1943: ID = const
Line 1943: char
Line 1943: Unrecognized token: 95
Line 1943: Unrecognized token: 95
Line 1943: ID = user
Line 1943: *
Line 1943: ID = newname
Line 1943: )
Line 1944: {
Line 1945: ID = struct
Line 1945: ID = dentry
Line 1945: *
Line 1945: ID = new_dentry
Line 1945: ;
Line 1946: ID = struct
Line 1946: ID = nameidata
Line 1946: ID = nd
Line 1946: ,
Line 1946: ID = old_nd
Line 1946: ;
Line 1947: int
Line 1947: ID = error
Line 1947: ;
Line 1948: char
Line 1948: *
Line 1948: ID = to
Line 1948: ;
Line 1950: ID = to
Line 1950: =
Line 1950: ID = getname
Line 1950: (
Line 1950: ID = newname
Line 1950: )
Line 1950: ;
Line 1951: if
Line 1951: (
Line 1951: ID = IS_ERR
Line 1951: (
Line 1951: ID = to
Line 1951: )
Line 1951: )
Line 1952: return
Line 1952: ID = PTR_ERR
Line 1952: (
Line 1952: ID = to
Line 1952: )
Line 1952: ;
Line 1954: ID = error
Line 1954: =
Line 1954: Unrecognized token: 95
Line 1954: Unrecognized token: 95
Line 1954: ID = user_walk
Line 1954: (
Line 1954: ID = oldname
Line 1954: ,
Line 1954: INTCON = 0
Line 1954: ,
Line 1954: Unrecognized token: 38
Line 1954: ID = old_nd
Line 1954: )
Line 1954: ;
Line 1955: if
Line 1955: (
Line 1955: ID = error
Line 1955: )
Line 1956: ID = goto
Line 1956: ID = exit
Line 1956: ;
Line 1957: ID = error
Line 1957: =
Line 1957: ID = path_lookup
Line 1957: (
Line 1957: ID = to
Line 1957: ,
Line 1957: ID = LOOKUP_PARENT
Line 1957: ,
Line 1957: Unrecognized token: 38
Line 1957: ID = nd
Line 1957: )
Line 1957: ;
Line 1958: if
Line 1958: (
Line 1958: ID = error
Line 1958: )
Line 1959: ID = goto
Line 1959: ID = out
Line 1959: ;
Line 1960: ID = error
Line 1960: =
Line 1960: -
Line 1960: ID = EXDEV
Line 1960: ;
Line 1961: if
Line 1961: (
Line 1961: ID = old_nd
Line 1961: Unrecognized token: 46
Line 1961: ID = mnt
Line 1961: !=
Line 1961: ID = nd
Line 1961: Unrecognized token: 46
Line 1961: ID = mnt
Line 1961: )
Line 1962: ID = goto
Line 1962: ID = out_release
Line 1962: ;
Line 1963: ID = new_dentry
Line 1963: =
Line 1963: ID = lookup_create
Line 1963: (
Line 1963: Unrecognized token: 38
Line 1963: ID = nd
Line 1963: ,
Line 1963: INTCON = 0
Line 1963: )
Line 1963: ;
Line 1964: ID = error
Line 1964: =
Line 1964: ID = PTR_ERR
Line 1964: (
Line 1964: ID = new_dentry
Line 1964: )
Line 1964: ;
Line 1965: if
Line 1965: (
Line 1965: !
Line 1965: ID = IS_ERR
Line 1965: (
Line 1965: ID = new_dentry
Line 1965: )
Line 1965: )
Line 1965: {
Line 1966: ID = error
Line 1966: =
Line 1966: ID = vfs_link
Line 1966: (
Line 1966: ID = old_nd
Line 1966: Unrecognized token: 46
Line 1966: ID = dentry
Line 1966: ,
Line 1966: ID = nd
Line 1966: Unrecognized token: 46
Line 1966: ID = dentry
Line 1966: -
Line 1966: >
Line 1966: ID = d_inode
Line 1966: ,
Line 1966: ID = new_dentry
Line 1966: )
Line 1966: ;
Line 1967: ID = dput
Line 1967: (
Line 1967: ID = new_dentry
Line 1967: )
Line 1967: ;
Line 1968: }
Line 1969: ID = up
Line 1969: (
Line 1969: Unrecognized token: 38
Line 1969: ID = nd
Line 1969: Unrecognized token: 46
Line 1969: ID = dentry
Line 1969: -
Line 1969: >
Line 1969: ID = d_inode
Line 1969: -
Line 1969: >
Line 1969: ID = i_sem
Line 1969: )
Line 1969: ;
Line 1970: ID = out_release
Line 1970: Unrecognized token: 58
Line 1971: ID = path_release
Line 1971: (
Line 1971: Unrecognized token: 38
Line 1971: ID = nd
Line 1971: )
Line 1971: ;
Line 1972: ID = out
Line 1972: Unrecognized token: 58
Line 1973: ID = path_release
Line 1973: (
Line 1973: Unrecognized token: 38
Line 1973: ID = old_nd
Line 1973: )
Line 1973: ;
Line 1974: ID = exit
Line 1974: Unrecognized token: 58
Line 1975: ID = putname
Line 1975: (
Line 1975: ID = to
Line 1975: )
Line 1975: ;
Line 1977: return
Line 1977: ID = error
Line 1977: ;
Line 1978: }
Line 2012: int
Line 2012: ID = vfs_rename_dir
Line 2012: (
Line 2012: ID = struct
Line 2012: ID = inode
Line 2012: *
Line 2012: ID = old_dir
Line 2012: ,
Line 2012: ID = struct
Line 2012: ID = dentry
Line 2012: *
Line 2012: ID = old_dentry
Line 2012: ,
Line 2013: ID = struct
Line 2013: ID = inode
Line 2013: *
Line 2013: ID = new_dir
Line 2013: ,
Line 2013: ID = struct
Line 2013: ID = dentry
Line 2013: *
Line 2013: ID = new_dentry
Line 2013: )
Line 2014: {
Line 2015: int
Line 2015: ID = error
Line 2015: =
Line 2015: INTCON = 0
Line 2015: ;
Line 2016: ID = struct
Line 2016: ID = inode
Line 2016: *
Line 2016: ID = target
Line 2016: ;
Line 2022: if
Line 2022: (
Line 2022: ID = new_dir
Line 2022: !=
Line 2022: ID = old_dir
Line 2022: )
Line 2022: {
Line 2023: ID = error
Line 2023: =
Line 2023: ID = permission
Line 2023: (
Line 2023: ID = old_dentry
Line 2023: -
Line 2023: >
Line 2023: ID = d_inode
Line 2023: ,
Line 2023: ID = MAY_WRITE
Line 2023: ,
Line 2023: ID = NULL
Line 2023: )
Line 2023: ;
Line 2024: if
Line 2024: (
Line 2024: ID = error
Line 2024: )
Line 2025: return
Line 2025: ID = error
Line 2025: ;
Line 2026: }
Line 2028: ID = error
Line 2028: =
Line 2028: ID = security_inode_rename
Line 2028: (
Line 2028: ID = old_dir
Line 2028: ,
Line 2028: ID = old_dentry
Line 2028: ,
Line 2028: ID = new_dir
Line 2028: ,
Line 2028: ID = new_dentry
Line 2028: )
Line 2028: ;
Line 2029: if
Line 2029: (
Line 2029: ID = error
Line 2029: )
Line 2030: return
Line 2030: ID = error
Line 2030: ;
Line 2032: ID = target
Line 2032: =
Line 2032: ID = new_dentry
Line 2032: -
Line 2032: >
Line 2032: ID = d_inode
Line 2032: ;
Line 2033: if
Line 2033: (
Line 2033: ID = target
Line 2033: )
Line 2033: {
Line 2034: ID = down
Line 2034: (
Line 2034: Unrecognized token: 38
Line 2034: ID = target
Line 2034: -
Line 2034: >
Line 2034: ID = i_sem
Line 2034: )
Line 2034: ;
Line 2035: ID = d_unhash
Line 2035: (
Line 2035: ID = new_dentry
Line 2035: )
Line 2035: ;
Line 2036: }
Line 2037: if
Line 2037: (
Line 2037: ID = d_mountpoint
Line 2037: (
Line 2037: ID = old_dentry
Line 2037: )
Line 2037: ||
Line 2037: ID = d_mountpoint
Line 2037: (
Line 2037: ID = new_dentry
Line 2037: )
Line 2037: )
Line 2038: ID = error
Line 2038: =
Line 2038: -
Line 2038: ID = EBUSY
Line 2038: ;
Line 2039: else
Line 2040: ID = error
Line 2040: =
Line 2040: ID = old_dir
Line 2040: -
Line 2040: >
Line 2040: ID = i_op
Line 2040: -
Line 2040: >
Line 2040: ID = rename
Line 2040: (
Line 2040: ID = old_dir
Line 2040: ,
Line 2040: ID = old_dentry
Line 2040: ,
Line 2040: ID = new_dir
Line 2040: ,
Line 2040: ID = new_dentry
Line 2040: )
Line 2040: ;
Line 2041: if
Line 2041: (
Line 2041: ID = target
Line 2041: )
Line 2041: {
Line 2042: if
Line 2042: (
Line 2042: !
Line 2042: ID = error
Line 2042: )
Line 2043: ID = target
Line 2043: -
Line 2043: >
Line 2043: ID = i_flags
Line 2043: Unrecognized token: 124
Line 2043: =
Line 2043: ID = S_DEAD
Line 2043: ;
Line 2044: ID = up
Line 2044: (
Line 2044: Unrecognized token: 38
Line 2044: ID = target
Line 2044: -
Line 2044: >
Line 2044: ID = i_sem
Line 2044: )
Line 2044: ;
Line 2045: if
Line 2045: (
Line 2045: ID = d_unhashed
Line 2045: (
Line 2045: ID = new_dentry
Line 2045: )
Line 2045: )
Line 2046: ID = d_rehash
Line 2046: (
Line 2046: ID = new_dentry
Line 2046: )
Line 2046: ;
Line 2047: ID = dput
Line 2047: (
Line 2047: ID = new_dentry
Line 2047: )
Line 2047: ;
Line 2048: }
Line 2049: if
Line 2049: (
Line 2049: !
Line 2049: ID = error
Line 2049: )
Line 2049: {
Line 2050: ID = d_move
Line 2050: (
Line 2050: ID = old_dentry
Line 2050: ,
Line 2050: ID = new_dentry
Line 2050: )
Line 2050: ;
Line 2051: ID = security_inode_post_rename
Line 2051: (
Line 2051: ID = old_dir
Line 2051: ,
Line 2051: ID = old_dentry
Line 2051: ,
Line 2052: ID = new_dir
Line 2052: ,
Line 2052: ID = new_dentry
Line 2052: )
Line 2052: ;
Line 2053: }
Line 2054: return
Line 2054: ID = error
Line 2054: ;
Line 2055: }
Line 2057: int
Line 2057: ID = vfs_rename_other
Line 2057: (
Line 2057: ID = struct
Line 2057: ID = inode
Line 2057: *
Line 2057: ID = old_dir
Line 2057: ,
Line 2057: ID = struct
Line 2057: ID = dentry
Line 2057: *
Line 2057: ID = old_dentry
Line 2057: ,
Line 2058: ID = struct
Line 2058: ID = inode
Line 2058: *
Line 2058: ID = new_dir
Line 2058: ,
Line 2058: ID = struct
Line 2058: ID = dentry
Line 2058: *
Line 2058: ID = new_dentry
Line 2058: )
Line 2059: {
Line 2060: ID = struct
Line 2060: ID = inode
Line 2060: *
Line 2060: ID = target
Line 2060: ;
Line 2061: int
Line 2061: ID = error
Line 2061: ;
Line 2063: ID = error
Line 2063: =
Line 2063: ID = security_inode_rename
Line 2063: (
Line 2063: ID = old_dir
Line 2063: ,
Line 2063: ID = old_dentry
Line 2063: ,
Line 2063: ID = new_dir
Line 2063: ,
Line 2063: ID = new_dentry
Line 2063: )
Line 2063: ;
Line 2064: if
Line 2064: (
Line 2064: ID = error
Line 2064: )
Line 2065: return
Line 2065: ID = error
Line 2065: ;
Line 2067: ID = dget
Line 2067: (
Line 2067: ID = new_dentry
Line 2067: )
Line 2067: ;
Line 2068: ID = target
Line 2068: =
Line 2068: ID = new_dentry
Line 2068: -
Line 2068: >
Line 2068: ID = d_inode
Line 2068: ;
Line 2069: if
Line 2069: (
Line 2069: ID = target
Line 2069: )
Line 2070: ID = down
Line 2070: (
Line 2070: Unrecognized token: 38
Line 2070: ID = target
Line 2070: -
Line 2070: >
Line 2070: ID = i_sem
Line 2070: )
Line 2070: ;
Line 2071: if
Line 2071: (
Line 2071: ID = d_mountpoint
Line 2071: (
Line 2071: ID = old_dentry
Line 2071: )
Line 2071: ||
Line 2071: ID = d_mountpoint
Line 2071: (
Line 2071: ID = new_dentry
Line 2071: )
Line 2071: )
Line 2072: ID = error
Line 2072: =
Line 2072: -
Line 2072: ID = EBUSY
Line 2072: ;
Line 2073: else
Line 2074: ID = error
Line 2074: =
Line 2074: ID = old_dir
Line 2074: -
Line 2074: >
Line 2074: ID = i_op
Line 2074: -
Line 2074: >
Line 2074: ID = rename
Line 2074: (
Line 2074: ID = old_dir
Line 2074: ,
Line 2074: ID = old_dentry
Line 2074: ,
Line 2074: ID = new_dir
Line 2074: ,
Line 2074: ID = new_dentry
Line 2074: )
Line 2074: ;
Line 2075: if
Line 2075: (
Line 2075: !
Line 2075: ID = error
Line 2075: )
Line 2075: {
Line 2077: if
Line 2077: (
Line 2077: !
Line 2077: (
Line 2077: ID = old_dir
Line 2077: -
Line 2077: >
Line 2077: ID = i_sb
Line 2077: -
Line 2077: >
Line 2077: ID = s_type
Line 2077: -
Line 2077: >
Line 2077: ID = fs_flags
Line 2077: Unrecognized token: 38
Line 2077: ID = FS_ODD_RENAME
Line 2077: )
Line 2077: )
Line 2078: ID = d_move
Line 2078: (
Line 2078: ID = old_dentry
Line 2078: ,
Line 2078: ID = new_dentry
Line 2078: )
Line 2078: ;
Line 2079: ID = security_inode_post_rename
Line 2079: (
Line 2079: ID = old_dir
Line 2079: ,
Line 2079: ID = old_dentry
Line 2079: ,
Line 2079: ID = new_dir
Line 2079: ,
Line 2079: ID = new_dentry
Line 2079: )
Line 2079: ;
Line 2080: }
Line 2081: if
Line 2081: (
Line 2081: ID = target
Line 2081: )
Line 2082: ID = up
Line 2082: (
Line 2082: Unrecognized token: 38
Line 2082: ID = target
Line 2082: -
Line 2082: >
Line 2082: ID = i_sem
Line 2082: )
Line 2082: ;
Line 2083: ID = dput
Line 2083: (
Line 2083: ID = new_dentry
Line 2083: )
Line 2083: ;
Line 2084: return
Line 2084: ID = error
Line 2084: ;
Line 2085: }
Line 2087: int
Line 2087: ID = vfs_rename
Line 2087: (
Line 2087: ID = struct
Line 2087: ID = inode
Line 2087: *
Line 2087: ID = old_dir
Line 2087: ,
Line 2087: ID = struct
Line 2087: ID = dentry
Line 2087: *
Line 2087: ID = old_dentry
Line 2087: ,
Line 2088: ID = struct
Line 2088: ID = inode
Line 2088: *
Line 2088: ID = new_dir
Line 2088: ,
Line 2088: ID = struct
Line 2088: ID = dentry
Line 2088: *
Line 2088: ID = new_dentry
Line 2088: )
Line 2089: {
Line 2090: int
Line 2090: ID = error
Line 2090: ;
Line 2091: int
Line 2091: ID = is_dir
Line 2091: =
Line 2091: ID = S_ISDIR
Line 2091: (
Line 2091: ID = old_dentry
Line 2091: -
Line 2091: >
Line 2091: ID = d_inode
Line 2091: -
Line 2091: >
Line 2091: ID = i_mode
Line 2091: )
Line 2091: ;
Line 2093: if
Line 2093: (
Line 2093: ID = old_dentry
Line 2093: -
Line 2093: >
Line 2093: ID = d_inode
Line 2093: ==
Line 2093: ID = new_dentry
Line 2093: -
Line 2093: >
Line 2093: ID = d_inode
Line 2093: )
Line 2094: return
Line 2094: INTCON = 0
Line 2094: ;
Line 2096: ID = error
Line 2096: =
Line 2096: ID = may_delete
Line 2096: (
Line 2096: ID = old_dir
Line 2096: ,
Line 2096: ID = old_dentry
Line 2096: ,
Line 2096: ID = is_dir
Line 2096: )
Line 2096: ;
Line 2097: if
Line 2097: (
Line 2097: ID = error
Line 2097: )
Line 2098: return
Line 2098: ID = error
Line 2098: ;
Line 2100: if
Line 2100: (
Line 2100: !
Line 2100: ID = new_dentry
Line 2100: -
Line 2100: >
Line 2100: ID = d_inode
Line 2100: )
Line 2101: ID = error
Line 2101: =
Line 2101: ID = may_create
Line 2101: (
Line 2101: ID = new_dir
Line 2101: ,
Line 2101: ID = new_dentry
Line 2101: ,
Line 2101: ID = NULL
Line 2101: )
Line 2101: ;
Line 2102: else
Line 2103: ID = error
Line 2103: =
Line 2103: ID = may_delete
Line 2103: (
Line 2103: ID = new_dir
Line 2103: ,
Line 2103: ID = new_dentry
Line 2103: ,
Line 2103: ID = is_dir
Line 2103: )
Line 2103: ;
Line 2104: if
Line 2104: (
Line 2104: ID = error
Line 2104: )
Line 2105: return
Line 2105: ID = error
Line 2105: ;
Line 2107: if
Line 2107: (
Line 2107: !
Line 2107: ID = old_dir
Line 2107: -
Line 2107: >
Line 2107: ID = i_op
Line 2107: ||
Line 2107: !
Line 2107: ID = old_dir
Line 2107: -
Line 2107: >
Line 2107: ID = i_op
Line 2107: -
Line 2107: >
Line 2107: ID = rename
Line 2107: )
Line 2108: return
Line 2108: -
Line 2108: ID = EPERM
Line 2108: ;
Line 2110: ID = DQUOT_INIT
Line 2110: (
Line 2110: ID = old_dir
Line 2110: )
Line 2110: ;
Line 2111: ID = DQUOT_INIT
Line 2111: (
Line 2111: ID = new_dir
Line 2111: )
Line 2111: ;
Line 2113: if
Line 2113: (
Line 2113: ID = is_dir
Line 2113: )
Line 2114: ID = error
Line 2114: =
Line 2114: ID = vfs_rename_dir
Line 2114: (
Line 2114: ID = old_dir
Line 2114: ,
Line 2114: ID = old_dentry
Line 2114: ,
Line 2114: ID = new_dir
Line 2114: ,
Line 2114: ID = new_dentry
Line 2114: )
Line 2114: ;
Line 2115: else
Line 2116: ID = error
Line 2116: =
Line 2116: ID = vfs_rename_other
Line 2116: (
Line 2116: ID = old_dir
Line 2116: ,
Line 2116: ID = old_dentry
Line 2116: ,
Line 2116: ID = new_dir
Line 2116: ,
Line 2116: ID = new_dentry
Line 2116: )
Line 2116: ;
Line 2117: if
Line 2117: (
Line 2117: !
Line 2117: ID = error
Line 2117: )
Line 2117: {
Line 2118: if
Line 2118: (
Line 2118: ID = old_dir
Line 2118: ==
Line 2118: ID = new_dir
Line 2118: )
Line 2119: ID = inode_dir_notify
Line 2119: (
Line 2119: ID = old_dir
Line 2119: ,
Line 2119: ID = DN_RENAME
Line 2119: )
Line 2119: ;
Line 2120: else
Line 2120: {
Line 2121: ID = inode_dir_notify
Line 2121: (
Line 2121: ID = old_dir
Line 2121: ,
Line 2121: ID = DN_DELETE
Line 2121: )
Line 2121: ;
Line 2122: ID = inode_dir_notify
Line 2122: (
Line 2122: ID = new_dir
Line 2122: ,
Line 2122: ID = DN_CREATE
Line 2122: )
Line 2122: ;
Line 2123: }
Line 2124: }
Line 2125: return
Line 2125: ID = error
Line 2125: ;
Line 2126: }
Line 2128: ID = static
Line 2128: ID = inline
Line 2128: int
Line 2128: ID = do_rename
Line 2128: (
Line 2128: ID = const
Line 2128: char
Line 2128: *
Line 2128: ID = oldname
Line 2128: ,
Line 2128: ID = const
Line 2128: char
Line 2128: *
Line 2128: ID = newname
Line 2128: )
Line 2129: {
Line 2130: int
Line 2130: ID = error
Line 2130: =
Line 2130: INTCON = 0
Line 2130: ;
Line 2131: ID = struct
Line 2131: ID = dentry
Line 2131: *
Line 2131: ID = old_dir
Line 2131: ,
Line 2131: *
Line 2131: ID = new_dir
Line 2131: ;
Line 2132: ID = struct
Line 2132: ID = dentry
Line 2132: *
Line 2132: ID = old_dentry
Line 2132: ,
Line 2132: *
Line 2132: ID = new_dentry
Line 2132: ;
Line 2133: ID = struct
Line 2133: ID = dentry
Line 2133: *
Line 2133: ID = trap
Line 2133: ;
Line 2134: ID = struct
Line 2134: ID = nameidata
Line 2134: ID = oldnd
Line 2134: ,
Line 2134: ID = newnd
Line 2134: ;
Line 2136: ID = error
Line 2136: =
Line 2136: ID = path_lookup
Line 2136: (
Line 2136: ID = oldname
Line 2136: ,
Line 2136: ID = LOOKUP_PARENT
Line 2136: ,
Line 2136: Unrecognized token: 38
Line 2136: ID = oldnd
Line 2136: )
Line 2136: ;
Line 2137: if
Line 2137: (
Line 2137: ID = error
Line 2137: )
Line 2138: ID = goto
Line 2138: ID = exit
Line 2138: ;
Line 2140: ID = error
Line 2140: =
Line 2140: ID = path_lookup
Line 2140: (
Line 2140: ID = newname
Line 2140: ,
Line 2140: ID = LOOKUP_PARENT
Line 2140: ,
Line 2140: Unrecognized token: 38
Line 2140: ID = newnd
Line 2140: )
Line 2140: ;
Line 2141: if
Line 2141: (
Line 2141: ID = error
Line 2141: )
Line 2142: ID = goto
Line 2142: ID = exit1
Line 2142: ;
Line 2144: ID = error
Line 2144: =
Line 2144: -
Line 2144: ID = EXDEV
Line 2144: ;
Line 2145: if
Line 2145: (
Line 2145: ID = oldnd
Line 2145: Unrecognized token: 46
Line 2145: ID = mnt
Line 2145: !=
Line 2145: ID = newnd
Line 2145: Unrecognized token: 46
Line 2145: ID = mnt
Line 2145: )
Line 2146: ID = goto
Line 2146: ID = exit2
Line 2146: ;
Line 2148: ID = old_dir
Line 2148: =
Line 2148: ID = oldnd
Line 2148: Unrecognized token: 46
Line 2148: ID = dentry
Line 2148: ;
Line 2149: ID = error
Line 2149: =
Line 2149: -
Line 2149: ID = EBUSY
Line 2149: ;
Line 2150: if
Line 2150: (
Line 2150: ID = oldnd
Line 2150: Unrecognized token: 46
Line 2150: ID = last_type
Line 2150: !=
Line 2150: ID = LAST_NORM
Line 2150: )
Line 2151: ID = goto
Line 2151: ID = exit2
Line 2151: ;
Line 2153: ID = new_dir
Line 2153: =
Line 2153: ID = newnd
Line 2153: Unrecognized token: 46
Line 2153: ID = dentry
Line 2153: ;
Line 2154: if
Line 2154: (
Line 2154: ID = newnd
Line 2154: Unrecognized token: 46
Line 2154: ID = last_type
Line 2154: !=
Line 2154: ID = LAST_NORM
Line 2154: )
Line 2155: ID = goto
Line 2155: ID = exit2
Line 2155: ;
Line 2157: ID = trap
Line 2157: =
Line 2157: ID = lock_rename
Line 2157: (
Line 2157: ID = new_dir
Line 2157: ,
Line 2157: ID = old_dir
Line 2157: )
Line 2157: ;
Line 2159: ID = old_dentry
Line 2159: =
Line 2159: ID = lookup_hash
Line 2159: (
Line 2159: Unrecognized token: 38
Line 2159: ID = oldnd
Line 2159: Unrecognized token: 46
Line 2159: ID = last
Line 2159: ,
Line 2159: ID = old_dir
Line 2159: )
Line 2159: ;
Line 2160: ID = error
Line 2160: =
Line 2160: ID = PTR_ERR
Line 2160: (
Line 2160: ID = old_dentry
Line 2160: )
Line 2160: ;
Line 2161: if
Line 2161: (
Line 2161: ID = IS_ERR
Line 2161: (
Line 2161: ID = old_dentry
Line 2161: )
Line 2161: )
Line 2162: ID = goto
Line 2162: ID = exit3
Line 2162: ;
Line 2164: ID = error
Line 2164: =
Line 2164: -
Line 2164: ID = ENOENT
Line 2164: ;
Line 2165: if
Line 2165: (
Line 2165: !
Line 2165: ID = old_dentry
Line 2165: -
Line 2165: >
Line 2165: ID = d_inode
Line 2165: )
Line 2166: ID = goto
Line 2166: ID = exit4
Line 2166: ;
Line 2168: if
Line 2168: (
Line 2168: !
Line 2168: ID = S_ISDIR
Line 2168: (
Line 2168: ID = old_dentry
Line 2168: -
Line 2168: >
Line 2168: ID = d_inode
Line 2168: -
Line 2168: >
Line 2168: ID = i_mode
Line 2168: )
Line 2168: )
Line 2168: {
Line 2169: ID = error
Line 2169: =
Line 2169: -
Line 2169: ID = ENOTDIR
Line 2169: ;
Line 2170: if
Line 2170: (
Line 2170: ID = oldnd
Line 2170: Unrecognized token: 46
Line 2170: ID = last
Line 2170: Unrecognized token: 46
Line 2170: ID = name
Line 2170: [
Line 2170: ID = oldnd
Line 2170: Unrecognized token: 46
Line 2170: ID = last
Line 2170: Unrecognized token: 46
Line 2170: ID = len
Line 2170: ]
Line 2170: )
Line 2171: ID = goto
Line 2171: ID = exit4
Line 2171: ;
Line 2172: if
Line 2172: (
Line 2172: ID = newnd
Line 2172: Unrecognized token: 46
Line 2172: ID = last
Line 2172: Unrecognized token: 46
Line 2172: ID = name
Line 2172: [
Line 2172: ID = newnd
Line 2172: Unrecognized token: 46
Line 2172: ID = last
Line 2172: Unrecognized token: 46
Line 2172: ID = len
Line 2172: ]
Line 2172: )
Line 2173: ID = goto
Line 2173: ID = exit4
Line 2173: ;
Line 2174: }
Line 2176: ID = error
Line 2176: =
Line 2176: -
Line 2176: ID = EINVAL
Line 2176: ;
Line 2177: if
Line 2177: (
Line 2177: ID = old_dentry
Line 2177: ==
Line 2177: ID = trap
Line 2177: )
Line 2178: ID = goto
Line 2178: ID = exit4
Line 2178: ;
Line 2179: ID = new_dentry
Line 2179: =
Line 2179: ID = lookup_hash
Line 2179: (
Line 2179: Unrecognized token: 38
Line 2179: ID = newnd
Line 2179: Unrecognized token: 46
Line 2179: ID = last
Line 2179: ,
Line 2179: ID = new_dir
Line 2179: )
Line 2179: ;
Line 2180: ID = error
Line 2180: =
Line 2180: ID = PTR_ERR
Line 2180: (
Line 2180: ID = new_dentry
Line 2180: )
Line 2180: ;
Line 2181: if
Line 2181: (
Line 2181: ID = IS_ERR
Line 2181: (
Line 2181: ID = new_dentry
Line 2181: )
Line 2181: )
Line 2182: ID = goto
Line 2182: ID = exit4
Line 2182: ;
Line 2184: ID = error
Line 2184: =
Line 2184: -
Line 2184: ID = ENOTEMPTY
Line 2184: ;
Line 2185: if
Line 2185: (
Line 2185: ID = new_dentry
Line 2185: ==
Line 2185: ID = trap
Line 2185: )
Line 2186: ID = goto
Line 2186: ID = exit5
Line 2186: ;
Line 2188: ID = error
Line 2188: =
Line 2188: ID = vfs_rename
Line 2188: (
Line 2188: ID = old_dir
Line 2188: -
Line 2188: >
Line 2188: ID = d_inode
Line 2188: ,
Line 2188: ID = old_dentry
Line 2188: ,
Line 2189: ID = new_dir
Line 2189: -
Line 2189: >
Line 2189: ID = d_inode
Line 2189: ,
Line 2189: ID = new_dentry
Line 2189: )
Line 2189: ;
Line 2190: ID = exit5
Line 2190: Unrecognized token: 58
Line 2191: ID = dput
Line 2191: (
Line 2191: ID = new_dentry
Line 2191: )
Line 2191: ;
Line 2192: ID = exit4
Line 2192: Unrecognized token: 58
Line 2193: ID = dput
Line 2193: (
Line 2193: ID = old_dentry
Line 2193: )
Line 2193: ;
Line 2194: ID = exit3
Line 2194: Unrecognized token: 58
Line 2195: ID = unlock_rename
Line 2195: (
Line 2195: ID = new_dir
Line 2195: ,
Line 2195: ID = old_dir
Line 2195: )
Line 2195: ;
Line 2196: ID = exit2
Line 2196: Unrecognized token: 58
Line 2197: ID = path_release
Line 2197: (
Line 2197: Unrecognized token: 38
Line 2197: ID = newnd
Line 2197: )
Line 2197: ;
Line 2198: ID = exit1
Line 2198: Unrecognized token: 58
Line 2199: ID = path_release
Line 2199: (
Line 2199: Unrecognized token: 38
Line 2199: ID = oldnd
Line 2199: )
Line 2199: ;
Line 2200: ID = exit
Line 2200: Unrecognized token: 58
Line 2201: return
Line 2201: ID = error
Line 2201: ;
Line 2202: }
Line 2204: ID = asmlinkage
Line 2204: ID = long
Line 2204: ID = sys_rename
Line 2204: (
Line 2204: ID = const
Line 2204: char
Line 2204: Unrecognized token: 95
Line 2204: Unrecognized token: 95
Line 2204: ID = user
Line 2204: *
Line 2204: ID = oldname
Line 2204: ,
Line 2204: ID = const
Line 2204: char
Line 2204: Unrecognized token: 95
Line 2204: Unrecognized token: 95
Line 2204: ID = user
Line 2204: *
Line 2204: ID = newname
Line 2204: )
Line 2205: {
Line 2206: int
Line 2206: ID = error
Line 2206: ;
Line 2207: char
Line 2207: *
Line 2207: ID = from
Line 2207: ;
Line 2208: char
Line 2208: *
Line 2208: ID = to
Line 2208: ;
Line 2210: ID = from
Line 2210: =
Line 2210: ID = getname
Line 2210: (
Line 2210: ID = oldname
Line 2210: )
Line 2210: ;
Line 2211: if
Line 2211: (
Line 2211: ID = IS_ERR
Line 2211: (
Line 2211: ID = from
Line 2211: )
Line 2211: )
Line 2212: return
Line 2212: ID = PTR_ERR
Line 2212: (
Line 2212: ID = from
Line 2212: )
Line 2212: ;
Line 2213: ID = to
Line 2213: =
Line 2213: ID = getname
Line 2213: (
Line 2213: ID = newname
Line 2213: )
Line 2213: ;
Line 2214: ID = error
Line 2214: =
Line 2214: ID = PTR_ERR
Line 2214: (
Line 2214: ID = to
Line 2214: )
Line 2214: ;
Line 2215: if
Line 2215: (
Line 2215: !
Line 2215: ID = IS_ERR
Line 2215: (
Line 2215: ID = to
Line 2215: )
Line 2215: )
Line 2215: {
Line 2216: ID = error
Line 2216: =
Line 2216: ID = do_rename
Line 2216: (
Line 2216: ID = from
Line 2216: ,
Line 2216: ID = to
Line 2216: )
Line 2216: ;
Line 2217: ID = putname
Line 2217: (
Line 2217: ID = to
Line 2217: )
Line 2217: ;
Line 2218: }
Line 2219: ID = putname
Line 2219: (
Line 2219: ID = from
Line 2219: )
Line 2219: ;
Line 2220: return
Line 2220: ID = error
Line 2220: ;
Line 2221: }
Line 2223: int
Line 2223: ID = vfs_readlink
Line 2223: (
Line 2223: ID = struct
Line 2223: ID = dentry
Line 2223: *
Line 2223: ID = dentry
Line 2223: ,
Line 2223: char
Line 2223: Unrecognized token: 95
Line 2223: Unrecognized token: 95
Line 2223: ID = user
Line 2223: *
Line 2223: ID = buffer
Line 2223: ,
Line 2223: int
Line 2223: ID = buflen
Line 2223: ,
Line 2223: ID = const
Line 2223: char
Line 2223: *
Line 2223: ID = link
Line 2223: )
Line 2224: {
Line 2225: int
Line 2225: ID = len
Line 2225: ;
Line 2227: ID = len
Line 2227: =
Line 2227: ID = PTR_ERR
Line 2227: (
Line 2227: ID = link
Line 2227: )
Line 2227: ;
Line 2228: if
Line 2228: (
Line 2228: ID = IS_ERR
Line 2228: (
Line 2228: ID = link
Line 2228: )
Line 2228: )
Line 2229: ID = goto
Line 2229: ID = out
Line 2229: ;
Line 2231: ID = len
Line 2231: =
Line 2231: ID = strlen
Line 2231: (
Line 2231: ID = link
Line 2231: )
Line 2231: ;
Line 2232: if
Line 2232: (
Line 2232: ID = len
Line 2232: >
Line 2232: (
Line 2232: ID = unsigned
Line 2232: )
Line 2232: ID = buflen
Line 2232: )
Line 2233: ID = len
Line 2233: =
Line 2233: ID = buflen
Line 2233: ;
Line 2234: if
Line 2234: (
Line 2234: ID = copy_to_user
Line 2234: (
Line 2234: ID = buffer
Line 2234: ,
Line 2234: ID = link
Line 2234: ,
Line 2234: ID = len
Line 2234: )
Line 2234: )
Line 2235: ID = len
Line 2235: =
Line 2235: -
Line 2235: ID = EFAULT
Line 2235: ;
Line 2236: ID = out
Line 2236: Unrecognized token: 58
Line 2237: return
Line 2237: ID = len
Line 2237: ;
Line 2238: }
Line 2245: int
Line 2245: ID = generic_readlink
Line 2245: (
Line 2245: ID = struct
Line 2245: ID = dentry
Line 2245: *
Line 2245: ID = dentry
Line 2245: ,
Line 2245: char
Line 2245: Unrecognized token: 95
Line 2245: Unrecognized token: 95
Line 2245: ID = user
Line 2245: *
Line 2245: ID = buffer
Line 2245: ,
Line 2245: int
Line 2245: ID = buflen
Line 2245: )
Line 2246: {
Line 2247: ID = struct
Line 2247: ID = nameidata
Line 2247: ID = nd
Line 2247: ;
Line 2248: int
Line 2248: ID = res
Line 2248: ;
Line 2249: ID = nd
Line 2249: Unrecognized token: 46
Line 2249: ID = depth
Line 2249: =
Line 2249: INTCON = 0
Line 2249: ;
Line 2250: ID = res
Line 2250: =
Line 2250: ID = dentry
Line 2250: -
Line 2250: >
Line 2250: ID = d_inode
Line 2250: -
Line 2250: >
Line 2250: ID = i_op
Line 2250: -
Line 2250: >
Line 2250: ID = follow_link
Line 2250: (
Line 2250: ID = dentry
Line 2250: ,
Line 2250: Unrecognized token: 38
Line 2250: ID = nd
Line 2250: )
Line 2250: ;
Line 2251: if
Line 2251: (
Line 2251: !
Line 2251: ID = res
Line 2251: )
Line 2251: {
Line 2252: ID = res
Line 2252: =
Line 2252: ID = vfs_readlink
Line 2252: (
Line 2252: ID = dentry
Line 2252: ,
Line 2252: ID = buffer
Line 2252: ,
Line 2252: ID = buflen
Line 2252: ,
Line 2252: ID = nd_get_link
Line 2252: (
Line 2252: Unrecognized token: 38
Line 2252: ID = nd
Line 2252: )
Line 2252: )
Line 2252: ;
Line 2253: if
Line 2253: (
Line 2253: ID = dentry
Line 2253: -
Line 2253: >
Line 2253: ID = d_inode
Line 2253: -
Line 2253: >
Line 2253: ID = i_op
Line 2253: -
Line 2253: >
Line 2253: ID = put_link
Line 2253: )
Line 2254: ID = dentry
Line 2254: -
Line 2254: >
Line 2254: ID = d_inode
Line 2254: -
Line 2254: >
Line 2254: ID = i_op
Line 2254: -
Line 2254: >
Line 2254: ID = put_link
Line 2254: (
Line 2254: ID = dentry
Line 2254: ,
Line 2254: Unrecognized token: 38
Line 2254: ID = nd
Line 2254: )
Line 2254: ;
Line 2255: }
Line 2256: return
Line 2256: ID = res
Line 2256: ;
Line 2257: }
Line 2259: int
Line 2259: ID = vfs_follow_link
Line 2259: (
Line 2259: ID = struct
Line 2259: ID = nameidata
Line 2259: *
Line 2259: ID = nd
Line 2259: ,
Line 2259: ID = const
Line 2259: char
Line 2259: *
Line 2259: ID = link
Line 2259: )
Line 2260: {
Line 2261: return
Line 2261: Unrecognized token: 95
Line 2261: Unrecognized token: 95
Line 2261: ID = vfs_follow_link
Line 2261: (
Line 2261: ID = nd
Line 2261: ,
Line 2261: ID = link
Line 2261: )
Line 2261: ;
Line 2262: }
Line 2265: ID = static
Line 2265: char
Line 2265: *
Line 2265: ID = page_getlink
Line 2265: (
Line 2265: ID = struct
Line 2265: ID = dentry
Line 2265: *
Line 2265: ID = dentry
Line 2265: ,
Line 2265: ID = struct
Line 2265: ID = page
Line 2265: *
Line 2265: *
Line 2265: ID = ppage
Line 2265: )
Line 2266: {
Line 2267: ID = struct
Line 2267: ID = page
Line 2267: *
Line 2267: ID = page
Line 2267: ;
Line 2268: ID = struct
Line 2268: ID = address_space
Line 2268: *
Line 2268: ID = mapping
Line 2268: =
Line 2268: ID = dentry
Line 2268: -
Line 2268: >
Line 2268: ID = d_inode
Line 2268: -
Line 2268: >
Line 2268: ID = i_mapping
Line 2268: ;
Line 2269: ID = page
Line 2269: =
Line 2269: ID = read_cache_page
Line 2269: (
Line 2269: ID = mapping
Line 2269: ,
Line 2269: INTCON = 0
Line 2269: ,
Line 2269: (
Line 2269: ID = filler_t
Line 2269: *
Line 2269: )
Line 2269: ID = mapping
Line 2269: -
Line 2269: >
Line 2269: ID = a_ops
Line 2269: -
Line 2269: >
Line 2269: ID = readpage
Line 2269: ,
Line 2270: ID = NULL
Line 2270: )
Line 2270: ;
Line 2271: if
Line 2271: (
Line 2271: ID = IS_ERR
Line 2271: (
Line 2271: ID = page
Line 2271: )
Line 2271: )
Line 2272: ID = goto
Line 2272: ID = sync_fail
Line 2272: ;
Line 2273: ID = wait_on_page_locked
Line 2273: (
Line 2273: ID = page
Line 2273: )
Line 2273: ;
Line 2274: if
Line 2274: (
Line 2274: !
Line 2274: ID = PageUptodate
Line 2274: (
Line 2274: ID = page
Line 2274: )
Line 2274: )
Line 2275: ID = goto
Line 2275: ID = async_fail
Line 2275: ;
Line 2276: *
Line 2276: ID = ppage
Line 2276: =
Line 2276: ID = page
Line 2276: ;
Line 2277: return
Line 2277: ID = kmap
Line 2277: (
Line 2277: ID = page
Line 2277: )
Line 2277: ;
Line 2279: ID = async_fail
Line 2279: Unrecognized token: 58
Line 2280: ID = page_cache_release
Line 2280: (
Line 2280: ID = page
Line 2280: )
Line 2280: ;
Line 2281: return
Line 2281: ID = ERR_PTR
Line 2281: (
Line 2281: -
Line 2281: ID = EIO
Line 2281: )
Line 2281: ;
Line 2283: ID = sync_fail
Line 2283: Unrecognized token: 58
Line 2284: return
Line 2284: (
Line 2284: char
Line 2284: *
Line 2284: )
Line 2284: ID = page
Line 2284: ;
Line 2285: }
Line 2287: int
Line 2287: ID = page_readlink
Line 2287: (
Line 2287: ID = struct
Line 2287: ID = dentry
Line 2287: *
Line 2287: ID = dentry
Line 2287: ,
Line 2287: char
Line 2287: Unrecognized token: 95
Line 2287: Unrecognized token: 95
Line 2287: ID = user
Line 2287: *
Line 2287: ID = buffer
Line 2287: ,
Line 2287: int
Line 2287: ID = buflen
Line 2287: )
Line 2288: {
Line 2289: ID = struct
Line 2289: ID = page
Line 2289: *
Line 2289: ID = page
Line 2289: =
Line 2289: ID = NULL
Line 2289: ;
Line 2290: char
Line 2290: *
Line 2290: ID = s
Line 2290: =
Line 2290: ID = page_getlink
Line 2290: (
Line 2290: ID = dentry
Line 2290: ,
Line 2290: Unrecognized token: 38
Line 2290: ID = page
Line 2290: )
Line 2290: ;
Line 2291: int
Line 2291: ID = res
Line 2291: =
Line 2291: ID = vfs_readlink
Line 2291: (
Line 2291: ID = dentry
Line 2291: ,
Line 2291: ID = buffer
Line 2291: ,
Line 2291: ID = buflen
Line 2291: ,
Line 2291: ID = s
Line 2291: )
Line 2291: ;
Line 2292: if
Line 2292: (
Line 2292: ID = page
Line 2292: )
Line 2292: {
Line 2293: ID = kunmap
Line 2293: (
Line 2293: ID = page
Line 2293: )
Line 2293: ;
Line 2294: ID = page_cache_release
Line 2294: (
Line 2294: ID = page
Line 2294: )
Line 2294: ;
Line 2295: }
Line 2296: return
Line 2296: ID = res
Line 2296: ;
Line 2297: }
Line 2299: int
Line 2299: ID = page_follow_link_light
Line 2299: (
Line 2299: ID = struct
Line 2299: ID = dentry
Line 2299: *
Line 2299: ID = dentry
Line 2299: ,
Line 2299: ID = struct
Line 2299: ID = nameidata
Line 2299: *
Line 2299: ID = nd
Line 2299: )
Line 2300: {
Line 2301: ID = struct
Line 2301: ID = page
Line 2301: *
Line 2301: ID = page
Line 2301: ;
Line 2302: char
Line 2302: *
Line 2302: ID = s
Line 2302: =
Line 2302: ID = page_getlink
Line 2302: (
Line 2302: ID = dentry
Line 2302: ,
Line 2302: Unrecognized token: 38
Line 2302: ID = page
Line 2302: )
Line 2302: ;
Line 2303: if
Line 2303: (
Line 2303: !
Line 2303: ID = IS_ERR
Line 2303: (
Line 2303: ID = s
Line 2303: )
Line 2303: )
Line 2303: {
Line 2304: ID = nd_set_link
Line 2304: (
Line 2304: ID = nd
Line 2304: ,
Line 2304: ID = s
Line 2304: )
Line 2304: ;
Line 2305: ID = s
Line 2305: =
Line 2305: ID = NULL
Line 2305: ;
Line 2306: }
Line 2307: return
Line 2307: ID = PTR_ERR
Line 2307: (
Line 2307: ID = s
Line 2307: )
Line 2307: ;
Line 2308: }
Line 2310: void
Line 2310: ID = page_put_link
Line 2310: (
Line 2310: ID = struct
Line 2310: ID = dentry
Line 2310: *
Line 2310: ID = dentry
Line 2310: ,
Line 2310: ID = struct
Line 2310: ID = nameidata
Line 2310: *
Line 2310: ID = nd
Line 2310: )
Line 2311: {
Line 2312: if
Line 2312: (
Line 2312: !
Line 2312: ID = IS_ERR
Line 2312: (
Line 2312: ID = nd_get_link
Line 2312: (
Line 2312: ID = nd
Line 2312: )
Line 2312: )
Line 2312: )
Line 2312: {
Line 2313: ID = struct
Line 2313: ID = page
Line 2313: *
Line 2313: ID = page
Line 2313: ;
Line 2314: ID = page
Line 2314: =
Line 2314: ID = find_get_page
Line 2314: (
Line 2314: ID = dentry
Line 2314: -
Line 2314: >
Line 2314: ID = d_inode
Line 2314: -
Line 2314: >
Line 2314: ID = i_mapping
Line 2314: ,
Line 2314: INTCON = 0
Line 2314: )
Line 2314: ;
Line 2315: if
Line 2315: (
Line 2315: !
Line 2315: ID = page
Line 2315: )
Line 2316: ID = BUG
Line 2316: (
Line 2316: )
Line 2316: ;
Line 2317: ID = kunmap
Line 2317: (
Line 2317: ID = page
Line 2317: )
Line 2317: ;
Line 2318: ID = page_cache_release
Line 2318: (
Line 2318: ID = page
Line 2318: )
Line 2318: ;
Line 2319: ID = page_cache_release
Line 2319: (
Line 2319: ID = page
Line 2319: )
Line 2319: ;
Line 2320: }
Line 2321: }
Line 2323: int
Line 2323: ID = page_follow_link
Line 2323: (
Line 2323: ID = struct
Line 2323: ID = dentry
Line 2323: *
Line 2323: ID = dentry
Line 2323: ,
Line 2323: ID = struct
Line 2323: ID = nameidata
Line 2323: *
Line 2323: ID = nd
Line 2323: )
Line 2324: {
Line 2325: ID = struct
Line 2325: ID = page
Line 2325: *
Line 2325: ID = page
Line 2325: =
Line 2325: ID = NULL
Line 2325: ;
Line 2326: char
Line 2326: *
Line 2326: ID = s
Line 2326: =
Line 2326: ID = page_getlink
Line 2326: (
Line 2326: ID = dentry
Line 2326: ,
Line 2326: Unrecognized token: 38
Line 2326: ID = page
Line 2326: )
Line 2326: ;
Line 2327: int
Line 2327: ID = res
Line 2327: =
Line 2327: Unrecognized token: 95
Line 2327: Unrecognized token: 95
Line 2327: ID = vfs_follow_link
Line 2327: (
Line 2327: ID = nd
Line 2327: ,
Line 2327: ID = s
Line 2327: )
Line 2327: ;
Line 2328: if
Line 2328: (
Line 2328: ID = page
Line 2328: )
Line 2328: {
Line 2329: ID = kunmap
Line 2329: (
Line 2329: ID = page
Line 2329: )
Line 2329: ;
Line 2330: ID = page_cache_release
Line 2330: (
Line 2330: ID = page
Line 2330: )
Line 2330: ;
Line 2331: }
Line 2332: return
Line 2332: ID = res
Line 2332: ;
Line 2333: }
Line 2335: int
Line 2335: ID = page_symlink
Line 2335: (
Line 2335: ID = struct
Line 2335: ID = inode
Line 2335: *
Line 2335: ID = inode
Line 2335: ,
Line 2335: ID = const
Line 2335: char
Line 2335: *
Line 2335: ID = symname
Line 2335: ,
Line 2335: int
Line 2335: ID = len
Line 2335: )
Line 2336: {
Line 2337: ID = struct
Line 2337: ID = address_space
Line 2337: *
Line 2337: ID = mapping
Line 2337: =
Line 2337: ID = inode
Line 2337: -
Line 2337: >
Line 2337: ID = i_mapping
Line 2337: ;
Line 2338: ID = struct
Line 2338: ID = page
Line 2338: *
Line 2338: ID = page
Line 2338: =
Line 2338: ID = grab_cache_page
Line 2338: (
Line 2338: ID = mapping
Line 2338: ,
Line 2338: INTCON = 0
Line 2338: )
Line 2338: ;
Line 2339: int
Line 2339: ID = err
Line 2339: =
Line 2339: -
Line 2339: ID = ENOMEM
Line 2339: ;
Line 2340: char
Line 2340: *
Line 2340: ID = kaddr
Line 2340: ;
Line 2342: if
Line 2342: (
Line 2342: !
Line 2342: ID = page
Line 2342: )
Line 2343: ID = goto
Line 2343: ID = fail
Line 2343: ;
Line 2344: ID = err
Line 2344: =
Line 2344: ID = mapping
Line 2344: -
Line 2344: >
Line 2344: ID = a_ops
Line 2344: -
Line 2344: >
Line 2344: ID = prepare_write
Line 2344: (
Line 2344: ID = NULL
Line 2344: ,
Line 2344: ID = page
Line 2344: ,
Line 2344: INTCON = 0
Line 2344: ,
Line 2344: ID = len
Line 2344: -
Line 2344: INTCON = 1
Line 2344: )
Line 2344: ;
Line 2345: if
Line 2345: (
Line 2345: ID = err
Line 2345: )
Line 2346: ID = goto
Line 2346: ID = fail_map
Line 2346: ;
Line 2347: ID = kaddr
Line 2347: =
Line 2347: ID = kmap_atomic
Line 2347: (
Line 2347: ID = page
Line 2347: ,
Line 2347: ID = KM_USER0
Line 2347: )
Line 2347: ;
Line 2348: ID = memcpy
Line 2348: (
Line 2348: ID = kaddr
Line 2348: ,
Line 2348: ID = symname
Line 2348: ,
Line 2348: ID = len
Line 2348: -
Line 2348: INTCON = 1
Line 2348: )
Line 2348: ;
Line 2349: ID = kunmap_atomic
Line 2349: (
Line 2349: ID = kaddr
Line 2349: ,
Line 2349: ID = KM_USER0
Line 2349: )
Line 2349: ;
Line 2350: ID = mapping
Line 2350: -
Line 2350: >
Line 2350: ID = a_ops
Line 2350: -
Line 2350: >
Line 2350: ID = commit_write
Line 2350: (
Line 2350: ID = NULL
Line 2350: ,
Line 2350: ID = page
Line 2350: ,
Line 2350: INTCON = 0
Line 2350: ,
Line 2350: ID = len
Line 2350: -
Line 2350: INTCON = 1
Line 2350: )
Line 2350: ;
Line 2358: if
Line 2358: (
Line 2358: !
Line 2358: ID = PageUptodate
Line 2358: (
Line 2358: ID = page
Line 2358: )
Line 2358: )
Line 2358: {
Line 2359: ID = err
Line 2359: =
Line 2359: ID = mapping
Line 2359: -
Line 2359: >
Line 2359: ID = a_ops
Line 2359: -
Line 2359: >
Line 2359: ID = readpage
Line 2359: (
Line 2359: ID = NULL
Line 2359: ,
Line 2359: ID = page
Line 2359: )
Line 2359: ;
Line 2360: ID = wait_on_page_locked
Line 2360: (
Line 2360: ID = page
Line 2360: )
Line 2360: ;
Line 2361: }
Line 2361: else
Line 2361: {
Line 2362: ID = unlock_page
Line 2362: (
Line 2362: ID = page
Line 2362: )
Line 2362: ;
Line 2363: }
Line 2364: ID = page_cache_release
Line 2364: (
Line 2364: ID = page
Line 2364: )
Line 2364: ;
Line 2365: if
Line 2365: (
Line 2365: ID = err
Line 2365: <
Line 2365: INTCON = 0
Line 2365: )
Line 2366: ID = goto
Line 2366: ID = fail
Line 2366: ;
Line 2367: ID = mark_inode_dirty
Line 2367: (
Line 2367: ID = inode
Line 2367: )
Line 2367: ;
Line 2368: return
Line 2368: INTCON = 0
Line 2368: ;
Line 2369: ID = fail_map
Line 2369: Unrecognized token: 58
Line 2370: ID = unlock_page
Line 2370: (
Line 2370: ID = page
Line 2370: )
Line 2370: ;
Line 2371: ID = page_cache_release
Line 2371: (
Line 2371: ID = page
Line 2371: )
Line 2371: ;
Line 2372: ID = fail
Line 2372: Unrecognized token: 58
Line 2373: return
Line 2373: ID = err
Line 2373: ;
Line 2374: }
Line 2376: ID = struct
Line 2376: ID = inode_operations
Line 2376: ID = page_symlink_inode_operations
Line 2376: =
Line 2376: {
Line 2377: Unrecognized token: 46
Line 2377: ID = readlink
Line 2377: =
Line 2377: ID = generic_readlink
Line 2377: ,
Line 2378: Unrecognized token: 46
Line 2378: ID = follow_link
Line 2378: =
Line 2378: ID = page_follow_link_light
Line 2378: ,
Line 2379: Unrecognized token: 46
Line 2379: ID = put_link
Line 2379: =
Line 2379: ID = page_put_link
Line 2379: ,
Line 2380: }
Line 2380: ;
Line 2382: ID = EXPORT_SYMBOL
Line 2382: (
Line 2382: Unrecognized token: 95
Line 2382: Unrecognized token: 95
Line 2382: ID = user_walk
Line 2382: )
Line 2382: ;
Line 2383: ID = EXPORT_SYMBOL
Line 2383: (
Line 2383: ID = follow_down
Line 2383: )
Line 2383: ;
Line 2384: ID = EXPORT_SYMBOL
Line 2384: (
Line 2384: ID = follow_up
Line 2384: )
Line 2384: ;
Line 2385: ID = EXPORT_SYMBOL
Line 2385: (
Line 2385: ID = get_write_access
Line 2385: )
Line 2385: ;
Line 2386: ID = EXPORT_SYMBOL
Line 2386: (
Line 2386: ID = getname
Line 2386: )
Line 2386: ;
Line 2387: ID = EXPORT_SYMBOL
Line 2387: (
Line 2387: ID = lock_rename
Line 2387: )
Line 2387: ;
Line 2388: ID = EXPORT_SYMBOL
Line 2388: (
Line 2388: ID = lookup_create
Line 2388: )
Line 2388: ;
Line 2389: ID = EXPORT_SYMBOL
Line 2389: (
Line 2389: ID = lookup_hash
Line 2389: )
Line 2389: ;
Line 2390: ID = EXPORT_SYMBOL
Line 2390: (
Line 2390: ID = lookup_one_len
Line 2390: )
Line 2390: ;
Line 2391: ID = EXPORT_SYMBOL
Line 2391: (
Line 2391: ID = page_follow_link
Line 2391: )
Line 2391: ;
Line 2392: ID = EXPORT_SYMBOL
Line 2392: (
Line 2392: ID = page_follow_link_light
Line 2392: )
Line 2392: ;
Line 2393: ID = EXPORT_SYMBOL
Line 2393: (
Line 2393: ID = page_put_link
Line 2393: )
Line 2393: ;
Line 2394: ID = EXPORT_SYMBOL
Line 2394: (
Line 2394: ID = page_readlink
Line 2394: )
Line 2394: ;
Line 2395: ID = EXPORT_SYMBOL
Line 2395: (
Line 2395: ID = page_symlink
Line 2395: )
Line 2395: ;
Line 2396: ID = EXPORT_SYMBOL
Line 2396: (
Line 2396: ID = page_symlink_inode_operations
Line 2396: )
Line 2396: ;
Line 2397: ID = EXPORT_SYMBOL
Line 2397: (
Line 2397: ID = path_lookup
Line 2397: )
Line 2397: ;
Line 2398: ID = EXPORT_SYMBOL
Line 2398: (
Line 2398: ID = path_release
Line 2398: )
Line 2398: ;
Line 2399: ID = EXPORT_SYMBOL
Line 2399: (
Line 2399: ID = path_walk
Line 2399: )
Line 2399: ;
Line 2400: ID = EXPORT_SYMBOL
Line 2400: (
Line 2400: ID = permission
Line 2400: )
Line 2400: ;
Line 2401: ID = EXPORT_SYMBOL
Line 2401: (
Line 2401: ID = unlock_rename
Line 2401: )
Line 2401: ;
Line 2402: ID = EXPORT_SYMBOL
Line 2402: (
Line 2402: ID = vfs_create
Line 2402: )
Line 2402: ;
Line 2403: ID = EXPORT_SYMBOL
Line 2403: (
Line 2403: ID = vfs_follow_link
Line 2403: )
Line 2403: ;
Line 2404: ID = EXPORT_SYMBOL
Line 2404: (
Line 2404: ID = vfs_link
Line 2404: )
Line 2404: ;
Line 2405: ID = EXPORT_SYMBOL
Line 2405: (
Line 2405: ID = vfs_mkdir
Line 2405: )
Line 2405: ;
Line 2406: ID = EXPORT_SYMBOL
Line 2406: (
Line 2406: ID = vfs_mknod
Line 2406: )
Line 2406: ;
Line 2407: ID = EXPORT_SYMBOL
Line 2407: (
Line 2407: ID = vfs_permission
Line 2407: )
Line 2407: ;
Line 2408: ID = EXPORT_SYMBOL
Line 2408: (
Line 2408: ID = vfs_readlink
Line 2408: )
Line 2408: ;
Line 2409: ID = EXPORT_SYMBOL
Line 2409: (
Line 2409: ID = vfs_rename
Line 2409: )
Line 2409: ;
Line 2410: ID = EXPORT_SYMBOL
Line 2410: (
Line 2410: ID = vfs_rmdir
Line 2410: )
Line 2410: ;
Line 2411: ID = EXPORT_SYMBOL
Line 2411: (
Line 2411: ID = vfs_symlink
Line 2411: )
Line 2411: ;
Line 2412: ID = EXPORT_SYMBOL
Line 2412: (
Line 2412: ID = vfs_unlink
Line 2412: )
Line 2412: ;
Line 2413: ID = EXPORT_SYMBOL
Line 2413: (
Line 2413: ID = generic_readlink
Line 2413: )
Line 2413: ;
Line 2414: -EOF-

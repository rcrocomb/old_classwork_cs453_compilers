Line 15: Unrecognized token: 35
Line 15: ID = include
Line 15: <
Line 15: ID = linux
Line 15: /
Line 15: ID = config
Line 15: Unrecognized token: 46
Line 15: ID = h
Line 15: >
Line 16: Unrecognized token: 35
Line 16: ID = include
Line 16: <
Line 16: ID = linux
Line 16: /
Line 16: ID = module
Line 16: Unrecognized token: 46
Line 16: ID = h
Line 16: >
Line 17: Unrecognized token: 35
Line 17: ID = include
Line 17: <
Line 17: ID = linux
Line 17: /
Line 17: ID = slab
Line 17: Unrecognized token: 46
Line 17: ID = h
Line 17: >
Line 18: Unrecognized token: 35
Line 18: ID = include
Line 18: <
Line 18: ID = linux
Line 18: /
Line 18: ID = list
Line 18: Unrecognized token: 46
Line 18: ID = h
Line 18: >
Line 19: Unrecognized token: 35
Line 19: ID = include
Line 19: <
Line 19: ID = linux
Line 19: /
Line 19: ID = mount
Line 19: Unrecognized token: 46
Line 19: ID = h
Line 19: >
Line 20: Unrecognized token: 35
Line 20: ID = include
Line 20: <
Line 20: ID = linux
Line 20: /
Line 20: ID = dcache
Line 20: Unrecognized token: 46
Line 20: ID = h
Line 20: >
Line 21: Unrecognized token: 35
Line 21: ID = include
Line 21: <
Line 21: ID = linux
Line 21: /
Line 21: ID = mm
Line 21: Unrecognized token: 46
Line 21: ID = h
Line 21: >
Line 22: Unrecognized token: 35
Line 22: ID = include
Line 22: <
Line 22: ID = linux
Line 22: /
Line 22: ID = errno
Line 22: Unrecognized token: 46
Line 22: ID = h
Line 22: >
Line 23: Unrecognized token: 35
Line 23: ID = include
Line 23: <
Line 23: ID = linux
Line 23: /
Line 23: ID = dcookies
Line 23: Unrecognized token: 46
Line 23: ID = h
Line 23: >
Line 24: Unrecognized token: 35
Line 24: ID = include
Line 24: <
Line 24: ID = asm
Line 24: /
Line 24: ID = uaccess
Line 24: Unrecognized token: 46
Line 24: ID = h
Line 24: >
Line 30: ID = struct
Line 30: ID = dcookie_struct
Line 30: {
Line 31: ID = struct
Line 31: ID = dentry
Line 31: *
Line 31: ID = dentry
Line 31: ;
Line 32: ID = struct
Line 32: ID = vfsmount
Line 32: *
Line 32: ID = vfsmnt
Line 32: ;
Line 33: ID = struct
Line 33: ID = list_head
Line 33: ID = hash_list
Line 33: ;
Line 34: }
Line 34: ;
Line 36: ID = static
Line 36: ID = LIST_HEAD
Line 36: (
Line 36: ID = dcookie_users
Line 36: )
Line 36: ;
Line 37: ID = static
Line 37: ID = DECLARE_MUTEX
Line 37: (
Line 37: ID = dcookie_sem
Line 37: )
Line 37: ;
Line 38: ID = static
Line 38: ID = kmem_cache_t
Line 38: *
Line 38: ID = dcookie_cache
Line 38: ;
Line 39: ID = static
Line 39: ID = struct
Line 39: ID = list_head
Line 39: *
Line 39: ID = dcookie_hashtable
Line 39: ;
Line 40: ID = static
Line 40: ID = size_t
Line 40: ID = hash_size
Line 40: ;
Line 42: ID = static
Line 42: ID = inline
Line 42: int
Line 42: ID = is_live
Line 42: (
Line 42: void
Line 42: )
Line 43: {
Line 44: return
Line 44: !
Line 44: (
Line 44: ID = list_empty
Line 44: (
Line 44: Unrecognized token: 38
Line 44: ID = dcookie_users
Line 44: )
Line 44: )
Line 44: ;
Line 45: }
Line 49: ID = static
Line 49: ID = inline
Line 49: ID = unsigned
Line 49: ID = long
Line 49: ID = dcookie_value
Line 49: (
Line 49: ID = struct
Line 49: ID = dcookie_struct
Line 49: *
Line 49: ID = dcs
Line 49: )
Line 50: {
Line 51: return
Line 51: (
Line 51: ID = unsigned
Line 51: ID = long
Line 51: )
Line 51: ID = dcs
Line 51: -
Line 51: >
Line 51: ID = dentry
Line 51: ;
Line 52: }
Line 55: ID = static
Line 55: ID = size_t
Line 55: ID = dcookie_hash
Line 55: (
Line 55: ID = unsigned
Line 55: ID = long
Line 55: ID = dcookie
Line 55: )
Line 56: {
Line 57: return
Line 57: (
Line 57: ID = dcookie
Line 57: >
Line 57: >
Line 57: ID = L1_CACHE_SHIFT
Line 57: )
Line 57: Unrecognized token: 38
Line 57: (
Line 57: ID = hash_size
Line 57: -
Line 57: INTCON = 1
Line 57: )
Line 57: ;
Line 58: }
Line 61: ID = static
Line 61: ID = struct
Line 61: ID = dcookie_struct
Line 61: *
Line 61: ID = find_dcookie
Line 61: (
Line 61: ID = unsigned
Line 61: ID = long
Line 61: ID = dcookie
Line 61: )
Line 62: {
Line 63: ID = struct
Line 63: ID = dcookie_struct
Line 63: *
Line 63: ID = found
Line 63: =
Line 63: ID = NULL
Line 63: ;
Line 64: ID = struct
Line 64: ID = dcookie_struct
Line 64: *
Line 64: ID = dcs
Line 64: ;
Line 65: ID = struct
Line 65: ID = list_head
Line 65: *
Line 65: ID = pos
Line 65: ;
Line 66: ID = struct
Line 66: ID = list_head
Line 66: *
Line 66: ID = list
Line 66: ;
Line 68: ID = list
Line 68: =
Line 68: ID = dcookie_hashtable
Line 68: +
Line 68: ID = dcookie_hash
Line 68: (
Line 68: ID = dcookie
Line 68: )
Line 68: ;
Line 70: ID = list_for_each
Line 70: (
Line 70: ID = pos
Line 70: ,
Line 70: ID = list
Line 70: )
Line 70: {
Line 71: ID = dcs
Line 71: =
Line 71: ID = list_entry
Line 71: (
Line 71: ID = pos
Line 71: ,
Line 71: ID = struct
Line 71: ID = dcookie_struct
Line 71: ,
Line 71: ID = hash_list
Line 71: )
Line 71: ;
Line 72: if
Line 72: (
Line 72: ID = dcookie_value
Line 72: (
Line 72: ID = dcs
Line 72: )
Line 72: ==
Line 72: ID = dcookie
Line 72: )
Line 72: {
Line 73: ID = found
Line 73: =
Line 73: ID = dcs
Line 73: ;
Line 74: ID = break
Line 74: ;
Line 75: }
Line 76: }
Line 78: return
Line 78: ID = found
Line 78: ;
Line 79: }
Line 82: ID = static
Line 82: void
Line 82: ID = hash_dcookie
Line 82: (
Line 82: ID = struct
Line 82: ID = dcookie_struct
Line 82: *
Line 82: ID = dcs
Line 82: )
Line 83: {
Line 84: ID = struct
Line 84: ID = list_head
Line 84: *
Line 84: ID = list
Line 84: =
Line 84: ID = dcookie_hashtable
Line 84: +
Line 84: ID = dcookie_hash
Line 84: (
Line 84: ID = dcookie_value
Line 84: (
Line 84: ID = dcs
Line 84: )
Line 84: )
Line 84: ;
Line 85: ID = list_add
Line 85: (
Line 85: Unrecognized token: 38
Line 85: ID = dcs
Line 85: -
Line 85: >
Line 85: ID = hash_list
Line 85: ,
Line 85: ID = list
Line 85: )
Line 85: ;
Line 86: }
Line 89: ID = static
Line 89: ID = struct
Line 89: ID = dcookie_struct
Line 89: *
Line 89: ID = alloc_dcookie
Line 89: (
Line 89: ID = struct
Line 89: ID = dentry
Line 89: *
Line 89: ID = dentry
Line 89: ,
Line 90: ID = struct
Line 90: ID = vfsmount
Line 90: *
Line 90: ID = vfsmnt
Line 90: )
Line 91: {
Line 92: ID = struct
Line 92: ID = dcookie_struct
Line 92: *
Line 92: ID = dcs
Line 92: =
Line 92: ID = kmem_cache_alloc
Line 92: (
Line 92: ID = dcookie_cache
Line 92: ,
Line 92: ID = GFP_KERNEL
Line 92: )
Line 92: ;
Line 93: if
Line 93: (
Line 93: !
Line 93: ID = dcs
Line 93: )
Line 94: return
Line 94: ID = NULL
Line 94: ;
Line 96: ID = atomic_inc
Line 96: (
Line 96: Unrecognized token: 38
Line 96: ID = dentry
Line 96: -
Line 96: >
Line 96: ID = d_count
Line 96: )
Line 96: ;
Line 97: ID = atomic_inc
Line 97: (
Line 97: Unrecognized token: 38
Line 97: ID = vfsmnt
Line 97: -
Line 97: >
Line 97: ID = mnt_count
Line 97: )
Line 97: ;
Line 98: ID = dentry
Line 98: -
Line 98: >
Line 98: ID = d_cookie
Line 98: =
Line 98: ID = dcs
Line 98: ;
Line 100: ID = dcs
Line 100: -
Line 100: >
Line 100: ID = dentry
Line 100: =
Line 100: ID = dentry
Line 100: ;
Line 101: ID = dcs
Line 101: -
Line 101: >
Line 101: ID = vfsmnt
Line 101: =
Line 101: ID = vfsmnt
Line 101: ;
Line 102: ID = hash_dcookie
Line 102: (
Line 102: ID = dcs
Line 102: )
Line 102: ;
Line 104: return
Line 104: ID = dcs
Line 104: ;
Line 105: }
Line 111: int
Line 111: ID = get_dcookie
Line 111: (
Line 111: ID = struct
Line 111: ID = dentry
Line 111: *
Line 111: ID = dentry
Line 111: ,
Line 111: ID = struct
Line 111: ID = vfsmount
Line 111: *
Line 111: ID = vfsmnt
Line 111: ,
Line 112: ID = unsigned
Line 112: ID = long
Line 112: *
Line 112: ID = cookie
Line 112: )
Line 113: {
Line 114: int
Line 114: ID = err
Line 114: =
Line 114: INTCON = 0
Line 114: ;
Line 115: ID = struct
Line 115: ID = dcookie_struct
Line 115: *
Line 115: ID = dcs
Line 115: ;
Line 117: ID = down
Line 117: (
Line 117: Unrecognized token: 38
Line 117: ID = dcookie_sem
Line 117: )
Line 117: ;
Line 119: if
Line 119: (
Line 119: !
Line 119: ID = is_live
Line 119: (
Line 119: )
Line 119: )
Line 119: {
Line 120: ID = err
Line 120: =
Line 120: -
Line 120: ID = EINVAL
Line 120: ;
Line 121: ID = goto
Line 121: ID = out
Line 121: ;
Line 122: }
Line 124: ID = dcs
Line 124: =
Line 124: ID = dentry
Line 124: -
Line 124: >
Line 124: ID = d_cookie
Line 124: ;
Line 126: if
Line 126: (
Line 126: !
Line 126: ID = dcs
Line 126: )
Line 127: ID = dcs
Line 127: =
Line 127: ID = alloc_dcookie
Line 127: (
Line 127: ID = dentry
Line 127: ,
Line 127: ID = vfsmnt
Line 127: )
Line 127: ;
Line 129: if
Line 129: (
Line 129: !
Line 129: ID = dcs
Line 129: )
Line 129: {
Line 130: ID = err
Line 130: =
Line 130: -
Line 130: ID = ENOMEM
Line 130: ;
Line 131: ID = goto
Line 131: ID = out
Line 131: ;
Line 132: }
Line 134: *
Line 134: ID = cookie
Line 134: =
Line 134: ID = dcookie_value
Line 134: (
Line 134: ID = dcs
Line 134: )
Line 134: ;
Line 136: ID = out
Line 136: Unrecognized token: 58
Line 137: ID = up
Line 137: (
Line 137: Unrecognized token: 38
Line 137: ID = dcookie_sem
Line 137: )
Line 137: ;
Line 138: return
Line 138: ID = err
Line 138: ;
Line 139: }
Line 145: ID = asmlinkage
Line 145: ID = long
Line 145: ID = sys_lookup_dcookie
Line 145: (
Line 145: ID = u64
Line 145: ID = cookie64
Line 145: ,
Line 145: char
Line 145: Unrecognized token: 95
Line 145: Unrecognized token: 95
Line 145: ID = user
Line 145: *
Line 145: ID = buf
Line 145: ,
Line 145: ID = size_t
Line 145: ID = len
Line 145: )
Line 146: {
Line 147: ID = unsigned
Line 147: ID = long
Line 147: ID = cookie
Line 147: =
Line 147: (
Line 147: ID = unsigned
Line 147: ID = long
Line 147: )
Line 147: ID = cookie64
Line 147: ;
Line 148: int
Line 148: ID = err
Line 148: =
Line 148: -
Line 148: ID = EINVAL
Line 148: ;
Line 149: char
Line 149: *
Line 149: ID = kbuf
Line 149: ;
Line 150: char
Line 150: *
Line 150: ID = path
Line 150: ;
Line 151: ID = size_t
Line 151: ID = pathlen
Line 151: ;
Line 152: ID = struct
Line 152: ID = dcookie_struct
Line 152: *
Line 152: ID = dcs
Line 152: ;
Line 157: if
Line 157: (
Line 157: !
Line 157: ID = capable
Line 157: (
Line 157: ID = CAP_SYS_ADMIN
Line 157: )
Line 157: )
Line 158: return
Line 158: -
Line 158: ID = EPERM
Line 158: ;
Line 160: ID = down
Line 160: (
Line 160: Unrecognized token: 38
Line 160: ID = dcookie_sem
Line 160: )
Line 160: ;
Line 162: if
Line 162: (
Line 162: !
Line 162: ID = is_live
Line 162: (
Line 162: )
Line 162: )
Line 162: {
Line 163: ID = err
Line 163: =
Line 163: -
Line 163: ID = EINVAL
Line 163: ;
Line 164: ID = goto
Line 164: ID = out
Line 164: ;
Line 165: }
Line 167: if
Line 167: (
Line 167: !
Line 167: (
Line 167: ID = dcs
Line 167: =
Line 167: ID = find_dcookie
Line 167: (
Line 167: ID = cookie
Line 167: )
Line 167: )
Line 167: )
Line 168: ID = goto
Line 168: ID = out
Line 168: ;
Line 170: ID = err
Line 170: =
Line 170: -
Line 170: ID = ENOMEM
Line 170: ;
Line 171: ID = kbuf
Line 171: =
Line 171: ID = kmalloc
Line 171: (
Line 171: ID = PAGE_SIZE
Line 171: ,
Line 171: ID = GFP_KERNEL
Line 171: )
Line 171: ;
Line 172: if
Line 172: (
Line 172: !
Line 172: ID = kbuf
Line 172: )
Line 173: ID = goto
Line 173: ID = out
Line 173: ;
Line 176: ID = path
Line 176: =
Line 176: ID = d_path
Line 176: (
Line 176: ID = dcs
Line 176: -
Line 176: >
Line 176: ID = dentry
Line 176: ,
Line 176: ID = dcs
Line 176: -
Line 176: >
Line 176: ID = vfsmnt
Line 176: ,
Line 176: ID = kbuf
Line 176: ,
Line 176: ID = PAGE_SIZE
Line 176: )
Line 176: ;
Line 178: if
Line 178: (
Line 178: ID = IS_ERR
Line 178: (
Line 178: ID = path
Line 178: )
Line 178: )
Line 178: {
Line 179: ID = err
Line 179: =
Line 179: ID = PTR_ERR
Line 179: (
Line 179: ID = path
Line 179: )
Line 179: ;
Line 180: ID = goto
Line 180: ID = out_free
Line 180: ;
Line 181: }
Line 183: ID = err
Line 183: =
Line 183: -
Line 183: ID = ERANGE
Line 183: ;
Line 185: ID = pathlen
Line 185: =
Line 185: ID = kbuf
Line 185: +
Line 185: ID = PAGE_SIZE
Line 185: -
Line 185: ID = path
Line 185: ;
Line 186: if
Line 186: (
Line 186: ID = pathlen
Line 186: <=
Line 186: ID = len
Line 186: )
Line 186: {
Line 187: ID = err
Line 187: =
Line 187: ID = pathlen
Line 187: ;
Line 188: if
Line 188: (
Line 188: ID = copy_to_user
Line 188: (
Line 188: ID = buf
Line 188: ,
Line 188: ID = path
Line 188: ,
Line 188: ID = pathlen
Line 188: )
Line 188: )
Line 189: ID = err
Line 189: =
Line 189: -
Line 189: ID = EFAULT
Line 189: ;
Line 190: }
Line 192: ID = out_free
Line 192: Unrecognized token: 58
Line 193: ID = kfree
Line 193: (
Line 193: ID = kbuf
Line 193: )
Line 193: ;
Line 194: ID = out
Line 194: Unrecognized token: 58
Line 195: ID = up
Line 195: (
Line 195: Unrecognized token: 38
Line 195: ID = dcookie_sem
Line 195: )
Line 195: ;
Line 196: return
Line 196: ID = err
Line 196: ;
Line 197: }
Line 200: ID = static
Line 200: int
Line 200: ID = dcookie_init
Line 200: (
Line 200: void
Line 200: )
Line 201: {
Line 202: ID = struct
Line 202: ID = list_head
Line 202: *
Line 202: ID = d
Line 202: ;
Line 203: ID = unsigned
Line 203: int
Line 203: ID = i
Line 203: ,
Line 203: ID = hash_bits
Line 203: ;
Line 204: int
Line 204: ID = err
Line 204: =
Line 204: -
Line 204: ID = ENOMEM
Line 204: ;
Line 206: ID = dcookie_cache
Line 206: =
Line 206: ID = kmem_cache_create
Line 206: (
Line 206: STRINGCON = "dcookie_cache"
Line 206: ,
Line 207: ID = sizeof
Line 207: (
Line 207: ID = struct
Line 207: ID = dcookie_struct
Line 207: )
Line 207: ,
Line 208: INTCON = 0
Line 208: ,
Line 208: INTCON = 0
Line 208: ,
Line 208: ID = NULL
Line 208: ,
Line 208: ID = NULL
Line 208: )
Line 208: ;
Line 210: if
Line 210: (
Line 210: !
Line 210: ID = dcookie_cache
Line 210: )
Line 211: ID = goto
Line 211: ID = out
Line 211: ;
Line 213: ID = dcookie_hashtable
Line 213: =
Line 213: ID = kmalloc
Line 213: (
Line 213: ID = PAGE_SIZE
Line 213: ,
Line 213: ID = GFP_KERNEL
Line 213: )
Line 213: ;
Line 214: if
Line 214: (
Line 214: !
Line 214: ID = dcookie_hashtable
Line 214: )
Line 215: ID = goto
Line 215: ID = out_kmem
Line 215: ;
Line 217: ID = err
Line 217: =
Line 217: INTCON = 0
Line 217: ;
Line 224: ID = hash_size
Line 224: =
Line 224: ID = PAGE_SIZE
Line 224: /
Line 224: ID = sizeof
Line 224: (
Line 224: ID = struct
Line 224: ID = list_head
Line 224: )
Line 224: ;
Line 225: ID = hash_bits
Line 225: =
Line 225: INTCON = 0
Line 225: ;
Line 226: ID = do
Line 226: {
Line 227: ID = hash_bits
Line 227: +
Line 227: +
Line 227: ;
Line 228: }
Line 228: while
Line 228: (
Line 228: (
Line 228: ID = hash_size
Line 228: >
Line 228: >
Line 228: ID = hash_bits
Line 228: )
Line 228: !=
Line 228: INTCON = 0
Line 228: )
Line 228: ;
Line 229: ID = hash_bits
Line 229: -
Line 229: -
Line 229: ;
Line 235: ID = hash_size
Line 235: =
Line 235: INTCON = 1
Line 235: ID = UL
Line 235: <
Line 235: <
Line 235: ID = hash_bits
Line 235: ;
Line 238: ID = d
Line 238: =
Line 238: ID = dcookie_hashtable
Line 238: ;
Line 239: ID = i
Line 239: =
Line 239: ID = hash_size
Line 239: ;
Line 240: ID = do
Line 240: {
Line 241: ID = INIT_LIST_HEAD
Line 241: (
Line 241: ID = d
Line 241: )
Line 241: ;
Line 242: ID = d
Line 242: +
Line 242: +
Line 242: ;
Line 243: ID = i
Line 243: -
Line 243: -
Line 243: ;
Line 244: }
Line 244: while
Line 244: (
Line 244: ID = i
Line 244: )
Line 244: ;
Line 246: ID = out
Line 246: Unrecognized token: 58
Line 247: return
Line 247: ID = err
Line 247: ;
Line 248: ID = out_kmem
Line 248: Unrecognized token: 58
Line 249: ID = kmem_cache_destroy
Line 249: (
Line 249: ID = dcookie_cache
Line 249: )
Line 249: ;
Line 250: ID = goto
Line 250: ID = out
Line 250: ;
Line 251: }
Line 254: ID = static
Line 254: void
Line 254: ID = free_dcookie
Line 254: (
Line 254: ID = struct
Line 254: ID = dcookie_struct
Line 254: *
Line 254: ID = dcs
Line 254: )
Line 255: {
Line 256: ID = dcs
Line 256: -
Line 256: >
Line 256: ID = dentry
Line 256: -
Line 256: >
Line 256: ID = d_cookie
Line 256: =
Line 256: ID = NULL
Line 256: ;
Line 257: ID = dput
Line 257: (
Line 257: ID = dcs
Line 257: -
Line 257: >
Line 257: ID = dentry
Line 257: )
Line 257: ;
Line 258: ID = mntput
Line 258: (
Line 258: ID = dcs
Line 258: -
Line 258: >
Line 258: ID = vfsmnt
Line 258: )
Line 258: ;
Line 259: ID = kmem_cache_free
Line 259: (
Line 259: ID = dcookie_cache
Line 259: ,
Line 259: ID = dcs
Line 259: )
Line 259: ;
Line 260: }
Line 263: ID = static
Line 263: void
Line 263: ID = dcookie_exit
Line 263: (
Line 263: void
Line 263: )
Line 264: {
Line 265: ID = struct
Line 265: ID = list_head
Line 265: *
Line 265: ID = list
Line 265: ;
Line 266: ID = struct
Line 266: ID = list_head
Line 266: *
Line 266: ID = pos
Line 266: ;
Line 267: ID = struct
Line 267: ID = list_head
Line 267: *
Line 267: ID = pos2
Line 267: ;
Line 268: ID = struct
Line 268: ID = dcookie_struct
Line 268: *
Line 268: ID = dcs
Line 268: ;
Line 269: ID = size_t
Line 269: ID = i
Line 269: ;
Line 271: for
Line 271: (
Line 271: ID = i
Line 271: =
Line 271: INTCON = 0
Line 271: ;
Line 271: ID = i
Line 271: <
Line 271: ID = hash_size
Line 271: ;
Line 271: +
Line 271: +
Line 271: ID = i
Line 271: )
Line 271: {
Line 272: ID = list
Line 272: =
Line 272: ID = dcookie_hashtable
Line 272: +
Line 272: ID = i
Line 272: ;
Line 273: ID = list_for_each_safe
Line 273: (
Line 273: ID = pos
Line 273: ,
Line 273: ID = pos2
Line 273: ,
Line 273: ID = list
Line 273: )
Line 273: {
Line 274: ID = dcs
Line 274: =
Line 274: ID = list_entry
Line 274: (
Line 274: ID = pos
Line 274: ,
Line 274: ID = struct
Line 274: ID = dcookie_struct
Line 274: ,
Line 274: ID = hash_list
Line 274: )
Line 274: ;
Line 275: ID = list_del
Line 275: (
Line 275: Unrecognized token: 38
Line 275: ID = dcs
Line 275: -
Line 275: >
Line 275: ID = hash_list
Line 275: )
Line 275: ;
Line 276: ID = free_dcookie
Line 276: (
Line 276: ID = dcs
Line 276: )
Line 276: ;
Line 277: }
Line 278: }
Line 280: ID = kfree
Line 280: (
Line 280: ID = dcookie_hashtable
Line 280: )
Line 280: ;
Line 281: ID = kmem_cache_destroy
Line 281: (
Line 281: ID = dcookie_cache
Line 281: )
Line 281: ;
Line 282: }
Line 285: ID = struct
Line 285: ID = dcookie_user
Line 285: {
Line 286: ID = struct
Line 286: ID = list_head
Line 286: ID = next
Line 286: ;
Line 287: }
Line 287: ;
Line 289: ID = struct
Line 289: ID = dcookie_user
Line 289: *
Line 289: ID = dcookie_register
Line 289: (
Line 289: void
Line 289: )
Line 290: {
Line 291: ID = struct
Line 291: ID = dcookie_user
Line 291: *
Line 291: ID = user
Line 291: ;
Line 293: ID = down
Line 293: (
Line 293: Unrecognized token: 38
Line 293: ID = dcookie_sem
Line 293: )
Line 293: ;
Line 295: ID = user
Line 295: =
Line 295: ID = kmalloc
Line 295: (
Line 295: ID = sizeof
Line 295: (
Line 295: ID = struct
Line 295: ID = dcookie_user
Line 295: )
Line 295: ,
Line 295: ID = GFP_KERNEL
Line 295: )
Line 295: ;
Line 296: if
Line 296: (
Line 296: !
Line 296: ID = user
Line 296: )
Line 297: ID = goto
Line 297: ID = out
Line 297: ;
Line 299: if
Line 299: (
Line 299: !
Line 299: ID = is_live
Line 299: (
Line 299: )
Line 299: &&
Line 299: ID = dcookie_init
Line 299: (
Line 299: )
Line 299: )
Line 300: ID = goto
Line 300: ID = out_free
Line 300: ;
Line 302: ID = list_add
Line 302: (
Line 302: Unrecognized token: 38
Line 302: ID = user
Line 302: -
Line 302: >
Line 302: ID = next
Line 302: ,
Line 302: Unrecognized token: 38
Line 302: ID = dcookie_users
Line 302: )
Line 302: ;
Line 304: ID = out
Line 304: Unrecognized token: 58
Line 305: ID = up
Line 305: (
Line 305: Unrecognized token: 38
Line 305: ID = dcookie_sem
Line 305: )
Line 305: ;
Line 306: return
Line 306: ID = user
Line 306: ;
Line 307: ID = out_free
Line 307: Unrecognized token: 58
Line 308: ID = kfree
Line 308: (
Line 308: ID = user
Line 308: )
Line 308: ;
Line 309: ID = user
Line 309: =
Line 309: ID = NULL
Line 309: ;
Line 310: ID = goto
Line 310: ID = out
Line 310: ;
Line 311: }
Line 314: void
Line 314: ID = dcookie_unregister
Line 314: (
Line 314: ID = struct
Line 314: ID = dcookie_user
Line 314: *
Line 314: ID = user
Line 314: )
Line 315: {
Line 316: ID = down
Line 316: (
Line 316: Unrecognized token: 38
Line 316: ID = dcookie_sem
Line 316: )
Line 316: ;
Line 318: ID = list_del
Line 318: (
Line 318: Unrecognized token: 38
Line 318: ID = user
Line 318: -
Line 318: >
Line 318: ID = next
Line 318: )
Line 318: ;
Line 319: ID = kfree
Line 319: (
Line 319: ID = user
Line 319: )
Line 319: ;
Line 321: if
Line 321: (
Line 321: !
Line 321: ID = is_live
Line 321: (
Line 321: )
Line 321: )
Line 322: ID = dcookie_exit
Line 322: (
Line 322: )
Line 322: ;
Line 324: ID = up
Line 324: (
Line 324: Unrecognized token: 38
Line 324: ID = dcookie_sem
Line 324: )
Line 324: ;
Line 325: }
Line 327: ID = EXPORT_SYMBOL_GPL
Line 327: (
Line 327: ID = dcookie_register
Line 327: )
Line 327: ;
Line 328: ID = EXPORT_SYMBOL_GPL
Line 328: (
Line 328: ID = dcookie_unregister
Line 328: )
Line 328: ;
Line 329: ID = EXPORT_SYMBOL_GPL
Line 329: (
Line 329: ID = get_dcookie
Line 329: )
Line 329: ;
Line 330: -EOF-

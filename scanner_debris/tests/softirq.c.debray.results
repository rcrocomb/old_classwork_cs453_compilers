Line 9: Unrecognized token: 35
Line 9: ID = include
Line 9: <
Line 9: ID = linux
Line 9: /
Line 9: ID = module
Line 9: Unrecognized token: 46
Line 9: ID = h
Line 9: >
Line 10: Unrecognized token: 35
Line 10: ID = include
Line 10: <
Line 10: ID = linux
Line 10: /
Line 10: ID = kernel_stat
Line 10: Unrecognized token: 46
Line 10: ID = h
Line 10: >
Line 11: Unrecognized token: 35
Line 11: ID = include
Line 11: <
Line 11: ID = linux
Line 11: /
Line 11: ID = interrupt
Line 11: Unrecognized token: 46
Line 11: ID = h
Line 11: >
Line 12: Unrecognized token: 35
Line 12: ID = include
Line 12: <
Line 12: ID = linux
Line 12: /
Line 12: ID = init
Line 12: Unrecognized token: 46
Line 12: ID = h
Line 12: >
Line 13: Unrecognized token: 35
Line 13: ID = include
Line 13: <
Line 13: ID = linux
Line 13: /
Line 13: ID = mm
Line 13: Unrecognized token: 46
Line 13: ID = h
Line 13: >
Line 14: Unrecognized token: 35
Line 14: ID = include
Line 14: <
Line 14: ID = linux
Line 14: /
Line 14: ID = notifier
Line 14: Unrecognized token: 46
Line 14: ID = h
Line 14: >
Line 15: Unrecognized token: 35
Line 15: ID = include
Line 15: <
Line 15: ID = linux
Line 15: /
Line 15: ID = percpu
Line 15: Unrecognized token: 46
Line 15: ID = h
Line 15: >
Line 16: Unrecognized token: 35
Line 16: ID = include
Line 16: <
Line 16: ID = linux
Line 16: /
Line 16: ID = cpu
Line 16: Unrecognized token: 46
Line 16: ID = h
Line 16: >
Line 17: Unrecognized token: 35
Line 17: ID = include
Line 17: <
Line 17: ID = linux
Line 17: /
Line 17: ID = kthread
Line 17: Unrecognized token: 46
Line 17: ID = h
Line 17: >
Line 19: Unrecognized token: 35
Line 19: ID = include
Line 19: <
Line 19: ID = asm
Line 19: /
Line 19: ID = irq
Line 19: Unrecognized token: 46
Line 19: ID = h
Line 19: >
Line 38: Unrecognized token: 35
Line 38: ID = ifndef
Line 38: Unrecognized token: 95
Line 38: Unrecognized token: 95
Line 38: ID = ARCH_IRQ_STAT
Line 39: ID = irq_cpustat_t
Line 39: ID = irq_stat
Line 39: [
Line 39: ID = NR_CPUS
Line 39: ]
Line 39: Unrecognized token: 95
Line 39: Unrecognized token: 95
Line 39: Unrecognized token: 95
Line 39: Unrecognized token: 95
Line 39: ID = cacheline_aligned
Line 39: ;
Line 40: ID = EXPORT_SYMBOL
Line 40: (
Line 40: ID = irq_stat
Line 40: )
Line 40: ;
Line 41: Unrecognized token: 35
Line 41: ID = endif
Line 43: ID = static
Line 43: ID = struct
Line 43: ID = softirq_action
Line 43: ID = softirq_vec
Line 43: [
Line 43: INTCON = 32
Line 43: ]
Line 43: Unrecognized token: 95
Line 43: Unrecognized token: 95
Line 43: ID = cacheline_aligned_in_smp
Line 43: ;
Line 45: ID = static
Line 45: ID = DEFINE_PER_CPU
Line 45: (
Line 45: ID = struct
Line 45: ID = task_struct
Line 45: *
Line 45: ,
Line 45: ID = ksoftirqd
Line 45: )
Line 45: ;
Line 53: ID = static
Line 53: ID = inline
Line 53: void
Line 53: ID = wakeup_softirqd
Line 53: (
Line 53: void
Line 53: )
Line 54: {
Line 56: ID = struct
Line 56: ID = task_struct
Line 56: *
Line 56: ID = tsk
Line 56: =
Line 56: Unrecognized token: 95
Line 56: Unrecognized token: 95
Line 56: ID = get_cpu_var
Line 56: (
Line 56: ID = ksoftirqd
Line 56: )
Line 56: ;
Line 58: if
Line 58: (
Line 58: ID = tsk
Line 58: &&
Line 58: ID = tsk
Line 58: -
Line 58: >
Line 58: ID = state
Line 58: !=
Line 58: ID = TASK_RUNNING
Line 58: )
Line 59: ID = wake_up_process
Line 59: (
Line 59: ID = tsk
Line 59: )
Line 59: ;
Line 60: }
Line 71: Unrecognized token: 35
Line 71: ID = define
Line 71: ID = MAX_SOFTIRQ_RESTART
Line 71: INTCON = 10
Line 73: ID = asmlinkage
Line 73: void
Line 73: Unrecognized token: 95
Line 73: Unrecognized token: 95
Line 73: ID = do_softirq
Line 73: (
Line 73: void
Line 73: )
Line 74: {
Line 75: ID = struct
Line 75: ID = softirq_action
Line 75: *
Line 75: ID = h
Line 75: ;
Line 76: Unrecognized token: 95
Line 76: Unrecognized token: 95
Line 76: ID = u32
Line 76: ID = pending
Line 76: ;
Line 77: int
Line 77: ID = max_restart
Line 77: =
Line 77: ID = MAX_SOFTIRQ_RESTART
Line 77: ;
Line 79: ID = pending
Line 79: =
Line 79: ID = local_softirq_pending
Line 79: (
Line 79: )
Line 79: ;
Line 81: ID = local_bh_disable
Line 81: (
Line 81: )
Line 81: ;
Line 82: ID = restart
Line 82: Unrecognized token: 58
Line 84: ID = local_softirq_pending
Line 84: (
Line 84: )
Line 84: =
Line 84: INTCON = 0
Line 84: ;
Line 86: ID = local_irq_enable
Line 86: (
Line 86: )
Line 86: ;
Line 88: ID = h
Line 88: =
Line 88: ID = softirq_vec
Line 88: ;
Line 90: ID = do
Line 90: {
Line 91: if
Line 91: (
Line 91: ID = pending
Line 91: Unrecognized token: 38
Line 91: INTCON = 1
Line 91: )
Line 92: ID = h
Line 92: -
Line 92: >
Line 92: ID = action
Line 92: (
Line 92: ID = h
Line 92: )
Line 92: ;
Line 93: ID = h
Line 93: +
Line 93: +
Line 93: ;
Line 94: ID = pending
Line 94: >
Line 94: >=
Line 94: INTCON = 1
Line 94: ;
Line 95: }
Line 95: while
Line 95: (
Line 95: ID = pending
Line 95: )
Line 95: ;
Line 97: ID = local_irq_disable
Line 97: (
Line 97: )
Line 97: ;
Line 99: ID = pending
Line 99: =
Line 99: ID = local_softirq_pending
Line 99: (
Line 99: )
Line 99: ;
Line 100: if
Line 100: (
Line 100: ID = pending
Line 100: &&
Line 100: -
Line 100: -
Line 100: ID = max_restart
Line 100: )
Line 101: ID = goto
Line 101: ID = restart
Line 101: ;
Line 103: if
Line 103: (
Line 103: ID = pending
Line 103: )
Line 104: ID = wakeup_softirqd
Line 104: (
Line 104: )
Line 104: ;
Line 106: Unrecognized token: 95
Line 106: Unrecognized token: 95
Line 106: ID = local_bh_enable
Line 106: (
Line 106: )
Line 106: ;
Line 107: }
Line 109: Unrecognized token: 35
Line 109: ID = ifndef
Line 109: Unrecognized token: 95
Line 109: Unrecognized token: 95
Line 109: ID = ARCH_HAS_DO_SOFTIRQ
Line 111: ID = asmlinkage
Line 111: void
Line 111: ID = do_softirq
Line 111: (
Line 111: void
Line 111: )
Line 112: {
Line 113: Unrecognized token: 95
Line 113: Unrecognized token: 95
Line 113: ID = u32
Line 113: ID = pending
Line 113: ;
Line 114: ID = unsigned
Line 114: ID = long
Line 114: ID = flags
Line 114: ;
Line 116: if
Line 116: (
Line 116: ID = in_interrupt
Line 116: (
Line 116: )
Line 116: )
Line 117: return
Line 117: ;
Line 119: ID = local_irq_save
Line 119: (
Line 119: ID = flags
Line 119: )
Line 119: ;
Line 121: ID = pending
Line 121: =
Line 121: ID = local_softirq_pending
Line 121: (
Line 121: )
Line 121: ;
Line 123: if
Line 123: (
Line 123: ID = pending
Line 123: )
Line 124: Unrecognized token: 95
Line 124: Unrecognized token: 95
Line 124: ID = do_softirq
Line 124: (
Line 124: )
Line 124: ;
Line 126: ID = local_irq_restore
Line 126: (
Line 126: ID = flags
Line 126: )
Line 126: ;
Line 127: }
Line 129: ID = EXPORT_SYMBOL
Line 129: (
Line 129: ID = do_softirq
Line 129: )
Line 129: ;
Line 131: Unrecognized token: 35
Line 131: ID = endif
Line 133: void
Line 133: ID = local_bh_enable
Line 133: (
Line 133: void
Line 133: )
Line 134: {
Line 135: Unrecognized token: 95
Line 135: Unrecognized token: 95
Line 135: ID = local_bh_enable
Line 135: (
Line 135: )
Line 135: ;
Line 136: ID = WARN_ON
Line 136: (
Line 136: ID = irqs_disabled
Line 136: (
Line 136: )
Line 136: )
Line 136: ;
Line 137: if
Line 137: (
Line 137: ID = unlikely
Line 137: (
Line 137: !
Line 137: ID = in_interrupt
Line 137: (
Line 137: )
Line 137: &&
Line 138: ID = local_softirq_pending
Line 138: (
Line 138: )
Line 138: )
Line 138: )
Line 139: ID = invoke_softirq
Line 139: (
Line 139: )
Line 139: ;
Line 140: ID = preempt_check_resched
Line 140: (
Line 140: )
Line 140: ;
Line 141: }
Line 142: ID = EXPORT_SYMBOL
Line 142: (
Line 142: ID = local_bh_enable
Line 142: )
Line 142: ;
Line 147: ID = inline
Line 147: ID = fastcall
Line 147: void
Line 147: ID = raise_softirq_irqoff
Line 147: (
Line 147: ID = unsigned
Line 147: int
Line 147: ID = nr
Line 147: )
Line 148: {
Line 149: Unrecognized token: 95
Line 149: Unrecognized token: 95
Line 149: ID = raise_softirq_irqoff
Line 149: (
Line 149: ID = nr
Line 149: )
Line 149: ;
Line 160: if
Line 160: (
Line 160: !
Line 160: ID = in_interrupt
Line 160: (
Line 160: )
Line 160: )
Line 161: ID = wakeup_softirqd
Line 161: (
Line 161: )
Line 161: ;
Line 162: }
Line 164: ID = EXPORT_SYMBOL
Line 164: (
Line 164: ID = raise_softirq_irqoff
Line 164: )
Line 164: ;
Line 166: void
Line 166: ID = fastcall
Line 166: ID = raise_softirq
Line 166: (
Line 166: ID = unsigned
Line 166: int
Line 166: ID = nr
Line 166: )
Line 167: {
Line 168: ID = unsigned
Line 168: ID = long
Line 168: ID = flags
Line 168: ;
Line 170: ID = local_irq_save
Line 170: (
Line 170: ID = flags
Line 170: )
Line 170: ;
Line 171: ID = raise_softirq_irqoff
Line 171: (
Line 171: ID = nr
Line 171: )
Line 171: ;
Line 172: ID = local_irq_restore
Line 172: (
Line 172: ID = flags
Line 172: )
Line 172: ;
Line 173: }
Line 175: ID = EXPORT_SYMBOL
Line 175: (
Line 175: ID = raise_softirq
Line 175: )
Line 175: ;
Line 177: void
Line 177: ID = open_softirq
Line 177: (
Line 177: int
Line 177: ID = nr
Line 177: ,
Line 177: void
Line 177: (
Line 177: *
Line 177: ID = action
Line 177: )
Line 177: (
Line 177: ID = struct
Line 177: ID = softirq_action
Line 177: *
Line 177: )
Line 177: ,
Line 177: void
Line 177: *
Line 177: ID = data
Line 177: )
Line 178: {
Line 179: ID = softirq_vec
Line 179: [
Line 179: ID = nr
Line 179: ]
Line 179: Unrecognized token: 46
Line 179: ID = data
Line 179: =
Line 179: ID = data
Line 179: ;
Line 180: ID = softirq_vec
Line 180: [
Line 180: ID = nr
Line 180: ]
Line 180: Unrecognized token: 46
Line 180: ID = action
Line 180: =
Line 180: ID = action
Line 180: ;
Line 181: }
Line 183: ID = EXPORT_SYMBOL
Line 183: (
Line 183: ID = open_softirq
Line 183: )
Line 183: ;
Line 186: ID = struct
Line 186: ID = tasklet_head
Line 187: {
Line 188: ID = struct
Line 188: ID = tasklet_struct
Line 188: *
Line 188: ID = list
Line 188: ;
Line 189: }
Line 189: ;
Line 193: ID = static
Line 193: ID = DEFINE_PER_CPU
Line 193: (
Line 193: ID = struct
Line 193: ID = tasklet_head
Line 193: ,
Line 193: ID = tasklet_vec
Line 193: )
Line 193: =
Line 193: {
Line 193: ID = NULL
Line 193: }
Line 193: ;
Line 194: ID = static
Line 194: ID = DEFINE_PER_CPU
Line 194: (
Line 194: ID = struct
Line 194: ID = tasklet_head
Line 194: ,
Line 194: ID = tasklet_hi_vec
Line 194: )
Line 194: =
Line 194: {
Line 194: ID = NULL
Line 194: }
Line 194: ;
Line 196: void
Line 196: ID = fastcall
Line 196: Unrecognized token: 95
Line 196: Unrecognized token: 95
Line 196: ID = tasklet_schedule
Line 196: (
Line 196: ID = struct
Line 196: ID = tasklet_struct
Line 196: *
Line 196: ID = t
Line 196: )
Line 197: {
Line 198: ID = unsigned
Line 198: ID = long
Line 198: ID = flags
Line 198: ;
Line 200: ID = local_irq_save
Line 200: (
Line 200: ID = flags
Line 200: )
Line 200: ;
Line 201: ID = t
Line 201: -
Line 201: >
Line 201: ID = next
Line 201: =
Line 201: Unrecognized token: 95
Line 201: Unrecognized token: 95
Line 201: ID = get_cpu_var
Line 201: (
Line 201: ID = tasklet_vec
Line 201: )
Line 201: Unrecognized token: 46
Line 201: ID = list
Line 201: ;
Line 202: Unrecognized token: 95
Line 202: Unrecognized token: 95
Line 202: ID = get_cpu_var
Line 202: (
Line 202: ID = tasklet_vec
Line 202: )
Line 202: Unrecognized token: 46
Line 202: ID = list
Line 202: =
Line 202: ID = t
Line 202: ;
Line 203: ID = raise_softirq_irqoff
Line 203: (
Line 203: ID = TASKLET_SOFTIRQ
Line 203: )
Line 203: ;
Line 204: ID = local_irq_restore
Line 204: (
Line 204: ID = flags
Line 204: )
Line 204: ;
Line 205: }
Line 207: ID = EXPORT_SYMBOL
Line 207: (
Line 207: Unrecognized token: 95
Line 207: Unrecognized token: 95
Line 207: ID = tasklet_schedule
Line 207: )
Line 207: ;
Line 209: void
Line 209: ID = fastcall
Line 209: Unrecognized token: 95
Line 209: Unrecognized token: 95
Line 209: ID = tasklet_hi_schedule
Line 209: (
Line 209: ID = struct
Line 209: ID = tasklet_struct
Line 209: *
Line 209: ID = t
Line 209: )
Line 210: {
Line 211: ID = unsigned
Line 211: ID = long
Line 211: ID = flags
Line 211: ;
Line 213: ID = local_irq_save
Line 213: (
Line 213: ID = flags
Line 213: )
Line 213: ;
Line 214: ID = t
Line 214: -
Line 214: >
Line 214: ID = next
Line 214: =
Line 214: Unrecognized token: 95
Line 214: Unrecognized token: 95
Line 214: ID = get_cpu_var
Line 214: (
Line 214: ID = tasklet_hi_vec
Line 214: )
Line 214: Unrecognized token: 46
Line 214: ID = list
Line 214: ;
Line 215: Unrecognized token: 95
Line 215: Unrecognized token: 95
Line 215: ID = get_cpu_var
Line 215: (
Line 215: ID = tasklet_hi_vec
Line 215: )
Line 215: Unrecognized token: 46
Line 215: ID = list
Line 215: =
Line 215: ID = t
Line 215: ;
Line 216: ID = raise_softirq_irqoff
Line 216: (
Line 216: ID = HI_SOFTIRQ
Line 216: )
Line 216: ;
Line 217: ID = local_irq_restore
Line 217: (
Line 217: ID = flags
Line 217: )
Line 217: ;
Line 218: }
Line 220: ID = EXPORT_SYMBOL
Line 220: (
Line 220: Unrecognized token: 95
Line 220: Unrecognized token: 95
Line 220: ID = tasklet_hi_schedule
Line 220: )
Line 220: ;
Line 222: ID = static
Line 222: void
Line 222: ID = tasklet_action
Line 222: (
Line 222: ID = struct
Line 222: ID = softirq_action
Line 222: *
Line 222: ID = a
Line 222: )
Line 223: {
Line 224: ID = struct
Line 224: ID = tasklet_struct
Line 224: *
Line 224: ID = list
Line 224: ;
Line 226: ID = local_irq_disable
Line 226: (
Line 226: )
Line 226: ;
Line 227: ID = list
Line 227: =
Line 227: Unrecognized token: 95
Line 227: Unrecognized token: 95
Line 227: ID = get_cpu_var
Line 227: (
Line 227: ID = tasklet_vec
Line 227: )
Line 227: Unrecognized token: 46
Line 227: ID = list
Line 227: ;
Line 228: Unrecognized token: 95
Line 228: Unrecognized token: 95
Line 228: ID = get_cpu_var
Line 228: (
Line 228: ID = tasklet_vec
Line 228: )
Line 228: Unrecognized token: 46
Line 228: ID = list
Line 228: =
Line 228: ID = NULL
Line 228: ;
Line 229: ID = local_irq_enable
Line 229: (
Line 229: )
Line 229: ;
Line 231: while
Line 231: (
Line 231: ID = list
Line 231: )
Line 231: {
Line 232: ID = struct
Line 232: ID = tasklet_struct
Line 232: *
Line 232: ID = t
Line 232: =
Line 232: ID = list
Line 232: ;
Line 234: ID = list
Line 234: =
Line 234: ID = list
Line 234: -
Line 234: >
Line 234: ID = next
Line 234: ;
Line 236: if
Line 236: (
Line 236: ID = tasklet_trylock
Line 236: (
Line 236: ID = t
Line 236: )
Line 236: )
Line 236: {
Line 237: if
Line 237: (
Line 237: !
Line 237: ID = atomic_read
Line 237: (
Line 237: Unrecognized token: 38
Line 237: ID = t
Line 237: -
Line 237: >
Line 237: ID = count
Line 237: )
Line 237: )
Line 237: {
Line 238: if
Line 238: (
Line 238: !
Line 238: ID = test_and_clear_bit
Line 238: (
Line 238: ID = TASKLET_STATE_SCHED
Line 238: ,
Line 238: Unrecognized token: 38
Line 238: ID = t
Line 238: -
Line 238: >
Line 238: ID = state
Line 238: )
Line 238: )
Line 239: ID = BUG
Line 239: (
Line 239: )
Line 239: ;
Line 240: ID = t
Line 240: -
Line 240: >
Line 240: ID = func
Line 240: (
Line 240: ID = t
Line 240: -
Line 240: >
Line 240: ID = data
Line 240: )
Line 240: ;
Line 241: ID = tasklet_unlock
Line 241: (
Line 241: ID = t
Line 241: )
Line 241: ;
Line 242: ID = continue
Line 242: ;
Line 243: }
Line 244: ID = tasklet_unlock
Line 244: (
Line 244: ID = t
Line 244: )
Line 244: ;
Line 245: }
Line 247: ID = local_irq_disable
Line 247: (
Line 247: )
Line 247: ;
Line 248: ID = t
Line 248: -
Line 248: >
Line 248: ID = next
Line 248: =
Line 248: Unrecognized token: 95
Line 248: Unrecognized token: 95
Line 248: ID = get_cpu_var
Line 248: (
Line 248: ID = tasklet_vec
Line 248: )
Line 248: Unrecognized token: 46
Line 248: ID = list
Line 248: ;
Line 249: Unrecognized token: 95
Line 249: Unrecognized token: 95
Line 249: ID = get_cpu_var
Line 249: (
Line 249: ID = tasklet_vec
Line 249: )
Line 249: Unrecognized token: 46
Line 249: ID = list
Line 249: =
Line 249: ID = t
Line 249: ;
Line 250: Unrecognized token: 95
Line 250: Unrecognized token: 95
Line 250: ID = raise_softirq_irqoff
Line 250: (
Line 250: ID = TASKLET_SOFTIRQ
Line 250: )
Line 250: ;
Line 251: ID = local_irq_enable
Line 251: (
Line 251: )
Line 251: ;
Line 252: }
Line 253: }
Line 255: ID = static
Line 255: void
Line 255: ID = tasklet_hi_action
Line 255: (
Line 255: ID = struct
Line 255: ID = softirq_action
Line 255: *
Line 255: ID = a
Line 255: )
Line 256: {
Line 257: ID = struct
Line 257: ID = tasklet_struct
Line 257: *
Line 257: ID = list
Line 257: ;
Line 259: ID = local_irq_disable
Line 259: (
Line 259: )
Line 259: ;
Line 260: ID = list
Line 260: =
Line 260: Unrecognized token: 95
Line 260: Unrecognized token: 95
Line 260: ID = get_cpu_var
Line 260: (
Line 260: ID = tasklet_hi_vec
Line 260: )
Line 260: Unrecognized token: 46
Line 260: ID = list
Line 260: ;
Line 261: Unrecognized token: 95
Line 261: Unrecognized token: 95
Line 261: ID = get_cpu_var
Line 261: (
Line 261: ID = tasklet_hi_vec
Line 261: )
Line 261: Unrecognized token: 46
Line 261: ID = list
Line 261: =
Line 261: ID = NULL
Line 261: ;
Line 262: ID = local_irq_enable
Line 262: (
Line 262: )
Line 262: ;
Line 264: while
Line 264: (
Line 264: ID = list
Line 264: )
Line 264: {
Line 265: ID = struct
Line 265: ID = tasklet_struct
Line 265: *
Line 265: ID = t
Line 265: =
Line 265: ID = list
Line 265: ;
Line 267: ID = list
Line 267: =
Line 267: ID = list
Line 267: -
Line 267: >
Line 267: ID = next
Line 267: ;
Line 269: if
Line 269: (
Line 269: ID = tasklet_trylock
Line 269: (
Line 269: ID = t
Line 269: )
Line 269: )
Line 269: {
Line 270: if
Line 270: (
Line 270: !
Line 270: ID = atomic_read
Line 270: (
Line 270: Unrecognized token: 38
Line 270: ID = t
Line 270: -
Line 270: >
Line 270: ID = count
Line 270: )
Line 270: )
Line 270: {
Line 271: if
Line 271: (
Line 271: !
Line 271: ID = test_and_clear_bit
Line 271: (
Line 271: ID = TASKLET_STATE_SCHED
Line 271: ,
Line 271: Unrecognized token: 38
Line 271: ID = t
Line 271: -
Line 271: >
Line 271: ID = state
Line 271: )
Line 271: )
Line 272: ID = BUG
Line 272: (
Line 272: )
Line 272: ;
Line 273: ID = t
Line 273: -
Line 273: >
Line 273: ID = func
Line 273: (
Line 273: ID = t
Line 273: -
Line 273: >
Line 273: ID = data
Line 273: )
Line 273: ;
Line 274: ID = tasklet_unlock
Line 274: (
Line 274: ID = t
Line 274: )
Line 274: ;
Line 275: ID = continue
Line 275: ;
Line 276: }
Line 277: ID = tasklet_unlock
Line 277: (
Line 277: ID = t
Line 277: )
Line 277: ;
Line 278: }
Line 280: ID = local_irq_disable
Line 280: (
Line 280: )
Line 280: ;
Line 281: ID = t
Line 281: -
Line 281: >
Line 281: ID = next
Line 281: =
Line 281: Unrecognized token: 95
Line 281: Unrecognized token: 95
Line 281: ID = get_cpu_var
Line 281: (
Line 281: ID = tasklet_hi_vec
Line 281: )
Line 281: Unrecognized token: 46
Line 281: ID = list
Line 281: ;
Line 282: Unrecognized token: 95
Line 282: Unrecognized token: 95
Line 282: ID = get_cpu_var
Line 282: (
Line 282: ID = tasklet_hi_vec
Line 282: )
Line 282: Unrecognized token: 46
Line 282: ID = list
Line 282: =
Line 282: ID = t
Line 282: ;
Line 283: Unrecognized token: 95
Line 283: Unrecognized token: 95
Line 283: ID = raise_softirq_irqoff
Line 283: (
Line 283: ID = HI_SOFTIRQ
Line 283: )
Line 283: ;
Line 284: ID = local_irq_enable
Line 284: (
Line 284: )
Line 284: ;
Line 285: }
Line 286: }
Line 289: void
Line 289: ID = tasklet_init
Line 289: (
Line 289: ID = struct
Line 289: ID = tasklet_struct
Line 289: *
Line 289: ID = t
Line 289: ,
Line 290: void
Line 290: (
Line 290: *
Line 290: ID = func
Line 290: )
Line 290: (
Line 290: ID = unsigned
Line 290: ID = long
Line 290: )
Line 290: ,
Line 290: ID = unsigned
Line 290: ID = long
Line 290: ID = data
Line 290: )
Line 291: {
Line 292: ID = t
Line 292: -
Line 292: >
Line 292: ID = next
Line 292: =
Line 292: ID = NULL
Line 292: ;
Line 293: ID = t
Line 293: -
Line 293: >
Line 293: ID = state
Line 293: =
Line 293: INTCON = 0
Line 293: ;
Line 294: ID = atomic_set
Line 294: (
Line 294: Unrecognized token: 38
Line 294: ID = t
Line 294: -
Line 294: >
Line 294: ID = count
Line 294: ,
Line 294: INTCON = 0
Line 294: )
Line 294: ;
Line 295: ID = t
Line 295: -
Line 295: >
Line 295: ID = func
Line 295: =
Line 295: ID = func
Line 295: ;
Line 296: ID = t
Line 296: -
Line 296: >
Line 296: ID = data
Line 296: =
Line 296: ID = data
Line 296: ;
Line 297: }
Line 299: ID = EXPORT_SYMBOL
Line 299: (
Line 299: ID = tasklet_init
Line 299: )
Line 299: ;
Line 301: void
Line 301: ID = tasklet_kill
Line 301: (
Line 301: ID = struct
Line 301: ID = tasklet_struct
Line 301: *
Line 301: ID = t
Line 301: )
Line 302: {
Line 303: if
Line 303: (
Line 303: ID = in_interrupt
Line 303: (
Line 303: )
Line 303: )
Line 304: ID = printk
Line 304: (
Line 304: STRINGCON = "Attempt to kill tasklet from interrupt\n"
Line 304: )
Line 304: ;
Line 306: while
Line 306: (
Line 306: ID = test_and_set_bit
Line 306: (
Line 306: ID = TASKLET_STATE_SCHED
Line 306: ,
Line 306: Unrecognized token: 38
Line 306: ID = t
Line 306: -
Line 306: >
Line 306: ID = state
Line 306: )
Line 306: )
Line 306: {
Line 307: ID = do
Line 308: ID = yield
Line 308: (
Line 308: )
Line 308: ;
Line 309: while
Line 309: (
Line 309: ID = test_bit
Line 309: (
Line 309: ID = TASKLET_STATE_SCHED
Line 309: ,
Line 309: Unrecognized token: 38
Line 309: ID = t
Line 309: -
Line 309: >
Line 309: ID = state
Line 309: )
Line 309: )
Line 309: ;
Line 310: }
Line 311: ID = tasklet_unlock_wait
Line 311: (
Line 311: ID = t
Line 311: )
Line 311: ;
Line 312: ID = clear_bit
Line 312: (
Line 312: ID = TASKLET_STATE_SCHED
Line 312: ,
Line 312: Unrecognized token: 38
Line 312: ID = t
Line 312: -
Line 312: >
Line 312: ID = state
Line 312: )
Line 312: ;
Line 313: }
Line 315: ID = EXPORT_SYMBOL
Line 315: (
Line 315: ID = tasklet_kill
Line 315: )
Line 315: ;
Line 317: void
Line 317: Unrecognized token: 95
Line 317: Unrecognized token: 95
Line 317: ID = init
Line 317: ID = softirq_init
Line 317: (
Line 317: void
Line 317: )
Line 318: {
Line 319: ID = open_softirq
Line 319: (
Line 319: ID = TASKLET_SOFTIRQ
Line 319: ,
Line 319: ID = tasklet_action
Line 319: ,
Line 319: ID = NULL
Line 319: )
Line 319: ;
Line 320: ID = open_softirq
Line 320: (
Line 320: ID = HI_SOFTIRQ
Line 320: ,
Line 320: ID = tasklet_hi_action
Line 320: ,
Line 320: ID = NULL
Line 320: )
Line 320: ;
Line 321: }
Line 323: ID = static
Line 323: int
Line 323: ID = ksoftirqd
Line 323: (
Line 323: void
Line 323: *
Line 323: Unrecognized token: 95
Line 323: Unrecognized token: 95
Line 323: ID = bind_cpu
Line 323: )
Line 324: {
Line 325: ID = set_user_nice
Line 325: (
Line 325: ID = current
Line 325: ,
Line 325: INTCON = 19
Line 325: )
Line 325: ;
Line 326: ID = current
Line 326: -
Line 326: >
Line 326: ID = flags
Line 326: Unrecognized token: 124
Line 326: =
Line 326: ID = PF_NOFREEZE
Line 326: ;
Line 328: ID = set_current_state
Line 328: (
Line 328: ID = TASK_INTERRUPTIBLE
Line 328: )
Line 328: ;
Line 330: while
Line 330: (
Line 330: !
Line 330: ID = kthread_should_stop
Line 330: (
Line 330: )
Line 330: )
Line 330: {
Line 331: if
Line 331: (
Line 331: !
Line 331: ID = local_softirq_pending
Line 331: (
Line 331: )
Line 331: )
Line 332: ID = schedule
Line 332: (
Line 332: )
Line 332: ;
Line 334: Unrecognized token: 95
Line 334: Unrecognized token: 95
Line 334: ID = set_current_state
Line 334: (
Line 334: ID = TASK_RUNNING
Line 334: )
Line 334: ;
Line 336: while
Line 336: (
Line 336: ID = local_softirq_pending
Line 336: (
Line 336: )
Line 336: )
Line 336: {
Line 340: ID = preempt_disable
Line 340: (
Line 340: )
Line 340: ;
Line 341: if
Line 341: (
Line 341: ID = cpu_is_offline
Line 341: (
Line 341: (
Line 341: ID = long
Line 341: )
Line 341: Unrecognized token: 95
Line 341: Unrecognized token: 95
Line 341: ID = bind_cpu
Line 341: )
Line 341: )
Line 342: ID = goto
Line 342: ID = wait_to_die
Line 342: ;
Line 343: ID = do_softirq
Line 343: (
Line 343: )
Line 343: ;
Line 344: ID = preempt_enable
Line 344: (
Line 344: )
Line 344: ;
Line 345: ID = cond_resched
Line 345: (
Line 345: )
Line 345: ;
Line 346: }
Line 348: ID = set_current_state
Line 348: (
Line 348: ID = TASK_INTERRUPTIBLE
Line 348: )
Line 348: ;
Line 349: }
Line 350: Unrecognized token: 95
Line 350: Unrecognized token: 95
Line 350: ID = set_current_state
Line 350: (
Line 350: ID = TASK_RUNNING
Line 350: )
Line 350: ;
Line 351: return
Line 351: INTCON = 0
Line 351: ;
Line 353: ID = wait_to_die
Line 353: Unrecognized token: 58
Line 354: ID = preempt_enable
Line 354: (
Line 354: )
Line 354: ;
Line 356: ID = set_current_state
Line 356: (
Line 356: ID = TASK_INTERRUPTIBLE
Line 356: )
Line 356: ;
Line 357: while
Line 357: (
Line 357: !
Line 357: ID = kthread_should_stop
Line 357: (
Line 357: )
Line 357: )
Line 357: {
Line 358: ID = schedule
Line 358: (
Line 358: )
Line 358: ;
Line 359: ID = set_current_state
Line 359: (
Line 359: ID = TASK_INTERRUPTIBLE
Line 359: )
Line 359: ;
Line 360: }
Line 361: Unrecognized token: 95
Line 361: Unrecognized token: 95
Line 361: ID = set_current_state
Line 361: (
Line 361: ID = TASK_RUNNING
Line 361: )
Line 361: ;
Line 362: return
Line 362: INTCON = 0
Line 362: ;
Line 363: }
Line 365: Unrecognized token: 35
Line 365: ID = ifdef
Line 365: ID = CONFIG_HOTPLUG_CPU
Line 375: void
Line 375: ID = tasklet_kill_immediate
Line 375: (
Line 375: ID = struct
Line 375: ID = tasklet_struct
Line 375: *
Line 375: ID = t
Line 375: ,
Line 375: ID = unsigned
Line 375: int
Line 375: ID = cpu
Line 375: )
Line 376: {
Line 377: ID = struct
Line 377: ID = tasklet_struct
Line 377: *
Line 377: *
Line 377: ID = i
Line 377: ;
Line 379: ID = BUG_ON
Line 379: (
Line 379: ID = cpu_online
Line 379: (
Line 379: ID = cpu
Line 379: )
Line 379: )
Line 379: ;
Line 380: ID = BUG_ON
Line 380: (
Line 380: ID = test_bit
Line 380: (
Line 380: ID = TASKLET_STATE_RUN
Line 380: ,
Line 380: Unrecognized token: 38
Line 380: ID = t
Line 380: -
Line 380: >
Line 380: ID = state
Line 380: )
Line 380: )
Line 380: ;
Line 382: if
Line 382: (
Line 382: !
Line 382: ID = test_bit
Line 382: (
Line 382: ID = TASKLET_STATE_SCHED
Line 382: ,
Line 382: Unrecognized token: 38
Line 382: ID = t
Line 382: -
Line 382: >
Line 382: ID = state
Line 382: )
Line 382: )
Line 383: return
Line 383: ;
Line 386: for
Line 386: (
Line 386: ID = i
Line 386: =
Line 386: Unrecognized token: 38
Line 386: ID = per_cpu
Line 386: (
Line 386: ID = tasklet_vec
Line 386: ,
Line 386: ID = cpu
Line 386: )
Line 386: Unrecognized token: 46
Line 386: ID = list
Line 386: ;
Line 386: *
Line 386: ID = i
Line 386: ;
Line 386: ID = i
Line 386: =
Line 386: Unrecognized token: 38
Line 386: (
Line 386: *
Line 386: ID = i
Line 386: )
Line 386: -
Line 386: >
Line 386: ID = next
Line 386: )
Line 386: {
Line 387: if
Line 387: (
Line 387: *
Line 387: ID = i
Line 387: ==
Line 387: ID = t
Line 387: )
Line 387: {
Line 388: *
Line 388: ID = i
Line 388: =
Line 388: ID = t
Line 388: -
Line 388: >
Line 388: ID = next
Line 388: ;
Line 389: return
Line 389: ;
Line 390: }
Line 391: }
Line 392: ID = BUG
Line 392: (
Line 392: )
Line 392: ;
Line 393: }
Line 395: ID = static
Line 395: void
Line 395: ID = takeover_tasklets
Line 395: (
Line 395: ID = unsigned
Line 395: int
Line 395: ID = cpu
Line 395: )
Line 396: {
Line 397: ID = struct
Line 397: ID = tasklet_struct
Line 397: *
Line 397: *
Line 397: ID = i
Line 397: ;
Line 400: ID = local_irq_disable
Line 400: (
Line 400: )
Line 400: ;
Line 403: for
Line 403: (
Line 403: ID = i
Line 403: =
Line 403: Unrecognized token: 38
Line 403: Unrecognized token: 95
Line 403: Unrecognized token: 95
Line 403: ID = get_cpu_var
Line 403: (
Line 403: ID = tasklet_vec
Line 403: )
Line 403: Unrecognized token: 46
Line 403: ID = list
Line 403: ;
Line 403: *
Line 403: ID = i
Line 403: ;
Line 403: ID = i
Line 403: =
Line 403: Unrecognized token: 38
Line 403: (
Line 403: *
Line 403: ID = i
Line 403: )
Line 403: -
Line 403: >
Line 403: ID = next
Line 403: )
Line 403: ;
Line 404: *
Line 404: ID = i
Line 404: =
Line 404: ID = per_cpu
Line 404: (
Line 404: ID = tasklet_vec
Line 404: ,
Line 404: ID = cpu
Line 404: )
Line 404: Unrecognized token: 46
Line 404: ID = list
Line 404: ;
Line 405: ID = per_cpu
Line 405: (
Line 405: ID = tasklet_vec
Line 405: ,
Line 405: ID = cpu
Line 405: )
Line 405: Unrecognized token: 46
Line 405: ID = list
Line 405: =
Line 405: ID = NULL
Line 405: ;
Line 406: ID = raise_softirq_irqoff
Line 406: (
Line 406: ID = TASKLET_SOFTIRQ
Line 406: )
Line 406: ;
Line 408: for
Line 408: (
Line 408: ID = i
Line 408: =
Line 408: Unrecognized token: 38
Line 408: Unrecognized token: 95
Line 408: Unrecognized token: 95
Line 408: ID = get_cpu_var
Line 408: (
Line 408: ID = tasklet_hi_vec
Line 408: )
Line 408: Unrecognized token: 46
Line 408: ID = list
Line 408: ;
Line 408: *
Line 408: ID = i
Line 408: ;
Line 408: ID = i
Line 408: =
Line 408: Unrecognized token: 38
Line 408: (
Line 408: *
Line 408: ID = i
Line 408: )
Line 408: -
Line 408: >
Line 408: ID = next
Line 408: )
Line 408: ;
Line 409: *
Line 409: ID = i
Line 409: =
Line 409: ID = per_cpu
Line 409: (
Line 409: ID = tasklet_hi_vec
Line 409: ,
Line 409: ID = cpu
Line 409: )
Line 409: Unrecognized token: 46
Line 409: ID = list
Line 409: ;
Line 410: ID = per_cpu
Line 410: (
Line 410: ID = tasklet_hi_vec
Line 410: ,
Line 410: ID = cpu
Line 410: )
Line 410: Unrecognized token: 46
Line 410: ID = list
Line 410: =
Line 410: ID = NULL
Line 410: ;
Line 411: ID = raise_softirq_irqoff
Line 411: (
Line 411: ID = HI_SOFTIRQ
Line 411: )
Line 411: ;
Line 413: ID = local_irq_enable
Line 413: (
Line 413: )
Line 413: ;
Line 414: }
Line 415: Unrecognized token: 35
Line 415: ID = endif
Line 417: ID = static
Line 417: int
Line 417: Unrecognized token: 95
Line 417: Unrecognized token: 95
Line 417: ID = devinit
Line 417: ID = cpu_callback
Line 417: (
Line 417: ID = struct
Line 417: ID = notifier_block
Line 417: *
Line 417: ID = nfb
Line 417: ,
Line 418: ID = unsigned
Line 418: ID = long
Line 418: ID = action
Line 418: ,
Line 419: void
Line 419: *
Line 419: ID = hcpu
Line 419: )
Line 420: {
Line 421: int
Line 421: ID = hotcpu
Line 421: =
Line 421: (
Line 421: ID = unsigned
Line 421: ID = long
Line 421: )
Line 421: ID = hcpu
Line 421: ;
Line 422: ID = struct
Line 422: ID = task_struct
Line 422: *
Line 422: ID = p
Line 422: ;
Line 424: ID = switch
Line 424: (
Line 424: ID = action
Line 424: )
Line 424: {
Line 425: ID = case
Line 425: ID = CPU_UP_PREPARE
Line 425: Unrecognized token: 58
Line 426: ID = BUG_ON
Line 426: (
Line 426: ID = per_cpu
Line 426: (
Line 426: ID = tasklet_vec
Line 426: ,
Line 426: ID = hotcpu
Line 426: )
Line 426: Unrecognized token: 46
Line 426: ID = list
Line 426: )
Line 426: ;
Line 427: ID = BUG_ON
Line 427: (
Line 427: ID = per_cpu
Line 427: (
Line 427: ID = tasklet_hi_vec
Line 427: ,
Line 427: ID = hotcpu
Line 427: )
Line 427: Unrecognized token: 46
Line 427: ID = list
Line 427: )
Line 427: ;
Line 428: ID = p
Line 428: =
Line 428: ID = kthread_create
Line 428: (
Line 428: ID = ksoftirqd
Line 428: ,
Line 428: ID = hcpu
Line 428: ,
Line 428: STRINGCON = "ksoftirqd/%d"
Line 428: ,
Line 428: ID = hotcpu
Line 428: )
Line 428: ;
Line 429: if
Line 429: (
Line 429: ID = IS_ERR
Line 429: (
Line 429: ID = p
Line 429: )
Line 429: )
Line 429: {
Line 430: ID = printk
Line 430: (
Line 430: STRINGCON = "ksoftirqd for %i failed\n"
Line 430: ,
Line 430: ID = hotcpu
Line 430: )
Line 430: ;
Line 431: return
Line 431: ID = NOTIFY_BAD
Line 431: ;
Line 432: }
Line 433: ID = kthread_bind
Line 433: (
Line 433: ID = p
Line 433: ,
Line 433: ID = hotcpu
Line 433: )
Line 433: ;
Line 434: ID = per_cpu
Line 434: (
Line 434: ID = ksoftirqd
Line 434: ,
Line 434: ID = hotcpu
Line 434: )
Line 434: =
Line 434: ID = p
Line 434: ;
Line 435: ID = break
Line 435: ;
Line 436: ID = case
Line 436: ID = CPU_ONLINE
Line 436: Unrecognized token: 58
Line 437: ID = wake_up_process
Line 437: (
Line 437: ID = per_cpu
Line 437: (
Line 437: ID = ksoftirqd
Line 437: ,
Line 437: ID = hotcpu
Line 437: )
Line 437: )
Line 437: ;
Line 438: ID = break
Line 438: ;
Line 439: Unrecognized token: 35
Line 439: ID = ifdef
Line 439: ID = CONFIG_HOTPLUG_CPU
Line 440: ID = case
Line 440: ID = CPU_UP_CANCELED
Line 440: Unrecognized token: 58
Line 442: ID = kthread_bind
Line 442: (
Line 442: ID = per_cpu
Line 442: (
Line 442: ID = ksoftirqd
Line 442: ,
Line 442: ID = hotcpu
Line 442: )
Line 442: ,
Line 442: ID = smp_processor_id
Line 442: (
Line 442: )
Line 442: )
Line 442: ;
Line 443: ID = case
Line 443: ID = CPU_DEAD
Line 443: Unrecognized token: 58
Line 444: ID = p
Line 444: =
Line 444: ID = per_cpu
Line 444: (
Line 444: ID = ksoftirqd
Line 444: ,
Line 444: ID = hotcpu
Line 444: )
Line 444: ;
Line 445: ID = per_cpu
Line 445: (
Line 445: ID = ksoftirqd
Line 445: ,
Line 445: ID = hotcpu
Line 445: )
Line 445: =
Line 445: ID = NULL
Line 445: ;
Line 446: ID = kthread_stop
Line 446: (
Line 446: ID = p
Line 446: )
Line 446: ;
Line 447: ID = takeover_tasklets
Line 447: (
Line 447: ID = hotcpu
Line 447: )
Line 447: ;
Line 448: ID = break
Line 448: ;
Line 449: Unrecognized token: 35
Line 449: ID = endif
Line 450: }
Line 451: return
Line 451: ID = NOTIFY_OK
Line 451: ;
Line 452: }
Line 454: ID = static
Line 454: ID = struct
Line 454: ID = notifier_block
Line 454: Unrecognized token: 95
Line 454: Unrecognized token: 95
Line 454: ID = devinitdata
Line 454: ID = cpu_nfb
Line 454: =
Line 454: {
Line 455: Unrecognized token: 46
Line 455: ID = notifier_call
Line 455: =
Line 455: ID = cpu_callback
Line 456: }
Line 456: ;
Line 458: Unrecognized token: 95
Line 458: Unrecognized token: 95
Line 458: ID = init
Line 458: int
Line 458: ID = spawn_ksoftirqd
Line 458: (
Line 458: void
Line 458: )
Line 459: {
Line 460: void
Line 460: *
Line 460: ID = cpu
Line 460: =
Line 460: (
Line 460: void
Line 460: *
Line 460: )
Line 460: (
Line 460: ID = long
Line 460: )
Line 460: ID = smp_processor_id
Line 460: (
Line 460: )
Line 460: ;
Line 461: ID = cpu_callback
Line 461: (
Line 461: Unrecognized token: 38
Line 461: ID = cpu_nfb
Line 461: ,
Line 461: ID = CPU_UP_PREPARE
Line 461: ,
Line 461: ID = cpu
Line 461: )
Line 461: ;
Line 462: ID = cpu_callback
Line 462: (
Line 462: Unrecognized token: 38
Line 462: ID = cpu_nfb
Line 462: ,
Line 462: ID = CPU_ONLINE
Line 462: ,
Line 462: ID = cpu
Line 462: )
Line 462: ;
Line 463: ID = register_cpu_notifier
Line 463: (
Line 463: Unrecognized token: 38
Line 463: ID = cpu_nfb
Line 463: )
Line 463: ;
Line 464: return
Line 464: INTCON = 0
Line 464: ;
Line 465: }
Line 466: -EOF-

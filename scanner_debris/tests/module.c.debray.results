Line 19: Unrecognized token: 35
Line 19: ID = include
Line 19: <
Line 19: ID = linux
Line 19: /
Line 19: ID = config
Line 19: Unrecognized token: 46
Line 19: ID = h
Line 19: >
Line 20: Unrecognized token: 35
Line 20: ID = include
Line 20: <
Line 20: ID = linux
Line 20: /
Line 20: ID = module
Line 20: Unrecognized token: 46
Line 20: ID = h
Line 20: >
Line 21: Unrecognized token: 35
Line 21: ID = include
Line 21: <
Line 21: ID = linux
Line 21: /
Line 21: ID = moduleloader
Line 21: Unrecognized token: 46
Line 21: ID = h
Line 21: >
Line 22: Unrecognized token: 35
Line 22: ID = include
Line 22: <
Line 22: ID = linux
Line 22: /
Line 22: ID = init
Line 22: Unrecognized token: 46
Line 22: ID = h
Line 22: >
Line 23: Unrecognized token: 35
Line 23: ID = include
Line 23: <
Line 23: ID = linux
Line 23: /
Line 23: ID = slab
Line 23: Unrecognized token: 46
Line 23: ID = h
Line 23: >
Line 24: Unrecognized token: 35
Line 24: ID = include
Line 24: <
Line 24: ID = linux
Line 24: /
Line 24: ID = vmalloc
Line 24: Unrecognized token: 46
Line 24: ID = h
Line 24: >
Line 25: Unrecognized token: 35
Line 25: ID = include
Line 25: <
Line 25: ID = linux
Line 25: /
Line 25: ID = elf
Line 25: Unrecognized token: 46
Line 25: ID = h
Line 25: >
Line 26: Unrecognized token: 35
Line 26: ID = include
Line 26: <
Line 26: ID = linux
Line 26: /
Line 26: ID = seq_file
Line 26: Unrecognized token: 46
Line 26: ID = h
Line 26: >
Line 27: Unrecognized token: 35
Line 27: ID = include
Line 27: <
Line 27: ID = linux
Line 27: /
Line 27: ID = syscalls
Line 27: Unrecognized token: 46
Line 27: ID = h
Line 27: >
Line 28: Unrecognized token: 35
Line 28: ID = include
Line 28: <
Line 28: ID = linux
Line 28: /
Line 28: ID = fcntl
Line 28: Unrecognized token: 46
Line 28: ID = h
Line 28: >
Line 29: Unrecognized token: 35
Line 29: ID = include
Line 29: <
Line 29: ID = linux
Line 29: /
Line 29: ID = rcupdate
Line 29: Unrecognized token: 46
Line 29: ID = h
Line 29: >
Line 30: Unrecognized token: 35
Line 30: ID = include
Line 30: <
Line 30: ID = linux
Line 30: /
Line 30: ID = cpu
Line 30: Unrecognized token: 46
Line 30: ID = h
Line 30: >
Line 31: Unrecognized token: 35
Line 31: ID = include
Line 31: <
Line 31: ID = linux
Line 31: /
Line 31: ID = moduleparam
Line 31: Unrecognized token: 46
Line 31: ID = h
Line 31: >
Line 32: Unrecognized token: 35
Line 32: ID = include
Line 32: <
Line 32: ID = linux
Line 32: /
Line 32: ID = errno
Line 32: Unrecognized token: 46
Line 32: ID = h
Line 32: >
Line 33: Unrecognized token: 35
Line 33: ID = include
Line 33: <
Line 33: ID = linux
Line 33: /
Line 33: ID = err
Line 33: Unrecognized token: 46
Line 33: ID = h
Line 33: >
Line 34: Unrecognized token: 35
Line 34: ID = include
Line 34: <
Line 34: ID = linux
Line 34: /
Line 34: ID = vermagic
Line 34: Unrecognized token: 46
Line 34: ID = h
Line 34: >
Line 35: Unrecognized token: 35
Line 35: ID = include
Line 35: <
Line 35: ID = linux
Line 35: /
Line 35: ID = notifier
Line 35: Unrecognized token: 46
Line 35: ID = h
Line 35: >
Line 36: Unrecognized token: 35
Line 36: ID = include
Line 36: <
Line 36: ID = linux
Line 36: /
Line 36: ID = stop_machine
Line 36: Unrecognized token: 46
Line 36: ID = h
Line 36: >
Line 37: Unrecognized token: 35
Line 37: ID = include
Line 37: <
Line 37: ID = asm
Line 37: /
Line 37: ID = uaccess
Line 37: Unrecognized token: 46
Line 37: ID = h
Line 37: >
Line 38: Unrecognized token: 35
Line 38: ID = include
Line 38: <
Line 38: ID = asm
Line 38: /
Line 38: ID = semaphore
Line 38: Unrecognized token: 46
Line 38: ID = h
Line 38: >
Line 39: Unrecognized token: 35
Line 39: ID = include
Line 39: <
Line 39: ID = asm
Line 39: /
Line 39: ID = cacheflush
Line 39: Unrecognized token: 46
Line 39: ID = h
Line 39: >
Line 41: Unrecognized token: 35
Line 41: if
Line 41: INTCON = 0
Line 42: Unrecognized token: 35
Line 42: ID = define
Line 42: ID = DEBUGP
Line 42: ID = printk
Line 43: Unrecognized token: 35
Line 43: else
Line 44: Unrecognized token: 35
Line 44: ID = define
Line 44: ID = DEBUGP
Line 44: (
Line 44: ID = fmt
Line 44: ,
Line 44: ID = a
Line 44: Unrecognized token: 46
Line 44: Unrecognized token: 46
Line 44: Unrecognized token: 46
Line 44: )
Line 45: Unrecognized token: 35
Line 45: ID = endif
Line 47: Unrecognized token: 35
Line 47: ID = ifndef
Line 47: ID = ARCH_SHF_SMALL
Line 48: Unrecognized token: 35
Line 48: ID = define
Line 48: ID = ARCH_SHF_SMALL
Line 48: INTCON = 0
Line 49: Unrecognized token: 35
Line 49: ID = endif
Line 52: Unrecognized token: 35
Line 52: ID = define
Line 52: ID = INIT_OFFSET_MASK
Line 52: (
Line 52: INTCON = 1
Line 52: ID = UL
Line 52: <
Line 52: <
Line 52: (
Line 52: ID = BITS_PER_LONG
Line 52: -
Line 52: INTCON = 1
Line 52: )
Line 52: )
Line 55: ID = static
Line 55: ID = spinlock_t
Line 55: ID = modlist_lock
Line 55: =
Line 55: ID = SPIN_LOCK_UNLOCKED
Line 55: ;
Line 58: ID = static
Line 58: ID = DECLARE_MUTEX
Line 58: (
Line 58: ID = module_mutex
Line 58: )
Line 58: ;
Line 59: ID = static
Line 59: ID = LIST_HEAD
Line 59: (
Line 59: ID = modules
Line 59: )
Line 59: ;
Line 61: ID = static
Line 61: ID = DECLARE_MUTEX
Line 61: (
Line 61: ID = notify_mutex
Line 61: )
Line 61: ;
Line 62: ID = static
Line 62: ID = struct
Line 62: ID = notifier_block
Line 62: *
Line 62: ID = module_notify_list
Line 62: ;
Line 64: int
Line 64: ID = register_module_notifier
Line 64: (
Line 64: ID = struct
Line 64: ID = notifier_block
Line 64: *
Line 64: ID = nb
Line 64: )
Line 65: {
Line 66: int
Line 66: ID = err
Line 66: ;
Line 67: ID = down
Line 67: (
Line 67: Unrecognized token: 38
Line 67: ID = notify_mutex
Line 67: )
Line 67: ;
Line 68: ID = err
Line 68: =
Line 68: ID = notifier_chain_register
Line 68: (
Line 68: Unrecognized token: 38
Line 68: ID = module_notify_list
Line 68: ,
Line 68: ID = nb
Line 68: )
Line 68: ;
Line 69: ID = up
Line 69: (
Line 69: Unrecognized token: 38
Line 69: ID = notify_mutex
Line 69: )
Line 69: ;
Line 70: return
Line 70: ID = err
Line 70: ;
Line 71: }
Line 72: ID = EXPORT_SYMBOL
Line 72: (
Line 72: ID = register_module_notifier
Line 72: )
Line 72: ;
Line 74: int
Line 74: ID = unregister_module_notifier
Line 74: (
Line 74: ID = struct
Line 74: ID = notifier_block
Line 74: *
Line 74: ID = nb
Line 74: )
Line 75: {
Line 76: int
Line 76: ID = err
Line 76: ;
Line 77: ID = down
Line 77: (
Line 77: Unrecognized token: 38
Line 77: ID = notify_mutex
Line 77: )
Line 77: ;
Line 78: ID = err
Line 78: =
Line 78: ID = notifier_chain_unregister
Line 78: (
Line 78: Unrecognized token: 38
Line 78: ID = module_notify_list
Line 78: ,
Line 78: ID = nb
Line 78: )
Line 78: ;
Line 79: ID = up
Line 79: (
Line 79: Unrecognized token: 38
Line 79: ID = notify_mutex
Line 79: )
Line 79: ;
Line 80: return
Line 80: ID = err
Line 80: ;
Line 81: }
Line 82: ID = EXPORT_SYMBOL
Line 82: (
Line 82: ID = unregister_module_notifier
Line 82: )
Line 82: ;
Line 85: ID = static
Line 85: ID = inline
Line 85: int
Line 85: ID = strong_try_module_get
Line 85: (
Line 85: ID = struct
Line 85: ID = module
Line 85: *
Line 85: ID = mod
Line 85: )
Line 86: {
Line 87: if
Line 87: (
Line 87: ID = mod
Line 87: &&
Line 87: ID = mod
Line 87: -
Line 87: >
Line 87: ID = state
Line 87: ==
Line 87: ID = MODULE_STATE_COMING
Line 87: )
Line 88: return
Line 88: INTCON = 0
Line 88: ;
Line 89: return
Line 89: ID = try_module_get
Line 89: (
Line 89: ID = mod
Line 89: )
Line 89: ;
Line 90: }
Line 93: int
Line 93: ID = init_module
Line 93: (
Line 93: void
Line 93: )
Line 94: {
Line 95: return
Line 95: INTCON = 0
Line 95: ;
Line 96: }
Line 97: ID = EXPORT_SYMBOL
Line 97: (
Line 97: ID = init_module
Line 97: )
Line 97: ;
Line 103: void
Line 103: Unrecognized token: 95
Line 103: Unrecognized token: 95
Line 103: ID = module_put_and_exit
Line 103: (
Line 103: ID = struct
Line 103: ID = module
Line 103: *
Line 103: ID = mod
Line 103: ,
Line 103: ID = long
Line 103: ID = code
Line 103: )
Line 104: {
Line 105: ID = module_put
Line 105: (
Line 105: ID = mod
Line 105: )
Line 105: ;
Line 106: ID = do_exit
Line 106: (
Line 106: ID = code
Line 106: )
Line 106: ;
Line 107: }
Line 108: ID = EXPORT_SYMBOL
Line 108: (
Line 108: Unrecognized token: 95
Line 108: Unrecognized token: 95
Line 108: ID = module_put_and_exit
Line 108: )
Line 108: ;
Line 111: ID = static
Line 111: ID = unsigned
Line 111: int
Line 111: ID = find_sec
Line 111: (
Line 111: ID = Elf_Ehdr
Line 111: *
Line 111: ID = hdr
Line 111: ,
Line 112: ID = Elf_Shdr
Line 112: *
Line 112: ID = sechdrs
Line 112: ,
Line 113: ID = const
Line 113: char
Line 113: *
Line 113: ID = secstrings
Line 113: ,
Line 114: ID = const
Line 114: char
Line 114: *
Line 114: ID = name
Line 114: )
Line 115: {
Line 116: ID = unsigned
Line 116: int
Line 116: ID = i
Line 116: ;
Line 118: for
Line 118: (
Line 118: ID = i
Line 118: =
Line 118: INTCON = 1
Line 118: ;
Line 118: ID = i
Line 118: <
Line 118: ID = hdr
Line 118: -
Line 118: >
Line 118: ID = e_shnum
Line 118: ;
Line 118: ID = i
Line 118: +
Line 118: +
Line 118: )
Line 120: if
Line 120: (
Line 120: (
Line 120: ID = sechdrs
Line 120: [
Line 120: ID = i
Line 120: ]
Line 120: Unrecognized token: 46
Line 120: ID = sh_flags
Line 120: Unrecognized token: 38
Line 120: ID = SHF_ALLOC
Line 120: )
Line 121: &&
Line 121: ID = strcmp
Line 121: (
Line 121: ID = secstrings
Line 121: +
Line 121: ID = sechdrs
Line 121: [
Line 121: ID = i
Line 121: ]
Line 121: Unrecognized token: 46
Line 121: ID = sh_name
Line 121: ,
Line 121: ID = name
Line 121: )
Line 121: ==
Line 121: INTCON = 0
Line 121: )
Line 122: return
Line 122: ID = i
Line 122: ;
Line 123: return
Line 123: INTCON = 0
Line 123: ;
Line 124: }
Line 127: extern
Line 127: ID = const
Line 127: ID = struct
Line 127: ID = kernel_symbol
Line 127: Unrecognized token: 95
Line 127: Unrecognized token: 95
Line 127: ID = start___ksymtab
Line 127: [
Line 127: ]
Line 127: ;
Line 128: extern
Line 128: ID = const
Line 128: ID = struct
Line 128: ID = kernel_symbol
Line 128: Unrecognized token: 95
Line 128: Unrecognized token: 95
Line 128: ID = stop___ksymtab
Line 128: [
Line 128: ]
Line 128: ;
Line 129: extern
Line 129: ID = const
Line 129: ID = struct
Line 129: ID = kernel_symbol
Line 129: Unrecognized token: 95
Line 129: Unrecognized token: 95
Line 129: ID = start___ksymtab_gpl
Line 129: [
Line 129: ]
Line 129: ;
Line 130: extern
Line 130: ID = const
Line 130: ID = struct
Line 130: ID = kernel_symbol
Line 130: Unrecognized token: 95
Line 130: Unrecognized token: 95
Line 130: ID = stop___ksymtab_gpl
Line 130: [
Line 130: ]
Line 130: ;
Line 131: extern
Line 131: ID = const
Line 131: ID = unsigned
Line 131: ID = long
Line 131: Unrecognized token: 95
Line 131: Unrecognized token: 95
Line 131: ID = start___kcrctab
Line 131: [
Line 131: ]
Line 131: ;
Line 132: extern
Line 132: ID = const
Line 132: ID = unsigned
Line 132: ID = long
Line 132: Unrecognized token: 95
Line 132: Unrecognized token: 95
Line 132: ID = start___kcrctab_gpl
Line 132: [
Line 132: ]
Line 132: ;
Line 134: Unrecognized token: 35
Line 134: ID = ifndef
Line 134: ID = CONFIG_MODVERSIONS
Line 135: Unrecognized token: 35
Line 135: ID = define
Line 135: ID = symversion
Line 135: (
Line 135: ID = base
Line 135: ,
Line 135: ID = idx
Line 135: )
Line 135: ID = NULL
Line 136: Unrecognized token: 35
Line 136: else
Line 137: Unrecognized token: 35
Line 137: ID = define
Line 137: ID = symversion
Line 137: (
Line 137: ID = base
Line 137: ,
Line 137: ID = idx
Line 137: )
Line 137: (
Line 137: (
Line 137: ID = base
Line 137: )
Line 137: Unrecognized token: 63
Line 137: (
Line 137: (
Line 137: ID = base
Line 137: )
Line 137: +
Line 137: (
Line 137: ID = idx
Line 137: )
Line 137: )
Line 137: Unrecognized token: 58
Line 137: ID = NULL
Line 137: )
Line 138: Unrecognized token: 35
Line 138: ID = endif
Line 141: ID = static
Line 141: ID = unsigned
Line 141: ID = long
Line 141: Unrecognized token: 95
Line 141: Unrecognized token: 95
Line 141: ID = find_symbol
Line 141: (
Line 141: ID = const
Line 141: char
Line 141: *
Line 141: ID = name
Line 141: ,
Line 142: ID = struct
Line 142: ID = module
Line 142: *
Line 142: *
Line 142: ID = owner
Line 142: ,
Line 143: ID = const
Line 143: ID = unsigned
Line 143: ID = long
Line 143: *
Line 143: *
Line 143: ID = crc
Line 143: ,
Line 144: int
Line 144: ID = gplok
Line 144: )
Line 145: {
Line 146: ID = struct
Line 146: ID = module
Line 146: *
Line 146: ID = mod
Line 146: ;
Line 147: ID = unsigned
Line 147: int
Line 147: ID = i
Line 147: ;
Line 150: *
Line 150: ID = owner
Line 150: =
Line 150: ID = NULL
Line 150: ;
Line 151: for
Line 151: (
Line 151: ID = i
Line 151: =
Line 151: INTCON = 0
Line 151: ;
Line 151: Unrecognized token: 95
Line 151: Unrecognized token: 95
Line 151: ID = start___ksymtab
Line 151: +
Line 151: ID = i
Line 151: <
Line 151: Unrecognized token: 95
Line 151: Unrecognized token: 95
Line 151: ID = stop___ksymtab
Line 151: ;
Line 151: ID = i
Line 151: +
Line 151: +
Line 151: )
Line 151: {
Line 152: if
Line 152: (
Line 152: ID = strcmp
Line 152: (
Line 152: Unrecognized token: 95
Line 152: Unrecognized token: 95
Line 152: ID = start___ksymtab
Line 152: [
Line 152: ID = i
Line 152: ]
Line 152: Unrecognized token: 46
Line 152: ID = name
Line 152: ,
Line 152: ID = name
Line 152: )
Line 152: ==
Line 152: INTCON = 0
Line 152: )
Line 152: {
Line 153: *
Line 153: ID = crc
Line 153: =
Line 153: ID = symversion
Line 153: (
Line 153: Unrecognized token: 95
Line 153: Unrecognized token: 95
Line 153: ID = start___kcrctab
Line 153: ,
Line 153: ID = i
Line 153: )
Line 153: ;
Line 154: return
Line 154: Unrecognized token: 95
Line 154: Unrecognized token: 95
Line 154: ID = start___ksymtab
Line 154: [
Line 154: ID = i
Line 154: ]
Line 154: Unrecognized token: 46
Line 154: ID = value
Line 154: ;
Line 155: }
Line 156: }
Line 157: if
Line 157: (
Line 157: ID = gplok
Line 157: )
Line 157: {
Line 158: for
Line 158: (
Line 158: ID = i
Line 158: =
Line 158: INTCON = 0
Line 158: ;
Line 158: Unrecognized token: 95
Line 158: Unrecognized token: 95
Line 158: ID = start___ksymtab_gpl
Line 158: +
Line 158: ID = i
Line 158: <
Line 158: Unrecognized token: 95
Line 158: Unrecognized token: 95
Line 158: ID = stop___ksymtab_gpl
Line 158: ;
Line 158: ID = i
Line 158: +
Line 158: +
Line 158: )
Line 159: if
Line 159: (
Line 159: ID = strcmp
Line 159: (
Line 159: Unrecognized token: 95
Line 159: Unrecognized token: 95
Line 159: ID = start___ksymtab_gpl
Line 159: [
Line 159: ID = i
Line 159: ]
Line 159: Unrecognized token: 46
Line 159: ID = name
Line 159: ,
Line 159: ID = name
Line 159: )
Line 159: ==
Line 159: INTCON = 0
Line 159: )
Line 159: {
Line 160: *
Line 160: ID = crc
Line 160: =
Line 160: ID = symversion
Line 160: (
Line 160: Unrecognized token: 95
Line 160: Unrecognized token: 95
Line 160: ID = start___kcrctab_gpl
Line 160: ,
Line 160: ID = i
Line 160: )
Line 160: ;
Line 161: return
Line 161: Unrecognized token: 95
Line 161: Unrecognized token: 95
Line 161: ID = start___ksymtab_gpl
Line 161: [
Line 161: ID = i
Line 161: ]
Line 161: Unrecognized token: 46
Line 161: ID = value
Line 161: ;
Line 162: }
Line 163: }
Line 166: ID = list_for_each_entry
Line 166: (
Line 166: ID = mod
Line 166: ,
Line 166: Unrecognized token: 38
Line 166: ID = modules
Line 166: ,
Line 166: ID = list
Line 166: )
Line 166: {
Line 167: *
Line 167: ID = owner
Line 167: =
Line 167: ID = mod
Line 167: ;
Line 168: for
Line 168: (
Line 168: ID = i
Line 168: =
Line 168: INTCON = 0
Line 168: ;
Line 168: ID = i
Line 168: <
Line 168: ID = mod
Line 168: -
Line 168: >
Line 168: ID = num_syms
Line 168: ;
Line 168: ID = i
Line 168: +
Line 168: +
Line 168: )
Line 169: if
Line 169: (
Line 169: ID = strcmp
Line 169: (
Line 169: ID = mod
Line 169: -
Line 169: >
Line 169: ID = syms
Line 169: [
Line 169: ID = i
Line 169: ]
Line 169: Unrecognized token: 46
Line 169: ID = name
Line 169: ,
Line 169: ID = name
Line 169: )
Line 169: ==
Line 169: INTCON = 0
Line 169: )
Line 169: {
Line 170: *
Line 170: ID = crc
Line 170: =
Line 170: ID = symversion
Line 170: (
Line 170: ID = mod
Line 170: -
Line 170: >
Line 170: ID = crcs
Line 170: ,
Line 170: ID = i
Line 170: )
Line 170: ;
Line 171: return
Line 171: ID = mod
Line 171: -
Line 171: >
Line 171: ID = syms
Line 171: [
Line 171: ID = i
Line 171: ]
Line 171: Unrecognized token: 46
Line 171: ID = value
Line 171: ;
Line 172: }
Line 174: if
Line 174: (
Line 174: ID = gplok
Line 174: )
Line 174: {
Line 175: for
Line 175: (
Line 175: ID = i
Line 175: =
Line 175: INTCON = 0
Line 175: ;
Line 175: ID = i
Line 175: <
Line 175: ID = mod
Line 175: -
Line 175: >
Line 175: ID = num_gpl_syms
Line 175: ;
Line 175: ID = i
Line 175: +
Line 175: +
Line 175: )
Line 175: {
Line 176: if
Line 176: (
Line 176: ID = strcmp
Line 176: (
Line 176: ID = mod
Line 176: -
Line 176: >
Line 176: ID = gpl_syms
Line 176: [
Line 176: ID = i
Line 176: ]
Line 176: Unrecognized token: 46
Line 176: ID = name
Line 176: ,
Line 176: ID = name
Line 176: )
Line 176: ==
Line 176: INTCON = 0
Line 176: )
Line 176: {
Line 177: *
Line 177: ID = crc
Line 177: =
Line 177: ID = symversion
Line 177: (
Line 177: ID = mod
Line 177: -
Line 177: >
Line 177: ID = gpl_crcs
Line 177: ,
Line 177: ID = i
Line 177: )
Line 177: ;
Line 178: return
Line 178: ID = mod
Line 178: -
Line 178: >
Line 178: ID = gpl_syms
Line 178: [
Line 178: ID = i
Line 178: ]
Line 178: Unrecognized token: 46
Line 178: ID = value
Line 178: ;
Line 179: }
Line 180: }
Line 181: }
Line 182: }
Line 183: ID = DEBUGP
Line 183: (
Line 183: STRINGCON = "Failed to find symbol %s\n"
Line 183: ,
Line 183: ID = name
Line 183: )
Line 183: ;
Line 184: return
Line 184: INTCON = 0
Line 184: ;
Line 185: }
Line 188: ID = static
Line 188: ID = unsigned
Line 188: ID = long
Line 188: ID = find_local_symbol
Line 188: (
Line 188: ID = Elf_Shdr
Line 188: *
Line 188: ID = sechdrs
Line 188: ,
Line 189: ID = unsigned
Line 189: int
Line 189: ID = symindex
Line 189: ,
Line 190: ID = const
Line 190: char
Line 190: *
Line 190: ID = strtab
Line 190: ,
Line 191: ID = const
Line 191: char
Line 191: *
Line 191: ID = name
Line 191: )
Line 192: {
Line 193: ID = unsigned
Line 193: int
Line 193: ID = i
Line 193: ;
Line 194: ID = Elf_Sym
Line 194: *
Line 194: ID = sym
Line 194: =
Line 194: (
Line 194: void
Line 194: *
Line 194: )
Line 194: ID = sechdrs
Line 194: [
Line 194: ID = symindex
Line 194: ]
Line 194: Unrecognized token: 46
Line 194: ID = sh_addr
Line 194: ;
Line 197: for
Line 197: (
Line 197: ID = i
Line 197: =
Line 197: INTCON = 1
Line 197: ;
Line 197: ID = i
Line 197: <
Line 197: ID = sechdrs
Line 197: [
Line 197: ID = symindex
Line 197: ]
Line 197: Unrecognized token: 46
Line 197: ID = sh_size
Line 197: /
Line 197: ID = sizeof
Line 197: (
Line 197: *
Line 197: ID = sym
Line 197: )
Line 197: ;
Line 197: ID = i
Line 197: +
Line 197: +
Line 197: )
Line 197: {
Line 198: if
Line 198: (
Line 198: ID = sym
Line 198: [
Line 198: ID = i
Line 198: ]
Line 198: Unrecognized token: 46
Line 198: ID = st_shndx
Line 198: !=
Line 198: ID = SHN_UNDEF
Line 199: &&
Line 199: ID = strcmp
Line 199: (
Line 199: ID = name
Line 199: ,
Line 199: ID = strtab
Line 199: +
Line 199: ID = sym
Line 199: [
Line 199: ID = i
Line 199: ]
Line 199: Unrecognized token: 46
Line 199: ID = st_name
Line 199: )
Line 199: ==
Line 199: INTCON = 0
Line 199: )
Line 200: return
Line 200: ID = sym
Line 200: [
Line 200: ID = i
Line 200: ]
Line 200: Unrecognized token: 46
Line 200: ID = st_value
Line 200: ;
Line 201: }
Line 202: return
Line 202: INTCON = 0
Line 202: ;
Line 203: }
Line 206: ID = static
Line 206: ID = struct
Line 206: ID = module
Line 206: *
Line 206: ID = find_module
Line 206: (
Line 206: ID = const
Line 206: char
Line 206: *
Line 206: ID = name
Line 206: )
Line 207: {
Line 208: ID = struct
Line 208: ID = module
Line 208: *
Line 208: ID = mod
Line 208: ;
Line 210: ID = list_for_each_entry
Line 210: (
Line 210: ID = mod
Line 210: ,
Line 210: Unrecognized token: 38
Line 210: ID = modules
Line 210: ,
Line 210: ID = list
Line 210: )
Line 210: {
Line 211: if
Line 211: (
Line 211: ID = strcmp
Line 211: (
Line 211: ID = mod
Line 211: -
Line 211: >
Line 211: ID = name
Line 211: ,
Line 211: ID = name
Line 211: )
Line 211: ==
Line 211: INTCON = 0
Line 211: )
Line 212: return
Line 212: ID = mod
Line 212: ;
Line 213: }
Line 214: return
Line 214: ID = NULL
Line 214: ;
Line 215: }
Line 217: Unrecognized token: 35
Line 217: ID = ifdef
Line 217: ID = CONFIG_SMP
Line 219: ID = static
Line 219: ID = unsigned
Line 219: int
Line 219: ID = pcpu_num_used
Line 219: ,
Line 219: ID = pcpu_num_allocated
Line 219: ;
Line 221: ID = static
Line 221: int
Line 221: *
Line 221: ID = pcpu_size
Line 221: ;
Line 223: ID = static
Line 223: int
Line 223: ID = split_block
Line 223: (
Line 223: ID = unsigned
Line 223: int
Line 223: ID = i
Line 223: ,
Line 223: ID = unsigned
Line 223: ID = short
Line 223: ID = size
Line 223: )
Line 224: {
Line 226: if
Line 226: (
Line 226: ID = pcpu_num_used
Line 226: +
Line 226: INTCON = 1
Line 226: >
Line 226: ID = pcpu_num_allocated
Line 226: )
Line 226: {
Line 227: int
Line 227: *
Line 227: ID = new
Line 227: =
Line 227: ID = kmalloc
Line 227: (
Line 227: ID = sizeof
Line 227: (
Line 227: ID = new
Line 227: [
Line 227: INTCON = 0
Line 227: ]
Line 227: )
Line 227: *
Line 227: ID = pcpu_num_allocated
Line 227: *
Line 227: INTCON = 2
Line 227: ,
Line 228: ID = GFP_KERNEL
Line 228: )
Line 228: ;
Line 229: if
Line 229: (
Line 229: !
Line 229: ID = new
Line 229: )
Line 230: return
Line 230: INTCON = 0
Line 230: ;
Line 232: ID = memcpy
Line 232: (
Line 232: ID = new
Line 232: ,
Line 232: ID = pcpu_size
Line 232: ,
Line 232: ID = sizeof
Line 232: (
Line 232: ID = new
Line 232: [
Line 232: INTCON = 0
Line 232: ]
Line 232: )
Line 232: *
Line 232: ID = pcpu_num_allocated
Line 232: )
Line 232: ;
Line 233: ID = pcpu_num_allocated
Line 233: *
Line 233: =
Line 233: INTCON = 2
Line 233: ;
Line 234: ID = kfree
Line 234: (
Line 234: ID = pcpu_size
Line 234: )
Line 234: ;
Line 235: ID = pcpu_size
Line 235: =
Line 235: ID = new
Line 235: ;
Line 236: }
Line 239: ID = memmove
Line 239: (
Line 239: Unrecognized token: 38
Line 239: ID = pcpu_size
Line 239: [
Line 239: ID = i
Line 239: +
Line 239: INTCON = 1
Line 239: ]
Line 239: ,
Line 239: Unrecognized token: 38
Line 239: ID = pcpu_size
Line 239: [
Line 239: ID = i
Line 239: ]
Line 239: ,
Line 240: ID = sizeof
Line 240: (
Line 240: ID = pcpu_size
Line 240: [
Line 240: INTCON = 0
Line 240: ]
Line 240: )
Line 240: *
Line 240: (
Line 240: ID = pcpu_num_used
Line 240: -
Line 240: ID = i
Line 240: )
Line 240: )
Line 240: ;
Line 241: ID = pcpu_num_used
Line 241: +
Line 241: +
Line 241: ;
Line 243: ID = pcpu_size
Line 243: [
Line 243: ID = i
Line 243: +
Line 243: INTCON = 1
Line 243: ]
Line 243: -
Line 243: =
Line 243: ID = size
Line 243: ;
Line 244: ID = pcpu_size
Line 244: [
Line 244: ID = i
Line 244: ]
Line 244: =
Line 244: ID = size
Line 244: ;
Line 245: return
Line 245: INTCON = 1
Line 245: ;
Line 246: }
Line 248: ID = static
Line 248: ID = inline
Line 248: ID = unsigned
Line 248: int
Line 248: ID = block_size
Line 248: (
Line 248: int
Line 248: ID = val
Line 248: )
Line 249: {
Line 250: if
Line 250: (
Line 250: ID = val
Line 250: <
Line 250: INTCON = 0
Line 250: )
Line 251: return
Line 251: -
Line 251: ID = val
Line 251: ;
Line 252: return
Line 252: ID = val
Line 252: ;
Line 253: }
Line 256: extern
Line 256: char
Line 256: Unrecognized token: 95
Line 256: Unrecognized token: 95
Line 256: ID = per_cpu_start
Line 256: [
Line 256: ]
Line 256: ,
Line 256: Unrecognized token: 95
Line 256: Unrecognized token: 95
Line 256: ID = per_cpu_end
Line 256: [
Line 256: ]
Line 256: ;
Line 258: ID = static
Line 258: void
Line 258: *
Line 258: ID = percpu_modalloc
Line 258: (
Line 258: ID = unsigned
Line 258: ID = long
Line 258: ID = size
Line 258: ,
Line 258: ID = unsigned
Line 258: ID = long
Line 258: ID = align
Line 258: )
Line 259: {
Line 260: ID = unsigned
Line 260: ID = long
Line 260: ID = extra
Line 260: ;
Line 261: ID = unsigned
Line 261: int
Line 261: ID = i
Line 261: ;
Line 262: void
Line 262: *
Line 262: ID = ptr
Line 262: ;
Line 264: ID = BUG_ON
Line 264: (
Line 264: ID = align
Line 264: >
Line 264: ID = SMP_CACHE_BYTES
Line 264: )
Line 264: ;
Line 266: ID = ptr
Line 266: =
Line 266: Unrecognized token: 95
Line 266: Unrecognized token: 95
Line 266: ID = per_cpu_start
Line 266: ;
Line 267: for
Line 267: (
Line 267: ID = i
Line 267: =
Line 267: INTCON = 0
Line 267: ;
Line 267: ID = i
Line 267: <
Line 267: ID = pcpu_num_used
Line 267: ;
Line 267: ID = ptr
Line 267: +
Line 267: =
Line 267: ID = block_size
Line 267: (
Line 267: ID = pcpu_size
Line 267: [
Line 267: ID = i
Line 267: ]
Line 267: )
Line 267: ,
Line 267: ID = i
Line 267: +
Line 267: +
Line 267: )
Line 267: {
Line 269: ID = extra
Line 269: =
Line 269: ID = ALIGN
Line 269: (
Line 269: (
Line 269: ID = unsigned
Line 269: ID = long
Line 269: )
Line 269: ID = ptr
Line 269: ,
Line 269: ID = align
Line 269: )
Line 269: -
Line 269: (
Line 269: ID = unsigned
Line 269: ID = long
Line 269: )
Line 269: ID = ptr
Line 269: ;
Line 270: ID = BUG_ON
Line 270: (
Line 270: ID = i
Line 270: ==
Line 270: INTCON = 0
Line 270: &&
Line 270: ID = extra
Line 270: !=
Line 270: INTCON = 0
Line 270: )
Line 270: ;
Line 272: if
Line 272: (
Line 272: ID = pcpu_size
Line 272: [
Line 272: ID = i
Line 272: ]
Line 272: <
Line 272: INTCON = 0
Line 272: ||
Line 272: ID = pcpu_size
Line 272: [
Line 272: ID = i
Line 272: ]
Line 272: <
Line 272: ID = extra
Line 272: +
Line 272: ID = size
Line 272: )
Line 273: ID = continue
Line 273: ;
Line 276: if
Line 276: (
Line 276: ID = pcpu_size
Line 276: [
Line 276: ID = i
Line 276: -
Line 276: INTCON = 1
Line 276: ]
Line 276: <
Line 276: INTCON = 0
Line 276: )
Line 277: ID = pcpu_size
Line 277: [
Line 277: ID = i
Line 277: -
Line 277: INTCON = 1
Line 277: ]
Line 277: -
Line 277: =
Line 277: ID = extra
Line 277: ;
Line 278: else
Line 279: ID = pcpu_size
Line 279: [
Line 279: ID = i
Line 279: -
Line 279: INTCON = 1
Line 279: ]
Line 279: +
Line 279: =
Line 279: ID = extra
Line 279: ;
Line 280: ID = pcpu_size
Line 280: [
Line 280: ID = i
Line 280: ]
Line 280: -
Line 280: =
Line 280: ID = extra
Line 280: ;
Line 281: ID = ptr
Line 281: +
Line 281: =
Line 281: ID = extra
Line 281: ;
Line 284: if
Line 284: (
Line 284: ID = pcpu_size
Line 284: [
Line 284: ID = i
Line 284: ]
Line 284: -
Line 284: ID = size
Line 284: >
Line 284: ID = sizeof
Line 284: (
Line 284: ID = unsigned
Line 284: ID = long
Line 284: )
Line 284: )
Line 285: if
Line 285: (
Line 285: !
Line 285: ID = split_block
Line 285: (
Line 285: ID = i
Line 285: ,
Line 285: ID = size
Line 285: )
Line 285: )
Line 286: return
Line 286: ID = NULL
Line 286: ;
Line 289: ID = pcpu_size
Line 289: [
Line 289: ID = i
Line 289: ]
Line 289: =
Line 289: -
Line 289: ID = pcpu_size
Line 289: [
Line 289: ID = i
Line 289: ]
Line 289: ;
Line 290: return
Line 290: ID = ptr
Line 290: ;
Line 291: }
Line 293: ID = printk
Line 293: (
Line 293: ID = KERN_WARNING
Line 293: STRINGCON = "Could not allocate %lu bytes percpu data\n"
Line 293: ,
Line 294: ID = size
Line 294: )
Line 294: ;
Line 295: return
Line 295: ID = NULL
Line 295: ;
Line 296: }
Line 298: ID = static
Line 298: void
Line 298: ID = percpu_modfree
Line 298: (
Line 298: void
Line 298: *
Line 298: ID = freeme
Line 298: )
Line 299: {
Line 300: ID = unsigned
Line 300: int
Line 300: ID = i
Line 300: ;
Line 301: void
Line 301: *
Line 301: ID = ptr
Line 301: =
Line 301: Unrecognized token: 95
Line 301: Unrecognized token: 95
Line 301: ID = per_cpu_start
Line 301: +
Line 301: ID = block_size
Line 301: (
Line 301: ID = pcpu_size
Line 301: [
Line 301: INTCON = 0
Line 301: ]
Line 301: )
Line 301: ;
Line 304: for
Line 304: (
Line 304: ID = i
Line 304: =
Line 304: INTCON = 1
Line 304: ;
Line 304: ID = i
Line 304: <
Line 304: ID = pcpu_num_used
Line 304: ;
Line 304: ID = ptr
Line 304: +
Line 304: =
Line 304: ID = block_size
Line 304: (
Line 304: ID = pcpu_size
Line 304: [
Line 304: ID = i
Line 304: ]
Line 304: )
Line 304: ,
Line 304: ID = i
Line 304: +
Line 304: +
Line 304: )
Line 304: {
Line 305: if
Line 305: (
Line 305: ID = ptr
Line 305: ==
Line 305: ID = freeme
Line 305: )
Line 305: {
Line 306: ID = pcpu_size
Line 306: [
Line 306: ID = i
Line 306: ]
Line 306: =
Line 306: -
Line 306: ID = pcpu_size
Line 306: [
Line 306: ID = i
Line 306: ]
Line 306: ;
Line 307: ID = goto
Line 307: ID = free
Line 307: ;
Line 308: }
Line 309: }
Line 310: ID = BUG
Line 310: (
Line 310: )
Line 310: ;
Line 312: ID = free
Line 312: Unrecognized token: 58
Line 314: if
Line 314: (
Line 314: ID = pcpu_size
Line 314: [
Line 314: ID = i
Line 314: -
Line 314: INTCON = 1
Line 314: ]
Line 314: >=
Line 314: INTCON = 0
Line 314: )
Line 314: {
Line 315: ID = pcpu_size
Line 315: [
Line 315: ID = i
Line 315: -
Line 315: INTCON = 1
Line 315: ]
Line 315: +
Line 315: =
Line 315: ID = pcpu_size
Line 315: [
Line 315: ID = i
Line 315: ]
Line 315: ;
Line 316: ID = pcpu_num_used
Line 316: -
Line 316: -
Line 316: ;
Line 317: ID = memmove
Line 317: (
Line 317: Unrecognized token: 38
Line 317: ID = pcpu_size
Line 317: [
Line 317: ID = i
Line 317: ]
Line 317: ,
Line 317: Unrecognized token: 38
Line 317: ID = pcpu_size
Line 317: [
Line 317: ID = i
Line 317: +
Line 317: INTCON = 1
Line 317: ]
Line 317: ,
Line 318: (
Line 318: ID = pcpu_num_used
Line 318: -
Line 318: ID = i
Line 318: )
Line 318: *
Line 318: ID = sizeof
Line 318: (
Line 318: ID = pcpu_size
Line 318: [
Line 318: INTCON = 0
Line 318: ]
Line 318: )
Line 318: )
Line 318: ;
Line 319: ID = i
Line 319: -
Line 319: -
Line 319: ;
Line 320: }
Line 322: if
Line 322: (
Line 322: ID = i
Line 322: +
Line 322: INTCON = 1
Line 322: <
Line 322: ID = pcpu_num_used
Line 322: &&
Line 322: ID = pcpu_size
Line 322: [
Line 322: ID = i
Line 322: +
Line 322: INTCON = 1
Line 322: ]
Line 322: >=
Line 322: INTCON = 0
Line 322: )
Line 322: {
Line 323: ID = pcpu_size
Line 323: [
Line 323: ID = i
Line 323: ]
Line 323: +
Line 323: =
Line 323: ID = pcpu_size
Line 323: [
Line 323: ID = i
Line 323: +
Line 323: INTCON = 1
Line 323: ]
Line 323: ;
Line 324: ID = pcpu_num_used
Line 324: -
Line 324: -
Line 324: ;
Line 325: ID = memmove
Line 325: (
Line 325: Unrecognized token: 38
Line 325: ID = pcpu_size
Line 325: [
Line 325: ID = i
Line 325: +
Line 325: INTCON = 1
Line 325: ]
Line 325: ,
Line 325: Unrecognized token: 38
Line 325: ID = pcpu_size
Line 325: [
Line 325: ID = i
Line 325: +
Line 325: INTCON = 2
Line 325: ]
Line 325: ,
Line 326: (
Line 326: ID = pcpu_num_used
Line 326: -
Line 326: (
Line 326: ID = i
Line 326: +
Line 326: INTCON = 1
Line 326: )
Line 326: )
Line 326: *
Line 326: ID = sizeof
Line 326: (
Line 326: ID = pcpu_size
Line 326: [
Line 326: INTCON = 0
Line 326: ]
Line 326: )
Line 326: )
Line 326: ;
Line 327: }
Line 328: }
Line 330: ID = static
Line 330: ID = unsigned
Line 330: int
Line 330: ID = find_pcpusec
Line 330: (
Line 330: ID = Elf_Ehdr
Line 330: *
Line 330: ID = hdr
Line 330: ,
Line 331: ID = Elf_Shdr
Line 331: *
Line 331: ID = sechdrs
Line 331: ,
Line 332: ID = const
Line 332: char
Line 332: *
Line 332: ID = secstrings
Line 332: )
Line 333: {
Line 334: return
Line 334: ID = find_sec
Line 334: (
Line 334: ID = hdr
Line 334: ,
Line 334: ID = sechdrs
Line 334: ,
Line 334: ID = secstrings
Line 334: ,
Line 334: STRINGCON = ".data.percpu"
Line 334: )
Line 334: ;
Line 335: }
Line 337: ID = static
Line 337: int
Line 337: ID = percpu_modinit
Line 337: (
Line 337: void
Line 337: )
Line 338: {
Line 339: ID = pcpu_num_used
Line 339: =
Line 339: INTCON = 2
Line 339: ;
Line 340: ID = pcpu_num_allocated
Line 340: =
Line 340: INTCON = 2
Line 340: ;
Line 341: ID = pcpu_size
Line 341: =
Line 341: ID = kmalloc
Line 341: (
Line 341: ID = sizeof
Line 341: (
Line 341: ID = pcpu_size
Line 341: [
Line 341: INTCON = 0
Line 341: ]
Line 341: )
Line 341: *
Line 341: ID = pcpu_num_allocated
Line 341: ,
Line 342: ID = GFP_KERNEL
Line 342: )
Line 342: ;
Line 344: ID = pcpu_size
Line 344: [
Line 344: INTCON = 0
Line 344: ]
Line 344: =
Line 344: -
Line 344: ID = ALIGN
Line 344: (
Line 344: Unrecognized token: 95
Line 344: Unrecognized token: 95
Line 344: ID = per_cpu_end
Line 344: -
Line 344: Unrecognized token: 95
Line 344: Unrecognized token: 95
Line 344: ID = per_cpu_start
Line 344: ,
Line 344: ID = SMP_CACHE_BYTES
Line 344: )
Line 344: ;
Line 346: ID = pcpu_size
Line 346: [
Line 346: INTCON = 1
Line 346: ]
Line 346: =
Line 346: ID = PERCPU_ENOUGH_ROOM
Line 346: +
Line 346: ID = pcpu_size
Line 346: [
Line 346: INTCON = 0
Line 346: ]
Line 346: ;
Line 347: if
Line 347: (
Line 347: ID = pcpu_size
Line 347: [
Line 347: INTCON = 1
Line 347: ]
Line 347: <
Line 347: INTCON = 0
Line 347: )
Line 347: {
Line 348: ID = printk
Line 348: (
Line 348: ID = KERN_ERR
Line 348: STRINGCON = "No per-cpu room for modules.\n"
Line 348: )
Line 348: ;
Line 349: ID = pcpu_num_used
Line 349: =
Line 349: INTCON = 1
Line 349: ;
Line 350: }
Line 352: return
Line 352: INTCON = 0
Line 352: ;
Line 353: }
Line 354: Unrecognized token: 95
Line 354: Unrecognized token: 95
Line 354: ID = initcall
Line 354: (
Line 354: ID = percpu_modinit
Line 354: )
Line 354: ;
Line 355: Unrecognized token: 35
Line 355: else
Line 356: ID = static
Line 356: ID = inline
Line 356: void
Line 356: *
Line 356: ID = percpu_modalloc
Line 356: (
Line 356: ID = unsigned
Line 356: ID = long
Line 356: ID = size
Line 356: ,
Line 356: ID = unsigned
Line 356: ID = long
Line 356: ID = align
Line 356: )
Line 357: {
Line 358: return
Line 358: ID = NULL
Line 358: ;
Line 359: }
Line 360: ID = static
Line 360: ID = inline
Line 360: void
Line 360: ID = percpu_modfree
Line 360: (
Line 360: void
Line 360: *
Line 360: ID = pcpuptr
Line 360: )
Line 361: {
Line 362: ID = BUG
Line 362: (
Line 362: )
Line 362: ;
Line 363: }
Line 364: ID = static
Line 364: ID = inline
Line 364: ID = unsigned
Line 364: int
Line 364: ID = find_pcpusec
Line 364: (
Line 364: ID = Elf_Ehdr
Line 364: *
Line 364: ID = hdr
Line 364: ,
Line 365: ID = Elf_Shdr
Line 365: *
Line 365: ID = sechdrs
Line 365: ,
Line 366: ID = const
Line 366: char
Line 366: *
Line 366: ID = secstrings
Line 366: )
Line 367: {
Line 368: return
Line 368: INTCON = 0
Line 368: ;
Line 369: }
Line 370: ID = static
Line 370: ID = inline
Line 370: void
Line 370: ID = percpu_modcopy
Line 370: (
Line 370: void
Line 370: *
Line 370: ID = pcpudst
Line 370: ,
Line 370: ID = const
Line 370: void
Line 370: *
Line 370: ID = src
Line 370: ,
Line 371: ID = unsigned
Line 371: ID = long
Line 371: ID = size
Line 371: )
Line 372: {
Line 374: ID = BUG_ON
Line 374: (
Line 374: ID = size
Line 374: !=
Line 374: INTCON = 0
Line 374: )
Line 374: ;
Line 375: }
Line 376: Unrecognized token: 35
Line 376: ID = endif
Line 378: ID = static
Line 378: int
Line 378: ID = add_attribute
Line 378: (
Line 378: ID = struct
Line 378: ID = module
Line 378: *
Line 378: ID = mod
Line 378: ,
Line 378: ID = struct
Line 378: ID = kernel_param
Line 378: *
Line 378: ID = kp
Line 378: )
Line 379: {
Line 380: ID = struct
Line 380: ID = module_attribute
Line 380: *
Line 380: ID = a
Line 380: ;
Line 381: int
Line 381: ID = retval
Line 381: ;
Line 383: ID = a
Line 383: =
Line 383: Unrecognized token: 38
Line 383: ID = mod
Line 383: -
Line 383: >
Line 383: ID = mkobj
Line 383: -
Line 383: >
Line 383: ID = attr
Line 383: [
Line 383: ID = mod
Line 383: -
Line 383: >
Line 383: ID = mkobj
Line 383: -
Line 383: >
Line 383: ID = num_attributes
Line 383: ]
Line 383: ;
Line 384: ID = a
Line 384: -
Line 384: >
Line 384: ID = attr
Line 384: Unrecognized token: 46
Line 384: ID = name
Line 384: =
Line 384: (
Line 384: char
Line 384: *
Line 384: )
Line 384: ID = kp
Line 384: -
Line 384: >
Line 384: ID = name
Line 384: ;
Line 385: ID = a
Line 385: -
Line 385: >
Line 385: ID = attr
Line 385: Unrecognized token: 46
Line 385: ID = owner
Line 385: =
Line 385: ID = mod
Line 385: ;
Line 386: ID = a
Line 386: -
Line 386: >
Line 386: ID = attr
Line 386: Unrecognized token: 46
Line 386: ID = mode
Line 386: =
Line 386: ID = kp
Line 386: -
Line 386: >
Line 386: ID = perm
Line 386: ;
Line 387: ID = a
Line 387: -
Line 387: >
Line 387: ID = param
Line 387: =
Line 387: ID = kp
Line 387: ;
Line 388: ID = retval
Line 388: =
Line 388: ID = sysfs_create_file
Line 388: (
Line 388: Unrecognized token: 38
Line 388: ID = mod
Line 388: -
Line 388: >
Line 388: ID = mkobj
Line 388: -
Line 388: >
Line 388: ID = kobj
Line 388: ,
Line 388: Unrecognized token: 38
Line 388: ID = a
Line 388: -
Line 388: >
Line 388: ID = attr
Line 388: )
Line 388: ;
Line 389: if
Line 389: (
Line 389: !
Line 389: ID = retval
Line 389: )
Line 390: ID = mod
Line 390: -
Line 390: >
Line 390: ID = mkobj
Line 390: -
Line 390: >
Line 390: ID = num_attributes
Line 390: +
Line 390: +
Line 390: ;
Line 391: return
Line 391: ID = retval
Line 391: ;
Line 392: }
Line 394: Unrecognized token: 35
Line 394: ID = ifdef
Line 394: ID = CONFIG_MODULE_UNLOAD
Line 396: ID = static
Line 396: void
Line 396: ID = module_unload_init
Line 396: (
Line 396: ID = struct
Line 396: ID = module
Line 396: *
Line 396: ID = mod
Line 396: )
Line 397: {
Line 398: ID = unsigned
Line 398: int
Line 398: ID = i
Line 398: ;
Line 400: ID = INIT_LIST_HEAD
Line 400: (
Line 400: Unrecognized token: 38
Line 400: ID = mod
Line 400: -
Line 400: >
Line 400: ID = modules_which_use_me
Line 400: )
Line 400: ;
Line 401: for
Line 401: (
Line 401: ID = i
Line 401: =
Line 401: INTCON = 0
Line 401: ;
Line 401: ID = i
Line 401: <
Line 401: ID = NR_CPUS
Line 401: ;
Line 401: ID = i
Line 401: +
Line 401: +
Line 401: )
Line 402: ID = local_set
Line 402: (
Line 402: Unrecognized token: 38
Line 402: ID = mod
Line 402: -
Line 402: >
Line 402: ID = ref
Line 402: [
Line 402: ID = i
Line 402: ]
Line 402: Unrecognized token: 46
Line 402: ID = count
Line 402: ,
Line 402: INTCON = 0
Line 402: )
Line 402: ;
Line 404: ID = local_set
Line 404: (
Line 404: Unrecognized token: 38
Line 404: ID = mod
Line 404: -
Line 404: >
Line 404: ID = ref
Line 404: [
Line 404: ID = smp_processor_id
Line 404: (
Line 404: )
Line 404: ]
Line 404: Unrecognized token: 46
Line 404: ID = count
Line 404: ,
Line 404: INTCON = 1
Line 404: )
Line 404: ;
Line 406: ID = mod
Line 406: -
Line 406: >
Line 406: ID = waiter
Line 406: =
Line 406: ID = current
Line 406: ;
Line 407: }
Line 410: ID = struct
Line 410: ID = module_use
Line 411: {
Line 412: ID = struct
Line 412: ID = list_head
Line 412: ID = list
Line 412: ;
Line 413: ID = struct
Line 413: ID = module
Line 413: *
Line 413: ID = module_which_uses
Line 413: ;
Line 414: }
Line 414: ;
Line 417: ID = static
Line 417: int
Line 417: ID = already_uses
Line 417: (
Line 417: ID = struct
Line 417: ID = module
Line 417: *
Line 417: ID = a
Line 417: ,
Line 417: ID = struct
Line 417: ID = module
Line 417: *
Line 417: ID = b
Line 417: )
Line 418: {
Line 419: ID = struct
Line 419: ID = module_use
Line 419: *
Line 419: ID = use
Line 419: ;
Line 421: ID = list_for_each_entry
Line 421: (
Line 421: ID = use
Line 421: ,
Line 421: Unrecognized token: 38
Line 421: ID = b
Line 421: -
Line 421: >
Line 421: ID = modules_which_use_me
Line 421: ,
Line 421: ID = list
Line 421: )
Line 421: {
Line 422: if
Line 422: (
Line 422: ID = use
Line 422: -
Line 422: >
Line 422: ID = module_which_uses
Line 422: ==
Line 422: ID = a
Line 422: )
Line 422: {
Line 423: ID = DEBUGP
Line 423: (
Line 423: STRINGCON = "%s uses %s!\n"
Line 423: ,
Line 423: ID = a
Line 423: -
Line 423: >
Line 423: ID = name
Line 423: ,
Line 423: ID = b
Line 423: -
Line 423: >
Line 423: ID = name
Line 423: )
Line 423: ;
Line 424: return
Line 424: INTCON = 1
Line 424: ;
Line 425: }
Line 426: }
Line 427: ID = DEBUGP
Line 427: (
Line 427: STRINGCON = "%s does not use %s!\n"
Line 427: ,
Line 427: ID = a
Line 427: -
Line 427: >
Line 427: ID = name
Line 427: ,
Line 427: ID = b
Line 427: -
Line 427: >
Line 427: ID = name
Line 427: )
Line 427: ;
Line 428: return
Line 428: INTCON = 0
Line 428: ;
Line 429: }
Line 432: ID = static
Line 432: int
Line 432: ID = use_module
Line 432: (
Line 432: ID = struct
Line 432: ID = module
Line 432: *
Line 432: ID = a
Line 432: ,
Line 432: ID = struct
Line 432: ID = module
Line 432: *
Line 432: ID = b
Line 432: )
Line 433: {
Line 434: ID = struct
Line 434: ID = module_use
Line 434: *
Line 434: ID = use
Line 434: ;
Line 435: if
Line 435: (
Line 435: ID = b
Line 435: ==
Line 435: ID = NULL
Line 435: ||
Line 435: ID = already_uses
Line 435: (
Line 435: ID = a
Line 435: ,
Line 435: ID = b
Line 435: )
Line 435: )
Line 435: return
Line 435: INTCON = 1
Line 435: ;
Line 437: if
Line 437: (
Line 437: !
Line 437: ID = strong_try_module_get
Line 437: (
Line 437: ID = b
Line 437: )
Line 437: )
Line 438: return
Line 438: INTCON = 0
Line 438: ;
Line 440: ID = DEBUGP
Line 440: (
Line 440: STRINGCON = "Allocating new usage for %s.\n"
Line 440: ,
Line 440: ID = a
Line 440: -
Line 440: >
Line 440: ID = name
Line 440: )
Line 440: ;
Line 441: ID = use
Line 441: =
Line 441: ID = kmalloc
Line 441: (
Line 441: ID = sizeof
Line 441: (
Line 441: *
Line 441: ID = use
Line 441: )
Line 441: ,
Line 441: ID = GFP_ATOMIC
Line 441: )
Line 441: ;
Line 442: if
Line 442: (
Line 442: !
Line 442: ID = use
Line 442: )
Line 442: {
Line 443: ID = printk
Line 443: (
Line 443: STRINGCON = "%s: out of memory loading\n"
Line 443: ,
Line 443: ID = a
Line 443: -
Line 443: >
Line 443: ID = name
Line 443: )
Line 443: ;
Line 444: ID = module_put
Line 444: (
Line 444: ID = b
Line 444: )
Line 444: ;
Line 445: return
Line 445: INTCON = 0
Line 445: ;
Line 446: }
Line 448: ID = use
Line 448: -
Line 448: >
Line 448: ID = module_which_uses
Line 448: =
Line 448: ID = a
Line 448: ;
Line 449: ID = list_add
Line 449: (
Line 449: Unrecognized token: 38
Line 449: ID = use
Line 449: -
Line 449: >
Line 449: ID = list
Line 449: ,
Line 449: Unrecognized token: 38
Line 449: ID = b
Line 449: -
Line 449: >
Line 449: ID = modules_which_use_me
Line 449: )
Line 449: ;
Line 450: return
Line 450: INTCON = 1
Line 450: ;
Line 451: }
Line 454: ID = static
Line 454: void
Line 454: ID = module_unload_free
Line 454: (
Line 454: ID = struct
Line 454: ID = module
Line 454: *
Line 454: ID = mod
Line 454: )
Line 455: {
Line 456: ID = struct
Line 456: ID = module
Line 456: *
Line 456: ID = i
Line 456: ;
Line 458: ID = list_for_each_entry
Line 458: (
Line 458: ID = i
Line 458: ,
Line 458: Unrecognized token: 38
Line 458: ID = modules
Line 458: ,
Line 458: ID = list
Line 458: )
Line 458: {
Line 459: ID = struct
Line 459: ID = module_use
Line 459: *
Line 459: ID = use
Line 459: ;
Line 461: ID = list_for_each_entry
Line 461: (
Line 461: ID = use
Line 461: ,
Line 461: Unrecognized token: 38
Line 461: ID = i
Line 461: -
Line 461: >
Line 461: ID = modules_which_use_me
Line 461: ,
Line 461: ID = list
Line 461: )
Line 461: {
Line 462: if
Line 462: (
Line 462: ID = use
Line 462: -
Line 462: >
Line 462: ID = module_which_uses
Line 462: ==
Line 462: ID = mod
Line 462: )
Line 462: {
Line 463: ID = DEBUGP
Line 463: (
Line 463: STRINGCON = "%s unusing %s\n"
Line 463: ,
Line 463: ID = mod
Line 463: -
Line 463: >
Line 463: ID = name
Line 463: ,
Line 463: ID = i
Line 463: -
Line 463: >
Line 463: ID = name
Line 463: )
Line 463: ;
Line 464: ID = module_put
Line 464: (
Line 464: ID = i
Line 464: )
Line 464: ;
Line 465: ID = list_del
Line 465: (
Line 465: Unrecognized token: 38
Line 465: ID = use
Line 465: -
Line 465: >
Line 465: ID = list
Line 465: )
Line 465: ;
Line 466: ID = kfree
Line 466: (
Line 466: ID = use
Line 466: )
Line 466: ;
Line 468: ID = break
Line 468: ;
Line 469: }
Line 470: }
Line 471: }
Line 472: }
Line 474: Unrecognized token: 35
Line 474: ID = ifdef
Line 474: ID = CONFIG_MODULE_FORCE_UNLOAD
Line 475: ID = static
Line 475: ID = inline
Line 475: int
Line 475: ID = try_force
Line 475: (
Line 475: ID = unsigned
Line 475: int
Line 475: ID = flags
Line 475: )
Line 476: {
Line 477: int
Line 477: ID = ret
Line 477: =
Line 477: (
Line 477: ID = flags
Line 477: Unrecognized token: 38
Line 477: ID = O_TRUNC
Line 477: )
Line 477: ;
Line 478: if
Line 478: (
Line 478: ID = ret
Line 478: )
Line 479: ID = tainted
Line 479: Unrecognized token: 124
Line 479: =
Line 479: ID = TAINT_FORCED_MODULE
Line 479: ;
Line 480: return
Line 480: ID = ret
Line 480: ;
Line 481: }
Line 482: Unrecognized token: 35
Line 482: else
Line 483: ID = static
Line 483: ID = inline
Line 483: int
Line 483: ID = try_force
Line 483: (
Line 483: ID = unsigned
Line 483: int
Line 483: ID = flags
Line 483: )
Line 484: {
Line 485: return
Line 485: INTCON = 0
Line 485: ;
Line 486: }
Line 487: Unrecognized token: 35
Line 487: ID = endif
Line 489: ID = struct
Line 489: ID = stopref
Line 490: {
Line 491: ID = struct
Line 491: ID = module
Line 491: *
Line 491: ID = mod
Line 491: ;
Line 492: int
Line 492: ID = flags
Line 492: ;
Line 493: int
Line 493: *
Line 493: ID = forced
Line 493: ;
Line 494: }
Line 494: ;
Line 497: ID = static
Line 497: ID = inline
Line 497: int
Line 497: Unrecognized token: 95
Line 497: Unrecognized token: 95
Line 497: ID = try_stop_module
Line 497: (
Line 497: void
Line 497: *
Line 497: Unrecognized token: 95
Line 497: ID = sref
Line 497: )
Line 498: {
Line 499: ID = struct
Line 499: ID = stopref
Line 499: *
Line 499: ID = sref
Line 499: =
Line 499: Unrecognized token: 95
Line 499: ID = sref
Line 499: ;
Line 502: if
Line 502: (
Line 502: (
Line 502: ID = sref
Line 502: -
Line 502: >
Line 502: ID = flags
Line 502: Unrecognized token: 38
Line 502: ID = O_NONBLOCK
Line 502: )
Line 502: &&
Line 502: ID = module_refcount
Line 502: (
Line 502: ID = sref
Line 502: -
Line 502: >
Line 502: ID = mod
Line 502: )
Line 502: !=
Line 502: INTCON = 0
Line 502: )
Line 502: {
Line 503: if
Line 503: (
Line 503: !
Line 503: (
Line 503: *
Line 503: ID = sref
Line 503: -
Line 503: >
Line 503: ID = forced
Line 503: =
Line 503: ID = try_force
Line 503: (
Line 503: ID = sref
Line 503: -
Line 503: >
Line 503: ID = flags
Line 503: )
Line 503: )
Line 503: )
Line 504: return
Line 504: -
Line 504: ID = EWOULDBLOCK
Line 504: ;
Line 505: }
Line 508: ID = sref
Line 508: -
Line 508: >
Line 508: ID = mod
Line 508: -
Line 508: >
Line 508: ID = state
Line 508: =
Line 508: ID = MODULE_STATE_GOING
Line 508: ;
Line 509: return
Line 509: INTCON = 0
Line 509: ;
Line 510: }
Line 512: ID = static
Line 512: int
Line 512: ID = try_stop_module
Line 512: (
Line 512: ID = struct
Line 512: ID = module
Line 512: *
Line 512: ID = mod
Line 512: ,
Line 512: int
Line 512: ID = flags
Line 512: ,
Line 512: int
Line 512: *
Line 512: ID = forced
Line 512: )
Line 513: {
Line 514: ID = struct
Line 514: ID = stopref
Line 514: ID = sref
Line 514: =
Line 514: {
Line 514: ID = mod
Line 514: ,
Line 514: ID = flags
Line 514: ,
Line 514: ID = forced
Line 514: }
Line 514: ;
Line 516: return
Line 516: ID = stop_machine_run
Line 516: (
Line 516: Unrecognized token: 95
Line 516: Unrecognized token: 95
Line 516: ID = try_stop_module
Line 516: ,
Line 516: Unrecognized token: 38
Line 516: ID = sref
Line 516: ,
Line 516: ID = NR_CPUS
Line 516: )
Line 516: ;
Line 517: }
Line 519: ID = unsigned
Line 519: int
Line 519: ID = module_refcount
Line 519: (
Line 519: ID = struct
Line 519: ID = module
Line 519: *
Line 519: ID = mod
Line 519: )
Line 520: {
Line 521: ID = unsigned
Line 521: int
Line 521: ID = i
Line 521: ,
Line 521: ID = total
Line 521: =
Line 521: INTCON = 0
Line 521: ;
Line 523: for
Line 523: (
Line 523: ID = i
Line 523: =
Line 523: INTCON = 0
Line 523: ;
Line 523: ID = i
Line 523: <
Line 523: ID = NR_CPUS
Line 523: ;
Line 523: ID = i
Line 523: +
Line 523: +
Line 523: )
Line 524: ID = total
Line 524: +
Line 524: =
Line 524: ID = local_read
Line 524: (
Line 524: Unrecognized token: 38
Line 524: ID = mod
Line 524: -
Line 524: >
Line 524: ID = ref
Line 524: [
Line 524: ID = i
Line 524: ]
Line 524: Unrecognized token: 46
Line 524: ID = count
Line 524: )
Line 524: ;
Line 525: return
Line 525: ID = total
Line 525: ;
Line 526: }
Line 527: ID = EXPORT_SYMBOL
Line 527: (
Line 527: ID = module_refcount
Line 527: )
Line 527: ;
Line 530: ID = static
Line 530: void
Line 530: ID = free_module
Line 530: (
Line 530: ID = struct
Line 530: ID = module
Line 530: *
Line 530: ID = mod
Line 530: )
Line 530: ;
Line 533: void
Line 533: ID = cleanup_module
Line 533: (
Line 533: void
Line 533: )
Line 534: {
Line 535: }
Line 536: ID = EXPORT_SYMBOL
Line 536: (
Line 536: ID = cleanup_module
Line 536: )
Line 536: ;
Line 538: ID = static
Line 538: void
Line 538: ID = wait_for_zero_refcount
Line 538: (
Line 538: ID = struct
Line 538: ID = module
Line 538: *
Line 538: ID = mod
Line 538: )
Line 539: {
Line 541: ID = up
Line 541: (
Line 541: Unrecognized token: 38
Line 541: ID = module_mutex
Line 541: )
Line 541: ;
Line 542: for
Line 542: (
Line 542: ;
Line 542: ;
Line 542: )
Line 542: {
Line 543: ID = DEBUGP
Line 543: (
Line 543: STRINGCON = "Looking at refcount...\n"
Line 543: )
Line 543: ;
Line 544: ID = set_current_state
Line 544: (
Line 544: ID = TASK_UNINTERRUPTIBLE
Line 544: )
Line 544: ;
Line 545: if
Line 545: (
Line 545: ID = module_refcount
Line 545: (
Line 545: ID = mod
Line 545: )
Line 545: ==
Line 545: INTCON = 0
Line 545: )
Line 546: ID = break
Line 546: ;
Line 547: ID = schedule
Line 547: (
Line 547: )
Line 547: ;
Line 548: }
Line 549: ID = current
Line 549: -
Line 549: >
Line 549: ID = state
Line 549: =
Line 549: ID = TASK_RUNNING
Line 549: ;
Line 550: ID = down
Line 550: (
Line 550: Unrecognized token: 38
Line 550: ID = module_mutex
Line 550: )
Line 550: ;
Line 551: }
Line 553: ID = asmlinkage
Line 553: ID = long
Line 554: ID = sys_delete_module
Line 554: (
Line 554: ID = const
Line 554: char
Line 554: Unrecognized token: 95
Line 554: Unrecognized token: 95
Line 554: ID = user
Line 554: *
Line 554: ID = name_user
Line 554: ,
Line 554: ID = unsigned
Line 554: int
Line 554: ID = flags
Line 554: )
Line 555: {
Line 556: ID = struct
Line 556: ID = module
Line 556: *
Line 556: ID = mod
Line 556: ;
Line 557: char
Line 557: ID = name
Line 557: [
Line 557: ID = MODULE_NAME_LEN
Line 557: ]
Line 557: ;
Line 558: int
Line 558: ID = ret
Line 558: ,
Line 558: ID = forced
Line 558: =
Line 558: INTCON = 0
Line 558: ;
Line 560: if
Line 560: (
Line 560: !
Line 560: ID = capable
Line 560: (
Line 560: ID = CAP_SYS_MODULE
Line 560: )
Line 560: )
Line 561: return
Line 561: -
Line 561: ID = EPERM
Line 561: ;
Line 563: if
Line 563: (
Line 563: ID = strncpy_from_user
Line 563: (
Line 563: ID = name
Line 563: ,
Line 563: ID = name_user
Line 563: ,
Line 563: ID = MODULE_NAME_LEN
Line 563: -
Line 563: INTCON = 1
Line 563: )
Line 563: <
Line 563: INTCON = 0
Line 563: )
Line 564: return
Line 564: -
Line 564: ID = EFAULT
Line 564: ;
Line 565: ID = name
Line 565: [
Line 565: ID = MODULE_NAME_LEN
Line 565: -
Line 565: INTCON = 1
Line 565: ]
Line 565: =
Line 565: CHARCON = '\0'
Line 565: ;
Line 567: if
Line 567: (
Line 567: ID = down_interruptible
Line 567: (
Line 567: Unrecognized token: 38
Line 567: ID = module_mutex
Line 567: )
Line 567: !=
Line 567: INTCON = 0
Line 567: )
Line 568: return
Line 568: -
Line 568: ID = EINTR
Line 568: ;
Line 570: ID = mod
Line 570: =
Line 570: ID = find_module
Line 570: (
Line 570: ID = name
Line 570: )
Line 570: ;
Line 571: if
Line 571: (
Line 571: !
Line 571: ID = mod
Line 571: )
Line 571: {
Line 572: ID = ret
Line 572: =
Line 572: -
Line 572: ID = ENOENT
Line 572: ;
Line 573: ID = goto
Line 573: ID = out
Line 573: ;
Line 574: }
Line 576: if
Line 576: (
Line 576: !
Line 576: ID = list_empty
Line 576: (
Line 576: Unrecognized token: 38
Line 576: ID = mod
Line 576: -
Line 576: >
Line 576: ID = modules_which_use_me
Line 576: )
Line 576: )
Line 576: {
Line 578: ID = ret
Line 578: =
Line 578: -
Line 578: ID = EWOULDBLOCK
Line 578: ;
Line 579: ID = goto
Line 579: ID = out
Line 579: ;
Line 580: }
Line 583: if
Line 583: (
Line 583: ID = mod
Line 583: -
Line 583: >
Line 583: ID = state
Line 583: !=
Line 583: ID = MODULE_STATE_LIVE
Line 583: )
Line 583: {
Line 586: ID = DEBUGP
Line 586: (
Line 586: STRINGCON = "%s already dying\n"
Line 586: ,
Line 586: ID = mod
Line 586: -
Line 586: >
Line 586: ID = name
Line 586: )
Line 586: ;
Line 587: ID = ret
Line 587: =
Line 587: -
Line 587: ID = EBUSY
Line 587: ;
Line 588: ID = goto
Line 588: ID = out
Line 588: ;
Line 589: }
Line 592: if
Line 592: (
Line 592: (
Line 592: ID = mod
Line 592: -
Line 592: >
Line 592: ID = init
Line 592: !=
Line 592: ID = init_module
Line 592: &&
Line 592: ID = mod
Line 592: -
Line 592: >
Line 592: ID = exit
Line 592: ==
Line 592: ID = cleanup_module
Line 592: )
Line 593: ||
Line 593: ID = mod
Line 593: -
Line 593: >
Line 593: ID = unsafe
Line 593: )
Line 593: {
Line 594: ID = forced
Line 594: =
Line 594: ID = try_force
Line 594: (
Line 594: ID = flags
Line 594: )
Line 594: ;
Line 595: if
Line 595: (
Line 595: !
Line 595: ID = forced
Line 595: )
Line 595: {
Line 597: ID = ret
Line 597: =
Line 597: -
Line 597: ID = EBUSY
Line 597: ;
Line 598: ID = goto
Line 598: ID = out
Line 598: ;
Line 599: }
Line 600: }
Line 603: ID = mod
Line 603: -
Line 603: >
Line 603: ID = waiter
Line 603: =
Line 603: ID = current
Line 603: ;
Line 606: ID = ret
Line 606: =
Line 606: ID = try_stop_module
Line 606: (
Line 606: ID = mod
Line 606: ,
Line 606: ID = flags
Line 606: ,
Line 606: Unrecognized token: 38
Line 606: ID = forced
Line 606: )
Line 606: ;
Line 609: if
Line 609: (
Line 609: !
Line 609: ID = forced
Line 609: &&
Line 609: ID = module_refcount
Line 609: (
Line 609: ID = mod
Line 609: )
Line 609: !=
Line 609: INTCON = 0
Line 609: )
Line 610: ID = wait_for_zero_refcount
Line 610: (
Line 610: ID = mod
Line 610: )
Line 610: ;
Line 613: ID = up
Line 613: (
Line 613: Unrecognized token: 38
Line 613: ID = module_mutex
Line 613: )
Line 613: ;
Line 614: ID = mod
Line 614: -
Line 614: >
Line 614: ID = exit
Line 614: (
Line 614: )
Line 614: ;
Line 615: ID = down
Line 615: (
Line 615: Unrecognized token: 38
Line 615: ID = module_mutex
Line 615: )
Line 615: ;
Line 616: ID = free_module
Line 616: (
Line 616: ID = mod
Line 616: )
Line 616: ;
Line 618: ID = out
Line 618: Unrecognized token: 58
Line 619: ID = up
Line 619: (
Line 619: Unrecognized token: 38
Line 619: ID = module_mutex
Line 619: )
Line 619: ;
Line 620: return
Line 620: ID = ret
Line 620: ;
Line 621: }
Line 623: ID = static
Line 623: void
Line 623: ID = print_unload_info
Line 623: (
Line 623: ID = struct
Line 623: ID = seq_file
Line 623: *
Line 623: ID = m
Line 623: ,
Line 623: ID = struct
Line 623: ID = module
Line 623: *
Line 623: ID = mod
Line 623: )
Line 624: {
Line 625: ID = struct
Line 625: ID = module_use
Line 625: *
Line 625: ID = use
Line 625: ;
Line 626: int
Line 626: ID = printed_something
Line 626: =
Line 626: INTCON = 0
Line 626: ;
Line 628: ID = seq_printf
Line 628: (
Line 628: ID = m
Line 628: ,
Line 628: STRINGCON = " %u "
Line 628: ,
Line 628: ID = module_refcount
Line 628: (
Line 628: ID = mod
Line 628: )
Line 628: )
Line 628: ;
Line 632: ID = list_for_each_entry
Line 632: (
Line 632: ID = use
Line 632: ,
Line 632: Unrecognized token: 38
Line 632: ID = mod
Line 632: -
Line 632: >
Line 632: ID = modules_which_use_me
Line 632: ,
Line 632: ID = list
Line 632: )
Line 632: {
Line 633: ID = printed_something
Line 633: =
Line 633: INTCON = 1
Line 633: ;
Line 634: ID = seq_printf
Line 634: (
Line 634: ID = m
Line 634: ,
Line 634: STRINGCON = "%s,"
Line 634: ,
Line 634: ID = use
Line 634: -
Line 634: >
Line 634: ID = module_which_uses
Line 634: -
Line 634: >
Line 634: ID = name
Line 634: )
Line 634: ;
Line 635: }
Line 637: if
Line 637: (
Line 637: ID = mod
Line 637: -
Line 637: >
Line 637: ID = unsafe
Line 637: )
Line 637: {
Line 638: ID = printed_something
Line 638: =
Line 638: INTCON = 1
Line 638: ;
Line 639: ID = seq_printf
Line 639: (
Line 639: ID = m
Line 639: ,
Line 639: STRINGCON = "[unsafe],"
Line 639: )
Line 639: ;
Line 640: }
Line 642: if
Line 642: (
Line 642: ID = mod
Line 642: -
Line 642: >
Line 642: ID = init
Line 642: !=
Line 642: ID = init_module
Line 642: &&
Line 642: ID = mod
Line 642: -
Line 642: >
Line 642: ID = exit
Line 642: ==
Line 642: ID = cleanup_module
Line 642: )
Line 642: {
Line 643: ID = printed_something
Line 643: =
Line 643: INTCON = 1
Line 643: ;
Line 644: ID = seq_printf
Line 644: (
Line 644: ID = m
Line 644: ,
Line 644: STRINGCON = "[permanent],"
Line 644: )
Line 644: ;
Line 645: }
Line 647: if
Line 647: (
Line 647: !
Line 647: ID = printed_something
Line 647: )
Line 648: ID = seq_printf
Line 648: (
Line 648: ID = m
Line 648: ,
Line 648: STRINGCON = "-"
Line 648: )
Line 648: ;
Line 649: }
Line 651: void
Line 651: Unrecognized token: 95
Line 651: Unrecognized token: 95
Line 651: ID = symbol_put
Line 651: (
Line 651: ID = const
Line 651: char
Line 651: *
Line 651: ID = symbol
Line 651: )
Line 652: {
Line 653: ID = struct
Line 653: ID = module
Line 653: *
Line 653: ID = owner
Line 653: ;
Line 654: ID = unsigned
Line 654: ID = long
Line 654: ID = flags
Line 654: ;
Line 655: ID = const
Line 655: ID = unsigned
Line 655: ID = long
Line 655: *
Line 655: ID = crc
Line 655: ;
Line 657: ID = spin_lock_irqsave
Line 657: (
Line 657: Unrecognized token: 38
Line 657: ID = modlist_lock
Line 657: ,
Line 657: ID = flags
Line 657: )
Line 657: ;
Line 658: if
Line 658: (
Line 658: !
Line 658: Unrecognized token: 95
Line 658: Unrecognized token: 95
Line 658: ID = find_symbol
Line 658: (
Line 658: ID = symbol
Line 658: ,
Line 658: Unrecognized token: 38
Line 658: ID = owner
Line 658: ,
Line 658: Unrecognized token: 38
Line 658: ID = crc
Line 658: ,
Line 658: INTCON = 1
Line 658: )
Line 658: )
Line 659: ID = BUG
Line 659: (
Line 659: )
Line 659: ;
Line 660: ID = module_put
Line 660: (
Line 660: ID = owner
Line 660: )
Line 660: ;
Line 661: ID = spin_unlock_irqrestore
Line 661: (
Line 661: Unrecognized token: 38
Line 661: ID = modlist_lock
Line 661: ,
Line 661: ID = flags
Line 661: )
Line 661: ;
Line 662: }
Line 663: ID = EXPORT_SYMBOL
Line 663: (
Line 663: Unrecognized token: 95
Line 663: Unrecognized token: 95
Line 663: ID = symbol_put
Line 663: )
Line 663: ;
Line 665: void
Line 665: ID = symbol_put_addr
Line 665: (
Line 665: void
Line 665: *
Line 665: ID = addr
Line 665: )
Line 666: {
Line 667: ID = unsigned
Line 667: ID = long
Line 667: ID = flags
Line 667: ;
Line 669: ID = spin_lock_irqsave
Line 669: (
Line 669: Unrecognized token: 38
Line 669: ID = modlist_lock
Line 669: ,
Line 669: ID = flags
Line 669: )
Line 669: ;
Line 670: if
Line 670: (
Line 670: !
Line 670: ID = kernel_text_address
Line 670: (
Line 670: (
Line 670: ID = unsigned
Line 670: ID = long
Line 670: )
Line 670: ID = addr
Line 670: )
Line 670: )
Line 671: ID = BUG
Line 671: (
Line 671: )
Line 671: ;
Line 673: ID = module_put
Line 673: (
Line 673: ID = module_text_address
Line 673: (
Line 673: (
Line 673: ID = unsigned
Line 673: ID = long
Line 673: )
Line 673: ID = addr
Line 673: )
Line 673: )
Line 673: ;
Line 674: ID = spin_unlock_irqrestore
Line 674: (
Line 674: Unrecognized token: 38
Line 674: ID = modlist_lock
Line 674: ,
Line 674: ID = flags
Line 674: )
Line 674: ;
Line 675: }
Line 676: ID = EXPORT_SYMBOL_GPL
Line 676: (
Line 676: ID = symbol_put_addr
Line 676: )
Line 676: ;
Line 678: ID = static
Line 678: int
Line 678: ID = refcnt_get_fn
Line 678: (
Line 678: char
Line 678: *
Line 678: ID = buffer
Line 678: ,
Line 678: ID = struct
Line 678: ID = kernel_param
Line 678: *
Line 678: ID = kp
Line 678: )
Line 679: {
Line 680: ID = struct
Line 680: ID = module
Line 680: *
Line 680: ID = mod
Line 680: =
Line 680: ID = container_of
Line 680: (
Line 680: ID = kp
Line 680: ,
Line 680: ID = struct
Line 680: ID = module
Line 680: ,
Line 680: ID = refcnt_param
Line 680: )
Line 680: ;
Line 683: return
Line 683: ID = sprintf
Line 683: (
Line 683: ID = buffer
Line 683: ,
Line 683: STRINGCON = "%u"
Line 683: ,
Line 683: ID = module_refcount
Line 683: (
Line 683: ID = mod
Line 683: )
Line 683: -
Line 683: INTCON = 1
Line 683: )
Line 683: ;
Line 684: }
Line 686: ID = static
Line 686: ID = inline
Line 686: int
Line 686: ID = sysfs_unload_setup
Line 686: (
Line 686: ID = struct
Line 686: ID = module
Line 686: *
Line 686: ID = mod
Line 686: )
Line 687: {
Line 688: ID = mod
Line 688: -
Line 688: >
Line 688: ID = refcnt_param
Line 688: Unrecognized token: 46
Line 688: ID = name
Line 688: =
Line 688: STRINGCON = "refcnt"
Line 688: ;
Line 689: ID = mod
Line 689: -
Line 689: >
Line 689: ID = refcnt_param
Line 689: Unrecognized token: 46
Line 689: ID = perm
Line 689: =
Line 689: INTCON = 0444
Line 689: ;
Line 690: ID = mod
Line 690: -
Line 690: >
Line 690: ID = refcnt_param
Line 690: Unrecognized token: 46
Line 690: ID = get
Line 690: =
Line 690: ID = refcnt_get_fn
Line 690: ;
Line 692: return
Line 692: ID = add_attribute
Line 692: (
Line 692: ID = mod
Line 692: ,
Line 692: Unrecognized token: 38
Line 692: ID = mod
Line 692: -
Line 692: >
Line 692: ID = refcnt_param
Line 692: )
Line 692: ;
Line 693: }
Line 695: Unrecognized token: 35
Line 695: else
Line 696: ID = static
Line 696: void
Line 696: ID = print_unload_info
Line 696: (
Line 696: ID = struct
Line 696: ID = seq_file
Line 696: *
Line 696: ID = m
Line 696: ,
Line 696: ID = struct
Line 696: ID = module
Line 696: *
Line 696: ID = mod
Line 696: )
Line 697: {
Line 699: ID = seq_printf
Line 699: (
Line 699: ID = m
Line 699: ,
Line 699: STRINGCON = " - -"
Line 699: )
Line 699: ;
Line 700: }
Line 702: ID = static
Line 702: ID = inline
Line 702: void
Line 702: ID = module_unload_free
Line 702: (
Line 702: ID = struct
Line 702: ID = module
Line 702: *
Line 702: ID = mod
Line 702: )
Line 703: {
Line 704: }
Line 706: ID = static
Line 706: ID = inline
Line 706: int
Line 706: ID = use_module
Line 706: (
Line 706: ID = struct
Line 706: ID = module
Line 706: *
Line 706: ID = a
Line 706: ,
Line 706: ID = struct
Line 706: ID = module
Line 706: *
Line 706: ID = b
Line 706: )
Line 707: {
Line 708: return
Line 708: ID = strong_try_module_get
Line 708: (
Line 708: ID = b
Line 708: )
Line 708: ;
Line 709: }
Line 711: ID = static
Line 711: ID = inline
Line 711: void
Line 711: ID = module_unload_init
Line 711: (
Line 711: ID = struct
Line 711: ID = module
Line 711: *
Line 711: ID = mod
Line 711: )
Line 712: {
Line 713: }
Line 715: ID = asmlinkage
Line 715: ID = long
Line 716: ID = sys_delete_module
Line 716: (
Line 716: ID = const
Line 716: char
Line 716: Unrecognized token: 95
Line 716: Unrecognized token: 95
Line 716: ID = user
Line 716: *
Line 716: ID = name_user
Line 716: ,
Line 716: ID = unsigned
Line 716: int
Line 716: ID = flags
Line 716: )
Line 717: {
Line 718: return
Line 718: -
Line 718: ID = ENOSYS
Line 718: ;
Line 719: }
Line 721: ID = static
Line 721: ID = inline
Line 721: int
Line 721: ID = sysfs_unload_setup
Line 721: (
Line 721: ID = struct
Line 721: ID = module
Line 721: *
Line 721: ID = mod
Line 721: )
Line 722: {
Line 723: return
Line 723: INTCON = 0
Line 723: ;
Line 724: }
Line 725: Unrecognized token: 35
Line 725: ID = endif
Line 727: Unrecognized token: 35
Line 727: ID = ifdef
Line 727: ID = CONFIG_OBSOLETE_MODPARM
Line 728: ID = static
Line 728: int
Line 728: ID = param_set_byte
Line 728: (
Line 728: ID = const
Line 728: char
Line 728: *
Line 728: ID = val
Line 728: ,
Line 728: ID = struct
Line 728: ID = kernel_param
Line 728: *
Line 728: ID = kp
Line 728: )
Line 729: {
Line 730: char
Line 730: *
Line 730: ID = endp
Line 730: ;
Line 731: ID = long
Line 731: ID = l
Line 731: ;
Line 733: if
Line 733: (
Line 733: !
Line 733: ID = val
Line 733: )
Line 733: return
Line 733: -
Line 733: ID = EINVAL
Line 733: ;
Line 734: ID = l
Line 734: =
Line 734: ID = simple_strtol
Line 734: (
Line 734: ID = val
Line 734: ,
Line 734: Unrecognized token: 38
Line 734: ID = endp
Line 734: ,
Line 734: INTCON = 0
Line 734: )
Line 734: ;
Line 735: if
Line 735: (
Line 735: ID = endp
Line 735: ==
Line 735: ID = val
Line 735: ||
Line 735: *
Line 735: ID = endp
Line 735: ||
Line 735: (
Line 735: (
Line 735: char
Line 735: )
Line 735: ID = l
Line 735: !=
Line 735: ID = l
Line 735: )
Line 735: )
Line 736: return
Line 736: -
Line 736: ID = EINVAL
Line 736: ;
Line 737: *
Line 737: (
Line 737: (
Line 737: char
Line 737: *
Line 737: )
Line 737: ID = kp
Line 737: -
Line 737: >
Line 737: ID = arg
Line 737: )
Line 737: =
Line 737: ID = l
Line 737: ;
Line 738: return
Line 738: INTCON = 0
Line 738: ;
Line 739: }
Line 742: ID = static
Line 742: int
Line 742: ID = obsparm_copy_string
Line 742: (
Line 742: ID = const
Line 742: char
Line 742: *
Line 742: ID = val
Line 742: ,
Line 742: ID = struct
Line 742: ID = kernel_param
Line 742: *
Line 742: ID = kp
Line 742: )
Line 743: {
Line 744: ID = strcpy
Line 744: (
Line 744: ID = kp
Line 744: -
Line 744: >
Line 744: ID = arg
Line 744: ,
Line 744: ID = val
Line 744: )
Line 744: ;
Line 745: return
Line 745: INTCON = 0
Line 745: ;
Line 746: }
Line 748: int
Line 748: ID = set_obsolete
Line 748: (
Line 748: ID = const
Line 748: char
Line 748: *
Line 748: ID = val
Line 748: ,
Line 748: ID = struct
Line 748: ID = kernel_param
Line 748: *
Line 748: ID = kp
Line 748: )
Line 749: {
Line 750: ID = unsigned
Line 750: int
Line 750: ID = min
Line 750: ,
Line 750: ID = max
Line 750: ;
Line 751: ID = unsigned
Line 751: int
Line 751: ID = size
Line 751: ,
Line 751: ID = maxsize
Line 751: ;
Line 752: int
Line 752: ID = dummy
Line 752: ;
Line 753: char
Line 753: *
Line 753: ID = endp
Line 753: ;
Line 754: ID = const
Line 754: char
Line 754: *
Line 754: ID = p
Line 754: ;
Line 755: ID = struct
Line 755: ID = obsolete_modparm
Line 755: *
Line 755: ID = obsparm
Line 755: =
Line 755: ID = kp
Line 755: -
Line 755: >
Line 755: ID = arg
Line 755: ;
Line 757: if
Line 757: (
Line 757: !
Line 757: ID = val
Line 757: )
Line 757: {
Line 758: ID = printk
Line 758: (
Line 758: ID = KERN_ERR
Line 758: STRINGCON = "Parameter %s needs an argument\n"
Line 758: ,
Line 758: ID = kp
Line 758: -
Line 758: >
Line 758: ID = name
Line 758: )
Line 758: ;
Line 759: return
Line 759: -
Line 759: ID = EINVAL
Line 759: ;
Line 760: }
Line 763: ID = p
Line 763: =
Line 763: ID = obsparm
Line 763: -
Line 763: >
Line 763: ID = type
Line 763: ;
Line 764: ID = min
Line 764: =
Line 764: ID = simple_strtol
Line 764: (
Line 764: ID = p
Line 764: ,
Line 764: Unrecognized token: 38
Line 764: ID = endp
Line 764: ,
Line 764: INTCON = 10
Line 764: )
Line 764: ;
Line 765: if
Line 765: (
Line 765: ID = endp
Line 765: ==
Line 765: ID = obsparm
Line 765: -
Line 765: >
Line 765: ID = type
Line 765: )
Line 766: ID = min
Line 766: =
Line 766: ID = max
Line 766: =
Line 766: INTCON = 1
Line 766: ;
Line 767: else
Line 767: if
Line 767: (
Line 767: *
Line 767: ID = endp
Line 767: ==
Line 767: CHARCON = '-'
Line 767: )
Line 767: {
Line 768: ID = p
Line 768: =
Line 768: ID = endp
Line 768: +
Line 768: INTCON = 1
Line 768: ;
Line 769: ID = max
Line 769: =
Line 769: ID = simple_strtol
Line 769: (
Line 769: ID = p
Line 769: ,
Line 769: Unrecognized token: 38
Line 769: ID = endp
Line 769: ,
Line 769: INTCON = 10
Line 769: )
Line 769: ;
Line 770: }
Line 770: else
Line 771: ID = max
Line 771: =
Line 771: ID = min
Line 771: ;
Line 772: ID = switch
Line 772: (
Line 772: *
Line 772: ID = endp
Line 772: )
Line 772: {
Line 773: ID = case
Line 773: CHARCON = 'b'
Line 773: Unrecognized token: 58
Line 774: return
Line 774: ID = param_array
Line 774: (
Line 774: ID = kp
Line 774: -
Line 774: >
Line 774: ID = name
Line 774: ,
Line 774: ID = val
Line 774: ,
Line 774: ID = min
Line 774: ,
Line 774: ID = max
Line 774: ,
Line 774: ID = obsparm
Line 774: -
Line 774: >
Line 774: ID = addr
Line 774: ,
Line 775: INTCON = 1
Line 775: ,
Line 775: ID = param_set_byte
Line 775: ,
Line 775: Unrecognized token: 38
Line 775: ID = dummy
Line 775: )
Line 775: ;
Line 776: ID = case
Line 776: CHARCON = 'h'
Line 776: Unrecognized token: 58
Line 777: return
Line 777: ID = param_array
Line 777: (
Line 777: ID = kp
Line 777: -
Line 777: >
Line 777: ID = name
Line 777: ,
Line 777: ID = val
Line 777: ,
Line 777: ID = min
Line 777: ,
Line 777: ID = max
Line 777: ,
Line 777: ID = obsparm
Line 777: -
Line 777: >
Line 777: ID = addr
Line 777: ,
Line 778: ID = sizeof
Line 778: (
Line 778: ID = short
Line 778: )
Line 778: ,
Line 778: ID = param_set_short
Line 778: ,
Line 778: Unrecognized token: 38
Line 778: ID = dummy
Line 778: )
Line 778: ;
Line 779: ID = case
Line 779: CHARCON = 'i'
Line 779: Unrecognized token: 58
Line 780: return
Line 780: ID = param_array
Line 780: (
Line 780: ID = kp
Line 780: -
Line 780: >
Line 780: ID = name
Line 780: ,
Line 780: ID = val
Line 780: ,
Line 780: ID = min
Line 780: ,
Line 780: ID = max
Line 780: ,
Line 780: ID = obsparm
Line 780: -
Line 780: >
Line 780: ID = addr
Line 780: ,
Line 781: ID = sizeof
Line 781: (
Line 781: int
Line 781: )
Line 781: ,
Line 781: ID = param_set_int
Line 781: ,
Line 781: Unrecognized token: 38
Line 781: ID = dummy
Line 781: )
Line 781: ;
Line 782: ID = case
Line 782: CHARCON = 'l'
Line 782: Unrecognized token: 58
Line 783: return
Line 783: ID = param_array
Line 783: (
Line 783: ID = kp
Line 783: -
Line 783: >
Line 783: ID = name
Line 783: ,
Line 783: ID = val
Line 783: ,
Line 783: ID = min
Line 783: ,
Line 783: ID = max
Line 783: ,
Line 783: ID = obsparm
Line 783: -
Line 783: >
Line 783: ID = addr
Line 783: ,
Line 784: ID = sizeof
Line 784: (
Line 784: ID = long
Line 784: )
Line 784: ,
Line 784: ID = param_set_long
Line 784: ,
Line 784: Unrecognized token: 38
Line 784: ID = dummy
Line 784: )
Line 784: ;
Line 785: ID = case
Line 785: CHARCON = 's'
Line 785: Unrecognized token: 58
Line 786: return
Line 786: ID = param_array
Line 786: (
Line 786: ID = kp
Line 786: -
Line 786: >
Line 786: ID = name
Line 786: ,
Line 786: ID = val
Line 786: ,
Line 786: ID = min
Line 786: ,
Line 786: ID = max
Line 786: ,
Line 786: ID = obsparm
Line 786: -
Line 786: >
Line 786: ID = addr
Line 786: ,
Line 787: ID = sizeof
Line 787: (
Line 787: char
Line 787: *
Line 787: )
Line 787: ,
Line 787: ID = param_set_charp
Line 787: ,
Line 787: Unrecognized token: 38
Line 787: ID = dummy
Line 787: )
Line 787: ;
Line 789: ID = case
Line 789: CHARCON = 'c'
Line 789: Unrecognized token: 58
Line 792: ID = p
Line 792: =
Line 792: ID = endp
Line 792: +
Line 792: INTCON = 1
Line 792: ;
Line 793: ID = maxsize
Line 793: =
Line 793: ID = simple_strtol
Line 793: (
Line 793: ID = p
Line 793: ,
Line 793: Unrecognized token: 38
Line 793: ID = endp
Line 793: ,
Line 793: INTCON = 10
Line 793: )
Line 793: ;
Line 795: ID = p
Line 795: =
Line 795: ID = val
Line 795: ;
Line 796: while
Line 796: (
Line 796: ID = p
Line 796: [
Line 796: ID = size
Line 796: =
Line 796: ID = strcspn
Line 796: (
Line 796: ID = p
Line 796: ,
Line 796: STRINGCON = ","
Line 796: )
Line 796: ]
Line 796: )
Line 796: {
Line 797: if
Line 797: (
Line 797: ID = size
Line 797: >=
Line 797: ID = maxsize
Line 797: )
Line 798: ID = goto
Line 798: ID = oversize
Line 798: ;
Line 799: ID = p
Line 799: +
Line 799: =
Line 799: ID = size
Line 799: +
Line 799: INTCON = 1
Line 799: ;
Line 800: }
Line 801: if
Line 801: (
Line 801: ID = size
Line 801: >=
Line 801: ID = maxsize
Line 801: )
Line 802: ID = goto
Line 802: ID = oversize
Line 802: ;
Line 803: return
Line 803: ID = param_array
Line 803: (
Line 803: ID = kp
Line 803: -
Line 803: >
Line 803: ID = name
Line 803: ,
Line 803: ID = val
Line 803: ,
Line 803: ID = min
Line 803: ,
Line 803: ID = max
Line 803: ,
Line 803: ID = obsparm
Line 803: -
Line 803: >
Line 803: ID = addr
Line 803: ,
Line 804: ID = maxsize
Line 804: ,
Line 804: ID = obsparm_copy_string
Line 804: ,
Line 804: Unrecognized token: 38
Line 804: ID = dummy
Line 804: )
Line 804: ;
Line 805: }
Line 806: ID = printk
Line 806: (
Line 806: ID = KERN_ERR
Line 806: STRINGCON = "Unknown obsolete parameter type %s\n"
Line 806: ,
Line 806: ID = obsparm
Line 806: -
Line 806: >
Line 806: ID = type
Line 806: )
Line 806: ;
Line 807: return
Line 807: -
Line 807: ID = EINVAL
Line 807: ;
Line 808: ID = oversize
Line 808: Unrecognized token: 58
Line 809: ID = printk
Line 809: (
Line 809: ID = KERN_ERR
Line 810: STRINGCON = "Parameter %s doesn't fit in %u chars.\n"
Line 810: ,
Line 810: ID = kp
Line 810: -
Line 810: >
Line 810: ID = name
Line 810: ,
Line 810: ID = maxsize
Line 810: )
Line 810: ;
Line 811: return
Line 811: -
Line 811: ID = EINVAL
Line 811: ;
Line 812: }
Line 814: ID = static
Line 814: int
Line 814: ID = obsolete_params
Line 814: (
Line 814: ID = const
Line 814: char
Line 814: *
Line 814: ID = name
Line 814: ,
Line 815: char
Line 815: *
Line 815: ID = args
Line 815: ,
Line 816: ID = struct
Line 816: ID = obsolete_modparm
Line 816: ID = obsparm
Line 816: [
Line 816: ]
Line 816: ,
Line 817: ID = unsigned
Line 817: int
Line 817: ID = num
Line 817: ,
Line 818: ID = Elf_Shdr
Line 818: *
Line 818: ID = sechdrs
Line 818: ,
Line 819: ID = unsigned
Line 819: int
Line 819: ID = symindex
Line 819: ,
Line 820: ID = const
Line 820: char
Line 820: *
Line 820: ID = strtab
Line 820: )
Line 821: {
Line 822: ID = struct
Line 822: ID = kernel_param
Line 822: *
Line 822: ID = kp
Line 822: ;
Line 823: ID = unsigned
Line 823: int
Line 823: ID = i
Line 823: ;
Line 824: int
Line 824: ID = ret
Line 824: ;
Line 826: ID = kp
Line 826: =
Line 826: ID = kmalloc
Line 826: (
Line 826: ID = sizeof
Line 826: (
Line 826: ID = kp
Line 826: [
Line 826: INTCON = 0
Line 826: ]
Line 826: )
Line 826: *
Line 826: ID = num
Line 826: ,
Line 826: ID = GFP_KERNEL
Line 826: )
Line 826: ;
Line 827: if
Line 827: (
Line 827: !
Line 827: ID = kp
Line 827: )
Line 828: return
Line 828: -
Line 828: ID = ENOMEM
Line 828: ;
Line 830: for
Line 830: (
Line 830: ID = i
Line 830: =
Line 830: INTCON = 0
Line 830: ;
Line 830: ID = i
Line 830: <
Line 830: ID = num
Line 830: ;
Line 830: ID = i
Line 830: +
Line 830: +
Line 830: )
Line 830: {
Line 831: char
Line 831: ID = sym_name
Line 831: [
Line 831: INTCON = 128
Line 831: +
Line 831: ID = sizeof
Line 831: (
Line 831: ID = MODULE_SYMBOL_PREFIX
Line 831: )
Line 831: ]
Line 831: ;
Line 833: ID = snprintf
Line 833: (
Line 833: ID = sym_name
Line 833: ,
Line 833: ID = sizeof
Line 833: (
Line 833: ID = sym_name
Line 833: )
Line 833: ,
Line 833: STRINGCON = "%s%s"
Line 833: ,
Line 834: ID = MODULE_SYMBOL_PREFIX
Line 834: ,
Line 834: ID = obsparm
Line 834: [
Line 834: ID = i
Line 834: ]
Line 834: Unrecognized token: 46
Line 834: ID = name
Line 834: )
Line 834: ;
Line 836: ID = kp
Line 836: [
Line 836: ID = i
Line 836: ]
Line 836: Unrecognized token: 46
Line 836: ID = name
Line 836: =
Line 836: ID = obsparm
Line 836: [
Line 836: ID = i
Line 836: ]
Line 836: Unrecognized token: 46
Line 836: ID = name
Line 836: ;
Line 837: ID = kp
Line 837: [
Line 837: ID = i
Line 837: ]
Line 837: Unrecognized token: 46
Line 837: ID = perm
Line 837: =
Line 837: INTCON = 000
Line 837: ;
Line 838: ID = kp
Line 838: [
Line 838: ID = i
Line 838: ]
Line 838: Unrecognized token: 46
Line 838: ID = set
Line 838: =
Line 838: ID = set_obsolete
Line 838: ;
Line 839: ID = kp
Line 839: [
Line 839: ID = i
Line 839: ]
Line 839: Unrecognized token: 46
Line 839: ID = get
Line 839: =
Line 839: ID = NULL
Line 839: ;
Line 840: ID = obsparm
Line 840: [
Line 840: ID = i
Line 840: ]
Line 840: Unrecognized token: 46
Line 840: ID = addr
Line 841: =
Line 841: (
Line 841: void
Line 841: *
Line 841: )
Line 841: ID = find_local_symbol
Line 841: (
Line 841: ID = sechdrs
Line 841: ,
Line 841: ID = symindex
Line 841: ,
Line 841: ID = strtab
Line 841: ,
Line 842: ID = sym_name
Line 842: )
Line 842: ;
Line 843: if
Line 843: (
Line 843: !
Line 843: ID = obsparm
Line 843: [
Line 843: ID = i
Line 843: ]
Line 843: Unrecognized token: 46
Line 843: ID = addr
Line 843: )
Line 843: {
Line 844: ID = printk
Line 844: (
Line 844: STRINGCON = "%s: falsely claims to have parameter %s\n"
Line 844: ,
Line 845: ID = name
Line 845: ,
Line 845: ID = obsparm
Line 845: [
Line 845: ID = i
Line 845: ]
Line 845: Unrecognized token: 46
Line 845: ID = name
Line 845: )
Line 845: ;
Line 846: ID = ret
Line 846: =
Line 846: -
Line 846: ID = EINVAL
Line 846: ;
Line 847: ID = goto
Line 847: ID = out
Line 847: ;
Line 848: }
Line 849: ID = kp
Line 849: [
Line 849: ID = i
Line 849: ]
Line 849: Unrecognized token: 46
Line 849: ID = arg
Line 849: =
Line 849: Unrecognized token: 38
Line 849: ID = obsparm
Line 849: [
Line 849: ID = i
Line 849: ]
Line 849: ;
Line 850: }
Line 852: ID = ret
Line 852: =
Line 852: ID = parse_args
Line 852: (
Line 852: ID = name
Line 852: ,
Line 852: ID = args
Line 852: ,
Line 852: ID = kp
Line 852: ,
Line 852: ID = num
Line 852: ,
Line 852: ID = NULL
Line 852: )
Line 852: ;
Line 853: ID = out
Line 853: Unrecognized token: 58
Line 854: ID = kfree
Line 854: (
Line 854: ID = kp
Line 854: )
Line 854: ;
Line 855: return
Line 855: ID = ret
Line 855: ;
Line 856: }
Line 857: Unrecognized token: 35
Line 857: else
Line 858: ID = static
Line 858: int
Line 858: ID = obsolete_params
Line 858: (
Line 858: ID = const
Line 858: char
Line 858: *
Line 858: ID = name
Line 858: ,
Line 859: char
Line 859: *
Line 859: ID = args
Line 859: ,
Line 860: ID = struct
Line 860: ID = obsolete_modparm
Line 860: ID = obsparm
Line 860: [
Line 860: ]
Line 860: ,
Line 861: ID = unsigned
Line 861: int
Line 861: ID = num
Line 861: ,
Line 862: ID = Elf_Shdr
Line 862: *
Line 862: ID = sechdrs
Line 862: ,
Line 863: ID = unsigned
Line 863: int
Line 863: ID = symindex
Line 863: ,
Line 864: ID = const
Line 864: char
Line 864: *
Line 864: ID = strtab
Line 864: )
Line 865: {
Line 866: if
Line 866: (
Line 866: ID = num
Line 866: !=
Line 866: INTCON = 0
Line 866: )
Line 867: ID = printk
Line 867: (
Line 867: ID = KERN_WARNING
Line 867: STRINGCON = "%s: Ignoring obsolete parameters\n"
Line 867: ,
Line 868: ID = name
Line 868: )
Line 868: ;
Line 869: return
Line 869: INTCON = 0
Line 869: ;
Line 870: }
Line 871: Unrecognized token: 35
Line 871: ID = endif
Line 873: ID = static
Line 873: ID = const
Line 873: char
Line 873: ID = vermagic
Line 873: [
Line 873: ]
Line 873: =
Line 873: ID = VERMAGIC_STRING
Line 873: ;
Line 875: Unrecognized token: 35
Line 875: ID = ifdef
Line 875: ID = CONFIG_MODVERSIONS
Line 876: ID = static
Line 876: int
Line 876: ID = check_version
Line 876: (
Line 876: ID = Elf_Shdr
Line 876: *
Line 876: ID = sechdrs
Line 876: ,
Line 877: ID = unsigned
Line 877: int
Line 877: ID = versindex
Line 877: ,
Line 878: ID = const
Line 878: char
Line 878: *
Line 878: ID = symname
Line 878: ,
Line 879: ID = struct
Line 879: ID = module
Line 879: *
Line 879: ID = mod
Line 879: ,
Line 880: ID = const
Line 880: ID = unsigned
Line 880: ID = long
Line 880: *
Line 880: ID = crc
Line 880: )
Line 881: {
Line 882: ID = unsigned
Line 882: int
Line 882: ID = i
Line 882: ,
Line 882: ID = num_versions
Line 882: ;
Line 883: ID = struct
Line 883: ID = modversion_info
Line 883: *
Line 883: ID = versions
Line 883: ;
Line 886: if
Line 886: (
Line 886: !
Line 886: ID = crc
Line 886: )
Line 887: return
Line 887: INTCON = 1
Line 887: ;
Line 889: ID = versions
Line 889: =
Line 889: (
Line 889: void
Line 889: *
Line 889: )
Line 889: ID = sechdrs
Line 889: [
Line 889: ID = versindex
Line 889: ]
Line 889: Unrecognized token: 46
Line 889: ID = sh_addr
Line 889: ;
Line 890: ID = num_versions
Line 890: =
Line 890: ID = sechdrs
Line 890: [
Line 890: ID = versindex
Line 890: ]
Line 890: Unrecognized token: 46
Line 890: ID = sh_size
Line 891: /
Line 891: ID = sizeof
Line 891: (
Line 891: ID = struct
Line 891: ID = modversion_info
Line 891: )
Line 891: ;
Line 893: for
Line 893: (
Line 893: ID = i
Line 893: =
Line 893: INTCON = 0
Line 893: ;
Line 893: ID = i
Line 893: <
Line 893: ID = num_versions
Line 893: ;
Line 893: ID = i
Line 893: +
Line 893: +
Line 893: )
Line 893: {
Line 894: if
Line 894: (
Line 894: ID = strcmp
Line 894: (
Line 894: ID = versions
Line 894: [
Line 894: ID = i
Line 894: ]
Line 894: Unrecognized token: 46
Line 894: ID = name
Line 894: ,
Line 894: ID = symname
Line 894: )
Line 894: !=
Line 894: INTCON = 0
Line 894: )
Line 895: ID = continue
Line 895: ;
Line 897: if
Line 897: (
Line 897: ID = versions
Line 897: [
Line 897: ID = i
Line 897: ]
Line 897: Unrecognized token: 46
Line 897: ID = crc
Line 897: ==
Line 897: *
Line 897: ID = crc
Line 897: )
Line 898: return
Line 898: INTCON = 1
Line 898: ;
Line 899: ID = printk
Line 899: (
Line 899: STRINGCON = "%s: disagrees about version of symbol %s\n"
Line 899: ,
Line 900: ID = mod
Line 900: -
Line 900: >
Line 900: ID = name
Line 900: ,
Line 900: ID = symname
Line 900: )
Line 900: ;
Line 901: ID = DEBUGP
Line 901: (
Line 901: STRINGCON = "Found checksum %lX vs module %lX\n"
Line 901: ,
Line 902: *
Line 902: ID = crc
Line 902: ,
Line 902: ID = versions
Line 902: [
Line 902: ID = i
Line 902: ]
Line 902: Unrecognized token: 46
Line 902: ID = crc
Line 902: )
Line 902: ;
Line 903: return
Line 903: INTCON = 0
Line 903: ;
Line 904: }
Line 906: if
Line 906: (
Line 906: !
Line 906: (
Line 906: ID = tainted
Line 906: Unrecognized token: 38
Line 906: ID = TAINT_FORCED_MODULE
Line 906: )
Line 906: )
Line 906: {
Line 907: ID = printk
Line 907: (
Line 907: STRINGCON = "%s: no version for \"
Line 907: Unrecognized token: 37
Line 907: ID = s
Line 907: Unrecognized token: 92
Line 907: STRINGCON = " found: kernel tainted.\n"
Line 907: ,
Line 908: ID = mod
Line 908: -
Line 908: >
Line 908: ID = name
Line 908: ,
Line 908: ID = symname
Line 908: )
Line 908: ;
Line 909: ID = tainted
Line 909: Unrecognized token: 124
Line 909: =
Line 909: ID = TAINT_FORCED_MODULE
Line 909: ;
Line 910: }
Line 911: return
Line 911: INTCON = 1
Line 911: ;
Line 912: }
Line 914: ID = static
Line 914: ID = inline
Line 914: int
Line 914: ID = check_modstruct_version
Line 914: (
Line 914: ID = Elf_Shdr
Line 914: *
Line 914: ID = sechdrs
Line 914: ,
Line 915: ID = unsigned
Line 915: int
Line 915: ID = versindex
Line 915: ,
Line 916: ID = struct
Line 916: ID = module
Line 916: *
Line 916: ID = mod
Line 916: )
Line 917: {
Line 918: ID = const
Line 918: ID = unsigned
Line 918: ID = long
Line 918: *
Line 918: ID = crc
Line 918: ;
Line 919: ID = struct
Line 919: ID = module
Line 919: *
Line 919: ID = owner
Line 919: ;
Line 921: if
Line 921: (
Line 921: !
Line 921: Unrecognized token: 95
Line 921: Unrecognized token: 95
Line 921: ID = find_symbol
Line 921: (
Line 921: STRINGCON = "struct_module"
Line 921: ,
Line 921: Unrecognized token: 38
Line 921: ID = owner
Line 921: ,
Line 921: Unrecognized token: 38
Line 921: ID = crc
Line 921: ,
Line 921: INTCON = 1
Line 921: )
Line 921: )
Line 922: ID = BUG
Line 922: (
Line 922: )
Line 922: ;
Line 923: return
Line 923: ID = check_version
Line 923: (
Line 923: ID = sechdrs
Line 923: ,
Line 923: ID = versindex
Line 923: ,
Line 923: STRINGCON = "struct_module"
Line 923: ,
Line 923: ID = mod
Line 923: ,
Line 924: ID = crc
Line 924: )
Line 924: ;
Line 925: }
Line 928: ID = static
Line 928: ID = inline
Line 928: int
Line 928: ID = same_magic
Line 928: (
Line 928: ID = const
Line 928: char
Line 928: *
Line 928: ID = amagic
Line 928: ,
Line 928: ID = const
Line 928: char
Line 928: *
Line 928: ID = bmagic
Line 928: )
Line 929: {
Line 930: ID = amagic
Line 930: +
Line 930: =
Line 930: ID = strcspn
Line 930: (
Line 930: ID = amagic
Line 930: ,
Line 930: STRINGCON = " "
Line 930: )
Line 930: ;
Line 931: ID = bmagic
Line 931: +
Line 931: =
Line 931: ID = strcspn
Line 931: (
Line 931: ID = bmagic
Line 931: ,
Line 931: STRINGCON = " "
Line 931: )
Line 931: ;
Line 932: return
Line 932: ID = strcmp
Line 932: (
Line 932: ID = amagic
Line 932: ,
Line 932: ID = bmagic
Line 932: )
Line 932: ==
Line 932: INTCON = 0
Line 932: ;
Line 933: }
Line 934: Unrecognized token: 35
Line 934: else
Line 935: ID = static
Line 935: ID = inline
Line 935: int
Line 935: ID = check_version
Line 935: (
Line 935: ID = Elf_Shdr
Line 935: *
Line 935: ID = sechdrs
Line 935: ,
Line 936: ID = unsigned
Line 936: int
Line 936: ID = versindex
Line 936: ,
Line 937: ID = const
Line 937: char
Line 937: *
Line 937: ID = symname
Line 937: ,
Line 938: ID = struct
Line 938: ID = module
Line 938: *
Line 938: ID = mod
Line 938: ,
Line 939: ID = const
Line 939: ID = unsigned
Line 939: ID = long
Line 939: *
Line 939: ID = crc
Line 939: )
Line 940: {
Line 941: return
Line 941: INTCON = 1
Line 941: ;
Line 942: }
Line 944: ID = static
Line 944: ID = inline
Line 944: int
Line 944: ID = check_modstruct_version
Line 944: (
Line 944: ID = Elf_Shdr
Line 944: *
Line 944: ID = sechdrs
Line 944: ,
Line 945: ID = unsigned
Line 945: int
Line 945: ID = versindex
Line 945: ,
Line 946: ID = struct
Line 946: ID = module
Line 946: *
Line 946: ID = mod
Line 946: )
Line 947: {
Line 948: return
Line 948: INTCON = 1
Line 948: ;
Line 949: }
Line 951: ID = static
Line 951: ID = inline
Line 951: int
Line 951: ID = same_magic
Line 951: (
Line 951: ID = const
Line 951: char
Line 951: *
Line 951: ID = amagic
Line 951: ,
Line 951: ID = const
Line 951: char
Line 951: *
Line 951: ID = bmagic
Line 951: )
Line 952: {
Line 953: return
Line 953: ID = strcmp
Line 953: (
Line 953: ID = amagic
Line 953: ,
Line 953: ID = bmagic
Line 953: )
Line 953: ==
Line 953: INTCON = 0
Line 953: ;
Line 954: }
Line 955: Unrecognized token: 35
Line 955: ID = endif
Line 959: ID = static
Line 959: ID = unsigned
Line 959: ID = long
Line 959: ID = resolve_symbol
Line 959: (
Line 959: ID = Elf_Shdr
Line 959: *
Line 959: ID = sechdrs
Line 959: ,
Line 960: ID = unsigned
Line 960: int
Line 960: ID = versindex
Line 960: ,
Line 961: ID = const
Line 961: char
Line 961: *
Line 961: ID = name
Line 961: ,
Line 962: ID = struct
Line 962: ID = module
Line 962: *
Line 962: ID = mod
Line 962: )
Line 963: {
Line 964: ID = struct
Line 964: ID = module
Line 964: *
Line 964: ID = owner
Line 964: ;
Line 965: ID = unsigned
Line 965: ID = long
Line 965: ID = ret
Line 965: ;
Line 966: ID = const
Line 966: ID = unsigned
Line 966: ID = long
Line 966: *
Line 966: ID = crc
Line 966: ;
Line 968: ID = spin_lock_irq
Line 968: (
Line 968: Unrecognized token: 38
Line 968: ID = modlist_lock
Line 968: )
Line 968: ;
Line 969: ID = ret
Line 969: =
Line 969: Unrecognized token: 95
Line 969: Unrecognized token: 95
Line 969: ID = find_symbol
Line 969: (
Line 969: ID = name
Line 969: ,
Line 969: Unrecognized token: 38
Line 969: ID = owner
Line 969: ,
Line 969: Unrecognized token: 38
Line 969: ID = crc
Line 969: ,
Line 969: ID = mod
Line 969: -
Line 969: >
Line 969: ID = license_gplok
Line 969: )
Line 969: ;
Line 970: if
Line 970: (
Line 970: ID = ret
Line 970: )
Line 970: {
Line 972: if
Line 972: (
Line 972: !
Line 972: ID = check_version
Line 972: (
Line 972: ID = sechdrs
Line 972: ,
Line 972: ID = versindex
Line 972: ,
Line 972: ID = name
Line 972: ,
Line 972: ID = mod
Line 972: ,
Line 972: ID = crc
Line 972: )
Line 972: ||
Line 973: !
Line 973: ID = use_module
Line 973: (
Line 973: ID = mod
Line 973: ,
Line 973: ID = owner
Line 973: )
Line 973: )
Line 974: ID = ret
Line 974: =
Line 974: INTCON = 0
Line 974: ;
Line 975: }
Line 976: ID = spin_unlock_irq
Line 976: (
Line 976: Unrecognized token: 38
Line 976: ID = modlist_lock
Line 976: )
Line 976: ;
Line 977: return
Line 977: ID = ret
Line 977: ;
Line 978: }
Line 985: Unrecognized token: 35
Line 985: ID = ifdef
Line 985: ID = CONFIG_KALLSYMS
Line 986: ID = static
Line 986: void
Line 986: ID = module_sect_attrs_release
Line 986: (
Line 986: ID = struct
Line 986: ID = kobject
Line 986: *
Line 986: ID = kobj
Line 986: )
Line 987: {
Line 988: ID = kfree
Line 988: (
Line 988: ID = container_of
Line 988: (
Line 988: ID = kobj
Line 988: ,
Line 988: ID = struct
Line 988: ID = module_sections
Line 988: ,
Line 988: ID = kobj
Line 988: )
Line 988: )
Line 988: ;
Line 989: }
Line 991: ID = static
Line 991: ID = ssize_t
Line 991: ID = module_sect_show
Line 991: (
Line 991: ID = struct
Line 991: ID = kobject
Line 991: *
Line 991: ID = kobj
Line 991: ,
Line 991: ID = struct
Line 991: ID = attribute
Line 991: *
Line 991: ID = attr
Line 991: ,
Line 992: char
Line 992: *
Line 992: ID = buf
Line 992: )
Line 993: {
Line 994: ID = struct
Line 994: ID = module_sect_attr
Line 994: *
Line 994: ID = sattr
Line 994: =
Line 995: ID = container_of
Line 995: (
Line 995: ID = attr
Line 995: ,
Line 995: ID = struct
Line 995: ID = module_sect_attr
Line 995: ,
Line 995: ID = attr
Line 995: )
Line 995: ;
Line 996: return
Line 996: ID = sprintf
Line 996: (
Line 996: ID = buf
Line 996: ,
Line 996: STRINGCON = "0x%lx\n"
Line 996: ,
Line 996: ID = sattr
Line 996: -
Line 996: >
Line 996: ID = address
Line 996: )
Line 996: ;
Line 997: }
Line 999: ID = static
Line 999: ID = struct
Line 999: ID = sysfs_ops
Line 999: ID = module_sect_ops
Line 999: =
Line 999: {
Line 1000: Unrecognized token: 46
Line 1000: ID = show
Line 1000: =
Line 1000: ID = module_sect_show
Line 1000: ,
Line 1001: }
Line 1001: ;
Line 1003: ID = static
Line 1003: ID = struct
Line 1003: ID = kobj_type
Line 1003: ID = module_sect_ktype
Line 1003: =
Line 1003: {
Line 1004: Unrecognized token: 46
Line 1004: ID = sysfs_ops
Line 1004: =
Line 1004: Unrecognized token: 38
Line 1004: ID = module_sect_ops
Line 1004: ,
Line 1005: Unrecognized token: 46
Line 1005: ID = release
Line 1005: =
Line 1005: ID = module_sect_attrs_release
Line 1005: ,
Line 1006: }
Line 1006: ;
Line 1008: ID = static
Line 1008: void
Line 1008: ID = add_sect_attrs
Line 1008: (
Line 1008: ID = struct
Line 1008: ID = module
Line 1008: *
Line 1008: ID = mod
Line 1008: ,
Line 1008: ID = unsigned
Line 1008: int
Line 1008: ID = nsect
Line 1008: ,
Line 1009: char
Line 1009: *
Line 1009: ID = secstrings
Line 1009: ,
Line 1009: ID = Elf_Shdr
Line 1009: *
Line 1009: ID = sechdrs
Line 1009: )
Line 1010: {
Line 1011: ID = unsigned
Line 1011: int
Line 1011: ID = nloaded
Line 1011: =
Line 1011: INTCON = 0
Line 1011: ,
Line 1011: ID = i
Line 1011: ;
Line 1012: ID = struct
Line 1012: ID = module_sect_attr
Line 1012: *
Line 1012: ID = sattr
Line 1012: ;
Line 1014: if
Line 1014: (
Line 1014: !
Line 1014: ID = mod
Line 1014: -
Line 1014: >
Line 1014: ID = mkobj
Line 1014: )
Line 1015: return
Line 1015: ;
Line 1018: for
Line 1018: (
Line 1018: ID = i
Line 1018: =
Line 1018: INTCON = 0
Line 1018: ;
Line 1018: ID = i
Line 1018: <
Line 1018: ID = nsect
Line 1018: ;
Line 1018: ID = i
Line 1018: +
Line 1018: +
Line 1018: )
Line 1019: if
Line 1019: (
Line 1019: ID = sechdrs
Line 1019: [
Line 1019: ID = i
Line 1019: ]
Line 1019: Unrecognized token: 46
Line 1019: ID = sh_flags
Line 1019: Unrecognized token: 38
Line 1019: ID = SHF_ALLOC
Line 1019: )
Line 1020: ID = nloaded
Line 1020: +
Line 1020: +
Line 1020: ;
Line 1021: ID = mod
Line 1021: -
Line 1021: >
Line 1021: ID = sect_attrs
Line 1021: =
Line 1021: ID = kmalloc
Line 1021: (
Line 1021: ID = sizeof
Line 1021: (
Line 1021: ID = struct
Line 1021: ID = module_sections
Line 1021: )
Line 1021: +
Line 1022: ID = nloaded
Line 1022: *
Line 1022: ID = sizeof
Line 1022: (
Line 1022: ID = mod
Line 1022: -
Line 1022: >
Line 1022: ID = sect_attrs
Line 1022: -
Line 1022: >
Line 1022: ID = attrs
Line 1022: [
Line 1022: INTCON = 0
Line 1022: ]
Line 1022: )
Line 1022: ,
Line 1022: ID = GFP_KERNEL
Line 1022: )
Line 1022: ;
Line 1023: if
Line 1023: (
Line 1023: !
Line 1023: ID = mod
Line 1023: -
Line 1023: >
Line 1023: ID = sect_attrs
Line 1023: )
Line 1024: return
Line 1024: ;
Line 1027: ID = memset
Line 1027: (
Line 1027: ID = mod
Line 1027: -
Line 1027: >
Line 1027: ID = sect_attrs
Line 1027: ,
Line 1027: INTCON = 0
Line 1027: ,
Line 1027: ID = sizeof
Line 1027: (
Line 1027: ID = struct
Line 1027: ID = module_sections
Line 1027: )
Line 1027: )
Line 1027: ;
Line 1028: if
Line 1028: (
Line 1028: ID = kobject_set_name
Line 1028: (
Line 1028: Unrecognized token: 38
Line 1028: ID = mod
Line 1028: -
Line 1028: >
Line 1028: ID = sect_attrs
Line 1028: -
Line 1028: >
Line 1028: ID = kobj
Line 1028: ,
Line 1028: STRINGCON = "sections"
Line 1028: )
Line 1028: )
Line 1029: ID = goto
Line 1029: ID = out
Line 1029: ;
Line 1030: ID = mod
Line 1030: -
Line 1030: >
Line 1030: ID = sect_attrs
Line 1030: -
Line 1030: >
Line 1030: ID = kobj
Line 1030: Unrecognized token: 46
Line 1030: ID = parent
Line 1030: =
Line 1030: Unrecognized token: 38
Line 1030: ID = mod
Line 1030: -
Line 1030: >
Line 1030: ID = mkobj
Line 1030: -
Line 1030: >
Line 1030: ID = kobj
Line 1030: ;
Line 1031: ID = mod
Line 1031: -
Line 1031: >
Line 1031: ID = sect_attrs
Line 1031: -
Line 1031: >
Line 1031: ID = kobj
Line 1031: Unrecognized token: 46
Line 1031: ID = ktype
Line 1031: =
Line 1031: Unrecognized token: 38
Line 1031: ID = module_sect_ktype
Line 1031: ;
Line 1032: if
Line 1032: (
Line 1032: ID = kobject_register
Line 1032: (
Line 1032: Unrecognized token: 38
Line 1032: ID = mod
Line 1032: -
Line 1032: >
Line 1032: ID = sect_attrs
Line 1032: -
Line 1032: >
Line 1032: ID = kobj
Line 1032: )
Line 1032: )
Line 1033: ID = goto
Line 1033: ID = out
Line 1033: ;
Line 1036: ID = sattr
Line 1036: =
Line 1036: Unrecognized token: 38
Line 1036: ID = mod
Line 1036: -
Line 1036: >
Line 1036: ID = sect_attrs
Line 1036: -
Line 1036: >
Line 1036: ID = attrs
Line 1036: [
Line 1036: INTCON = 0
Line 1036: ]
Line 1036: ;
Line 1037: for
Line 1037: (
Line 1037: ID = i
Line 1037: =
Line 1037: INTCON = 0
Line 1037: ;
Line 1037: ID = i
Line 1037: <
Line 1037: ID = nsect
Line 1037: ;
Line 1037: ID = i
Line 1037: +
Line 1037: +
Line 1037: )
Line 1037: {
Line 1038: if
Line 1038: (
Line 1038: !
Line 1038: (
Line 1038: ID = sechdrs
Line 1038: [
Line 1038: ID = i
Line 1038: ]
Line 1038: Unrecognized token: 46
Line 1038: ID = sh_flags
Line 1038: Unrecognized token: 38
Line 1038: ID = SHF_ALLOC
Line 1038: )
Line 1038: )
Line 1039: ID = continue
Line 1039: ;
Line 1040: ID = sattr
Line 1040: -
Line 1040: >
Line 1040: ID = address
Line 1040: =
Line 1040: ID = sechdrs
Line 1040: [
Line 1040: ID = i
Line 1040: ]
Line 1040: Unrecognized token: 46
Line 1040: ID = sh_addr
Line 1040: ;
Line 1041: ID = strlcpy
Line 1041: (
Line 1041: ID = sattr
Line 1041: -
Line 1041: >
Line 1041: ID = name
Line 1041: ,
Line 1041: ID = secstrings
Line 1041: +
Line 1041: ID = sechdrs
Line 1041: [
Line 1041: ID = i
Line 1041: ]
Line 1041: Unrecognized token: 46
Line 1041: ID = sh_name
Line 1041: ,
Line 1042: ID = MODULE_SECT_NAME_LEN
Line 1042: )
Line 1042: ;
Line 1043: ID = sattr
Line 1043: -
Line 1043: >
Line 1043: ID = attr
Line 1043: Unrecognized token: 46
Line 1043: ID = name
Line 1043: =
Line 1043: ID = sattr
Line 1043: -
Line 1043: >
Line 1043: ID = name
Line 1043: ;
Line 1044: ID = sattr
Line 1044: -
Line 1044: >
Line 1044: ID = attr
Line 1044: Unrecognized token: 46
Line 1044: ID = owner
Line 1044: =
Line 1044: ID = mod
Line 1044: ;
Line 1045: ID = sattr
Line 1045: -
Line 1045: >
Line 1045: ID = attr
Line 1045: Unrecognized token: 46
Line 1045: ID = mode
Line 1045: =
Line 1045: ID = S_IRUGO
Line 1045: ;
Line 1046: (
Line 1046: void
Line 1046: )
Line 1046: ID = sysfs_create_file
Line 1046: (
Line 1046: Unrecognized token: 38
Line 1046: ID = mod
Line 1046: -
Line 1046: >
Line 1046: ID = sect_attrs
Line 1046: -
Line 1046: >
Line 1046: ID = kobj
Line 1046: ,
Line 1046: Unrecognized token: 38
Line 1046: ID = sattr
Line 1046: -
Line 1046: >
Line 1046: ID = attr
Line 1046: )
Line 1046: ;
Line 1047: ID = sattr
Line 1047: +
Line 1047: +
Line 1047: ;
Line 1048: }
Line 1049: return
Line 1049: ;
Line 1050: ID = out
Line 1050: Unrecognized token: 58
Line 1051: ID = kfree
Line 1051: (
Line 1051: ID = mod
Line 1051: -
Line 1051: >
Line 1051: ID = sect_attrs
Line 1051: )
Line 1051: ;
Line 1052: ID = mod
Line 1052: -
Line 1052: >
Line 1052: ID = sect_attrs
Line 1052: =
Line 1052: ID = NULL
Line 1052: ;
Line 1053: }
Line 1055: ID = static
Line 1055: void
Line 1055: ID = remove_sect_attrs
Line 1055: (
Line 1055: ID = struct
Line 1055: ID = module
Line 1055: *
Line 1055: ID = mod
Line 1055: )
Line 1056: {
Line 1057: if
Line 1057: (
Line 1057: ID = mod
Line 1057: -
Line 1057: >
Line 1057: ID = sect_attrs
Line 1057: )
Line 1057: {
Line 1058: ID = kobject_unregister
Line 1058: (
Line 1058: Unrecognized token: 38
Line 1058: ID = mod
Line 1058: -
Line 1058: >
Line 1058: ID = sect_attrs
Line 1058: -
Line 1058: >
Line 1058: ID = kobj
Line 1058: )
Line 1058: ;
Line 1059: ID = mod
Line 1059: -
Line 1059: >
Line 1059: ID = sect_attrs
Line 1059: =
Line 1059: ID = NULL
Line 1059: ;
Line 1060: }
Line 1061: }
Line 1064: Unrecognized token: 35
Line 1064: else
Line 1065: ID = static
Line 1065: ID = inline
Line 1065: void
Line 1065: ID = add_sect_attrs
Line 1065: (
Line 1065: ID = struct
Line 1065: ID = module
Line 1065: *
Line 1065: ID = mod
Line 1065: ,
Line 1065: ID = unsigned
Line 1065: int
Line 1065: ID = nsect
Line 1065: ,
Line 1066: char
Line 1066: *
Line 1066: ID = sectstrings
Line 1066: ,
Line 1066: ID = Elf_Shdr
Line 1066: *
Line 1066: ID = sechdrs
Line 1066: )
Line 1067: {
Line 1068: }
Line 1070: ID = static
Line 1070: ID = inline
Line 1070: void
Line 1070: ID = remove_sect_attrs
Line 1070: (
Line 1070: ID = struct
Line 1070: ID = module
Line 1070: *
Line 1070: ID = mod
Line 1070: )
Line 1071: {
Line 1072: }
Line 1073: Unrecognized token: 35
Line 1073: ID = endif
Line 1078: Unrecognized token: 35
Line 1078: ID = define
Line 1078: ID = to_module_attr
Line 1078: (
Line 1078: ID = n
Line 1078: )
Line 1078: ID = container_of
Line 1078: (
Line 1078: ID = n
Line 1078: ,
Line 1078: ID = struct
Line 1078: ID = module_attribute
Line 1078: ,
Line 1078: ID = attr
Line 1078: )
Line 1078: ;
Line 1080: ID = static
Line 1080: ID = ssize_t
Line 1080: ID = module_attr_show
Line 1080: (
Line 1080: ID = struct
Line 1080: ID = kobject
Line 1080: *
Line 1080: ID = kobj
Line 1080: ,
Line 1081: ID = struct
Line 1081: ID = attribute
Line 1081: *
Line 1081: ID = attr
Line 1081: ,
Line 1082: char
Line 1082: *
Line 1082: ID = buf
Line 1082: )
Line 1083: {
Line 1084: int
Line 1084: ID = count
Line 1084: ;
Line 1085: ID = struct
Line 1085: ID = module_attribute
Line 1085: *
Line 1085: ID = attribute
Line 1085: =
Line 1085: ID = to_module_attr
Line 1085: (
Line 1085: ID = attr
Line 1085: )
Line 1085: ;
Line 1087: if
Line 1087: (
Line 1087: !
Line 1087: ID = attribute
Line 1087: -
Line 1087: >
Line 1087: ID = param
Line 1087: -
Line 1087: >
Line 1087: ID = get
Line 1087: )
Line 1088: return
Line 1088: -
Line 1088: ID = EPERM
Line 1088: ;
Line 1090: ID = count
Line 1090: =
Line 1090: ID = attribute
Line 1090: -
Line 1090: >
Line 1090: ID = param
Line 1090: -
Line 1090: >
Line 1090: ID = get
Line 1090: (
Line 1090: ID = buf
Line 1090: ,
Line 1090: ID = attribute
Line 1090: -
Line 1090: >
Line 1090: ID = param
Line 1090: )
Line 1090: ;
Line 1091: if
Line 1091: (
Line 1091: ID = count
Line 1091: >
Line 1091: INTCON = 0
Line 1091: )
Line 1091: {
Line 1092: ID = strcat
Line 1092: (
Line 1092: ID = buf
Line 1092: ,
Line 1092: STRINGCON = "\n"
Line 1092: )
Line 1092: ;
Line 1093: +
Line 1093: +
Line 1093: ID = count
Line 1093: ;
Line 1094: }
Line 1095: return
Line 1095: ID = count
Line 1095: ;
Line 1096: }
Line 1099: ID = static
Line 1099: ID = ssize_t
Line 1099: ID = module_attr_store
Line 1099: (
Line 1099: ID = struct
Line 1099: ID = kobject
Line 1099: *
Line 1099: ID = kobj
Line 1099: ,
Line 1100: ID = struct
Line 1100: ID = attribute
Line 1100: *
Line 1100: ID = attr
Line 1100: ,
Line 1101: ID = const
Line 1101: char
Line 1101: *
Line 1101: ID = buf
Line 1101: ,
Line 1101: ID = size_t
Line 1101: ID = len
Line 1101: )
Line 1102: {
Line 1103: int
Line 1103: ID = err
Line 1103: ;
Line 1104: ID = struct
Line 1104: ID = module_attribute
Line 1104: *
Line 1104: ID = attribute
Line 1104: =
Line 1104: ID = to_module_attr
Line 1104: (
Line 1104: ID = attr
Line 1104: )
Line 1104: ;
Line 1106: if
Line 1106: (
Line 1106: !
Line 1106: ID = attribute
Line 1106: -
Line 1106: >
Line 1106: ID = param
Line 1106: -
Line 1106: >
Line 1106: ID = set
Line 1106: )
Line 1107: return
Line 1107: -
Line 1107: ID = EPERM
Line 1107: ;
Line 1109: ID = err
Line 1109: =
Line 1109: ID = attribute
Line 1109: -
Line 1109: >
Line 1109: ID = param
Line 1109: -
Line 1109: >
Line 1109: ID = set
Line 1109: (
Line 1109: ID = buf
Line 1109: ,
Line 1109: ID = attribute
Line 1109: -
Line 1109: >
Line 1109: ID = param
Line 1109: )
Line 1109: ;
Line 1110: if
Line 1110: (
Line 1110: !
Line 1110: ID = err
Line 1110: )
Line 1111: return
Line 1111: ID = len
Line 1111: ;
Line 1112: return
Line 1112: ID = err
Line 1112: ;
Line 1113: }
Line 1115: ID = static
Line 1115: ID = struct
Line 1115: ID = sysfs_ops
Line 1115: ID = module_sysfs_ops
Line 1115: =
Line 1115: {
Line 1116: Unrecognized token: 46
Line 1116: ID = show
Line 1116: =
Line 1116: ID = module_attr_show
Line 1116: ,
Line 1117: Unrecognized token: 46
Line 1117: ID = store
Line 1117: =
Line 1117: ID = module_attr_store
Line 1117: ,
Line 1118: }
Line 1118: ;
Line 1120: ID = static
Line 1120: void
Line 1120: ID = module_kobj_release
Line 1120: (
Line 1120: ID = struct
Line 1120: ID = kobject
Line 1120: *
Line 1120: ID = kobj
Line 1120: )
Line 1121: {
Line 1122: ID = kfree
Line 1122: (
Line 1122: ID = container_of
Line 1122: (
Line 1122: ID = kobj
Line 1122: ,
Line 1122: ID = struct
Line 1122: ID = module_kobject
Line 1122: ,
Line 1122: ID = kobj
Line 1122: )
Line 1122: )
Line 1122: ;
Line 1123: }
Line 1125: ID = static
Line 1125: ID = struct
Line 1125: ID = kobj_type
Line 1125: ID = module_ktype
Line 1125: =
Line 1125: {
Line 1126: Unrecognized token: 46
Line 1126: ID = sysfs_ops
Line 1126: =
Line 1126: Unrecognized token: 38
Line 1126: ID = module_sysfs_ops
Line 1126: ,
Line 1127: Unrecognized token: 46
Line 1127: ID = release
Line 1127: =
Line 1127: Unrecognized token: 38
Line 1127: ID = module_kobj_release
Line 1127: ,
Line 1128: }
Line 1128: ;
Line 1129: ID = static
Line 1129: ID = decl_subsys
Line 1129: (
Line 1129: ID = module
Line 1129: ,
Line 1129: Unrecognized token: 38
Line 1129: ID = module_ktype
Line 1129: ,
Line 1129: ID = NULL
Line 1129: )
Line 1129: ;
Line 1131: ID = static
Line 1131: int
Line 1131: ID = mod_sysfs_setup
Line 1131: (
Line 1131: ID = struct
Line 1131: ID = module
Line 1131: *
Line 1131: ID = mod
Line 1131: ,
Line 1132: ID = struct
Line 1132: ID = kernel_param
Line 1132: *
Line 1132: ID = kparam
Line 1132: ,
Line 1133: ID = unsigned
Line 1133: int
Line 1133: ID = num_params
Line 1133: )
Line 1134: {
Line 1135: ID = unsigned
Line 1135: int
Line 1135: ID = i
Line 1135: ;
Line 1136: int
Line 1136: ID = err
Line 1136: ;
Line 1139: ID = mod
Line 1139: -
Line 1139: >
Line 1139: ID = mkobj
Line 1139: =
Line 1139: ID = kmalloc
Line 1139: (
Line 1139: ID = sizeof
Line 1139: (
Line 1139: *
Line 1139: ID = mod
Line 1139: -
Line 1139: >
Line 1139: ID = mkobj
Line 1139: )
Line 1140: +
Line 1140: ID = sizeof
Line 1140: (
Line 1140: ID = mod
Line 1140: -
Line 1140: >
Line 1140: ID = mkobj
Line 1140: -
Line 1140: >
Line 1140: ID = attr
Line 1140: [
Line 1140: INTCON = 0
Line 1140: ]
Line 1140: )
Line 1140: *
Line 1140: (
Line 1140: ID = num_params
Line 1140: +
Line 1140: INTCON = 1
Line 1140: )
Line 1140: ,
Line 1141: ID = GFP_KERNEL
Line 1141: )
Line 1141: ;
Line 1142: if
Line 1142: (
Line 1142: !
Line 1142: ID = mod
Line 1142: -
Line 1142: >
Line 1142: ID = mkobj
Line 1142: )
Line 1143: return
Line 1143: -
Line 1143: ID = ENOMEM
Line 1143: ;
Line 1145: ID = memset
Line 1145: (
Line 1145: Unrecognized token: 38
Line 1145: ID = mod
Line 1145: -
Line 1145: >
Line 1145: ID = mkobj
Line 1145: -
Line 1145: >
Line 1145: ID = kobj
Line 1145: ,
Line 1145: INTCON = 0
Line 1145: ,
Line 1145: ID = sizeof
Line 1145: (
Line 1145: ID = mod
Line 1145: -
Line 1145: >
Line 1145: ID = mkobj
Line 1145: -
Line 1145: >
Line 1145: ID = kobj
Line 1145: )
Line 1145: )
Line 1145: ;
Line 1146: ID = err
Line 1146: =
Line 1146: ID = kobject_set_name
Line 1146: (
Line 1146: Unrecognized token: 38
Line 1146: ID = mod
Line 1146: -
Line 1146: >
Line 1146: ID = mkobj
Line 1146: -
Line 1146: >
Line 1146: ID = kobj
Line 1146: ,
Line 1146: ID = mod
Line 1146: -
Line 1146: >
Line 1146: ID = name
Line 1146: )
Line 1146: ;
Line 1147: if
Line 1147: (
Line 1147: ID = err
Line 1147: )
Line 1148: ID = goto
Line 1148: ID = out
Line 1148: ;
Line 1149: ID = kobj_set_kset_s
Line 1149: (
Line 1149: ID = mod
Line 1149: -
Line 1149: >
Line 1149: ID = mkobj
Line 1149: ,
Line 1149: ID = module_subsys
Line 1149: )
Line 1149: ;
Line 1150: ID = err
Line 1150: =
Line 1150: ID = kobject_register
Line 1150: (
Line 1150: Unrecognized token: 38
Line 1150: ID = mod
Line 1150: -
Line 1150: >
Line 1150: ID = mkobj
Line 1150: -
Line 1150: >
Line 1150: ID = kobj
Line 1150: )
Line 1150: ;
Line 1151: if
Line 1151: (
Line 1151: ID = err
Line 1151: )
Line 1152: ID = goto
Line 1152: ID = out
Line 1152: ;
Line 1154: ID = mod
Line 1154: -
Line 1154: >
Line 1154: ID = mkobj
Line 1154: -
Line 1154: >
Line 1154: ID = num_attributes
Line 1154: =
Line 1154: INTCON = 0
Line 1154: ;
Line 1156: for
Line 1156: (
Line 1156: ID = i
Line 1156: =
Line 1156: INTCON = 0
Line 1156: ;
Line 1156: ID = i
Line 1156: <
Line 1156: ID = num_params
Line 1156: ;
Line 1156: ID = i
Line 1156: +
Line 1156: +
Line 1156: )
Line 1156: {
Line 1157: if
Line 1157: (
Line 1157: ID = kparam
Line 1157: [
Line 1157: ID = i
Line 1157: ]
Line 1157: Unrecognized token: 46
Line 1157: ID = perm
Line 1157: )
Line 1157: {
Line 1158: ID = err
Line 1158: =
Line 1158: ID = add_attribute
Line 1158: (
Line 1158: ID = mod
Line 1158: ,
Line 1158: Unrecognized token: 38
Line 1158: ID = kparam
Line 1158: [
Line 1158: ID = i
Line 1158: ]
Line 1158: )
Line 1158: ;
Line 1159: if
Line 1159: (
Line 1159: ID = err
Line 1159: )
Line 1160: ID = goto
Line 1160: ID = out_unreg
Line 1160: ;
Line 1161: }
Line 1162: }
Line 1163: ID = err
Line 1163: =
Line 1163: ID = sysfs_unload_setup
Line 1163: (
Line 1163: ID = mod
Line 1163: )
Line 1163: ;
Line 1164: if
Line 1164: (
Line 1164: ID = err
Line 1164: )
Line 1165: ID = goto
Line 1165: ID = out_unreg
Line 1165: ;
Line 1166: return
Line 1166: INTCON = 0
Line 1166: ;
Line 1168: ID = out_unreg
Line 1168: Unrecognized token: 58
Line 1169: for
Line 1169: (
Line 1169: ID = i
Line 1169: =
Line 1169: INTCON = 0
Line 1169: ;
Line 1169: ID = i
Line 1169: <
Line 1169: ID = mod
Line 1169: -
Line 1169: >
Line 1169: ID = mkobj
Line 1169: -
Line 1169: >
Line 1169: ID = num_attributes
Line 1169: ;
Line 1169: ID = i
Line 1169: +
Line 1169: +
Line 1169: )
Line 1170: ID = sysfs_remove_file
Line 1170: (
Line 1170: Unrecognized token: 38
Line 1170: ID = mod
Line 1170: -
Line 1170: >
Line 1170: ID = mkobj
Line 1170: -
Line 1170: >
Line 1170: ID = kobj
Line 1170: ,
Line 1170: Unrecognized token: 38
Line 1170: ID = mod
Line 1170: -
Line 1170: >
Line 1170: ID = mkobj
Line 1170: -
Line 1170: >
Line 1170: ID = attr
Line 1170: [
Line 1170: ID = i
Line 1170: ]
Line 1170: Unrecognized token: 46
Line 1170: ID = attr
Line 1170: )
Line 1170: ;
Line 1172: ID = kobject_unregister
Line 1172: (
Line 1172: Unrecognized token: 38
Line 1172: ID = mod
Line 1172: -
Line 1172: >
Line 1172: ID = mkobj
Line 1172: -
Line 1172: >
Line 1172: ID = kobj
Line 1172: )
Line 1172: ;
Line 1173: return
Line 1173: ID = err
Line 1173: ;
Line 1174: ID = out
Line 1174: Unrecognized token: 58
Line 1175: ID = kfree
Line 1175: (
Line 1175: ID = mod
Line 1175: -
Line 1175: >
Line 1175: ID = mkobj
Line 1175: )
Line 1175: ;
Line 1176: return
Line 1176: ID = err
Line 1176: ;
Line 1177: }
Line 1179: ID = static
Line 1179: void
Line 1179: ID = mod_kobject_remove
Line 1179: (
Line 1179: ID = struct
Line 1179: ID = module
Line 1179: *
Line 1179: ID = mod
Line 1179: )
Line 1180: {
Line 1181: ID = unsigned
Line 1181: int
Line 1181: ID = i
Line 1181: ;
Line 1182: for
Line 1182: (
Line 1182: ID = i
Line 1182: =
Line 1182: INTCON = 0
Line 1182: ;
Line 1182: ID = i
Line 1182: <
Line 1182: ID = mod
Line 1182: -
Line 1182: >
Line 1182: ID = mkobj
Line 1182: -
Line 1182: >
Line 1182: ID = num_attributes
Line 1182: ;
Line 1182: ID = i
Line 1182: +
Line 1182: +
Line 1182: )
Line 1183: ID = sysfs_remove_file
Line 1183: (
Line 1183: Unrecognized token: 38
Line 1183: ID = mod
Line 1183: -
Line 1183: >
Line 1183: ID = mkobj
Line 1183: -
Line 1183: >
Line 1183: ID = kobj
Line 1183: ,
Line 1183: Unrecognized token: 38
Line 1183: ID = mod
Line 1183: -
Line 1183: >
Line 1183: ID = mkobj
Line 1183: -
Line 1183: >
Line 1183: ID = attr
Line 1183: [
Line 1183: ID = i
Line 1183: ]
Line 1183: Unrecognized token: 46
Line 1183: ID = attr
Line 1183: )
Line 1183: ;
Line 1185: ID = kobject_unregister
Line 1185: (
Line 1185: Unrecognized token: 38
Line 1185: ID = mod
Line 1185: -
Line 1185: >
Line 1185: ID = mkobj
Line 1185: -
Line 1185: >
Line 1185: ID = kobj
Line 1185: )
Line 1185: ;
Line 1186: }
Line 1189: ID = static
Line 1189: void
Line 1189: ID = free_module
Line 1189: (
Line 1189: ID = struct
Line 1189: ID = module
Line 1189: *
Line 1189: ID = mod
Line 1189: )
Line 1190: {
Line 1192: ID = spin_lock_irq
Line 1192: (
Line 1192: Unrecognized token: 38
Line 1192: ID = modlist_lock
Line 1192: )
Line 1192: ;
Line 1193: ID = list_del
Line 1193: (
Line 1193: Unrecognized token: 38
Line 1193: ID = mod
Line 1193: -
Line 1193: >
Line 1193: ID = list
Line 1193: )
Line 1193: ;
Line 1194: ID = spin_unlock_irq
Line 1194: (
Line 1194: Unrecognized token: 38
Line 1194: ID = modlist_lock
Line 1194: )
Line 1194: ;
Line 1196: ID = remove_sect_attrs
Line 1196: (
Line 1196: ID = mod
Line 1196: )
Line 1196: ;
Line 1197: ID = mod_kobject_remove
Line 1197: (
Line 1197: ID = mod
Line 1197: )
Line 1197: ;
Line 1200: ID = module_arch_cleanup
Line 1200: (
Line 1200: ID = mod
Line 1200: )
Line 1200: ;
Line 1203: ID = module_unload_free
Line 1203: (
Line 1203: ID = mod
Line 1203: )
Line 1203: ;
Line 1206: ID = module_free
Line 1206: (
Line 1206: ID = mod
Line 1206: ,
Line 1206: ID = mod
Line 1206: -
Line 1206: >
Line 1206: ID = module_init
Line 1206: )
Line 1206: ;
Line 1207: ID = kfree
Line 1207: (
Line 1207: ID = mod
Line 1207: -
Line 1207: >
Line 1207: ID = args
Line 1207: )
Line 1207: ;
Line 1208: if
Line 1208: (
Line 1208: ID = mod
Line 1208: -
Line 1208: >
Line 1208: ID = percpu
Line 1208: )
Line 1209: ID = percpu_modfree
Line 1209: (
Line 1209: ID = mod
Line 1209: -
Line 1209: >
Line 1209: ID = percpu
Line 1209: )
Line 1209: ;
Line 1212: ID = module_free
Line 1212: (
Line 1212: ID = mod
Line 1212: ,
Line 1212: ID = mod
Line 1212: -
Line 1212: >
Line 1212: ID = module_core
Line 1212: )
Line 1212: ;
Line 1213: }
Line 1215: void
Line 1215: *
Line 1215: Unrecognized token: 95
Line 1215: Unrecognized token: 95
Line 1215: ID = symbol_get
Line 1215: (
Line 1215: ID = const
Line 1215: char
Line 1215: *
Line 1215: ID = symbol
Line 1215: )
Line 1216: {
Line 1217: ID = struct
Line 1217: ID = module
Line 1217: *
Line 1217: ID = owner
Line 1217: ;
Line 1218: ID = unsigned
Line 1218: ID = long
Line 1218: ID = value
Line 1218: ,
Line 1218: ID = flags
Line 1218: ;
Line 1219: ID = const
Line 1219: ID = unsigned
Line 1219: ID = long
Line 1219: *
Line 1219: ID = crc
Line 1219: ;
Line 1221: ID = spin_lock_irqsave
Line 1221: (
Line 1221: Unrecognized token: 38
Line 1221: ID = modlist_lock
Line 1221: ,
Line 1221: ID = flags
Line 1221: )
Line 1221: ;
Line 1222: ID = value
Line 1222: =
Line 1222: Unrecognized token: 95
Line 1222: Unrecognized token: 95
Line 1222: ID = find_symbol
Line 1222: (
Line 1222: ID = symbol
Line 1222: ,
Line 1222: Unrecognized token: 38
Line 1222: ID = owner
Line 1222: ,
Line 1222: Unrecognized token: 38
Line 1222: ID = crc
Line 1222: ,
Line 1222: INTCON = 1
Line 1222: )
Line 1222: ;
Line 1223: if
Line 1223: (
Line 1223: ID = value
Line 1223: &&
Line 1223: !
Line 1223: ID = strong_try_module_get
Line 1223: (
Line 1223: ID = owner
Line 1223: )
Line 1223: )
Line 1224: ID = value
Line 1224: =
Line 1224: INTCON = 0
Line 1224: ;
Line 1225: ID = spin_unlock_irqrestore
Line 1225: (
Line 1225: Unrecognized token: 38
Line 1225: ID = modlist_lock
Line 1225: ,
Line 1225: ID = flags
Line 1225: )
Line 1225: ;
Line 1227: return
Line 1227: (
Line 1227: void
Line 1227: *
Line 1227: )
Line 1227: ID = value
Line 1227: ;
Line 1228: }
Line 1229: ID = EXPORT_SYMBOL_GPL
Line 1229: (
Line 1229: Unrecognized token: 95
Line 1229: Unrecognized token: 95
Line 1229: ID = symbol_get
Line 1229: )
Line 1229: ;
Line 1232: ID = static
Line 1232: int
Line 1232: ID = simplify_symbols
Line 1232: (
Line 1232: ID = Elf_Shdr
Line 1232: *
Line 1232: ID = sechdrs
Line 1232: ,
Line 1233: ID = unsigned
Line 1233: int
Line 1233: ID = symindex
Line 1233: ,
Line 1234: ID = const
Line 1234: char
Line 1234: *
Line 1234: ID = strtab
Line 1234: ,
Line 1235: ID = unsigned
Line 1235: int
Line 1235: ID = versindex
Line 1235: ,
Line 1236: ID = unsigned
Line 1236: int
Line 1236: ID = pcpuindex
Line 1236: ,
Line 1237: ID = struct
Line 1237: ID = module
Line 1237: *
Line 1237: ID = mod
Line 1237: )
Line 1238: {
Line 1239: ID = Elf_Sym
Line 1239: *
Line 1239: ID = sym
Line 1239: =
Line 1239: (
Line 1239: void
Line 1239: *
Line 1239: )
Line 1239: ID = sechdrs
Line 1239: [
Line 1239: ID = symindex
Line 1239: ]
Line 1239: Unrecognized token: 46
Line 1239: ID = sh_addr
Line 1239: ;
Line 1240: ID = unsigned
Line 1240: ID = long
Line 1240: ID = secbase
Line 1240: ;
Line 1241: ID = unsigned
Line 1241: int
Line 1241: ID = i
Line 1241: ,
Line 1241: ID = n
Line 1241: =
Line 1241: ID = sechdrs
Line 1241: [
Line 1241: ID = symindex
Line 1241: ]
Line 1241: Unrecognized token: 46
Line 1241: ID = sh_size
Line 1241: /
Line 1241: ID = sizeof
Line 1241: (
Line 1241: ID = Elf_Sym
Line 1241: )
Line 1241: ;
Line 1242: int
Line 1242: ID = ret
Line 1242: =
Line 1242: INTCON = 0
Line 1242: ;
Line 1244: for
Line 1244: (
Line 1244: ID = i
Line 1244: =
Line 1244: INTCON = 1
Line 1244: ;
Line 1244: ID = i
Line 1244: <
Line 1244: ID = n
Line 1244: ;
Line 1244: ID = i
Line 1244: +
Line 1244: +
Line 1244: )
Line 1244: {
Line 1245: ID = switch
Line 1245: (
Line 1245: ID = sym
Line 1245: [
Line 1245: ID = i
Line 1245: ]
Line 1245: Unrecognized token: 46
Line 1245: ID = st_shndx
Line 1245: )
Line 1245: {
Line 1246: ID = case
Line 1246: ID = SHN_COMMON
Line 1246: Unrecognized token: 58
Line 1249: ID = DEBUGP
Line 1249: (
Line 1249: STRINGCON = "Common symbol: %s\n"
Line 1249: ,
Line 1249: ID = strtab
Line 1249: +
Line 1249: ID = sym
Line 1249: [
Line 1249: ID = i
Line 1249: ]
Line 1249: Unrecognized token: 46
Line 1249: ID = st_name
Line 1249: )
Line 1249: ;
Line 1250: ID = printk
Line 1250: (
Line 1250: STRINGCON = "%s: please compile with -fno-common\n"
Line 1250: ,
Line 1251: ID = mod
Line 1251: -
Line 1251: >
Line 1251: ID = name
Line 1251: )
Line 1251: ;
Line 1252: ID = ret
Line 1252: =
Line 1252: -
Line 1252: ID = ENOEXEC
Line 1252: ;
Line 1253: ID = break
Line 1253: ;
Line 1255: ID = case
Line 1255: ID = SHN_ABS
Line 1255: Unrecognized token: 58
Line 1257: ID = DEBUGP
Line 1257: (
Line 1257: STRINGCON = "Absolute symbol: 0x%08lx\n"
Line 1257: ,
Line 1258: (
Line 1258: ID = long
Line 1258: )
Line 1258: ID = sym
Line 1258: [
Line 1258: ID = i
Line 1258: ]
Line 1258: Unrecognized token: 46
Line 1258: ID = st_value
Line 1258: )
Line 1258: ;
Line 1259: ID = break
Line 1259: ;
Line 1261: ID = case
Line 1261: ID = SHN_UNDEF
Line 1261: Unrecognized token: 58
Line 1262: ID = sym
Line 1262: [
Line 1262: ID = i
Line 1262: ]
Line 1262: Unrecognized token: 46
Line 1262: ID = st_value
Line 1263: =
Line 1263: ID = resolve_symbol
Line 1263: (
Line 1263: ID = sechdrs
Line 1263: ,
Line 1263: ID = versindex
Line 1263: ,
Line 1264: ID = strtab
Line 1264: +
Line 1264: ID = sym
Line 1264: [
Line 1264: ID = i
Line 1264: ]
Line 1264: Unrecognized token: 46
Line 1264: ID = st_name
Line 1264: ,
Line 1264: ID = mod
Line 1264: )
Line 1264: ;
Line 1267: if
Line 1267: (
Line 1267: ID = sym
Line 1267: [
Line 1267: ID = i
Line 1267: ]
Line 1267: Unrecognized token: 46
Line 1267: ID = st_value
Line 1267: !=
Line 1267: INTCON = 0
Line 1267: )
Line 1268: ID = break
Line 1268: ;
Line 1270: if
Line 1270: (
Line 1270: ID = ELF_ST_BIND
Line 1270: (
Line 1270: ID = sym
Line 1270: [
Line 1270: ID = i
Line 1270: ]
Line 1270: Unrecognized token: 46
Line 1270: ID = st_info
Line 1270: )
Line 1270: ==
Line 1270: ID = STB_WEAK
Line 1270: )
Line 1271: ID = break
Line 1271: ;
Line 1273: ID = printk
Line 1273: (
Line 1273: ID = KERN_WARNING
Line 1273: STRINGCON = "%s: Unknown symbol %s\n"
Line 1273: ,
Line 1274: ID = mod
Line 1274: -
Line 1274: >
Line 1274: ID = name
Line 1274: ,
Line 1274: ID = strtab
Line 1274: +
Line 1274: ID = sym
Line 1274: [
Line 1274: ID = i
Line 1274: ]
Line 1274: Unrecognized token: 46
Line 1274: ID = st_name
Line 1274: )
Line 1274: ;
Line 1275: ID = ret
Line 1275: =
Line 1275: -
Line 1275: ID = ENOENT
Line 1275: ;
Line 1276: ID = break
Line 1276: ;
Line 1278: ID = default
Line 1278: Unrecognized token: 58
Line 1280: if
Line 1280: (
Line 1280: ID = sym
Line 1280: [
Line 1280: ID = i
Line 1280: ]
Line 1280: Unrecognized token: 46
Line 1280: ID = st_shndx
Line 1280: ==
Line 1280: ID = pcpuindex
Line 1280: )
Line 1281: ID = secbase
Line 1281: =
Line 1281: (
Line 1281: ID = unsigned
Line 1281: ID = long
Line 1281: )
Line 1281: ID = mod
Line 1281: -
Line 1281: >
Line 1281: ID = percpu
Line 1281: ;
Line 1282: else
Line 1283: ID = secbase
Line 1283: =
Line 1283: ID = sechdrs
Line 1283: [
Line 1283: ID = sym
Line 1283: [
Line 1283: ID = i
Line 1283: ]
Line 1283: Unrecognized token: 46
Line 1283: ID = st_shndx
Line 1283: ]
Line 1283: Unrecognized token: 46
Line 1283: ID = sh_addr
Line 1283: ;
Line 1284: ID = sym
Line 1284: [
Line 1284: ID = i
Line 1284: ]
Line 1284: Unrecognized token: 46
Line 1284: ID = st_value
Line 1284: +
Line 1284: =
Line 1284: ID = secbase
Line 1284: ;
Line 1285: ID = break
Line 1285: ;
Line 1286: }
Line 1287: }
Line 1289: return
Line 1289: ID = ret
Line 1289: ;
Line 1290: }
Line 1293: ID = static
Line 1293: ID = long
Line 1293: ID = get_offset
Line 1293: (
Line 1293: ID = unsigned
Line 1293: ID = long
Line 1293: *
Line 1293: ID = size
Line 1293: ,
Line 1293: ID = Elf_Shdr
Line 1293: *
Line 1293: ID = sechdr
Line 1293: )
Line 1294: {
Line 1295: ID = long
Line 1295: ID = ret
Line 1295: ;
Line 1297: ID = ret
Line 1297: =
Line 1297: ID = ALIGN
Line 1297: (
Line 1297: *
Line 1297: ID = size
Line 1297: ,
Line 1297: ID = sechdr
Line 1297: -
Line 1297: >
Line 1297: ID = sh_addralign
Line 1297: Unrecognized token: 63
Line 1297: Unrecognized token: 58
Line 1297: INTCON = 1
Line 1297: )
Line 1297: ;
Line 1298: *
Line 1298: ID = size
Line 1298: =
Line 1298: ID = ret
Line 1298: +
Line 1298: ID = sechdr
Line 1298: -
Line 1298: >
Line 1298: ID = sh_size
Line 1298: ;
Line 1299: return
Line 1299: ID = ret
Line 1299: ;
Line 1300: }
Line 1306: ID = static
Line 1306: void
Line 1306: ID = layout_sections
Line 1306: (
Line 1306: ID = struct
Line 1306: ID = module
Line 1306: *
Line 1306: ID = mod
Line 1306: ,
Line 1307: ID = const
Line 1307: ID = Elf_Ehdr
Line 1307: *
Line 1307: ID = hdr
Line 1307: ,
Line 1308: ID = Elf_Shdr
Line 1308: *
Line 1308: ID = sechdrs
Line 1308: ,
Line 1309: ID = const
Line 1309: char
Line 1309: *
Line 1309: ID = secstrings
Line 1309: )
Line 1310: {
Line 1311: ID = static
Line 1311: ID = unsigned
Line 1311: ID = long
Line 1311: ID = const
Line 1311: ID = masks
Line 1311: [
Line 1311: ]
Line 1311: [
Line 1311: INTCON = 2
Line 1311: ]
Line 1311: =
Line 1311: {
Line 1315: {
Line 1315: ID = SHF_EXECINSTR
Line 1315: Unrecognized token: 124
Line 1315: ID = SHF_ALLOC
Line 1315: ,
Line 1315: ID = ARCH_SHF_SMALL
Line 1315: }
Line 1315: ,
Line 1316: {
Line 1316: ID = SHF_ALLOC
Line 1316: ,
Line 1316: ID = SHF_WRITE
Line 1316: Unrecognized token: 124
Line 1316: ID = ARCH_SHF_SMALL
Line 1316: }
Line 1316: ,
Line 1317: {
Line 1317: ID = SHF_WRITE
Line 1317: Unrecognized token: 124
Line 1317: ID = SHF_ALLOC
Line 1317: ,
Line 1317: ID = ARCH_SHF_SMALL
Line 1317: }
Line 1317: ,
Line 1318: {
Line 1318: ID = ARCH_SHF_SMALL
Line 1318: Unrecognized token: 124
Line 1318: ID = SHF_ALLOC
Line 1318: ,
Line 1318: INTCON = 0
Line 1318: }
Line 1319: }
Line 1319: ;
Line 1320: ID = unsigned
Line 1320: int
Line 1320: ID = m
Line 1320: ,
Line 1320: ID = i
Line 1320: ;
Line 1322: for
Line 1322: (
Line 1322: ID = i
Line 1322: =
Line 1322: INTCON = 0
Line 1322: ;
Line 1322: ID = i
Line 1322: <
Line 1322: ID = hdr
Line 1322: -
Line 1322: >
Line 1322: ID = e_shnum
Line 1322: ;
Line 1322: ID = i
Line 1322: +
Line 1322: +
Line 1322: )
Line 1323: ID = sechdrs
Line 1323: [
Line 1323: ID = i
Line 1323: ]
Line 1323: Unrecognized token: 46
Line 1323: ID = sh_entsize
Line 1323: =
Line 1323: Unrecognized token: 126
Line 1323: INTCON = 0
Line 1323: ID = UL
Line 1323: ;
Line 1325: ID = DEBUGP
Line 1325: (
Line 1325: STRINGCON = "Core section allocation order:\n"
Line 1325: )
Line 1325: ;
Line 1326: for
Line 1326: (
Line 1326: ID = m
Line 1326: =
Line 1326: INTCON = 0
Line 1326: ;
Line 1326: ID = m
Line 1326: <
Line 1326: ID = ARRAY_SIZE
Line 1326: (
Line 1326: ID = masks
Line 1326: )
Line 1326: ;
Line 1326: +
Line 1326: +
Line 1326: ID = m
Line 1326: )
Line 1326: {
Line 1327: for
Line 1327: (
Line 1327: ID = i
Line 1327: =
Line 1327: INTCON = 0
Line 1327: ;
Line 1327: ID = i
Line 1327: <
Line 1327: ID = hdr
Line 1327: -
Line 1327: >
Line 1327: ID = e_shnum
Line 1327: ;
Line 1327: +
Line 1327: +
Line 1327: ID = i
Line 1327: )
Line 1327: {
Line 1328: ID = Elf_Shdr
Line 1328: *
Line 1328: ID = s
Line 1328: =
Line 1328: Unrecognized token: 38
Line 1328: ID = sechdrs
Line 1328: [
Line 1328: ID = i
Line 1328: ]
Line 1328: ;
Line 1330: if
Line 1330: (
Line 1330: (
Line 1330: ID = s
Line 1330: -
Line 1330: >
Line 1330: ID = sh_flags
Line 1330: Unrecognized token: 38
Line 1330: ID = masks
Line 1330: [
Line 1330: ID = m
Line 1330: ]
Line 1330: [
Line 1330: INTCON = 0
Line 1330: ]
Line 1330: )
Line 1330: !=
Line 1330: ID = masks
Line 1330: [
Line 1330: ID = m
Line 1330: ]
Line 1330: [
Line 1330: INTCON = 0
Line 1330: ]
Line 1331: ||
Line 1331: (
Line 1331: ID = s
Line 1331: -
Line 1331: >
Line 1331: ID = sh_flags
Line 1331: Unrecognized token: 38
Line 1331: ID = masks
Line 1331: [
Line 1331: ID = m
Line 1331: ]
Line 1331: [
Line 1331: INTCON = 1
Line 1331: ]
Line 1331: )
Line 1332: ||
Line 1332: ID = s
Line 1332: -
Line 1332: >
Line 1332: ID = sh_entsize
Line 1332: !=
Line 1332: Unrecognized token: 126
Line 1332: INTCON = 0
Line 1332: ID = UL
Line 1333: ||
Line 1333: ID = strncmp
Line 1333: (
Line 1333: ID = secstrings
Line 1333: +
Line 1333: ID = s
Line 1333: -
Line 1333: >
Line 1333: ID = sh_name
Line 1333: ,
Line 1334: STRINGCON = ".init"
Line 1334: ,
Line 1334: INTCON = 5
Line 1334: )
Line 1334: ==
Line 1334: INTCON = 0
Line 1334: )
Line 1335: ID = continue
Line 1335: ;
Line 1336: ID = s
Line 1336: -
Line 1336: >
Line 1336: ID = sh_entsize
Line 1336: =
Line 1336: ID = get_offset
Line 1336: (
Line 1336: Unrecognized token: 38
Line 1336: ID = mod
Line 1336: -
Line 1336: >
Line 1336: ID = core_size
Line 1336: ,
Line 1336: ID = s
Line 1336: )
Line 1336: ;
Line 1337: ID = DEBUGP
Line 1337: (
Line 1337: STRINGCON = "\t%s\n"
Line 1337: ,
Line 1337: ID = secstrings
Line 1337: +
Line 1337: ID = s
Line 1337: -
Line 1337: >
Line 1337: ID = sh_name
Line 1337: )
Line 1337: ;
Line 1338: }
Line 1339: if
Line 1339: (
Line 1339: ID = m
Line 1339: ==
Line 1339: INTCON = 0
Line 1339: )
Line 1340: ID = mod
Line 1340: -
Line 1340: >
Line 1340: ID = core_text_size
Line 1340: =
Line 1340: ID = mod
Line 1340: -
Line 1340: >
Line 1340: ID = core_size
Line 1340: ;
Line 1341: }
Line 1343: ID = DEBUGP
Line 1343: (
Line 1343: STRINGCON = "Init section allocation order:\n"
Line 1343: )
Line 1343: ;
Line 1344: for
Line 1344: (
Line 1344: ID = m
Line 1344: =
Line 1344: INTCON = 0
Line 1344: ;
Line 1344: ID = m
Line 1344: <
Line 1344: ID = ARRAY_SIZE
Line 1344: (
Line 1344: ID = masks
Line 1344: )
Line 1344: ;
Line 1344: +
Line 1344: +
Line 1344: ID = m
Line 1344: )
Line 1344: {
Line 1345: for
Line 1345: (
Line 1345: ID = i
Line 1345: =
Line 1345: INTCON = 0
Line 1345: ;
Line 1345: ID = i
Line 1345: <
Line 1345: ID = hdr
Line 1345: -
Line 1345: >
Line 1345: ID = e_shnum
Line 1345: ;
Line 1345: +
Line 1345: +
Line 1345: ID = i
Line 1345: )
Line 1345: {
Line 1346: ID = Elf_Shdr
Line 1346: *
Line 1346: ID = s
Line 1346: =
Line 1346: Unrecognized token: 38
Line 1346: ID = sechdrs
Line 1346: [
Line 1346: ID = i
Line 1346: ]
Line 1346: ;
Line 1348: if
Line 1348: (
Line 1348: (
Line 1348: ID = s
Line 1348: -
Line 1348: >
Line 1348: ID = sh_flags
Line 1348: Unrecognized token: 38
Line 1348: ID = masks
Line 1348: [
Line 1348: ID = m
Line 1348: ]
Line 1348: [
Line 1348: INTCON = 0
Line 1348: ]
Line 1348: )
Line 1348: !=
Line 1348: ID = masks
Line 1348: [
Line 1348: ID = m
Line 1348: ]
Line 1348: [
Line 1348: INTCON = 0
Line 1348: ]
Line 1349: ||
Line 1349: (
Line 1349: ID = s
Line 1349: -
Line 1349: >
Line 1349: ID = sh_flags
Line 1349: Unrecognized token: 38
Line 1349: ID = masks
Line 1349: [
Line 1349: ID = m
Line 1349: ]
Line 1349: [
Line 1349: INTCON = 1
Line 1349: ]
Line 1349: )
Line 1350: ||
Line 1350: ID = s
Line 1350: -
Line 1350: >
Line 1350: ID = sh_entsize
Line 1350: !=
Line 1350: Unrecognized token: 126
Line 1350: INTCON = 0
Line 1350: ID = UL
Line 1351: ||
Line 1351: ID = strncmp
Line 1351: (
Line 1351: ID = secstrings
Line 1351: +
Line 1351: ID = s
Line 1351: -
Line 1351: >
Line 1351: ID = sh_name
Line 1351: ,
Line 1352: STRINGCON = ".init"
Line 1352: ,
Line 1352: INTCON = 5
Line 1352: )
Line 1352: !=
Line 1352: INTCON = 0
Line 1352: )
Line 1353: ID = continue
Line 1353: ;
Line 1354: ID = s
Line 1354: -
Line 1354: >
Line 1354: ID = sh_entsize
Line 1354: =
Line 1354: (
Line 1354: ID = get_offset
Line 1354: (
Line 1354: Unrecognized token: 38
Line 1354: ID = mod
Line 1354: -
Line 1354: >
Line 1354: ID = init_size
Line 1354: ,
Line 1354: ID = s
Line 1354: )
Line 1355: Unrecognized token: 124
Line 1355: ID = INIT_OFFSET_MASK
Line 1355: )
Line 1355: ;
Line 1356: ID = DEBUGP
Line 1356: (
Line 1356: STRINGCON = "\t%s\n"
Line 1356: ,
Line 1356: ID = secstrings
Line 1356: +
Line 1356: ID = s
Line 1356: -
Line 1356: >
Line 1356: ID = sh_name
Line 1356: )
Line 1356: ;
Line 1357: }
Line 1358: if
Line 1358: (
Line 1358: ID = m
Line 1358: ==
Line 1358: INTCON = 0
Line 1358: )
Line 1359: ID = mod
Line 1359: -
Line 1359: >
Line 1359: ID = init_text_size
Line 1359: =
Line 1359: ID = mod
Line 1359: -
Line 1359: >
Line 1359: ID = init_size
Line 1359: ;
Line 1360: }
Line 1361: }
Line 1363: ID = static
Line 1363: ID = inline
Line 1363: int
Line 1363: ID = license_is_gpl_compatible
Line 1363: (
Line 1363: ID = const
Line 1363: char
Line 1363: *
Line 1363: ID = license
Line 1363: )
Line 1364: {
Line 1365: return
Line 1365: (
Line 1365: ID = strcmp
Line 1365: (
Line 1365: ID = license
Line 1365: ,
Line 1365: STRINGCON = "GPL"
Line 1365: )
Line 1365: ==
Line 1365: INTCON = 0
Line 1366: ||
Line 1366: ID = strcmp
Line 1366: (
Line 1366: ID = license
Line 1366: ,
Line 1366: STRINGCON = "GPL v2"
Line 1366: )
Line 1366: ==
Line 1366: INTCON = 0
Line 1367: ||
Line 1367: ID = strcmp
Line 1367: (
Line 1367: ID = license
Line 1367: ,
Line 1367: STRINGCON = "GPL and additional rights"
Line 1367: )
Line 1367: ==
Line 1367: INTCON = 0
Line 1368: ||
Line 1368: ID = strcmp
Line 1368: (
Line 1368: ID = license
Line 1368: ,
Line 1368: STRINGCON = "Dual BSD/GPL"
Line 1368: )
Line 1368: ==
Line 1368: INTCON = 0
Line 1369: ||
Line 1369: ID = strcmp
Line 1369: (
Line 1369: ID = license
Line 1369: ,
Line 1369: STRINGCON = "Dual MPL/GPL"
Line 1369: )
Line 1369: ==
Line 1369: INTCON = 0
Line 1369: )
Line 1369: ;
Line 1370: }
Line 1372: ID = static
Line 1372: void
Line 1372: ID = set_license
Line 1372: (
Line 1372: ID = struct
Line 1372: ID = module
Line 1372: *
Line 1372: ID = mod
Line 1372: ,
Line 1372: ID = const
Line 1372: char
Line 1372: *
Line 1372: ID = license
Line 1372: )
Line 1373: {
Line 1374: if
Line 1374: (
Line 1374: !
Line 1374: ID = license
Line 1374: )
Line 1375: ID = license
Line 1375: =
Line 1375: STRINGCON = "unspecified"
Line 1375: ;
Line 1377: ID = mod
Line 1377: -
Line 1377: >
Line 1377: ID = license_gplok
Line 1377: =
Line 1377: ID = license_is_gpl_compatible
Line 1377: (
Line 1377: ID = license
Line 1377: )
Line 1377: ;
Line 1378: if
Line 1378: (
Line 1378: !
Line 1378: ID = mod
Line 1378: -
Line 1378: >
Line 1378: ID = license_gplok
Line 1378: &&
Line 1378: !
Line 1378: (
Line 1378: ID = tainted
Line 1378: Unrecognized token: 38
Line 1378: ID = TAINT_PROPRIETARY_MODULE
Line 1378: )
Line 1378: )
Line 1378: {
Line 1379: ID = printk
Line 1379: (
Line 1379: ID = KERN_WARNING
Line 1379: STRINGCON = "%s: module license '%s' taints kernel.\n"
Line 1379: ,
Line 1380: ID = mod
Line 1380: -
Line 1380: >
Line 1380: ID = name
Line 1380: ,
Line 1380: ID = license
Line 1380: )
Line 1380: ;
Line 1381: ID = tainted
Line 1381: Unrecognized token: 124
Line 1381: =
Line 1381: ID = TAINT_PROPRIETARY_MODULE
Line 1381: ;
Line 1382: }
Line 1383: }
Line 1386: ID = static
Line 1386: char
Line 1386: *
Line 1386: ID = next_string
Line 1386: (
Line 1386: char
Line 1386: *
Line 1386: ID = string
Line 1386: ,
Line 1386: ID = unsigned
Line 1386: ID = long
Line 1386: *
Line 1386: ID = secsize
Line 1386: )
Line 1387: {
Line 1389: while
Line 1389: (
Line 1389: ID = string
Line 1389: [
Line 1389: INTCON = 0
Line 1389: ]
Line 1389: )
Line 1389: {
Line 1390: ID = string
Line 1390: +
Line 1390: +
Line 1390: ;
Line 1391: if
Line 1391: (
Line 1391: (
Line 1391: *
Line 1391: ID = secsize
Line 1391: )
Line 1391: -
Line 1391: -
Line 1391: <=
Line 1391: INTCON = 1
Line 1391: )
Line 1392: return
Line 1392: ID = NULL
Line 1392: ;
Line 1393: }
Line 1396: while
Line 1396: (
Line 1396: !
Line 1396: ID = string
Line 1396: [
Line 1396: INTCON = 0
Line 1396: ]
Line 1396: )
Line 1396: {
Line 1397: ID = string
Line 1397: +
Line 1397: +
Line 1397: ;
Line 1398: if
Line 1398: (
Line 1398: (
Line 1398: *
Line 1398: ID = secsize
Line 1398: )
Line 1398: -
Line 1398: -
Line 1398: <=
Line 1398: INTCON = 1
Line 1398: )
Line 1399: return
Line 1399: ID = NULL
Line 1399: ;
Line 1400: }
Line 1401: return
Line 1401: ID = string
Line 1401: ;
Line 1402: }
Line 1404: ID = static
Line 1404: char
Line 1404: *
Line 1404: ID = get_modinfo
Line 1404: (
Line 1404: ID = Elf_Shdr
Line 1404: *
Line 1404: ID = sechdrs
Line 1404: ,
Line 1405: ID = unsigned
Line 1405: int
Line 1405: ID = info
Line 1405: ,
Line 1406: ID = const
Line 1406: char
Line 1406: *
Line 1406: ID = tag
Line 1406: )
Line 1407: {
Line 1408: char
Line 1408: *
Line 1408: ID = p
Line 1408: ;
Line 1409: ID = unsigned
Line 1409: int
Line 1409: ID = taglen
Line 1409: =
Line 1409: ID = strlen
Line 1409: (
Line 1409: ID = tag
Line 1409: )
Line 1409: ;
Line 1410: ID = unsigned
Line 1410: ID = long
Line 1410: ID = size
Line 1410: =
Line 1410: ID = sechdrs
Line 1410: [
Line 1410: ID = info
Line 1410: ]
Line 1410: Unrecognized token: 46
Line 1410: ID = sh_size
Line 1410: ;
Line 1412: for
Line 1412: (
Line 1412: ID = p
Line 1412: =
Line 1412: (
Line 1412: char
Line 1412: *
Line 1412: )
Line 1412: ID = sechdrs
Line 1412: [
Line 1412: ID = info
Line 1412: ]
Line 1412: Unrecognized token: 46
Line 1412: ID = sh_addr
Line 1412: ;
Line 1412: ID = p
Line 1412: ;
Line 1412: ID = p
Line 1412: =
Line 1412: ID = next_string
Line 1412: (
Line 1412: ID = p
Line 1412: ,
Line 1412: Unrecognized token: 38
Line 1412: ID = size
Line 1412: )
Line 1412: )
Line 1412: {
Line 1413: if
Line 1413: (
Line 1413: ID = strncmp
Line 1413: (
Line 1413: ID = p
Line 1413: ,
Line 1413: ID = tag
Line 1413: ,
Line 1413: ID = taglen
Line 1413: )
Line 1413: ==
Line 1413: INTCON = 0
Line 1413: &&
Line 1413: ID = p
Line 1413: [
Line 1413: ID = taglen
Line 1413: ]
Line 1413: ==
Line 1413: CHARCON = '='
Line 1413: )
Line 1414: return
Line 1414: ID = p
Line 1414: +
Line 1414: ID = taglen
Line 1414: +
Line 1414: INTCON = 1
Line 1414: ;
Line 1415: }
Line 1416: return
Line 1416: ID = NULL
Line 1416: ;
Line 1417: }
Line 1419: Unrecognized token: 35
Line 1419: ID = ifdef
Line 1419: ID = CONFIG_KALLSYMS
Line 1420: int
Line 1420: ID = is_exported
Line 1420: (
Line 1420: ID = const
Line 1420: char
Line 1420: *
Line 1420: ID = name
Line 1420: ,
Line 1420: ID = const
Line 1420: ID = struct
Line 1420: ID = module
Line 1420: *
Line 1420: ID = mod
Line 1420: )
Line 1421: {
Line 1422: ID = unsigned
Line 1422: int
Line 1422: ID = i
Line 1422: ;
Line 1424: if
Line 1424: (
Line 1424: !
Line 1424: ID = mod
Line 1424: )
Line 1424: {
Line 1425: for
Line 1425: (
Line 1425: ID = i
Line 1425: =
Line 1425: INTCON = 0
Line 1425: ;
Line 1425: Unrecognized token: 95
Line 1425: Unrecognized token: 95
Line 1425: ID = start___ksymtab
Line 1425: +
Line 1425: ID = i
Line 1425: <
Line 1425: Unrecognized token: 95
Line 1425: Unrecognized token: 95
Line 1425: ID = stop___ksymtab
Line 1425: ;
Line 1425: ID = i
Line 1425: +
Line 1425: +
Line 1425: )
Line 1426: if
Line 1426: (
Line 1426: ID = strcmp
Line 1426: (
Line 1426: Unrecognized token: 95
Line 1426: Unrecognized token: 95
Line 1426: ID = start___ksymtab
Line 1426: [
Line 1426: ID = i
Line 1426: ]
Line 1426: Unrecognized token: 46
Line 1426: ID = name
Line 1426: ,
Line 1426: ID = name
Line 1426: )
Line 1426: ==
Line 1426: INTCON = 0
Line 1426: )
Line 1427: return
Line 1427: INTCON = 1
Line 1427: ;
Line 1428: return
Line 1428: INTCON = 0
Line 1428: ;
Line 1429: }
Line 1430: for
Line 1430: (
Line 1430: ID = i
Line 1430: =
Line 1430: INTCON = 0
Line 1430: ;
Line 1430: ID = i
Line 1430: <
Line 1430: ID = mod
Line 1430: -
Line 1430: >
Line 1430: ID = num_syms
Line 1430: ;
Line 1430: ID = i
Line 1430: +
Line 1430: +
Line 1430: )
Line 1431: if
Line 1431: (
Line 1431: ID = strcmp
Line 1431: (
Line 1431: ID = mod
Line 1431: -
Line 1431: >
Line 1431: ID = syms
Line 1431: [
Line 1431: ID = i
Line 1431: ]
Line 1431: Unrecognized token: 46
Line 1431: ID = name
Line 1431: ,
Line 1431: ID = name
Line 1431: )
Line 1431: ==
Line 1431: INTCON = 0
Line 1431: )
Line 1432: return
Line 1432: INTCON = 1
Line 1432: ;
Line 1433: return
Line 1433: INTCON = 0
Line 1433: ;
Line 1434: }
Line 1437: ID = static
Line 1437: char
Line 1437: ID = elf_type
Line 1437: (
Line 1437: ID = const
Line 1437: ID = Elf_Sym
Line 1437: *
Line 1437: ID = sym
Line 1437: ,
Line 1438: ID = Elf_Shdr
Line 1438: *
Line 1438: ID = sechdrs
Line 1438: ,
Line 1439: ID = const
Line 1439: char
Line 1439: *
Line 1439: ID = secstrings
Line 1439: ,
Line 1440: ID = struct
Line 1440: ID = module
Line 1440: *
Line 1440: ID = mod
Line 1440: )
Line 1441: {
Line 1442: if
Line 1442: (
Line 1442: ID = ELF_ST_BIND
Line 1442: (
Line 1442: ID = sym
Line 1442: -
Line 1442: >
Line 1442: ID = st_info
Line 1442: )
Line 1442: ==
Line 1442: ID = STB_WEAK
Line 1442: )
Line 1442: {
Line 1443: if
Line 1443: (
Line 1443: ID = ELF_ST_TYPE
Line 1443: (
Line 1443: ID = sym
Line 1443: -
Line 1443: >
Line 1443: ID = st_info
Line 1443: )
Line 1443: ==
Line 1443: ID = STT_OBJECT
Line 1443: )
Line 1444: return
Line 1444: CHARCON = 'v'
Line 1444: ;
Line 1445: else
Line 1446: return
Line 1446: CHARCON = 'w'
Line 1446: ;
Line 1447: }
Line 1448: if
Line 1448: (
Line 1448: ID = sym
Line 1448: -
Line 1448: >
Line 1448: ID = st_shndx
Line 1448: ==
Line 1448: ID = SHN_UNDEF
Line 1448: )
Line 1449: return
Line 1449: CHARCON = 'U'
Line 1449: ;
Line 1450: if
Line 1450: (
Line 1450: ID = sym
Line 1450: -
Line 1450: >
Line 1450: ID = st_shndx
Line 1450: ==
Line 1450: ID = SHN_ABS
Line 1450: )
Line 1451: return
Line 1451: CHARCON = 'a'
Line 1451: ;
Line 1452: if
Line 1452: (
Line 1452: ID = sym
Line 1452: -
Line 1452: >
Line 1452: ID = st_shndx
Line 1452: >=
Line 1452: ID = SHN_LORESERVE
Line 1452: )
Line 1453: return
Line 1453: CHARCON = '?'
Line 1453: ;
Line 1454: if
Line 1454: (
Line 1454: ID = sechdrs
Line 1454: [
Line 1454: ID = sym
Line 1454: -
Line 1454: >
Line 1454: ID = st_shndx
Line 1454: ]
Line 1454: Unrecognized token: 46
Line 1454: ID = sh_flags
Line 1454: Unrecognized token: 38
Line 1454: ID = SHF_EXECINSTR
Line 1454: )
Line 1455: return
Line 1455: CHARCON = 't'
Line 1455: ;
Line 1456: if
Line 1456: (
Line 1456: ID = sechdrs
Line 1456: [
Line 1456: ID = sym
Line 1456: -
Line 1456: >
Line 1456: ID = st_shndx
Line 1456: ]
Line 1456: Unrecognized token: 46
Line 1456: ID = sh_flags
Line 1456: Unrecognized token: 38
Line 1456: ID = SHF_ALLOC
Line 1457: &&
Line 1457: ID = sechdrs
Line 1457: [
Line 1457: ID = sym
Line 1457: -
Line 1457: >
Line 1457: ID = st_shndx
Line 1457: ]
Line 1457: Unrecognized token: 46
Line 1457: ID = sh_type
Line 1457: !=
Line 1457: ID = SHT_NOBITS
Line 1457: )
Line 1457: {
Line 1458: if
Line 1458: (
Line 1458: !
Line 1458: (
Line 1458: ID = sechdrs
Line 1458: [
Line 1458: ID = sym
Line 1458: -
Line 1458: >
Line 1458: ID = st_shndx
Line 1458: ]
Line 1458: Unrecognized token: 46
Line 1458: ID = sh_flags
Line 1458: Unrecognized token: 38
Line 1458: ID = SHF_WRITE
Line 1458: )
Line 1458: )
Line 1459: return
Line 1459: CHARCON = 'r'
Line 1459: ;
Line 1460: else
Line 1460: if
Line 1460: (
Line 1460: ID = sechdrs
Line 1460: [
Line 1460: ID = sym
Line 1460: -
Line 1460: >
Line 1460: ID = st_shndx
Line 1460: ]
Line 1460: Unrecognized token: 46
Line 1460: ID = sh_flags
Line 1460: Unrecognized token: 38
Line 1460: ID = ARCH_SHF_SMALL
Line 1460: )
Line 1461: return
Line 1461: CHARCON = 'g'
Line 1461: ;
Line 1462: else
Line 1463: return
Line 1463: CHARCON = 'd'
Line 1463: ;
Line 1464: }
Line 1465: if
Line 1465: (
Line 1465: ID = sechdrs
Line 1465: [
Line 1465: ID = sym
Line 1465: -
Line 1465: >
Line 1465: ID = st_shndx
Line 1465: ]
Line 1465: Unrecognized token: 46
Line 1465: ID = sh_type
Line 1465: ==
Line 1465: ID = SHT_NOBITS
Line 1465: )
Line 1465: {
Line 1466: if
Line 1466: (
Line 1466: ID = sechdrs
Line 1466: [
Line 1466: ID = sym
Line 1466: -
Line 1466: >
Line 1466: ID = st_shndx
Line 1466: ]
Line 1466: Unrecognized token: 46
Line 1466: ID = sh_flags
Line 1466: Unrecognized token: 38
Line 1466: ID = ARCH_SHF_SMALL
Line 1466: )
Line 1467: return
Line 1467: CHARCON = 's'
Line 1467: ;
Line 1468: else
Line 1469: return
Line 1469: CHARCON = 'b'
Line 1469: ;
Line 1470: }
Line 1471: if
Line 1471: (
Line 1471: ID = strncmp
Line 1471: (
Line 1471: ID = secstrings
Line 1471: +
Line 1471: ID = sechdrs
Line 1471: [
Line 1471: ID = sym
Line 1471: -
Line 1471: >
Line 1471: ID = st_shndx
Line 1471: ]
Line 1471: Unrecognized token: 46
Line 1471: ID = sh_name
Line 1471: ,
Line 1472: STRINGCON = ".debug"
Line 1472: ,
Line 1472: ID = strlen
Line 1472: (
Line 1472: STRINGCON = ".debug"
Line 1472: )
Line 1472: )
Line 1472: ==
Line 1472: INTCON = 0
Line 1472: )
Line 1473: return
Line 1473: CHARCON = 'n'
Line 1473: ;
Line 1474: return
Line 1474: CHARCON = '?'
Line 1474: ;
Line 1475: }
Line 1477: ID = static
Line 1477: void
Line 1477: ID = add_kallsyms
Line 1477: (
Line 1477: ID = struct
Line 1477: ID = module
Line 1477: *
Line 1477: ID = mod
Line 1477: ,
Line 1478: ID = Elf_Shdr
Line 1478: *
Line 1478: ID = sechdrs
Line 1478: ,
Line 1479: ID = unsigned
Line 1479: int
Line 1479: ID = symindex
Line 1479: ,
Line 1480: ID = unsigned
Line 1480: int
Line 1480: ID = strindex
Line 1480: ,
Line 1481: ID = const
Line 1481: char
Line 1481: *
Line 1481: ID = secstrings
Line 1481: )
Line 1482: {
Line 1483: ID = unsigned
Line 1483: int
Line 1483: ID = i
Line 1483: ;
Line 1485: ID = mod
Line 1485: -
Line 1485: >
Line 1485: ID = symtab
Line 1485: =
Line 1485: (
Line 1485: void
Line 1485: *
Line 1485: )
Line 1485: ID = sechdrs
Line 1485: [
Line 1485: ID = symindex
Line 1485: ]
Line 1485: Unrecognized token: 46
Line 1485: ID = sh_addr
Line 1485: ;
Line 1486: ID = mod
Line 1486: -
Line 1486: >
Line 1486: ID = num_symtab
Line 1486: =
Line 1486: ID = sechdrs
Line 1486: [
Line 1486: ID = symindex
Line 1486: ]
Line 1486: Unrecognized token: 46
Line 1486: ID = sh_size
Line 1486: /
Line 1486: ID = sizeof
Line 1486: (
Line 1486: ID = Elf_Sym
Line 1486: )
Line 1486: ;
Line 1487: ID = mod
Line 1487: -
Line 1487: >
Line 1487: ID = strtab
Line 1487: =
Line 1487: (
Line 1487: void
Line 1487: *
Line 1487: )
Line 1487: ID = sechdrs
Line 1487: [
Line 1487: ID = strindex
Line 1487: ]
Line 1487: Unrecognized token: 46
Line 1487: ID = sh_addr
Line 1487: ;
Line 1490: for
Line 1490: (
Line 1490: ID = i
Line 1490: =
Line 1490: INTCON = 0
Line 1490: ;
Line 1490: ID = i
Line 1490: <
Line 1490: ID = mod
Line 1490: -
Line 1490: >
Line 1490: ID = num_symtab
Line 1490: ;
Line 1490: ID = i
Line 1490: +
Line 1490: +
Line 1490: )
Line 1491: ID = mod
Line 1491: -
Line 1491: >
Line 1491: ID = symtab
Line 1491: [
Line 1491: ID = i
Line 1491: ]
Line 1491: Unrecognized token: 46
Line 1491: ID = st_info
Line 1492: =
Line 1492: ID = elf_type
Line 1492: (
Line 1492: Unrecognized token: 38
Line 1492: ID = mod
Line 1492: -
Line 1492: >
Line 1492: ID = symtab
Line 1492: [
Line 1492: ID = i
Line 1492: ]
Line 1492: ,
Line 1492: ID = sechdrs
Line 1492: ,
Line 1492: ID = secstrings
Line 1492: ,
Line 1492: ID = mod
Line 1492: )
Line 1492: ;
Line 1493: }
Line 1494: Unrecognized token: 35
Line 1494: else
Line 1495: ID = static
Line 1495: ID = inline
Line 1495: void
Line 1495: ID = add_kallsyms
Line 1495: (
Line 1495: ID = struct
Line 1495: ID = module
Line 1495: *
Line 1495: ID = mod
Line 1495: ,
Line 1496: ID = Elf_Shdr
Line 1496: *
Line 1496: ID = sechdrs
Line 1496: ,
Line 1497: ID = unsigned
Line 1497: int
Line 1497: ID = symindex
Line 1497: ,
Line 1498: ID = unsigned
Line 1498: int
Line 1498: ID = strindex
Line 1498: ,
Line 1499: ID = const
Line 1499: char
Line 1499: *
Line 1499: ID = secstrings
Line 1499: )
Line 1500: {
Line 1501: }
Line 1502: Unrecognized token: 35
Line 1502: ID = endif
Line 1506: ID = static
Line 1506: ID = struct
Line 1506: ID = module
Line 1506: *
Line 1506: ID = load_module
Line 1506: (
Line 1506: void
Line 1506: Unrecognized token: 95
Line 1506: Unrecognized token: 95
Line 1506: ID = user
Line 1506: *
Line 1506: ID = umod
Line 1506: ,
Line 1507: ID = unsigned
Line 1507: ID = long
Line 1507: ID = len
Line 1507: ,
Line 1508: ID = const
Line 1508: char
Line 1508: Unrecognized token: 95
Line 1508: Unrecognized token: 95
Line 1508: ID = user
Line 1508: *
Line 1508: ID = uargs
Line 1508: )
Line 1509: {
Line 1510: ID = Elf_Ehdr
Line 1510: *
Line 1510: ID = hdr
Line 1510: ;
Line 1511: ID = Elf_Shdr
Line 1511: *
Line 1511: ID = sechdrs
Line 1511: ;
Line 1512: char
Line 1512: *
Line 1512: ID = secstrings
Line 1512: ,
Line 1512: *
Line 1512: ID = args
Line 1512: ,
Line 1512: *
Line 1512: ID = modmagic
Line 1512: ,
Line 1512: *
Line 1512: ID = strtab
Line 1512: =
Line 1512: ID = NULL
Line 1512: ;
Line 1513: ID = unsigned
Line 1513: int
Line 1513: ID = i
Line 1513: ,
Line 1513: ID = symindex
Line 1513: =
Line 1513: INTCON = 0
Line 1513: ,
Line 1513: ID = strindex
Line 1513: =
Line 1513: INTCON = 0
Line 1513: ,
Line 1513: ID = setupindex
Line 1513: ,
Line 1513: ID = exindex
Line 1513: ,
Line 1514: ID = exportindex
Line 1514: ,
Line 1514: ID = modindex
Line 1514: ,
Line 1514: ID = obsparmindex
Line 1514: ,
Line 1514: ID = infoindex
Line 1514: ,
Line 1514: ID = gplindex
Line 1514: ,
Line 1515: ID = crcindex
Line 1515: ,
Line 1515: ID = gplcrcindex
Line 1515: ,
Line 1515: ID = versindex
Line 1515: ,
Line 1515: ID = pcpuindex
Line 1515: ;
Line 1516: ID = long
Line 1516: ID = arglen
Line 1516: ;
Line 1517: ID = struct
Line 1517: ID = module
Line 1517: *
Line 1517: ID = mod
Line 1517: ;
Line 1518: ID = long
Line 1518: ID = err
Line 1518: =
Line 1518: INTCON = 0
Line 1518: ;
Line 1519: void
Line 1519: *
Line 1519: ID = percpu
Line 1519: =
Line 1519: ID = NULL
Line 1519: ,
Line 1519: *
Line 1519: ID = ptr
Line 1519: =
Line 1519: ID = NULL
Line 1519: ;
Line 1520: ID = struct
Line 1520: ID = exception_table_entry
Line 1520: *
Line 1520: ID = extable
Line 1520: ;
Line 1522: ID = DEBUGP
Line 1522: (
Line 1522: STRINGCON = "load_module: umod=%p, len=%lu, uargs=%p\n"
Line 1522: ,
Line 1523: ID = umod
Line 1523: ,
Line 1523: ID = len
Line 1523: ,
Line 1523: ID = uargs
Line 1523: )
Line 1523: ;
Line 1524: if
Line 1524: (
Line 1524: ID = len
Line 1524: <
Line 1524: ID = sizeof
Line 1524: (
Line 1524: *
Line 1524: ID = hdr
Line 1524: )
Line 1524: )
Line 1525: return
Line 1525: ID = ERR_PTR
Line 1525: (
Line 1525: -
Line 1525: ID = ENOEXEC
Line 1525: )
Line 1525: ;
Line 1529: if
Line 1529: (
Line 1529: ID = len
Line 1529: >
Line 1529: INTCON = 64
Line 1529: *
Line 1529: INTCON = 1024
Line 1529: *
Line 1529: INTCON = 1024
Line 1529: ||
Line 1529: (
Line 1529: ID = hdr
Line 1529: =
Line 1529: ID = vmalloc
Line 1529: (
Line 1529: ID = len
Line 1529: )
Line 1529: )
Line 1529: ==
Line 1529: ID = NULL
Line 1529: )
Line 1530: return
Line 1530: ID = ERR_PTR
Line 1530: (
Line 1530: -
Line 1530: ID = ENOMEM
Line 1530: )
Line 1530: ;
Line 1531: if
Line 1531: (
Line 1531: ID = copy_from_user
Line 1531: (
Line 1531: ID = hdr
Line 1531: ,
Line 1531: ID = umod
Line 1531: ,
Line 1531: ID = len
Line 1531: )
Line 1531: !=
Line 1531: INTCON = 0
Line 1531: )
Line 1531: {
Line 1532: ID = err
Line 1532: =
Line 1532: -
Line 1532: ID = EFAULT
Line 1532: ;
Line 1533: ID = goto
Line 1533: ID = free_hdr
Line 1533: ;
Line 1534: }
Line 1538: if
Line 1538: (
Line 1538: ID = memcmp
Line 1538: (
Line 1538: ID = hdr
Line 1538: -
Line 1538: >
Line 1538: ID = e_ident
Line 1538: ,
Line 1538: ID = ELFMAG
Line 1538: ,
Line 1538: INTCON = 4
Line 1538: )
Line 1538: !=
Line 1538: INTCON = 0
Line 1539: ||
Line 1539: ID = hdr
Line 1539: -
Line 1539: >
Line 1539: ID = e_type
Line 1539: !=
Line 1539: ID = ET_REL
Line 1540: ||
Line 1540: !
Line 1540: ID = elf_check_arch
Line 1540: (
Line 1540: ID = hdr
Line 1540: )
Line 1541: ||
Line 1541: ID = hdr
Line 1541: -
Line 1541: >
Line 1541: ID = e_shentsize
Line 1541: !=
Line 1541: ID = sizeof
Line 1541: (
Line 1541: *
Line 1541: ID = sechdrs
Line 1541: )
Line 1541: )
Line 1541: {
Line 1542: ID = err
Line 1542: =
Line 1542: -
Line 1542: ID = ENOEXEC
Line 1542: ;
Line 1543: ID = goto
Line 1543: ID = free_hdr
Line 1543: ;
Line 1544: }
Line 1546: if
Line 1546: (
Line 1546: ID = len
Line 1546: <
Line 1546: ID = hdr
Line 1546: -
Line 1546: >
Line 1546: ID = e_shoff
Line 1546: +
Line 1546: ID = hdr
Line 1546: -
Line 1546: >
Line 1546: ID = e_shnum
Line 1546: *
Line 1546: ID = sizeof
Line 1546: (
Line 1546: ID = Elf_Shdr
Line 1546: )
Line 1546: )
Line 1547: ID = goto
Line 1547: ID = truncated
Line 1547: ;
Line 1550: ID = sechdrs
Line 1550: =
Line 1550: (
Line 1550: void
Line 1550: *
Line 1550: )
Line 1550: ID = hdr
Line 1550: +
Line 1550: ID = hdr
Line 1550: -
Line 1550: >
Line 1550: ID = e_shoff
Line 1550: ;
Line 1551: ID = secstrings
Line 1551: =
Line 1551: (
Line 1551: void
Line 1551: *
Line 1551: )
Line 1551: ID = hdr
Line 1551: +
Line 1551: ID = sechdrs
Line 1551: [
Line 1551: ID = hdr
Line 1551: -
Line 1551: >
Line 1551: ID = e_shstrndx
Line 1551: ]
Line 1551: Unrecognized token: 46
Line 1551: ID = sh_offset
Line 1551: ;
Line 1552: ID = sechdrs
Line 1552: [
Line 1552: INTCON = 0
Line 1552: ]
Line 1552: Unrecognized token: 46
Line 1552: ID = sh_addr
Line 1552: =
Line 1552: INTCON = 0
Line 1552: ;
Line 1555: ID = symindex
Line 1555: =
Line 1555: ID = strindex
Line 1555: =
Line 1555: INTCON = 0
Line 1555: ;
Line 1557: for
Line 1557: (
Line 1557: ID = i
Line 1557: =
Line 1557: INTCON = 1
Line 1557: ;
Line 1557: ID = i
Line 1557: <
Line 1557: ID = hdr
Line 1557: -
Line 1557: >
Line 1557: ID = e_shnum
Line 1557: ;
Line 1557: ID = i
Line 1557: +
Line 1557: +
Line 1557: )
Line 1557: {
Line 1558: if
Line 1558: (
Line 1558: ID = sechdrs
Line 1558: [
Line 1558: ID = i
Line 1558: ]
Line 1558: Unrecognized token: 46
Line 1558: ID = sh_type
Line 1558: !=
Line 1558: ID = SHT_NOBITS
Line 1559: &&
Line 1559: ID = len
Line 1559: <
Line 1559: ID = sechdrs
Line 1559: [
Line 1559: ID = i
Line 1559: ]
Line 1559: Unrecognized token: 46
Line 1559: ID = sh_offset
Line 1559: +
Line 1559: ID = sechdrs
Line 1559: [
Line 1559: ID = i
Line 1559: ]
Line 1559: Unrecognized token: 46
Line 1559: ID = sh_size
Line 1559: )
Line 1560: ID = goto
Line 1560: ID = truncated
Line 1560: ;
Line 1564: ID = sechdrs
Line 1564: [
Line 1564: ID = i
Line 1564: ]
Line 1564: Unrecognized token: 46
Line 1564: ID = sh_addr
Line 1564: =
Line 1564: (
Line 1564: ID = size_t
Line 1564: )
Line 1564: ID = hdr
Line 1564: +
Line 1564: ID = sechdrs
Line 1564: [
Line 1564: ID = i
Line 1564: ]
Line 1564: Unrecognized token: 46
Line 1564: ID = sh_offset
Line 1564: ;
Line 1567: if
Line 1567: (
Line 1567: ID = sechdrs
Line 1567: [
Line 1567: ID = i
Line 1567: ]
Line 1567: Unrecognized token: 46
Line 1567: ID = sh_type
Line 1567: ==
Line 1567: ID = SHT_SYMTAB
Line 1567: )
Line 1567: {
Line 1568: ID = symindex
Line 1568: =
Line 1568: ID = i
Line 1568: ;
Line 1569: ID = strindex
Line 1569: =
Line 1569: ID = sechdrs
Line 1569: [
Line 1569: ID = i
Line 1569: ]
Line 1569: Unrecognized token: 46
Line 1569: ID = sh_link
Line 1569: ;
Line 1570: ID = strtab
Line 1570: =
Line 1570: (
Line 1570: char
Line 1570: *
Line 1570: )
Line 1570: ID = hdr
Line 1570: +
Line 1570: ID = sechdrs
Line 1570: [
Line 1570: ID = strindex
Line 1570: ]
Line 1570: Unrecognized token: 46
Line 1570: ID = sh_offset
Line 1570: ;
Line 1571: }
Line 1572: Unrecognized token: 35
Line 1572: ID = ifndef
Line 1572: ID = CONFIG_MODULE_UNLOAD
Line 1574: if
Line 1574: (
Line 1574: ID = strncmp
Line 1574: (
Line 1574: ID = secstrings
Line 1574: +
Line 1574: ID = sechdrs
Line 1574: [
Line 1574: ID = i
Line 1574: ]
Line 1574: Unrecognized token: 46
Line 1574: ID = sh_name
Line 1574: ,
Line 1574: STRINGCON = ".exit"
Line 1574: ,
Line 1574: INTCON = 5
Line 1574: )
Line 1574: ==
Line 1574: INTCON = 0
Line 1574: )
Line 1575: ID = sechdrs
Line 1575: [
Line 1575: ID = i
Line 1575: ]
Line 1575: Unrecognized token: 46
Line 1575: ID = sh_flags
Line 1575: Unrecognized token: 38
Line 1575: =
Line 1575: Unrecognized token: 126
Line 1575: (
Line 1575: ID = unsigned
Line 1575: ID = long
Line 1575: )
Line 1575: ID = SHF_ALLOC
Line 1575: ;
Line 1576: Unrecognized token: 35
Line 1576: ID = endif
Line 1577: }
Line 1579: ID = modindex
Line 1579: =
Line 1579: ID = find_sec
Line 1579: (
Line 1579: ID = hdr
Line 1579: ,
Line 1579: ID = sechdrs
Line 1579: ,
Line 1579: ID = secstrings
Line 1579: ,
Line 1580: STRINGCON = ".gnu.linkonce.this_module"
Line 1580: )
Line 1580: ;
Line 1581: if
Line 1581: (
Line 1581: !
Line 1581: ID = modindex
Line 1581: )
Line 1581: {
Line 1582: ID = printk
Line 1582: (
Line 1582: ID = KERN_WARNING
Line 1582: STRINGCON = "No module found in object\n"
Line 1582: )
Line 1582: ;
Line 1583: ID = err
Line 1583: =
Line 1583: -
Line 1583: ID = ENOEXEC
Line 1583: ;
Line 1584: ID = goto
Line 1584: ID = free_hdr
Line 1584: ;
Line 1585: }
Line 1586: ID = mod
Line 1586: =
Line 1586: (
Line 1586: void
Line 1586: *
Line 1586: )
Line 1586: ID = sechdrs
Line 1586: [
Line 1586: ID = modindex
Line 1586: ]
Line 1586: Unrecognized token: 46
Line 1586: ID = sh_addr
Line 1586: ;
Line 1589: ID = exportindex
Line 1589: =
Line 1589: ID = find_sec
Line 1589: (
Line 1589: ID = hdr
Line 1589: ,
Line 1589: ID = sechdrs
Line 1589: ,
Line 1589: ID = secstrings
Line 1589: ,
Line 1589: STRINGCON = "__ksymtab"
Line 1589: )
Line 1589: ;
Line 1590: ID = gplindex
Line 1590: =
Line 1590: ID = find_sec
Line 1590: (
Line 1590: ID = hdr
Line 1590: ,
Line 1590: ID = sechdrs
Line 1590: ,
Line 1590: ID = secstrings
Line 1590: ,
Line 1590: STRINGCON = "__ksymtab_gpl"
Line 1590: )
Line 1590: ;
Line 1591: ID = crcindex
Line 1591: =
Line 1591: ID = find_sec
Line 1591: (
Line 1591: ID = hdr
Line 1591: ,
Line 1591: ID = sechdrs
Line 1591: ,
Line 1591: ID = secstrings
Line 1591: ,
Line 1591: STRINGCON = "__kcrctab"
Line 1591: )
Line 1591: ;
Line 1592: ID = gplcrcindex
Line 1592: =
Line 1592: ID = find_sec
Line 1592: (
Line 1592: ID = hdr
Line 1592: ,
Line 1592: ID = sechdrs
Line 1592: ,
Line 1592: ID = secstrings
Line 1592: ,
Line 1592: STRINGCON = "__kcrctab_gpl"
Line 1592: )
Line 1592: ;
Line 1593: ID = setupindex
Line 1593: =
Line 1593: ID = find_sec
Line 1593: (
Line 1593: ID = hdr
Line 1593: ,
Line 1593: ID = sechdrs
Line 1593: ,
Line 1593: ID = secstrings
Line 1593: ,
Line 1593: STRINGCON = "__param"
Line 1593: )
Line 1593: ;
Line 1594: ID = exindex
Line 1594: =
Line 1594: ID = find_sec
Line 1594: (
Line 1594: ID = hdr
Line 1594: ,
Line 1594: ID = sechdrs
Line 1594: ,
Line 1594: ID = secstrings
Line 1594: ,
Line 1594: STRINGCON = "__ex_table"
Line 1594: )
Line 1594: ;
Line 1595: ID = obsparmindex
Line 1595: =
Line 1595: ID = find_sec
Line 1595: (
Line 1595: ID = hdr
Line 1595: ,
Line 1595: ID = sechdrs
Line 1595: ,
Line 1595: ID = secstrings
Line 1595: ,
Line 1595: STRINGCON = "__obsparm"
Line 1595: )
Line 1595: ;
Line 1596: ID = versindex
Line 1596: =
Line 1596: ID = find_sec
Line 1596: (
Line 1596: ID = hdr
Line 1596: ,
Line 1596: ID = sechdrs
Line 1596: ,
Line 1596: ID = secstrings
Line 1596: ,
Line 1596: STRINGCON = "__versions"
Line 1596: )
Line 1596: ;
Line 1597: ID = infoindex
Line 1597: =
Line 1597: ID = find_sec
Line 1597: (
Line 1597: ID = hdr
Line 1597: ,
Line 1597: ID = sechdrs
Line 1597: ,
Line 1597: ID = secstrings
Line 1597: ,
Line 1597: STRINGCON = ".modinfo"
Line 1597: )
Line 1597: ;
Line 1598: ID = pcpuindex
Line 1598: =
Line 1598: ID = find_pcpusec
Line 1598: (
Line 1598: ID = hdr
Line 1598: ,
Line 1598: ID = sechdrs
Line 1598: ,
Line 1598: ID = secstrings
Line 1598: )
Line 1598: ;
Line 1601: ID = sechdrs
Line 1601: [
Line 1601: ID = infoindex
Line 1601: ]
Line 1601: Unrecognized token: 46
Line 1601: ID = sh_flags
Line 1601: Unrecognized token: 38
Line 1601: =
Line 1601: Unrecognized token: 126
Line 1601: (
Line 1601: ID = unsigned
Line 1601: ID = long
Line 1601: )
Line 1601: ID = SHF_ALLOC
Line 1601: ;
Line 1602: Unrecognized token: 35
Line 1602: ID = ifdef
Line 1602: ID = CONFIG_KALLSYMS
Line 1604: ID = sechdrs
Line 1604: [
Line 1604: ID = symindex
Line 1604: ]
Line 1604: Unrecognized token: 46
Line 1604: ID = sh_flags
Line 1604: Unrecognized token: 124
Line 1604: =
Line 1604: ID = SHF_ALLOC
Line 1604: ;
Line 1605: ID = sechdrs
Line 1605: [
Line 1605: ID = strindex
Line 1605: ]
Line 1605: Unrecognized token: 46
Line 1605: ID = sh_flags
Line 1605: Unrecognized token: 124
Line 1605: =
Line 1605: ID = SHF_ALLOC
Line 1605: ;
Line 1606: Unrecognized token: 35
Line 1606: ID = endif
Line 1609: if
Line 1609: (
Line 1609: !
Line 1609: ID = check_modstruct_version
Line 1609: (
Line 1609: ID = sechdrs
Line 1609: ,
Line 1609: ID = versindex
Line 1609: ,
Line 1609: ID = mod
Line 1609: )
Line 1609: )
Line 1609: {
Line 1610: ID = err
Line 1610: =
Line 1610: -
Line 1610: ID = ENOEXEC
Line 1610: ;
Line 1611: ID = goto
Line 1611: ID = free_hdr
Line 1611: ;
Line 1612: }
Line 1614: ID = modmagic
Line 1614: =
Line 1614: ID = get_modinfo
Line 1614: (
Line 1614: ID = sechdrs
Line 1614: ,
Line 1614: ID = infoindex
Line 1614: ,
Line 1614: STRINGCON = "vermagic"
Line 1614: )
Line 1614: ;
Line 1616: if
Line 1616: (
Line 1616: !
Line 1616: ID = modmagic
Line 1616: )
Line 1616: {
Line 1617: ID = tainted
Line 1617: Unrecognized token: 124
Line 1617: =
Line 1617: ID = TAINT_FORCED_MODULE
Line 1617: ;
Line 1618: ID = printk
Line 1618: (
Line 1618: ID = KERN_WARNING
Line 1618: STRINGCON = "%s: no version magic, tainting kernel.\n"
Line 1618: ,
Line 1619: ID = mod
Line 1619: -
Line 1619: >
Line 1619: ID = name
Line 1619: )
Line 1619: ;
Line 1620: }
Line 1620: else
Line 1620: if
Line 1620: (
Line 1620: !
Line 1620: ID = same_magic
Line 1620: (
Line 1620: ID = modmagic
Line 1620: ,
Line 1620: ID = vermagic
Line 1620: )
Line 1620: )
Line 1620: {
Line 1621: ID = printk
Line 1621: (
Line 1621: ID = KERN_ERR
Line 1621: STRINGCON = "%s: version magic '%s' should be '%s'\n"
Line 1621: ,
Line 1622: ID = mod
Line 1622: -
Line 1622: >
Line 1622: ID = name
Line 1622: ,
Line 1622: ID = modmagic
Line 1622: ,
Line 1622: ID = vermagic
Line 1622: )
Line 1622: ;
Line 1623: ID = err
Line 1623: =
Line 1623: -
Line 1623: ID = ENOEXEC
Line 1623: ;
Line 1624: ID = goto
Line 1624: ID = free_hdr
Line 1624: ;
Line 1625: }
Line 1628: ID = arglen
Line 1628: =
Line 1628: ID = strlen_user
Line 1628: (
Line 1628: ID = uargs
Line 1628: )
Line 1628: ;
Line 1629: if
Line 1629: (
Line 1629: !
Line 1629: ID = arglen
Line 1629: )
Line 1629: {
Line 1630: ID = err
Line 1630: =
Line 1630: -
Line 1630: ID = EFAULT
Line 1630: ;
Line 1631: ID = goto
Line 1631: ID = free_hdr
Line 1631: ;
Line 1632: }
Line 1633: ID = args
Line 1633: =
Line 1633: ID = kmalloc
Line 1633: (
Line 1633: ID = arglen
Line 1633: ,
Line 1633: ID = GFP_KERNEL
Line 1633: )
Line 1633: ;
Line 1634: if
Line 1634: (
Line 1634: !
Line 1634: ID = args
Line 1634: )
Line 1634: {
Line 1635: ID = err
Line 1635: =
Line 1635: -
Line 1635: ID = ENOMEM
Line 1635: ;
Line 1636: ID = goto
Line 1636: ID = free_hdr
Line 1636: ;
Line 1637: }
Line 1638: if
Line 1638: (
Line 1638: ID = copy_from_user
Line 1638: (
Line 1638: ID = args
Line 1638: ,
Line 1638: ID = uargs
Line 1638: ,
Line 1638: ID = arglen
Line 1638: )
Line 1638: !=
Line 1638: INTCON = 0
Line 1638: )
Line 1638: {
Line 1639: ID = err
Line 1639: =
Line 1639: -
Line 1639: ID = EFAULT
Line 1639: ;
Line 1640: ID = goto
Line 1640: ID = free_mod
Line 1640: ;
Line 1641: }
Line 1643: if
Line 1643: (
Line 1643: ID = find_module
Line 1643: (
Line 1643: ID = mod
Line 1643: -
Line 1643: >
Line 1643: ID = name
Line 1643: )
Line 1643: )
Line 1643: {
Line 1644: ID = err
Line 1644: =
Line 1644: -
Line 1644: ID = EEXIST
Line 1644: ;
Line 1645: ID = goto
Line 1645: ID = free_mod
Line 1645: ;
Line 1646: }
Line 1648: ID = mod
Line 1648: -
Line 1648: >
Line 1648: ID = state
Line 1648: =
Line 1648: ID = MODULE_STATE_COMING
Line 1648: ;
Line 1651: ID = err
Line 1651: =
Line 1651: ID = module_frob_arch_sections
Line 1651: (
Line 1651: ID = hdr
Line 1651: ,
Line 1651: ID = sechdrs
Line 1651: ,
Line 1651: ID = secstrings
Line 1651: ,
Line 1651: ID = mod
Line 1651: )
Line 1651: ;
Line 1652: if
Line 1652: (
Line 1652: ID = err
Line 1652: <
Line 1652: INTCON = 0
Line 1652: )
Line 1653: ID = goto
Line 1653: ID = free_mod
Line 1653: ;
Line 1655: if
Line 1655: (
Line 1655: ID = pcpuindex
Line 1655: )
Line 1655: {
Line 1657: ID = percpu
Line 1657: =
Line 1657: ID = percpu_modalloc
Line 1657: (
Line 1657: ID = sechdrs
Line 1657: [
Line 1657: ID = pcpuindex
Line 1657: ]
Line 1657: Unrecognized token: 46
Line 1657: ID = sh_size
Line 1657: ,
Line 1658: ID = sechdrs
Line 1658: [
Line 1658: ID = pcpuindex
Line 1658: ]
Line 1658: Unrecognized token: 46
Line 1658: ID = sh_addralign
Line 1658: )
Line 1658: ;
Line 1659: if
Line 1659: (
Line 1659: !
Line 1659: ID = percpu
Line 1659: )
Line 1659: {
Line 1660: ID = err
Line 1660: =
Line 1660: -
Line 1660: ID = ENOMEM
Line 1660: ;
Line 1661: ID = goto
Line 1661: ID = free_mod
Line 1661: ;
Line 1662: }
Line 1663: ID = sechdrs
Line 1663: [
Line 1663: ID = pcpuindex
Line 1663: ]
Line 1663: Unrecognized token: 46
Line 1663: ID = sh_flags
Line 1663: Unrecognized token: 38
Line 1663: =
Line 1663: Unrecognized token: 126
Line 1663: (
Line 1663: ID = unsigned
Line 1663: ID = long
Line 1663: )
Line 1663: ID = SHF_ALLOC
Line 1663: ;
Line 1664: ID = mod
Line 1664: -
Line 1664: >
Line 1664: ID = percpu
Line 1664: =
Line 1664: ID = percpu
Line 1664: ;
Line 1665: }
Line 1670: ID = layout_sections
Line 1670: (
Line 1670: ID = mod
Line 1670: ,
Line 1670: ID = hdr
Line 1670: ,
Line 1670: ID = sechdrs
Line 1670: ,
Line 1670: ID = secstrings
Line 1670: )
Line 1670: ;
Line 1673: ID = ptr
Line 1673: =
Line 1673: ID = module_alloc
Line 1673: (
Line 1673: ID = mod
Line 1673: -
Line 1673: >
Line 1673: ID = core_size
Line 1673: )
Line 1673: ;
Line 1674: if
Line 1674: (
Line 1674: !
Line 1674: ID = ptr
Line 1674: )
Line 1674: {
Line 1675: ID = err
Line 1675: =
Line 1675: -
Line 1675: ID = ENOMEM
Line 1675: ;
Line 1676: ID = goto
Line 1676: ID = free_percpu
Line 1676: ;
Line 1677: }
Line 1678: ID = memset
Line 1678: (
Line 1678: ID = ptr
Line 1678: ,
Line 1678: INTCON = 0
Line 1678: ,
Line 1678: ID = mod
Line 1678: -
Line 1678: >
Line 1678: ID = core_size
Line 1678: )
Line 1678: ;
Line 1679: ID = mod
Line 1679: -
Line 1679: >
Line 1679: ID = module_core
Line 1679: =
Line 1679: ID = ptr
Line 1679: ;
Line 1681: ID = ptr
Line 1681: =
Line 1681: ID = module_alloc
Line 1681: (
Line 1681: ID = mod
Line 1681: -
Line 1681: >
Line 1681: ID = init_size
Line 1681: )
Line 1681: ;
Line 1682: if
Line 1682: (
Line 1682: !
Line 1682: ID = ptr
Line 1682: &&
Line 1682: ID = mod
Line 1682: -
Line 1682: >
Line 1682: ID = init_size
Line 1682: )
Line 1682: {
Line 1683: ID = err
Line 1683: =
Line 1683: -
Line 1683: ID = ENOMEM
Line 1683: ;
Line 1684: ID = goto
Line 1684: ID = free_core
Line 1684: ;
Line 1685: }
Line 1686: ID = memset
Line 1686: (
Line 1686: ID = ptr
Line 1686: ,
Line 1686: INTCON = 0
Line 1686: ,
Line 1686: ID = mod
Line 1686: -
Line 1686: >
Line 1686: ID = init_size
Line 1686: )
Line 1686: ;
Line 1687: ID = mod
Line 1687: -
Line 1687: >
Line 1687: ID = module_init
Line 1687: =
Line 1687: ID = ptr
Line 1687: ;
Line 1690: ID = DEBUGP
Line 1690: (
Line 1690: STRINGCON = "final section addresses:\n"
Line 1690: )
Line 1690: ;
Line 1691: for
Line 1691: (
Line 1691: ID = i
Line 1691: =
Line 1691: INTCON = 0
Line 1691: ;
Line 1691: ID = i
Line 1691: <
Line 1691: ID = hdr
Line 1691: -
Line 1691: >
Line 1691: ID = e_shnum
Line 1691: ;
Line 1691: ID = i
Line 1691: +
Line 1691: +
Line 1691: )
Line 1691: {
Line 1692: void
Line 1692: *
Line 1692: ID = dest
Line 1692: ;
Line 1694: if
Line 1694: (
Line 1694: !
Line 1694: (
Line 1694: ID = sechdrs
Line 1694: [
Line 1694: ID = i
Line 1694: ]
Line 1694: Unrecognized token: 46
Line 1694: ID = sh_flags
Line 1694: Unrecognized token: 38
Line 1694: ID = SHF_ALLOC
Line 1694: )
Line 1694: )
Line 1695: ID = continue
Line 1695: ;
Line 1697: if
Line 1697: (
Line 1697: ID = sechdrs
Line 1697: [
Line 1697: ID = i
Line 1697: ]
Line 1697: Unrecognized token: 46
Line 1697: ID = sh_entsize
Line 1697: Unrecognized token: 38
Line 1697: ID = INIT_OFFSET_MASK
Line 1697: )
Line 1698: ID = dest
Line 1698: =
Line 1698: ID = mod
Line 1698: -
Line 1698: >
Line 1698: ID = module_init
Line 1699: +
Line 1699: (
Line 1699: ID = sechdrs
Line 1699: [
Line 1699: ID = i
Line 1699: ]
Line 1699: Unrecognized token: 46
Line 1699: ID = sh_entsize
Line 1699: Unrecognized token: 38
Line 1699: Unrecognized token: 126
Line 1699: ID = INIT_OFFSET_MASK
Line 1699: )
Line 1699: ;
Line 1700: else
Line 1701: ID = dest
Line 1701: =
Line 1701: ID = mod
Line 1701: -
Line 1701: >
Line 1701: ID = module_core
Line 1701: +
Line 1701: ID = sechdrs
Line 1701: [
Line 1701: ID = i
Line 1701: ]
Line 1701: Unrecognized token: 46
Line 1701: ID = sh_entsize
Line 1701: ;
Line 1703: if
Line 1703: (
Line 1703: ID = sechdrs
Line 1703: [
Line 1703: ID = i
Line 1703: ]
Line 1703: Unrecognized token: 46
Line 1703: ID = sh_type
Line 1703: !=
Line 1703: ID = SHT_NOBITS
Line 1703: )
Line 1704: ID = memcpy
Line 1704: (
Line 1704: ID = dest
Line 1704: ,
Line 1704: (
Line 1704: void
Line 1704: *
Line 1704: )
Line 1704: ID = sechdrs
Line 1704: [
Line 1704: ID = i
Line 1704: ]
Line 1704: Unrecognized token: 46
Line 1704: ID = sh_addr
Line 1704: ,
Line 1705: ID = sechdrs
Line 1705: [
Line 1705: ID = i
Line 1705: ]
Line 1705: Unrecognized token: 46
Line 1705: ID = sh_size
Line 1705: )
Line 1705: ;
Line 1707: ID = sechdrs
Line 1707: [
Line 1707: ID = i
Line 1707: ]
Line 1707: Unrecognized token: 46
Line 1707: ID = sh_addr
Line 1707: =
Line 1707: (
Line 1707: ID = unsigned
Line 1707: ID = long
Line 1707: )
Line 1707: ID = dest
Line 1707: ;
Line 1708: ID = DEBUGP
Line 1708: (
Line 1708: STRINGCON = "\t0x%lx %s\n"
Line 1708: ,
Line 1708: ID = sechdrs
Line 1708: [
Line 1708: ID = i
Line 1708: ]
Line 1708: Unrecognized token: 46
Line 1708: ID = sh_addr
Line 1708: ,
Line 1708: ID = secstrings
Line 1708: +
Line 1708: ID = sechdrs
Line 1708: [
Line 1708: ID = i
Line 1708: ]
Line 1708: Unrecognized token: 46
Line 1708: ID = sh_name
Line 1708: )
Line 1708: ;
Line 1709: }
Line 1711: ID = mod
Line 1711: =
Line 1711: (
Line 1711: void
Line 1711: *
Line 1711: )
Line 1711: ID = sechdrs
Line 1711: [
Line 1711: ID = modindex
Line 1711: ]
Line 1711: Unrecognized token: 46
Line 1711: ID = sh_addr
Line 1711: ;
Line 1714: ID = module_unload_init
Line 1714: (
Line 1714: ID = mod
Line 1714: )
Line 1714: ;
Line 1717: ID = set_license
Line 1717: (
Line 1717: ID = mod
Line 1717: ,
Line 1717: ID = get_modinfo
Line 1717: (
Line 1717: ID = sechdrs
Line 1717: ,
Line 1717: ID = infoindex
Line 1717: ,
Line 1717: STRINGCON = "license"
Line 1717: )
Line 1717: )
Line 1717: ;
Line 1720: ID = err
Line 1720: =
Line 1720: ID = simplify_symbols
Line 1720: (
Line 1720: ID = sechdrs
Line 1720: ,
Line 1720: ID = symindex
Line 1720: ,
Line 1720: ID = strtab
Line 1720: ,
Line 1720: ID = versindex
Line 1720: ,
Line 1720: ID = pcpuindex
Line 1720: ,
Line 1721: ID = mod
Line 1721: )
Line 1721: ;
Line 1722: if
Line 1722: (
Line 1722: ID = err
Line 1722: <
Line 1722: INTCON = 0
Line 1722: )
Line 1723: ID = goto
Line 1723: ID = cleanup
Line 1723: ;
Line 1726: ID = mod
Line 1726: -
Line 1726: >
Line 1726: ID = num_syms
Line 1726: =
Line 1726: ID = sechdrs
Line 1726: [
Line 1726: ID = exportindex
Line 1726: ]
Line 1726: Unrecognized token: 46
Line 1726: ID = sh_size
Line 1726: /
Line 1726: ID = sizeof
Line 1726: (
Line 1726: *
Line 1726: ID = mod
Line 1726: -
Line 1726: >
Line 1726: ID = syms
Line 1726: )
Line 1726: ;
Line 1727: ID = mod
Line 1727: -
Line 1727: >
Line 1727: ID = syms
Line 1727: =
Line 1727: (
Line 1727: void
Line 1727: *
Line 1727: )
Line 1727: ID = sechdrs
Line 1727: [
Line 1727: ID = exportindex
Line 1727: ]
Line 1727: Unrecognized token: 46
Line 1727: ID = sh_addr
Line 1727: ;
Line 1728: if
Line 1728: (
Line 1728: ID = crcindex
Line 1728: )
Line 1729: ID = mod
Line 1729: -
Line 1729: >
Line 1729: ID = crcs
Line 1729: =
Line 1729: (
Line 1729: void
Line 1729: *
Line 1729: )
Line 1729: ID = sechdrs
Line 1729: [
Line 1729: ID = crcindex
Line 1729: ]
Line 1729: Unrecognized token: 46
Line 1729: ID = sh_addr
Line 1729: ;
Line 1730: ID = mod
Line 1730: -
Line 1730: >
Line 1730: ID = num_gpl_syms
Line 1730: =
Line 1730: ID = sechdrs
Line 1730: [
Line 1730: ID = gplindex
Line 1730: ]
Line 1730: Unrecognized token: 46
Line 1730: ID = sh_size
Line 1730: /
Line 1730: ID = sizeof
Line 1730: (
Line 1730: *
Line 1730: ID = mod
Line 1730: -
Line 1730: >
Line 1730: ID = gpl_syms
Line 1730: )
Line 1730: ;
Line 1731: ID = mod
Line 1731: -
Line 1731: >
Line 1731: ID = gpl_syms
Line 1731: =
Line 1731: (
Line 1731: void
Line 1731: *
Line 1731: )
Line 1731: ID = sechdrs
Line 1731: [
Line 1731: ID = gplindex
Line 1731: ]
Line 1731: Unrecognized token: 46
Line 1731: ID = sh_addr
Line 1731: ;
Line 1732: if
Line 1732: (
Line 1732: ID = gplcrcindex
Line 1732: )
Line 1733: ID = mod
Line 1733: -
Line 1733: >
Line 1733: ID = gpl_crcs
Line 1733: =
Line 1733: (
Line 1733: void
Line 1733: *
Line 1733: )
Line 1733: ID = sechdrs
Line 1733: [
Line 1733: ID = gplcrcindex
Line 1733: ]
Line 1733: Unrecognized token: 46
Line 1733: ID = sh_addr
Line 1733: ;
Line 1735: Unrecognized token: 35
Line 1735: ID = ifdef
Line 1735: ID = CONFIG_MODVERSIONS
Line 1736: if
Line 1736: (
Line 1736: (
Line 1736: ID = mod
Line 1736: -
Line 1736: >
Line 1736: ID = num_syms
Line 1736: &&
Line 1736: !
Line 1736: ID = crcindex
Line 1736: )
Line 1736: ||
Line 1737: (
Line 1737: ID = mod
Line 1737: -
Line 1737: >
Line 1737: ID = num_gpl_syms
Line 1737: &&
Line 1737: !
Line 1737: ID = gplcrcindex
Line 1737: )
Line 1737: )
Line 1737: {
Line 1738: ID = printk
Line 1738: (
Line 1738: ID = KERN_WARNING
Line 1738: STRINGCON = "%s: No versions for exported symbols."
Line 1739: STRINGCON = " Tainting kernel.\n"
Line 1739: ,
Line 1739: ID = mod
Line 1739: -
Line 1739: >
Line 1739: ID = name
Line 1739: )
Line 1739: ;
Line 1740: ID = tainted
Line 1740: Unrecognized token: 124
Line 1740: =
Line 1740: ID = TAINT_FORCED_MODULE
Line 1740: ;
Line 1741: }
Line 1742: Unrecognized token: 35
Line 1742: ID = endif
Line 1745: for
Line 1745: (
Line 1745: ID = i
Line 1745: =
Line 1745: INTCON = 1
Line 1745: ;
Line 1745: ID = i
Line 1745: <
Line 1745: ID = hdr
Line 1745: -
Line 1745: >
Line 1745: ID = e_shnum
Line 1745: ;
Line 1745: ID = i
Line 1745: +
Line 1745: +
Line 1745: )
Line 1745: {
Line 1746: ID = const
Line 1746: char
Line 1746: *
Line 1746: ID = strtab
Line 1746: =
Line 1746: (
Line 1746: char
Line 1746: *
Line 1746: )
Line 1746: ID = sechdrs
Line 1746: [
Line 1746: ID = strindex
Line 1746: ]
Line 1746: Unrecognized token: 46
Line 1746: ID = sh_addr
Line 1746: ;
Line 1747: ID = unsigned
Line 1747: int
Line 1747: ID = info
Line 1747: =
Line 1747: ID = sechdrs
Line 1747: [
Line 1747: ID = i
Line 1747: ]
Line 1747: Unrecognized token: 46
Line 1747: ID = sh_info
Line 1747: ;
Line 1750: if
Line 1750: (
Line 1750: ID = info
Line 1750: >=
Line 1750: ID = hdr
Line 1750: -
Line 1750: >
Line 1750: ID = e_shnum
Line 1750: )
Line 1751: ID = continue
Line 1751: ;
Line 1754: if
Line 1754: (
Line 1754: !
Line 1754: (
Line 1754: ID = sechdrs
Line 1754: [
Line 1754: ID = info
Line 1754: ]
Line 1754: Unrecognized token: 46
Line 1754: ID = sh_flags
Line 1754: Unrecognized token: 38
Line 1754: ID = SHF_ALLOC
Line 1754: )
Line 1754: )
Line 1755: ID = continue
Line 1755: ;
Line 1757: if
Line 1757: (
Line 1757: ID = sechdrs
Line 1757: [
Line 1757: ID = i
Line 1757: ]
Line 1757: Unrecognized token: 46
Line 1757: ID = sh_type
Line 1757: ==
Line 1757: ID = SHT_REL
Line 1757: )
Line 1758: ID = err
Line 1758: =
Line 1758: ID = apply_relocate
Line 1758: (
Line 1758: ID = sechdrs
Line 1758: ,
Line 1758: ID = strtab
Line 1758: ,
Line 1758: ID = symindex
Line 1758: ,
Line 1758: ID = i
Line 1758: ,
Line 1758: ID = mod
Line 1758: )
Line 1758: ;
Line 1759: else
Line 1759: if
Line 1759: (
Line 1759: ID = sechdrs
Line 1759: [
Line 1759: ID = i
Line 1759: ]
Line 1759: Unrecognized token: 46
Line 1759: ID = sh_type
Line 1759: ==
Line 1759: ID = SHT_RELA
Line 1759: )
Line 1760: ID = err
Line 1760: =
Line 1760: ID = apply_relocate_add
Line 1760: (
Line 1760: ID = sechdrs
Line 1760: ,
Line 1760: ID = strtab
Line 1760: ,
Line 1760: ID = symindex
Line 1760: ,
Line 1760: ID = i
Line 1760: ,
Line 1761: ID = mod
Line 1761: )
Line 1761: ;
Line 1762: if
Line 1762: (
Line 1762: ID = err
Line 1762: <
Line 1762: INTCON = 0
Line 1762: )
Line 1763: ID = goto
Line 1763: ID = cleanup
Line 1763: ;
Line 1764: }
Line 1767: ID = mod
Line 1767: -
Line 1767: >
Line 1767: ID = num_exentries
Line 1767: =
Line 1767: ID = sechdrs
Line 1767: [
Line 1767: ID = exindex
Line 1767: ]
Line 1767: Unrecognized token: 46
Line 1767: ID = sh_size
Line 1767: /
Line 1767: ID = sizeof
Line 1767: (
Line 1767: *
Line 1767: ID = mod
Line 1767: -
Line 1767: >
Line 1767: ID = extable
Line 1767: )
Line 1767: ;
Line 1768: ID = mod
Line 1768: -
Line 1768: >
Line 1768: ID = extable
Line 1768: =
Line 1768: ID = extable
Line 1768: =
Line 1768: (
Line 1768: void
Line 1768: *
Line 1768: )
Line 1768: ID = sechdrs
Line 1768: [
Line 1768: ID = exindex
Line 1768: ]
Line 1768: Unrecognized token: 46
Line 1768: ID = sh_addr
Line 1768: ;
Line 1769: ID = sort_extable
Line 1769: (
Line 1769: ID = extable
Line 1769: ,
Line 1769: ID = extable
Line 1769: +
Line 1769: ID = mod
Line 1769: -
Line 1769: >
Line 1769: ID = num_exentries
Line 1769: )
Line 1769: ;
Line 1772: ID = percpu_modcopy
Line 1772: (
Line 1772: ID = mod
Line 1772: -
Line 1772: >
Line 1772: ID = percpu
Line 1772: ,
Line 1772: (
Line 1772: void
Line 1772: *
Line 1772: )
Line 1772: ID = sechdrs
Line 1772: [
Line 1772: ID = pcpuindex
Line 1772: ]
Line 1772: Unrecognized token: 46
Line 1772: ID = sh_addr
Line 1772: ,
Line 1773: ID = sechdrs
Line 1773: [
Line 1773: ID = pcpuindex
Line 1773: ]
Line 1773: Unrecognized token: 46
Line 1773: ID = sh_size
Line 1773: )
Line 1773: ;
Line 1775: ID = add_kallsyms
Line 1775: (
Line 1775: ID = mod
Line 1775: ,
Line 1775: ID = sechdrs
Line 1775: ,
Line 1775: ID = symindex
Line 1775: ,
Line 1775: ID = strindex
Line 1775: ,
Line 1775: ID = secstrings
Line 1775: )
Line 1775: ;
Line 1777: ID = err
Line 1777: =
Line 1777: ID = module_finalize
Line 1777: (
Line 1777: ID = hdr
Line 1777: ,
Line 1777: ID = sechdrs
Line 1777: ,
Line 1777: ID = mod
Line 1777: )
Line 1777: ;
Line 1778: if
Line 1778: (
Line 1778: ID = err
Line 1778: <
Line 1778: INTCON = 0
Line 1778: )
Line 1779: ID = goto
Line 1779: ID = cleanup
Line 1779: ;
Line 1781: ID = mod
Line 1781: -
Line 1781: >
Line 1781: ID = args
Line 1781: =
Line 1781: ID = args
Line 1781: ;
Line 1782: if
Line 1782: (
Line 1782: ID = obsparmindex
Line 1782: )
Line 1782: {
Line 1783: ID = err
Line 1783: =
Line 1783: ID = obsolete_params
Line 1783: (
Line 1783: ID = mod
Line 1783: -
Line 1783: >
Line 1783: ID = name
Line 1783: ,
Line 1783: ID = mod
Line 1783: -
Line 1783: >
Line 1783: ID = args
Line 1783: ,
Line 1784: (
Line 1784: ID = struct
Line 1784: ID = obsolete_modparm
Line 1784: *
Line 1784: )
Line 1785: ID = sechdrs
Line 1785: [
Line 1785: ID = obsparmindex
Line 1785: ]
Line 1785: Unrecognized token: 46
Line 1785: ID = sh_addr
Line 1785: ,
Line 1786: ID = sechdrs
Line 1786: [
Line 1786: ID = obsparmindex
Line 1786: ]
Line 1786: Unrecognized token: 46
Line 1786: ID = sh_size
Line 1787: /
Line 1787: ID = sizeof
Line 1787: (
Line 1787: ID = struct
Line 1787: ID = obsolete_modparm
Line 1787: )
Line 1787: ,
Line 1788: ID = sechdrs
Line 1788: ,
Line 1788: ID = symindex
Line 1788: ,
Line 1789: (
Line 1789: char
Line 1789: *
Line 1789: )
Line 1789: ID = sechdrs
Line 1789: [
Line 1789: ID = strindex
Line 1789: ]
Line 1789: Unrecognized token: 46
Line 1789: ID = sh_addr
Line 1789: )
Line 1789: ;
Line 1790: if
Line 1790: (
Line 1790: ID = setupindex
Line 1790: )
Line 1791: ID = printk
Line 1791: (
Line 1791: ID = KERN_WARNING
Line 1791: STRINGCON = "%s: Ignoring new-style "
Line 1792: STRINGCON = "parameters in presence of obsolete ones\n"
Line 1792: ,
Line 1793: ID = mod
Line 1793: -
Line 1793: >
Line 1793: ID = name
Line 1793: )
Line 1793: ;
Line 1794: }
Line 1794: else
Line 1794: {
Line 1796: ID = err
Line 1796: =
Line 1796: ID = parse_args
Line 1796: (
Line 1796: ID = mod
Line 1796: -
Line 1796: >
Line 1796: ID = name
Line 1796: ,
Line 1796: ID = mod
Line 1796: -
Line 1796: >
Line 1796: ID = args
Line 1796: ,
Line 1797: (
Line 1797: ID = struct
Line 1797: ID = kernel_param
Line 1797: *
Line 1797: )
Line 1798: ID = sechdrs
Line 1798: [
Line 1798: ID = setupindex
Line 1798: ]
Line 1798: Unrecognized token: 46
Line 1798: ID = sh_addr
Line 1798: ,
Line 1799: ID = sechdrs
Line 1799: [
Line 1799: ID = setupindex
Line 1799: ]
Line 1799: Unrecognized token: 46
Line 1799: ID = sh_size
Line 1800: /
Line 1800: ID = sizeof
Line 1800: (
Line 1800: ID = struct
Line 1800: ID = kernel_param
Line 1800: )
Line 1800: ,
Line 1801: ID = NULL
Line 1801: )
Line 1801: ;
Line 1802: }
Line 1803: ID = err
Line 1803: =
Line 1803: ID = mod_sysfs_setup
Line 1803: (
Line 1803: ID = mod
Line 1803: ,
Line 1804: (
Line 1804: ID = struct
Line 1804: ID = kernel_param
Line 1804: *
Line 1804: )
Line 1805: ID = sechdrs
Line 1805: [
Line 1805: ID = setupindex
Line 1805: ]
Line 1805: Unrecognized token: 46
Line 1805: ID = sh_addr
Line 1805: ,
Line 1806: ID = sechdrs
Line 1806: [
Line 1806: ID = setupindex
Line 1806: ]
Line 1806: Unrecognized token: 46
Line 1806: ID = sh_size
Line 1807: /
Line 1807: ID = sizeof
Line 1807: (
Line 1807: ID = struct
Line 1807: ID = kernel_param
Line 1807: )
Line 1807: )
Line 1807: ;
Line 1808: if
Line 1808: (
Line 1808: ID = err
Line 1808: <
Line 1808: INTCON = 0
Line 1808: )
Line 1809: ID = goto
Line 1809: ID = arch_cleanup
Line 1809: ;
Line 1810: ID = add_sect_attrs
Line 1810: (
Line 1810: ID = mod
Line 1810: ,
Line 1810: ID = hdr
Line 1810: -
Line 1810: >
Line 1810: ID = e_shnum
Line 1810: ,
Line 1810: ID = secstrings
Line 1810: ,
Line 1810: ID = sechdrs
Line 1810: )
Line 1810: ;
Line 1813: ID = vfree
Line 1813: (
Line 1813: ID = hdr
Line 1813: )
Line 1813: ;
Line 1816: return
Line 1816: ID = mod
Line 1816: ;
Line 1818: ID = arch_cleanup
Line 1818: Unrecognized token: 58
Line 1819: ID = module_arch_cleanup
Line 1819: (
Line 1819: ID = mod
Line 1819: )
Line 1819: ;
Line 1820: ID = cleanup
Line 1820: Unrecognized token: 58
Line 1821: ID = module_unload_free
Line 1821: (
Line 1821: ID = mod
Line 1821: )
Line 1821: ;
Line 1822: ID = module_free
Line 1822: (
Line 1822: ID = mod
Line 1822: ,
Line 1822: ID = mod
Line 1822: -
Line 1822: >
Line 1822: ID = module_init
Line 1822: )
Line 1822: ;
Line 1823: ID = free_core
Line 1823: Unrecognized token: 58
Line 1824: ID = module_free
Line 1824: (
Line 1824: ID = mod
Line 1824: ,
Line 1824: ID = mod
Line 1824: -
Line 1824: >
Line 1824: ID = module_core
Line 1824: )
Line 1824: ;
Line 1825: ID = free_percpu
Line 1825: Unrecognized token: 58
Line 1826: if
Line 1826: (
Line 1826: ID = percpu
Line 1826: )
Line 1827: ID = percpu_modfree
Line 1827: (
Line 1827: ID = percpu
Line 1827: )
Line 1827: ;
Line 1828: ID = free_mod
Line 1828: Unrecognized token: 58
Line 1829: ID = kfree
Line 1829: (
Line 1829: ID = args
Line 1829: )
Line 1829: ;
Line 1830: ID = free_hdr
Line 1830: Unrecognized token: 58
Line 1831: ID = vfree
Line 1831: (
Line 1831: ID = hdr
Line 1831: )
Line 1831: ;
Line 1832: if
Line 1832: (
Line 1832: ID = err
Line 1832: <
Line 1832: INTCON = 0
Line 1832: )
Line 1832: return
Line 1832: ID = ERR_PTR
Line 1832: (
Line 1832: ID = err
Line 1832: )
Line 1832: ;
Line 1833: else
Line 1833: return
Line 1833: ID = ptr
Line 1833: ;
Line 1835: ID = truncated
Line 1835: Unrecognized token: 58
Line 1836: ID = printk
Line 1836: (
Line 1836: ID = KERN_ERR
Line 1836: STRINGCON = "Module len %lu truncated\n"
Line 1836: ,
Line 1836: ID = len
Line 1836: )
Line 1836: ;
Line 1837: ID = err
Line 1837: =
Line 1837: -
Line 1837: ID = ENOEXEC
Line 1837: ;
Line 1838: ID = goto
Line 1838: ID = free_hdr
Line 1838: ;
Line 1839: }
Line 1842: ID = asmlinkage
Line 1842: ID = long
Line 1843: ID = sys_init_module
Line 1843: (
Line 1843: void
Line 1843: Unrecognized token: 95
Line 1843: Unrecognized token: 95
Line 1843: ID = user
Line 1843: *
Line 1843: ID = umod
Line 1843: ,
Line 1844: ID = unsigned
Line 1844: ID = long
Line 1844: ID = len
Line 1844: ,
Line 1845: ID = const
Line 1845: char
Line 1845: Unrecognized token: 95
Line 1845: Unrecognized token: 95
Line 1845: ID = user
Line 1845: *
Line 1845: ID = uargs
Line 1845: )
Line 1846: {
Line 1847: ID = struct
Line 1847: ID = module
Line 1847: *
Line 1847: ID = mod
Line 1847: ;
Line 1848: int
Line 1848: ID = ret
Line 1848: ;
Line 1851: if
Line 1851: (
Line 1851: !
Line 1851: ID = capable
Line 1851: (
Line 1851: ID = CAP_SYS_MODULE
Line 1851: )
Line 1851: )
Line 1852: return
Line 1852: -
Line 1852: ID = EPERM
Line 1852: ;
Line 1855: if
Line 1855: (
Line 1855: ID = down_interruptible
Line 1855: (
Line 1855: Unrecognized token: 38
Line 1855: ID = module_mutex
Line 1855: )
Line 1855: !=
Line 1855: INTCON = 0
Line 1855: )
Line 1856: return
Line 1856: -
Line 1856: ID = EINTR
Line 1856: ;
Line 1859: ID = mod
Line 1859: =
Line 1859: ID = load_module
Line 1859: (
Line 1859: ID = umod
Line 1859: ,
Line 1859: ID = len
Line 1859: ,
Line 1859: ID = uargs
Line 1859: )
Line 1859: ;
Line 1860: if
Line 1860: (
Line 1860: ID = IS_ERR
Line 1860: (
Line 1860: ID = mod
Line 1860: )
Line 1860: )
Line 1860: {
Line 1861: ID = up
Line 1861: (
Line 1861: Unrecognized token: 38
Line 1861: ID = module_mutex
Line 1861: )
Line 1861: ;
Line 1862: return
Line 1862: ID = PTR_ERR
Line 1862: (
Line 1862: ID = mod
Line 1862: )
Line 1862: ;
Line 1863: }
Line 1866: if
Line 1866: (
Line 1866: ID = mod
Line 1866: -
Line 1866: >
Line 1866: ID = module_init
Line 1866: )
Line 1867: ID = flush_icache_range
Line 1867: (
Line 1867: (
Line 1867: ID = unsigned
Line 1867: ID = long
Line 1867: )
Line 1867: ID = mod
Line 1867: -
Line 1867: >
Line 1867: ID = module_init
Line 1867: ,
Line 1868: (
Line 1868: ID = unsigned
Line 1868: ID = long
Line 1868: )
Line 1868: ID = mod
Line 1868: -
Line 1868: >
Line 1868: ID = module_init
Line 1869: +
Line 1869: ID = mod
Line 1869: -
Line 1869: >
Line 1869: ID = init_size
Line 1869: )
Line 1869: ;
Line 1870: ID = flush_icache_range
Line 1870: (
Line 1870: (
Line 1870: ID = unsigned
Line 1870: ID = long
Line 1870: )
Line 1870: ID = mod
Line 1870: -
Line 1870: >
Line 1870: ID = module_core
Line 1870: ,
Line 1871: (
Line 1871: ID = unsigned
Line 1871: ID = long
Line 1871: )
Line 1871: ID = mod
Line 1871: -
Line 1871: >
Line 1871: ID = module_core
Line 1871: +
Line 1871: ID = mod
Line 1871: -
Line 1871: >
Line 1871: ID = core_size
Line 1871: )
Line 1871: ;
Line 1875: ID = spin_lock_irq
Line 1875: (
Line 1875: Unrecognized token: 38
Line 1875: ID = modlist_lock
Line 1875: )
Line 1875: ;
Line 1876: ID = list_add
Line 1876: (
Line 1876: Unrecognized token: 38
Line 1876: ID = mod
Line 1876: -
Line 1876: >
Line 1876: ID = list
Line 1876: ,
Line 1876: Unrecognized token: 38
Line 1876: ID = modules
Line 1876: )
Line 1876: ;
Line 1877: ID = spin_unlock_irq
Line 1877: (
Line 1877: Unrecognized token: 38
Line 1877: ID = modlist_lock
Line 1877: )
Line 1877: ;
Line 1880: ID = up
Line 1880: (
Line 1880: Unrecognized token: 38
Line 1880: ID = module_mutex
Line 1880: )
Line 1880: ;
Line 1882: ID = down
Line 1882: (
Line 1882: Unrecognized token: 38
Line 1882: ID = notify_mutex
Line 1882: )
Line 1882: ;
Line 1883: ID = notifier_call_chain
Line 1883: (
Line 1883: Unrecognized token: 38
Line 1883: ID = module_notify_list
Line 1883: ,
Line 1883: ID = MODULE_STATE_COMING
Line 1883: ,
Line 1883: ID = mod
Line 1883: )
Line 1883: ;
Line 1884: ID = up
Line 1884: (
Line 1884: Unrecognized token: 38
Line 1884: ID = notify_mutex
Line 1884: )
Line 1884: ;
Line 1887: ID = ret
Line 1887: =
Line 1887: ID = mod
Line 1887: -
Line 1887: >
Line 1887: ID = init
Line 1887: (
Line 1887: )
Line 1887: ;
Line 1888: if
Line 1888: (
Line 1888: ID = ret
Line 1888: <
Line 1888: INTCON = 0
Line 1888: )
Line 1888: {
Line 1891: ID = mod
Line 1891: -
Line 1891: >
Line 1891: ID = state
Line 1891: =
Line 1891: ID = MODULE_STATE_GOING
Line 1891: ;
Line 1892: ID = synchronize_kernel
Line 1892: (
Line 1892: )
Line 1892: ;
Line 1893: if
Line 1893: (
Line 1893: ID = mod
Line 1893: -
Line 1893: >
Line 1893: ID = unsafe
Line 1893: )
Line 1894: ID = printk
Line 1894: (
Line 1894: ID = KERN_ERR
Line 1894: STRINGCON = "%s: module is now stuck!\n"
Line 1894: ,
Line 1895: ID = mod
Line 1895: -
Line 1895: >
Line 1895: ID = name
Line 1895: )
Line 1895: ;
Line 1896: else
Line 1896: {
Line 1897: ID = module_put
Line 1897: (
Line 1897: ID = mod
Line 1897: )
Line 1897: ;
Line 1898: ID = down
Line 1898: (
Line 1898: Unrecognized token: 38
Line 1898: ID = module_mutex
Line 1898: )
Line 1898: ;
Line 1899: ID = free_module
Line 1899: (
Line 1899: ID = mod
Line 1899: )
Line 1899: ;
Line 1900: ID = up
Line 1900: (
Line 1900: Unrecognized token: 38
Line 1900: ID = module_mutex
Line 1900: )
Line 1900: ;
Line 1901: }
Line 1902: return
Line 1902: ID = ret
Line 1902: ;
Line 1903: }
Line 1906: ID = down
Line 1906: (
Line 1906: Unrecognized token: 38
Line 1906: ID = module_mutex
Line 1906: )
Line 1906: ;
Line 1907: ID = mod
Line 1907: -
Line 1907: >
Line 1907: ID = state
Line 1907: =
Line 1907: ID = MODULE_STATE_LIVE
Line 1907: ;
Line 1909: ID = module_put
Line 1909: (
Line 1909: ID = mod
Line 1909: )
Line 1909: ;
Line 1910: ID = module_free
Line 1910: (
Line 1910: ID = mod
Line 1910: ,
Line 1910: ID = mod
Line 1910: -
Line 1910: >
Line 1910: ID = module_init
Line 1910: )
Line 1910: ;
Line 1911: ID = mod
Line 1911: -
Line 1911: >
Line 1911: ID = module_init
Line 1911: =
Line 1911: ID = NULL
Line 1911: ;
Line 1912: ID = mod
Line 1912: -
Line 1912: >
Line 1912: ID = init_size
Line 1912: =
Line 1912: INTCON = 0
Line 1912: ;
Line 1913: ID = mod
Line 1913: -
Line 1913: >
Line 1913: ID = init_text_size
Line 1913: =
Line 1913: INTCON = 0
Line 1913: ;
Line 1914: ID = up
Line 1914: (
Line 1914: Unrecognized token: 38
Line 1914: ID = module_mutex
Line 1914: )
Line 1914: ;
Line 1916: return
Line 1916: INTCON = 0
Line 1916: ;
Line 1917: }
Line 1919: ID = static
Line 1919: ID = inline
Line 1919: int
Line 1919: ID = within
Line 1919: (
Line 1919: ID = unsigned
Line 1919: ID = long
Line 1919: ID = addr
Line 1919: ,
Line 1919: void
Line 1919: *
Line 1919: ID = start
Line 1919: ,
Line 1919: ID = unsigned
Line 1919: ID = long
Line 1919: ID = size
Line 1919: )
Line 1920: {
Line 1921: return
Line 1921: (
Line 1921: (
Line 1921: void
Line 1921: *
Line 1921: )
Line 1921: ID = addr
Line 1921: >=
Line 1921: ID = start
Line 1921: &&
Line 1921: (
Line 1921: void
Line 1921: *
Line 1921: )
Line 1921: ID = addr
Line 1921: <
Line 1921: ID = start
Line 1921: +
Line 1921: ID = size
Line 1921: )
Line 1921: ;
Line 1922: }
Line 1924: Unrecognized token: 35
Line 1924: ID = ifdef
Line 1924: ID = CONFIG_KALLSYMS
Line 1925: ID = static
Line 1925: ID = const
Line 1925: char
Line 1925: *
Line 1925: ID = get_ksymbol
Line 1925: (
Line 1925: ID = struct
Line 1925: ID = module
Line 1925: *
Line 1925: ID = mod
Line 1925: ,
Line 1926: ID = unsigned
Line 1926: ID = long
Line 1926: ID = addr
Line 1926: ,
Line 1927: ID = unsigned
Line 1927: ID = long
Line 1927: *
Line 1927: ID = size
Line 1927: ,
Line 1928: ID = unsigned
Line 1928: ID = long
Line 1928: *
Line 1928: ID = offset
Line 1928: )
Line 1929: {
Line 1930: ID = unsigned
Line 1930: int
Line 1930: ID = i
Line 1930: ,
Line 1930: ID = best
Line 1930: =
Line 1930: INTCON = 0
Line 1930: ;
Line 1931: ID = unsigned
Line 1931: ID = long
Line 1931: ID = nextval
Line 1931: ;
Line 1934: if
Line 1934: (
Line 1934: ID = within
Line 1934: (
Line 1934: ID = addr
Line 1934: ,
Line 1934: ID = mod
Line 1934: -
Line 1934: >
Line 1934: ID = module_init
Line 1934: ,
Line 1934: ID = mod
Line 1934: -
Line 1934: >
Line 1934: ID = init_size
Line 1934: )
Line 1934: )
Line 1935: ID = nextval
Line 1935: =
Line 1935: (
Line 1935: ID = unsigned
Line 1935: ID = long
Line 1935: )
Line 1935: ID = mod
Line 1935: -
Line 1935: >
Line 1935: ID = module_init
Line 1935: +
Line 1935: ID = mod
Line 1935: -
Line 1935: >
Line 1935: ID = init_text_size
Line 1935: ;
Line 1936: else
Line 1937: ID = nextval
Line 1937: =
Line 1937: (
Line 1937: ID = unsigned
Line 1937: ID = long
Line 1937: )
Line 1937: ID = mod
Line 1937: -
Line 1937: >
Line 1937: ID = module_core
Line 1937: +
Line 1937: ID = mod
Line 1937: -
Line 1937: >
Line 1937: ID = core_text_size
Line 1937: ;
Line 1941: for
Line 1941: (
Line 1941: ID = i
Line 1941: =
Line 1941: INTCON = 1
Line 1941: ;
Line 1941: ID = i
Line 1941: <
Line 1941: ID = mod
Line 1941: -
Line 1941: >
Line 1941: ID = num_symtab
Line 1941: ;
Line 1941: ID = i
Line 1941: +
Line 1941: +
Line 1941: )
Line 1941: {
Line 1942: if
Line 1942: (
Line 1942: ID = mod
Line 1942: -
Line 1942: >
Line 1942: ID = symtab
Line 1942: [
Line 1942: ID = i
Line 1942: ]
Line 1942: Unrecognized token: 46
Line 1942: ID = st_shndx
Line 1942: ==
Line 1942: ID = SHN_UNDEF
Line 1942: )
Line 1943: ID = continue
Line 1943: ;
Line 1947: if
Line 1947: (
Line 1947: ID = mod
Line 1947: -
Line 1947: >
Line 1947: ID = symtab
Line 1947: [
Line 1947: ID = i
Line 1947: ]
Line 1947: Unrecognized token: 46
Line 1947: ID = st_value
Line 1947: <=
Line 1947: ID = addr
Line 1948: &&
Line 1948: ID = mod
Line 1948: -
Line 1948: >
Line 1948: ID = symtab
Line 1948: [
Line 1948: ID = i
Line 1948: ]
Line 1948: Unrecognized token: 46
Line 1948: ID = st_value
Line 1948: >
Line 1948: ID = mod
Line 1948: -
Line 1948: >
Line 1948: ID = symtab
Line 1948: [
Line 1948: ID = best
Line 1948: ]
Line 1948: Unrecognized token: 46
Line 1948: ID = st_value
Line 1949: &&
Line 1949: *
Line 1949: (
Line 1949: ID = mod
Line 1949: -
Line 1949: >
Line 1949: ID = strtab
Line 1949: +
Line 1949: ID = mod
Line 1949: -
Line 1949: >
Line 1949: ID = symtab
Line 1949: [
Line 1949: ID = i
Line 1949: ]
Line 1949: Unrecognized token: 46
Line 1949: ID = st_name
Line 1949: )
Line 1949: !=
Line 1949: CHARCON = '\0'
Line 1949: )
Line 1950: ID = best
Line 1950: =
Line 1950: ID = i
Line 1950: ;
Line 1951: if
Line 1951: (
Line 1951: ID = mod
Line 1951: -
Line 1951: >
Line 1951: ID = symtab
Line 1951: [
Line 1951: ID = i
Line 1951: ]
Line 1951: Unrecognized token: 46
Line 1951: ID = st_value
Line 1951: >
Line 1951: ID = addr
Line 1952: &&
Line 1952: ID = mod
Line 1952: -
Line 1952: >
Line 1952: ID = symtab
Line 1952: [
Line 1952: ID = i
Line 1952: ]
Line 1952: Unrecognized token: 46
Line 1952: ID = st_value
Line 1952: <
Line 1952: ID = nextval
Line 1953: &&
Line 1953: *
Line 1953: (
Line 1953: ID = mod
Line 1953: -
Line 1953: >
Line 1953: ID = strtab
Line 1953: +
Line 1953: ID = mod
Line 1953: -
Line 1953: >
Line 1953: ID = symtab
Line 1953: [
Line 1953: ID = i
Line 1953: ]
Line 1953: Unrecognized token: 46
Line 1953: ID = st_name
Line 1953: )
Line 1953: !=
Line 1953: CHARCON = '\0'
Line 1953: )
Line 1954: ID = nextval
Line 1954: =
Line 1954: ID = mod
Line 1954: -
Line 1954: >
Line 1954: ID = symtab
Line 1954: [
Line 1954: ID = i
Line 1954: ]
Line 1954: Unrecognized token: 46
Line 1954: ID = st_value
Line 1954: ;
Line 1955: }
Line 1957: if
Line 1957: (
Line 1957: !
Line 1957: ID = best
Line 1957: )
Line 1958: return
Line 1958: ID = NULL
Line 1958: ;
Line 1960: *
Line 1960: ID = size
Line 1960: =
Line 1960: ID = nextval
Line 1960: -
Line 1960: ID = mod
Line 1960: -
Line 1960: >
Line 1960: ID = symtab
Line 1960: [
Line 1960: ID = best
Line 1960: ]
Line 1960: Unrecognized token: 46
Line 1960: ID = st_value
Line 1960: ;
Line 1961: *
Line 1961: ID = offset
Line 1961: =
Line 1961: ID = addr
Line 1961: -
Line 1961: ID = mod
Line 1961: -
Line 1961: >
Line 1961: ID = symtab
Line 1961: [
Line 1961: ID = best
Line 1961: ]
Line 1961: Unrecognized token: 46
Line 1961: ID = st_value
Line 1961: ;
Line 1962: return
Line 1962: ID = mod
Line 1962: -
Line 1962: >
Line 1962: ID = strtab
Line 1962: +
Line 1962: ID = mod
Line 1962: -
Line 1962: >
Line 1962: ID = symtab
Line 1962: [
Line 1962: ID = best
Line 1962: ]
Line 1962: Unrecognized token: 46
Line 1962: ID = st_name
Line 1962: ;
Line 1963: }
Line 1968: ID = const
Line 1968: char
Line 1968: *
Line 1968: ID = module_address_lookup
Line 1968: (
Line 1968: ID = unsigned
Line 1968: ID = long
Line 1968: ID = addr
Line 1968: ,
Line 1969: ID = unsigned
Line 1969: ID = long
Line 1969: *
Line 1969: ID = size
Line 1969: ,
Line 1970: ID = unsigned
Line 1970: ID = long
Line 1970: *
Line 1970: ID = offset
Line 1970: ,
Line 1971: char
Line 1971: *
Line 1971: *
Line 1971: ID = modname
Line 1971: )
Line 1972: {
Line 1973: ID = struct
Line 1973: ID = module
Line 1973: *
Line 1973: ID = mod
Line 1973: ;
Line 1975: ID = list_for_each_entry
Line 1975: (
Line 1975: ID = mod
Line 1975: ,
Line 1975: Unrecognized token: 38
Line 1975: ID = modules
Line 1975: ,
Line 1975: ID = list
Line 1975: )
Line 1975: {
Line 1976: if
Line 1976: (
Line 1976: ID = within
Line 1976: (
Line 1976: ID = addr
Line 1976: ,
Line 1976: ID = mod
Line 1976: -
Line 1976: >
Line 1976: ID = module_init
Line 1976: ,
Line 1976: ID = mod
Line 1976: -
Line 1976: >
Line 1976: ID = init_size
Line 1976: )
Line 1977: ||
Line 1977: ID = within
Line 1977: (
Line 1977: ID = addr
Line 1977: ,
Line 1977: ID = mod
Line 1977: -
Line 1977: >
Line 1977: ID = module_core
Line 1977: ,
Line 1977: ID = mod
Line 1977: -
Line 1977: >
Line 1977: ID = core_size
Line 1977: )
Line 1977: )
Line 1977: {
Line 1978: *
Line 1978: ID = modname
Line 1978: =
Line 1978: ID = mod
Line 1978: -
Line 1978: >
Line 1978: ID = name
Line 1978: ;
Line 1979: return
Line 1979: ID = get_ksymbol
Line 1979: (
Line 1979: ID = mod
Line 1979: ,
Line 1979: ID = addr
Line 1979: ,
Line 1979: ID = size
Line 1979: ,
Line 1979: ID = offset
Line 1979: )
Line 1979: ;
Line 1980: }
Line 1981: }
Line 1982: return
Line 1982: ID = NULL
Line 1982: ;
Line 1983: }
Line 1985: ID = struct
Line 1985: ID = module
Line 1985: *
Line 1985: ID = module_get_kallsym
Line 1985: (
Line 1985: ID = unsigned
Line 1985: int
Line 1985: ID = symnum
Line 1985: ,
Line 1986: ID = unsigned
Line 1986: ID = long
Line 1986: *
Line 1986: ID = value
Line 1986: ,
Line 1987: char
Line 1987: *
Line 1987: ID = type
Line 1987: ,
Line 1988: char
Line 1988: ID = namebuf
Line 1988: [
Line 1988: INTCON = 128
Line 1988: ]
Line 1988: )
Line 1989: {
Line 1990: ID = struct
Line 1990: ID = module
Line 1990: *
Line 1990: ID = mod
Line 1990: ;
Line 1992: ID = down
Line 1992: (
Line 1992: Unrecognized token: 38
Line 1992: ID = module_mutex
Line 1992: )
Line 1992: ;
Line 1993: ID = list_for_each_entry
Line 1993: (
Line 1993: ID = mod
Line 1993: ,
Line 1993: Unrecognized token: 38
Line 1993: ID = modules
Line 1993: ,
Line 1993: ID = list
Line 1993: )
Line 1993: {
Line 1994: if
Line 1994: (
Line 1994: ID = symnum
Line 1994: <
Line 1994: ID = mod
Line 1994: -
Line 1994: >
Line 1994: ID = num_symtab
Line 1994: )
Line 1994: {
Line 1995: *
Line 1995: ID = value
Line 1995: =
Line 1995: ID = mod
Line 1995: -
Line 1995: >
Line 1995: ID = symtab
Line 1995: [
Line 1995: ID = symnum
Line 1995: ]
Line 1995: Unrecognized token: 46
Line 1995: ID = st_value
Line 1995: ;
Line 1996: *
Line 1996: ID = type
Line 1996: =
Line 1996: ID = mod
Line 1996: -
Line 1996: >
Line 1996: ID = symtab
Line 1996: [
Line 1996: ID = symnum
Line 1996: ]
Line 1996: Unrecognized token: 46
Line 1996: ID = st_info
Line 1996: ;
Line 1997: ID = strncpy
Line 1997: (
Line 1997: ID = namebuf
Line 1997: ,
Line 1998: ID = mod
Line 1998: -
Line 1998: >
Line 1998: ID = strtab
Line 1998: +
Line 1998: ID = mod
Line 1998: -
Line 1998: >
Line 1998: ID = symtab
Line 1998: [
Line 1998: ID = symnum
Line 1998: ]
Line 1998: Unrecognized token: 46
Line 1998: ID = st_name
Line 1998: ,
Line 1999: INTCON = 127
Line 1999: )
Line 1999: ;
Line 2000: ID = up
Line 2000: (
Line 2000: Unrecognized token: 38
Line 2000: ID = module_mutex
Line 2000: )
Line 2000: ;
Line 2001: return
Line 2001: ID = mod
Line 2001: ;
Line 2002: }
Line 2003: ID = symnum
Line 2003: -
Line 2003: =
Line 2003: ID = mod
Line 2003: -
Line 2003: >
Line 2003: ID = num_symtab
Line 2003: ;
Line 2004: }
Line 2005: ID = up
Line 2005: (
Line 2005: Unrecognized token: 38
Line 2005: ID = module_mutex
Line 2005: )
Line 2005: ;
Line 2006: return
Line 2006: ID = NULL
Line 2006: ;
Line 2007: }
Line 2009: ID = static
Line 2009: ID = unsigned
Line 2009: ID = long
Line 2009: ID = mod_find_symname
Line 2009: (
Line 2009: ID = struct
Line 2009: ID = module
Line 2009: *
Line 2009: ID = mod
Line 2009: ,
Line 2009: ID = const
Line 2009: char
Line 2009: *
Line 2009: ID = name
Line 2009: )
Line 2010: {
Line 2011: ID = unsigned
Line 2011: int
Line 2011: ID = i
Line 2011: ;
Line 2013: for
Line 2013: (
Line 2013: ID = i
Line 2013: =
Line 2013: INTCON = 0
Line 2013: ;
Line 2013: ID = i
Line 2013: <
Line 2013: ID = mod
Line 2013: -
Line 2013: >
Line 2013: ID = num_symtab
Line 2013: ;
Line 2013: ID = i
Line 2013: +
Line 2013: +
Line 2013: )
Line 2014: if
Line 2014: (
Line 2014: ID = strcmp
Line 2014: (
Line 2014: ID = name
Line 2014: ,
Line 2014: ID = mod
Line 2014: -
Line 2014: >
Line 2014: ID = strtab
Line 2014: +
Line 2014: ID = mod
Line 2014: -
Line 2014: >
Line 2014: ID = symtab
Line 2014: [
Line 2014: ID = i
Line 2014: ]
Line 2014: Unrecognized token: 46
Line 2014: ID = st_name
Line 2014: )
Line 2014: ==
Line 2014: INTCON = 0
Line 2014: )
Line 2015: return
Line 2015: ID = mod
Line 2015: -
Line 2015: >
Line 2015: ID = symtab
Line 2015: [
Line 2015: ID = i
Line 2015: ]
Line 2015: Unrecognized token: 46
Line 2015: ID = st_value
Line 2015: ;
Line 2016: return
Line 2016: INTCON = 0
Line 2016: ;
Line 2017: }
Line 2020: ID = unsigned
Line 2020: ID = long
Line 2020: ID = module_kallsyms_lookup_name
Line 2020: (
Line 2020: ID = const
Line 2020: char
Line 2020: *
Line 2020: ID = name
Line 2020: )
Line 2021: {
Line 2022: ID = struct
Line 2022: ID = module
Line 2022: *
Line 2022: ID = mod
Line 2022: ;
Line 2023: char
Line 2023: *
Line 2023: ID = colon
Line 2023: ;
Line 2024: ID = unsigned
Line 2024: ID = long
Line 2024: ID = ret
Line 2024: =
Line 2024: INTCON = 0
Line 2024: ;
Line 2027: if
Line 2027: (
Line 2027: (
Line 2027: ID = colon
Line 2027: =
Line 2027: ID = strchr
Line 2027: (
Line 2027: ID = name
Line 2027: ,
Line 2027: CHARCON = ':'
Line 2027: )
Line 2027: )
Line 2027: !=
Line 2027: ID = NULL
Line 2027: )
Line 2027: {
Line 2028: *
Line 2028: ID = colon
Line 2028: =
Line 2028: CHARCON = '\0'
Line 2028: ;
Line 2029: if
Line 2029: (
Line 2029: (
Line 2029: ID = mod
Line 2029: =
Line 2029: ID = find_module
Line 2029: (
Line 2029: ID = name
Line 2029: )
Line 2029: )
Line 2029: !=
Line 2029: ID = NULL
Line 2029: )
Line 2030: ID = ret
Line 2030: =
Line 2030: ID = mod_find_symname
Line 2030: (
Line 2030: ID = mod
Line 2030: ,
Line 2030: ID = colon
Line 2030: +
Line 2030: INTCON = 1
Line 2030: )
Line 2030: ;
Line 2031: *
Line 2031: ID = colon
Line 2031: =
Line 2031: CHARCON = ':'
Line 2031: ;
Line 2032: }
Line 2032: else
Line 2032: {
Line 2033: ID = list_for_each_entry
Line 2033: (
Line 2033: ID = mod
Line 2033: ,
Line 2033: Unrecognized token: 38
Line 2033: ID = modules
Line 2033: ,
Line 2033: ID = list
Line 2033: )
Line 2034: if
Line 2034: (
Line 2034: (
Line 2034: ID = ret
Line 2034: =
Line 2034: ID = mod_find_symname
Line 2034: (
Line 2034: ID = mod
Line 2034: ,
Line 2034: ID = name
Line 2034: )
Line 2034: )
Line 2034: !=
Line 2034: INTCON = 0
Line 2034: )
Line 2035: ID = break
Line 2035: ;
Line 2036: }
Line 2037: return
Line 2037: ID = ret
Line 2037: ;
Line 2038: }
Line 2039: Unrecognized token: 35
Line 2039: ID = endif
Line 2042: ID = static
Line 2042: void
Line 2042: *
Line 2042: ID = m_start
Line 2042: (
Line 2042: ID = struct
Line 2042: ID = seq_file
Line 2042: *
Line 2042: ID = m
Line 2042: ,
Line 2042: ID = loff_t
Line 2042: *
Line 2042: ID = pos
Line 2042: )
Line 2043: {
Line 2044: ID = struct
Line 2044: ID = list_head
Line 2044: *
Line 2044: ID = i
Line 2044: ;
Line 2045: ID = loff_t
Line 2045: ID = n
Line 2045: =
Line 2045: INTCON = 0
Line 2045: ;
Line 2047: ID = down
Line 2047: (
Line 2047: Unrecognized token: 38
Line 2047: ID = module_mutex
Line 2047: )
Line 2047: ;
Line 2048: ID = list_for_each
Line 2048: (
Line 2048: ID = i
Line 2048: ,
Line 2048: Unrecognized token: 38
Line 2048: ID = modules
Line 2048: )
Line 2048: {
Line 2049: if
Line 2049: (
Line 2049: ID = n
Line 2049: +
Line 2049: +
Line 2049: ==
Line 2049: *
Line 2049: ID = pos
Line 2049: )
Line 2050: ID = break
Line 2050: ;
Line 2051: }
Line 2052: if
Line 2052: (
Line 2052: ID = i
Line 2052: ==
Line 2052: Unrecognized token: 38
Line 2052: ID = modules
Line 2052: )
Line 2053: return
Line 2053: ID = NULL
Line 2053: ;
Line 2054: return
Line 2054: ID = i
Line 2054: ;
Line 2055: }
Line 2057: ID = static
Line 2057: void
Line 2057: *
Line 2057: ID = m_next
Line 2057: (
Line 2057: ID = struct
Line 2057: ID = seq_file
Line 2057: *
Line 2057: ID = m
Line 2057: ,
Line 2057: void
Line 2057: *
Line 2057: ID = p
Line 2057: ,
Line 2057: ID = loff_t
Line 2057: *
Line 2057: ID = pos
Line 2057: )
Line 2058: {
Line 2059: ID = struct
Line 2059: ID = list_head
Line 2059: *
Line 2059: ID = i
Line 2059: =
Line 2059: ID = p
Line 2059: ;
Line 2060: (
Line 2060: *
Line 2060: ID = pos
Line 2060: )
Line 2060: +
Line 2060: +
Line 2060: ;
Line 2061: if
Line 2061: (
Line 2061: ID = i
Line 2061: -
Line 2061: >
Line 2061: ID = next
Line 2061: ==
Line 2061: Unrecognized token: 38
Line 2061: ID = modules
Line 2061: )
Line 2062: return
Line 2062: ID = NULL
Line 2062: ;
Line 2063: return
Line 2063: ID = i
Line 2063: -
Line 2063: >
Line 2063: ID = next
Line 2063: ;
Line 2064: }
Line 2066: ID = static
Line 2066: void
Line 2066: ID = m_stop
Line 2066: (
Line 2066: ID = struct
Line 2066: ID = seq_file
Line 2066: *
Line 2066: ID = m
Line 2066: ,
Line 2066: void
Line 2066: *
Line 2066: ID = p
Line 2066: )
Line 2067: {
Line 2068: ID = up
Line 2068: (
Line 2068: Unrecognized token: 38
Line 2068: ID = module_mutex
Line 2068: )
Line 2068: ;
Line 2069: }
Line 2071: ID = static
Line 2071: int
Line 2071: ID = m_show
Line 2071: (
Line 2071: ID = struct
Line 2071: ID = seq_file
Line 2071: *
Line 2071: ID = m
Line 2071: ,
Line 2071: void
Line 2071: *
Line 2071: ID = p
Line 2071: )
Line 2072: {
Line 2073: ID = struct
Line 2073: ID = module
Line 2073: *
Line 2073: ID = mod
Line 2073: =
Line 2073: ID = list_entry
Line 2073: (
Line 2073: ID = p
Line 2073: ,
Line 2073: ID = struct
Line 2073: ID = module
Line 2073: ,
Line 2073: ID = list
Line 2073: )
Line 2073: ;
Line 2074: ID = seq_printf
Line 2074: (
Line 2074: ID = m
Line 2074: ,
Line 2074: STRINGCON = "%s %lu"
Line 2074: ,
Line 2075: ID = mod
Line 2075: -
Line 2075: >
Line 2075: ID = name
Line 2075: ,
Line 2075: ID = mod
Line 2075: -
Line 2075: >
Line 2075: ID = init_size
Line 2075: +
Line 2075: ID = mod
Line 2075: -
Line 2075: >
Line 2075: ID = core_size
Line 2075: )
Line 2075: ;
Line 2076: ID = print_unload_info
Line 2076: (
Line 2076: ID = m
Line 2076: ,
Line 2076: ID = mod
Line 2076: )
Line 2076: ;
Line 2079: ID = seq_printf
Line 2079: (
Line 2079: ID = m
Line 2079: ,
Line 2079: STRINGCON = " %s"
Line 2079: ,
Line 2080: ID = mod
Line 2080: -
Line 2080: >
Line 2080: ID = state
Line 2080: ==
Line 2080: ID = MODULE_STATE_GOING
Line 2080: Unrecognized token: 63
Line 2080: STRINGCON = "Unloading"
Line 2080: Unrecognized token: 58
Line 2081: ID = mod
Line 2081: -
Line 2081: >
Line 2081: ID = state
Line 2081: ==
Line 2081: ID = MODULE_STATE_COMING
Line 2081: Unrecognized token: 63
Line 2081: STRINGCON = "Loading"
Line 2081: Unrecognized token: 58
Line 2082: STRINGCON = "Live"
Line 2082: )
Line 2082: ;
Line 2084: ID = seq_printf
Line 2084: (
Line 2084: ID = m
Line 2084: ,
Line 2084: STRINGCON = " 0x%p"
Line 2084: ,
Line 2084: ID = mod
Line 2084: -
Line 2084: >
Line 2084: ID = module_core
Line 2084: )
Line 2084: ;
Line 2086: ID = seq_printf
Line 2086: (
Line 2086: ID = m
Line 2086: ,
Line 2086: STRINGCON = "\n"
Line 2086: )
Line 2086: ;
Line 2087: return
Line 2087: INTCON = 0
Line 2087: ;
Line 2088: }
Line 2095: ID = struct
Line 2095: ID = seq_operations
Line 2095: ID = modules_op
Line 2095: =
Line 2095: {
Line 2096: Unrecognized token: 46
Line 2096: ID = start
Line 2096: =
Line 2096: ID = m_start
Line 2096: ,
Line 2097: Unrecognized token: 46
Line 2097: ID = next
Line 2097: =
Line 2097: ID = m_next
Line 2097: ,
Line 2098: Unrecognized token: 46
Line 2098: ID = stop
Line 2098: =
Line 2098: ID = m_stop
Line 2098: ,
Line 2099: Unrecognized token: 46
Line 2099: ID = show
Line 2099: =
Line 2099: ID = m_show
Line 2100: }
Line 2100: ;
Line 2103: ID = const
Line 2103: ID = struct
Line 2103: ID = exception_table_entry
Line 2103: *
Line 2103: ID = search_module_extables
Line 2103: (
Line 2103: ID = unsigned
Line 2103: ID = long
Line 2103: ID = addr
Line 2103: )
Line 2104: {
Line 2105: ID = unsigned
Line 2105: ID = long
Line 2105: ID = flags
Line 2105: ;
Line 2106: ID = const
Line 2106: ID = struct
Line 2106: ID = exception_table_entry
Line 2106: *
Line 2106: ID = e
Line 2106: =
Line 2106: ID = NULL
Line 2106: ;
Line 2107: ID = struct
Line 2107: ID = module
Line 2107: *
Line 2107: ID = mod
Line 2107: ;
Line 2109: ID = spin_lock_irqsave
Line 2109: (
Line 2109: Unrecognized token: 38
Line 2109: ID = modlist_lock
Line 2109: ,
Line 2109: ID = flags
Line 2109: )
Line 2109: ;
Line 2110: ID = list_for_each_entry
Line 2110: (
Line 2110: ID = mod
Line 2110: ,
Line 2110: Unrecognized token: 38
Line 2110: ID = modules
Line 2110: ,
Line 2110: ID = list
Line 2110: )
Line 2110: {
Line 2111: if
Line 2111: (
Line 2111: ID = mod
Line 2111: -
Line 2111: >
Line 2111: ID = num_exentries
Line 2111: ==
Line 2111: INTCON = 0
Line 2111: )
Line 2112: ID = continue
Line 2112: ;
Line 2114: ID = e
Line 2114: =
Line 2114: ID = search_extable
Line 2114: (
Line 2114: ID = mod
Line 2114: -
Line 2114: >
Line 2114: ID = extable
Line 2114: ,
Line 2115: ID = mod
Line 2115: -
Line 2115: >
Line 2115: ID = extable
Line 2115: +
Line 2115: ID = mod
Line 2115: -
Line 2115: >
Line 2115: ID = num_exentries
Line 2115: -
Line 2115: INTCON = 1
Line 2115: ,
Line 2116: ID = addr
Line 2116: )
Line 2116: ;
Line 2117: if
Line 2117: (
Line 2117: ID = e
Line 2117: )
Line 2118: ID = break
Line 2118: ;
Line 2119: }
Line 2120: ID = spin_unlock_irqrestore
Line 2120: (
Line 2120: Unrecognized token: 38
Line 2120: ID = modlist_lock
Line 2120: ,
Line 2120: ID = flags
Line 2120: )
Line 2120: ;
Line 2124: return
Line 2124: ID = e
Line 2124: ;
Line 2125: }
Line 2128: ID = struct
Line 2128: ID = module
Line 2128: *
Line 2128: Unrecognized token: 95
Line 2128: Unrecognized token: 95
Line 2128: ID = module_text_address
Line 2128: (
Line 2128: ID = unsigned
Line 2128: ID = long
Line 2128: ID = addr
Line 2128: )
Line 2129: {
Line 2130: ID = struct
Line 2130: ID = module
Line 2130: *
Line 2130: ID = mod
Line 2130: ;
Line 2132: ID = list_for_each_entry
Line 2132: (
Line 2132: ID = mod
Line 2132: ,
Line 2132: Unrecognized token: 38
Line 2132: ID = modules
Line 2132: ,
Line 2132: ID = list
Line 2132: )
Line 2133: if
Line 2133: (
Line 2133: ID = within
Line 2133: (
Line 2133: ID = addr
Line 2133: ,
Line 2133: ID = mod
Line 2133: -
Line 2133: >
Line 2133: ID = module_init
Line 2133: ,
Line 2133: ID = mod
Line 2133: -
Line 2133: >
Line 2133: ID = init_text_size
Line 2133: )
Line 2134: ||
Line 2134: ID = within
Line 2134: (
Line 2134: ID = addr
Line 2134: ,
Line 2134: ID = mod
Line 2134: -
Line 2134: >
Line 2134: ID = module_core
Line 2134: ,
Line 2134: ID = mod
Line 2134: -
Line 2134: >
Line 2134: ID = core_text_size
Line 2134: )
Line 2134: )
Line 2135: return
Line 2135: ID = mod
Line 2135: ;
Line 2136: return
Line 2136: ID = NULL
Line 2136: ;
Line 2137: }
Line 2139: ID = struct
Line 2139: ID = module
Line 2139: *
Line 2139: ID = module_text_address
Line 2139: (
Line 2139: ID = unsigned
Line 2139: ID = long
Line 2139: ID = addr
Line 2139: )
Line 2140: {
Line 2141: ID = struct
Line 2141: ID = module
Line 2141: *
Line 2141: ID = mod
Line 2141: ;
Line 2142: ID = unsigned
Line 2142: ID = long
Line 2142: ID = flags
Line 2142: ;
Line 2144: ID = spin_lock_irqsave
Line 2144: (
Line 2144: Unrecognized token: 38
Line 2144: ID = modlist_lock
Line 2144: ,
Line 2144: ID = flags
Line 2144: )
Line 2144: ;
Line 2145: ID = mod
Line 2145: =
Line 2145: Unrecognized token: 95
Line 2145: Unrecognized token: 95
Line 2145: ID = module_text_address
Line 2145: (
Line 2145: ID = addr
Line 2145: )
Line 2145: ;
Line 2146: ID = spin_unlock_irqrestore
Line 2146: (
Line 2146: Unrecognized token: 38
Line 2146: ID = modlist_lock
Line 2146: ,
Line 2146: ID = flags
Line 2146: )
Line 2146: ;
Line 2148: return
Line 2148: ID = mod
Line 2148: ;
Line 2149: }
Line 2152: void
Line 2152: ID = print_modules
Line 2152: (
Line 2152: void
Line 2152: )
Line 2153: {
Line 2154: ID = struct
Line 2154: ID = module
Line 2154: *
Line 2154: ID = mod
Line 2154: ;
Line 2156: ID = printk
Line 2156: (
Line 2156: STRINGCON = "Modules linked in:"
Line 2156: )
Line 2156: ;
Line 2157: ID = list_for_each_entry
Line 2157: (
Line 2157: ID = mod
Line 2157: ,
Line 2157: Unrecognized token: 38
Line 2157: ID = modules
Line 2157: ,
Line 2157: ID = list
Line 2157: )
Line 2158: ID = printk
Line 2158: (
Line 2158: STRINGCON = " %s"
Line 2158: ,
Line 2158: ID = mod
Line 2158: -
Line 2158: >
Line 2158: ID = name
Line 2158: )
Line 2158: ;
Line 2159: ID = printk
Line 2159: (
Line 2159: STRINGCON = "\n"
Line 2159: )
Line 2159: ;
Line 2160: }
Line 2162: Unrecognized token: 35
Line 2162: ID = ifdef
Line 2162: ID = CONFIG_MODVERSIONS
Line 2164: void
Line 2164: ID = struct_module
Line 2164: (
Line 2164: ID = struct
Line 2164: ID = module
Line 2164: *
Line 2164: ID = mod
Line 2164: )
Line 2164: {
Line 2164: return
Line 2164: ;
Line 2164: }
Line 2165: ID = EXPORT_SYMBOL
Line 2165: (
Line 2165: ID = struct_module
Line 2165: )
Line 2165: ;
Line 2166: Unrecognized token: 35
Line 2166: ID = endif
Line 2168: ID = static
Line 2168: int
Line 2168: Unrecognized token: 95
Line 2168: Unrecognized token: 95
Line 2168: ID = init
Line 2168: ID = modules_init
Line 2168: (
Line 2168: void
Line 2168: )
Line 2169: {
Line 2170: return
Line 2170: ID = subsystem_register
Line 2170: (
Line 2170: Unrecognized token: 38
Line 2170: ID = module_subsys
Line 2170: )
Line 2170: ;
Line 2171: }
Line 2172: Unrecognized token: 95
Line 2172: Unrecognized token: 95
Line 2172: ID = initcall
Line 2172: (
Line 2172: ID = modules_init
Line 2172: )
Line 2172: ;
Line 2173: -EOF-

Line 15: Unrecognized token: 35
Line 15: ID = include
Line 15: <
Line 15: ID = linux
Line 15: /
Line 15: ID = kernel
Line 15: Unrecognized token: 46
Line 15: ID = h
Line 15: >
Line 16: Unrecognized token: 35
Line 16: ID = include
Line 16: <
Line 16: ID = linux
Line 16: /
Line 16: ID = slab
Line 16: Unrecognized token: 46
Line 16: ID = h
Line 16: >
Line 17: Unrecognized token: 35
Line 17: ID = include
Line 17: <
Line 17: ID = asm
Line 17: /
Line 17: ID = atomic
Line 17: Unrecognized token: 46
Line 17: ID = h
Line 17: >
Line 18: Unrecognized token: 35
Line 18: ID = include
Line 18: <
Line 18: ID = linux
Line 18: /
Line 18: ID = fs
Line 18: Unrecognized token: 46
Line 18: ID = h
Line 18: >
Line 19: Unrecognized token: 35
Line 19: ID = include
Line 19: <
Line 19: ID = linux
Line 19: /
Line 19: ID = sched
Line 19: Unrecognized token: 46
Line 19: ID = h
Line 19: >
Line 20: Unrecognized token: 35
Line 20: ID = include
Line 20: <
Line 20: ID = linux
Line 20: /
Line 20: ID = posix_acl
Line 20: Unrecognized token: 46
Line 20: ID = h
Line 20: >
Line 21: Unrecognized token: 35
Line 21: ID = include
Line 21: <
Line 21: ID = linux
Line 21: /
Line 21: ID = module
Line 21: Unrecognized token: 46
Line 21: ID = h
Line 21: >
Line 23: Unrecognized token: 35
Line 23: ID = include
Line 23: <
Line 23: ID = linux
Line 23: /
Line 23: ID = errno
Line 23: Unrecognized token: 46
Line 23: ID = h
Line 23: >
Line 25: ID = EXPORT_SYMBOL
Line 25: (
Line 25: ID = posix_acl_alloc
Line 25: )
Line 25: ;
Line 26: ID = EXPORT_SYMBOL
Line 26: (
Line 26: ID = posix_acl_clone
Line 26: )
Line 26: ;
Line 27: ID = EXPORT_SYMBOL
Line 27: (
Line 27: ID = posix_acl_valid
Line 27: )
Line 27: ;
Line 28: ID = EXPORT_SYMBOL
Line 28: (
Line 28: ID = posix_acl_equiv_mode
Line 28: )
Line 28: ;
Line 29: ID = EXPORT_SYMBOL
Line 29: (
Line 29: ID = posix_acl_from_mode
Line 29: )
Line 29: ;
Line 30: ID = EXPORT_SYMBOL
Line 30: (
Line 30: ID = posix_acl_create_masq
Line 30: )
Line 30: ;
Line 31: ID = EXPORT_SYMBOL
Line 31: (
Line 31: ID = posix_acl_chmod_masq
Line 31: )
Line 31: ;
Line 32: ID = EXPORT_SYMBOL
Line 32: (
Line 32: ID = posix_acl_masq_nfs_mode
Line 32: )
Line 32: ;
Line 33: ID = EXPORT_SYMBOL
Line 33: (
Line 33: ID = posix_acl_permission
Line 33: )
Line 33: ;
Line 38: ID = struct
Line 38: ID = posix_acl
Line 38: *
Line 39: ID = posix_acl_alloc
Line 39: (
Line 39: int
Line 39: ID = count
Line 39: ,
Line 39: int
Line 39: ID = flags
Line 39: )
Line 40: {
Line 41: ID = const
Line 41: ID = size_t
Line 41: ID = size
Line 41: =
Line 41: ID = sizeof
Line 41: (
Line 41: ID = struct
Line 41: ID = posix_acl
Line 41: )
Line 41: +
Line 42: ID = count
Line 42: *
Line 42: ID = sizeof
Line 42: (
Line 42: ID = struct
Line 42: ID = posix_acl_entry
Line 42: )
Line 42: ;
Line 43: ID = struct
Line 43: ID = posix_acl
Line 43: *
Line 43: ID = acl
Line 43: =
Line 43: ID = kmalloc
Line 43: (
Line 43: ID = size
Line 43: ,
Line 43: ID = flags
Line 43: )
Line 43: ;
Line 44: if
Line 44: (
Line 44: ID = acl
Line 44: )
Line 44: {
Line 45: ID = atomic_set
Line 45: (
Line 45: Unrecognized token: 38
Line 45: ID = acl
Line 45: -
Line 45: >
Line 45: ID = a_refcount
Line 45: ,
Line 45: INTCON = 1
Line 45: )
Line 45: ;
Line 46: ID = acl
Line 46: -
Line 46: >
Line 46: ID = a_count
Line 46: =
Line 46: ID = count
Line 46: ;
Line 47: }
Line 48: return
Line 48: ID = acl
Line 48: ;
Line 49: }
Line 54: ID = struct
Line 54: ID = posix_acl
Line 54: *
Line 55: ID = posix_acl_clone
Line 55: (
Line 55: ID = const
Line 55: ID = struct
Line 55: ID = posix_acl
Line 55: *
Line 55: ID = acl
Line 55: ,
Line 55: int
Line 55: ID = flags
Line 55: )
Line 56: {
Line 57: ID = struct
Line 57: ID = posix_acl
Line 57: *
Line 57: ID = clone
Line 57: =
Line 57: ID = NULL
Line 57: ;
Line 59: if
Line 59: (
Line 59: ID = acl
Line 59: )
Line 59: {
Line 60: int
Line 60: ID = size
Line 60: =
Line 60: ID = sizeof
Line 60: (
Line 60: ID = struct
Line 60: ID = posix_acl
Line 60: )
Line 60: +
Line 60: ID = acl
Line 60: -
Line 60: >
Line 60: ID = a_count
Line 60: *
Line 61: ID = sizeof
Line 61: (
Line 61: ID = struct
Line 61: ID = posix_acl_entry
Line 61: )
Line 61: ;
Line 62: ID = clone
Line 62: =
Line 62: ID = kmalloc
Line 62: (
Line 62: ID = size
Line 62: ,
Line 62: ID = flags
Line 62: )
Line 62: ;
Line 63: if
Line 63: (
Line 63: ID = clone
Line 63: )
Line 63: {
Line 64: ID = memcpy
Line 64: (
Line 64: ID = clone
Line 64: ,
Line 64: ID = acl
Line 64: ,
Line 64: ID = size
Line 64: )
Line 64: ;
Line 65: ID = atomic_set
Line 65: (
Line 65: Unrecognized token: 38
Line 65: ID = clone
Line 65: -
Line 65: >
Line 65: ID = a_refcount
Line 65: ,
Line 65: INTCON = 1
Line 65: )
Line 65: ;
Line 66: }
Line 67: }
Line 68: return
Line 68: ID = clone
Line 68: ;
Line 69: }
Line 74: int
Line 75: ID = posix_acl_valid
Line 75: (
Line 75: ID = const
Line 75: ID = struct
Line 75: ID = posix_acl
Line 75: *
Line 75: ID = acl
Line 75: )
Line 76: {
Line 77: ID = const
Line 77: ID = struct
Line 77: ID = posix_acl_entry
Line 77: *
Line 77: ID = pa
Line 77: ,
Line 77: *
Line 77: ID = pe
Line 77: ;
Line 78: int
Line 78: ID = state
Line 78: =
Line 78: ID = ACL_USER_OBJ
Line 78: ;
Line 79: ID = unsigned
Line 79: int
Line 79: ID = id
Line 79: =
Line 79: INTCON = 0
Line 79: ;
Line 80: int
Line 80: ID = needs_mask
Line 80: =
Line 80: INTCON = 0
Line 80: ;
Line 82: ID = FOREACH_ACL_ENTRY
Line 82: (
Line 82: ID = pa
Line 82: ,
Line 82: ID = acl
Line 82: ,
Line 82: ID = pe
Line 82: )
Line 82: {
Line 83: if
Line 83: (
Line 83: ID = pa
Line 83: -
Line 83: >
Line 83: ID = e_perm
Line 83: Unrecognized token: 38
Line 83: Unrecognized token: 126
Line 83: (
Line 83: ID = ACL_READ
Line 83: Unrecognized token: 124
Line 83: ID = ACL_WRITE
Line 83: Unrecognized token: 124
Line 83: ID = ACL_EXECUTE
Line 83: )
Line 83: )
Line 84: return
Line 84: -
Line 84: ID = EINVAL
Line 84: ;
Line 85: ID = switch
Line 85: (
Line 85: ID = pa
Line 85: -
Line 85: >
Line 85: ID = e_tag
Line 85: )
Line 85: {
Line 86: ID = case
Line 86: ID = ACL_USER_OBJ
Line 86: Unrecognized token: 58
Line 87: if
Line 87: (
Line 87: ID = state
Line 87: ==
Line 87: ID = ACL_USER_OBJ
Line 87: )
Line 87: {
Line 88: ID = id
Line 88: =
Line 88: INTCON = 0
Line 88: ;
Line 89: ID = state
Line 89: =
Line 89: ID = ACL_USER
Line 89: ;
Line 90: ID = break
Line 90: ;
Line 91: }
Line 92: return
Line 92: -
Line 92: ID = EINVAL
Line 92: ;
Line 94: ID = case
Line 94: ID = ACL_USER
Line 94: Unrecognized token: 58
Line 95: if
Line 95: (
Line 95: ID = state
Line 95: !=
Line 95: ID = ACL_USER
Line 95: )
Line 96: return
Line 96: -
Line 96: ID = EINVAL
Line 96: ;
Line 97: if
Line 97: (
Line 97: ID = pa
Line 97: -
Line 97: >
Line 97: ID = e_id
Line 97: ==
Line 97: ID = ACL_UNDEFINED_ID
Line 97: ||
Line 98: ID = pa
Line 98: -
Line 98: >
Line 98: ID = e_id
Line 98: <
Line 98: ID = id
Line 98: )
Line 99: return
Line 99: -
Line 99: ID = EINVAL
Line 99: ;
Line 100: ID = id
Line 100: =
Line 100: ID = pa
Line 100: -
Line 100: >
Line 100: ID = e_id
Line 100: +
Line 100: INTCON = 1
Line 100: ;
Line 101: ID = needs_mask
Line 101: =
Line 101: INTCON = 1
Line 101: ;
Line 102: ID = break
Line 102: ;
Line 104: ID = case
Line 104: ID = ACL_GROUP_OBJ
Line 104: Unrecognized token: 58
Line 105: if
Line 105: (
Line 105: ID = state
Line 105: ==
Line 105: ID = ACL_USER
Line 105: )
Line 105: {
Line 106: ID = id
Line 106: =
Line 106: INTCON = 0
Line 106: ;
Line 107: ID = state
Line 107: =
Line 107: ID = ACL_GROUP
Line 107: ;
Line 108: ID = break
Line 108: ;
Line 109: }
Line 110: return
Line 110: -
Line 110: ID = EINVAL
Line 110: ;
Line 112: ID = case
Line 112: ID = ACL_GROUP
Line 112: Unrecognized token: 58
Line 113: if
Line 113: (
Line 113: ID = state
Line 113: !=
Line 113: ID = ACL_GROUP
Line 113: )
Line 114: return
Line 114: -
Line 114: ID = EINVAL
Line 114: ;
Line 115: if
Line 115: (
Line 115: ID = pa
Line 115: -
Line 115: >
Line 115: ID = e_id
Line 115: ==
Line 115: ID = ACL_UNDEFINED_ID
Line 115: ||
Line 116: ID = pa
Line 116: -
Line 116: >
Line 116: ID = e_id
Line 116: <
Line 116: ID = id
Line 116: )
Line 117: return
Line 117: -
Line 117: ID = EINVAL
Line 117: ;
Line 118: ID = id
Line 118: =
Line 118: ID = pa
Line 118: -
Line 118: >
Line 118: ID = e_id
Line 118: +
Line 118: INTCON = 1
Line 118: ;
Line 119: ID = needs_mask
Line 119: =
Line 119: INTCON = 1
Line 119: ;
Line 120: ID = break
Line 120: ;
Line 122: ID = case
Line 122: ID = ACL_MASK
Line 122: Unrecognized token: 58
Line 123: if
Line 123: (
Line 123: ID = state
Line 123: !=
Line 123: ID = ACL_GROUP
Line 123: )
Line 124: return
Line 124: -
Line 124: ID = EINVAL
Line 124: ;
Line 125: ID = state
Line 125: =
Line 125: ID = ACL_OTHER
Line 125: ;
Line 126: ID = break
Line 126: ;
Line 128: ID = case
Line 128: ID = ACL_OTHER
Line 128: Unrecognized token: 58
Line 129: if
Line 129: (
Line 129: ID = state
Line 129: ==
Line 129: ID = ACL_OTHER
Line 129: ||
Line 130: (
Line 130: ID = state
Line 130: ==
Line 130: ID = ACL_GROUP
Line 130: &&
Line 130: !
Line 130: ID = needs_mask
Line 130: )
Line 130: )
Line 130: {
Line 131: ID = state
Line 131: =
Line 131: INTCON = 0
Line 131: ;
Line 132: ID = break
Line 132: ;
Line 133: }
Line 134: return
Line 134: -
Line 134: ID = EINVAL
Line 134: ;
Line 136: ID = default
Line 136: Unrecognized token: 58
Line 137: return
Line 137: -
Line 137: ID = EINVAL
Line 137: ;
Line 138: }
Line 139: }
Line 140: if
Line 140: (
Line 140: ID = state
Line 140: ==
Line 140: INTCON = 0
Line 140: )
Line 141: return
Line 141: INTCON = 0
Line 141: ;
Line 142: return
Line 142: -
Line 142: ID = EINVAL
Line 142: ;
Line 143: }
Line 149: int
Line 150: ID = posix_acl_equiv_mode
Line 150: (
Line 150: ID = const
Line 150: ID = struct
Line 150: ID = posix_acl
Line 150: *
Line 150: ID = acl
Line 150: ,
Line 150: ID = mode_t
Line 150: *
Line 150: ID = mode_p
Line 150: )
Line 151: {
Line 152: ID = const
Line 152: ID = struct
Line 152: ID = posix_acl_entry
Line 152: *
Line 152: ID = pa
Line 152: ,
Line 152: *
Line 152: ID = pe
Line 152: ;
Line 153: ID = mode_t
Line 153: ID = mode
Line 153: =
Line 153: INTCON = 0
Line 153: ;
Line 154: int
Line 154: ID = not_equiv
Line 154: =
Line 154: INTCON = 0
Line 154: ;
Line 156: ID = FOREACH_ACL_ENTRY
Line 156: (
Line 156: ID = pa
Line 156: ,
Line 156: ID = acl
Line 156: ,
Line 156: ID = pe
Line 156: )
Line 156: {
Line 157: ID = switch
Line 157: (
Line 157: ID = pa
Line 157: -
Line 157: >
Line 157: ID = e_tag
Line 157: )
Line 157: {
Line 158: ID = case
Line 158: ID = ACL_USER_OBJ
Line 158: Unrecognized token: 58
Line 159: ID = mode
Line 159: Unrecognized token: 124
Line 159: =
Line 159: (
Line 159: ID = pa
Line 159: -
Line 159: >
Line 159: ID = e_perm
Line 159: Unrecognized token: 38
Line 159: ID = S_IRWXO
Line 159: )
Line 159: <
Line 159: <
Line 159: INTCON = 6
Line 159: ;
Line 160: ID = break
Line 160: ;
Line 161: ID = case
Line 161: ID = ACL_GROUP_OBJ
Line 161: Unrecognized token: 58
Line 162: ID = mode
Line 162: Unrecognized token: 124
Line 162: =
Line 162: (
Line 162: ID = pa
Line 162: -
Line 162: >
Line 162: ID = e_perm
Line 162: Unrecognized token: 38
Line 162: ID = S_IRWXO
Line 162: )
Line 162: <
Line 162: <
Line 162: INTCON = 3
Line 162: ;
Line 163: ID = break
Line 163: ;
Line 164: ID = case
Line 164: ID = ACL_OTHER
Line 164: Unrecognized token: 58
Line 165: ID = mode
Line 165: Unrecognized token: 124
Line 165: =
Line 165: ID = pa
Line 165: -
Line 165: >
Line 165: ID = e_perm
Line 165: Unrecognized token: 38
Line 165: ID = S_IRWXO
Line 165: ;
Line 166: ID = break
Line 166: ;
Line 167: ID = case
Line 167: ID = ACL_MASK
Line 167: Unrecognized token: 58
Line 168: ID = mode
Line 168: =
Line 168: (
Line 168: ID = mode
Line 168: Unrecognized token: 38
Line 168: Unrecognized token: 126
Line 168: ID = S_IRWXG
Line 168: )
Line 168: Unrecognized token: 124
Line 169: (
Line 169: (
Line 169: ID = pa
Line 169: -
Line 169: >
Line 169: ID = e_perm
Line 169: Unrecognized token: 38
Line 169: ID = S_IRWXO
Line 169: )
Line 169: <
Line 169: <
Line 169: INTCON = 3
Line 169: )
Line 169: ;
Line 170: ID = not_equiv
Line 170: =
Line 170: INTCON = 1
Line 170: ;
Line 171: ID = break
Line 171: ;
Line 172: ID = case
Line 172: ID = ACL_USER
Line 172: Unrecognized token: 58
Line 173: ID = case
Line 173: ID = ACL_GROUP
Line 173: Unrecognized token: 58
Line 174: ID = not_equiv
Line 174: =
Line 174: INTCON = 1
Line 174: ;
Line 175: ID = break
Line 175: ;
Line 176: ID = default
Line 176: Unrecognized token: 58
Line 177: return
Line 177: -
Line 177: ID = EINVAL
Line 177: ;
Line 178: }
Line 179: }
Line 180: if
Line 180: (
Line 180: ID = mode_p
Line 180: )
Line 181: *
Line 181: ID = mode_p
Line 181: =
Line 181: (
Line 181: *
Line 181: ID = mode_p
Line 181: Unrecognized token: 38
Line 181: Unrecognized token: 126
Line 181: ID = S_IRWXUGO
Line 181: )
Line 181: Unrecognized token: 124
Line 181: ID = mode
Line 181: ;
Line 182: return
Line 182: ID = not_equiv
Line 182: ;
Line 183: }
Line 188: ID = struct
Line 188: ID = posix_acl
Line 188: *
Line 189: ID = posix_acl_from_mode
Line 189: (
Line 189: ID = mode_t
Line 189: ID = mode
Line 189: ,
Line 189: int
Line 189: ID = flags
Line 189: )
Line 190: {
Line 191: ID = struct
Line 191: ID = posix_acl
Line 191: *
Line 191: ID = acl
Line 191: =
Line 191: ID = posix_acl_alloc
Line 191: (
Line 191: INTCON = 3
Line 191: ,
Line 191: ID = flags
Line 191: )
Line 191: ;
Line 192: if
Line 192: (
Line 192: !
Line 192: ID = acl
Line 192: )
Line 193: return
Line 193: ID = ERR_PTR
Line 193: (
Line 193: -
Line 193: ID = ENOMEM
Line 193: )
Line 193: ;
Line 195: ID = acl
Line 195: -
Line 195: >
Line 195: ID = a_entries
Line 195: [
Line 195: INTCON = 0
Line 195: ]
Line 195: Unrecognized token: 46
Line 195: ID = e_tag
Line 195: =
Line 195: ID = ACL_USER_OBJ
Line 195: ;
Line 196: ID = acl
Line 196: -
Line 196: >
Line 196: ID = a_entries
Line 196: [
Line 196: INTCON = 0
Line 196: ]
Line 196: Unrecognized token: 46
Line 196: ID = e_id
Line 196: =
Line 196: ID = ACL_UNDEFINED_ID
Line 196: ;
Line 197: ID = acl
Line 197: -
Line 197: >
Line 197: ID = a_entries
Line 197: [
Line 197: INTCON = 0
Line 197: ]
Line 197: Unrecognized token: 46
Line 197: ID = e_perm
Line 197: =
Line 197: (
Line 197: ID = mode
Line 197: Unrecognized token: 38
Line 197: ID = S_IRWXU
Line 197: )
Line 197: >
Line 197: >
Line 197: INTCON = 6
Line 197: ;
Line 199: ID = acl
Line 199: -
Line 199: >
Line 199: ID = a_entries
Line 199: [
Line 199: INTCON = 1
Line 199: ]
Line 199: Unrecognized token: 46
Line 199: ID = e_tag
Line 199: =
Line 199: ID = ACL_GROUP_OBJ
Line 199: ;
Line 200: ID = acl
Line 200: -
Line 200: >
Line 200: ID = a_entries
Line 200: [
Line 200: INTCON = 1
Line 200: ]
Line 200: Unrecognized token: 46
Line 200: ID = e_id
Line 200: =
Line 200: ID = ACL_UNDEFINED_ID
Line 200: ;
Line 201: ID = acl
Line 201: -
Line 201: >
Line 201: ID = a_entries
Line 201: [
Line 201: INTCON = 1
Line 201: ]
Line 201: Unrecognized token: 46
Line 201: ID = e_perm
Line 201: =
Line 201: (
Line 201: ID = mode
Line 201: Unrecognized token: 38
Line 201: ID = S_IRWXG
Line 201: )
Line 201: >
Line 201: >
Line 201: INTCON = 3
Line 201: ;
Line 203: ID = acl
Line 203: -
Line 203: >
Line 203: ID = a_entries
Line 203: [
Line 203: INTCON = 2
Line 203: ]
Line 203: Unrecognized token: 46
Line 203: ID = e_tag
Line 203: =
Line 203: ID = ACL_OTHER
Line 203: ;
Line 204: ID = acl
Line 204: -
Line 204: >
Line 204: ID = a_entries
Line 204: [
Line 204: INTCON = 2
Line 204: ]
Line 204: Unrecognized token: 46
Line 204: ID = e_id
Line 204: =
Line 204: ID = ACL_UNDEFINED_ID
Line 204: ;
Line 205: ID = acl
Line 205: -
Line 205: >
Line 205: ID = a_entries
Line 205: [
Line 205: INTCON = 2
Line 205: ]
Line 205: Unrecognized token: 46
Line 205: ID = e_perm
Line 205: =
Line 205: (
Line 205: ID = mode
Line 205: Unrecognized token: 38
Line 205: ID = S_IRWXO
Line 205: )
Line 205: ;
Line 206: return
Line 206: ID = acl
Line 206: ;
Line 207: }
Line 213: int
Line 214: ID = posix_acl_permission
Line 214: (
Line 214: ID = struct
Line 214: ID = inode
Line 214: *
Line 214: ID = inode
Line 214: ,
Line 214: ID = const
Line 214: ID = struct
Line 214: ID = posix_acl
Line 214: *
Line 214: ID = acl
Line 214: ,
Line 214: int
Line 214: ID = want
Line 214: )
Line 215: {
Line 216: ID = const
Line 216: ID = struct
Line 216: ID = posix_acl_entry
Line 216: *
Line 216: ID = pa
Line 216: ,
Line 216: *
Line 216: ID = pe
Line 216: ,
Line 216: *
Line 216: ID = mask_obj
Line 216: ;
Line 217: int
Line 217: ID = found
Line 217: =
Line 217: INTCON = 0
Line 217: ;
Line 219: ID = FOREACH_ACL_ENTRY
Line 219: (
Line 219: ID = pa
Line 219: ,
Line 219: ID = acl
Line 219: ,
Line 219: ID = pe
Line 219: )
Line 219: {
Line 220: ID = switch
Line 220: (
Line 220: ID = pa
Line 220: -
Line 220: >
Line 220: ID = e_tag
Line 220: )
Line 220: {
Line 221: ID = case
Line 221: ID = ACL_USER_OBJ
Line 221: Unrecognized token: 58
Line 223: if
Line 223: (
Line 223: ID = inode
Line 223: -
Line 223: >
Line 223: ID = i_uid
Line 223: ==
Line 223: ID = current
Line 223: -
Line 223: >
Line 223: ID = fsuid
Line 223: )
Line 224: ID = goto
Line 224: ID = check_perm
Line 224: ;
Line 225: ID = break
Line 225: ;
Line 226: ID = case
Line 226: ID = ACL_USER
Line 226: Unrecognized token: 58
Line 227: if
Line 227: (
Line 227: ID = pa
Line 227: -
Line 227: >
Line 227: ID = e_id
Line 227: ==
Line 227: ID = current
Line 227: -
Line 227: >
Line 227: ID = fsuid
Line 227: )
Line 228: ID = goto
Line 228: ID = mask
Line 228: ;
Line 229: ID = break
Line 229: ;
Line 230: ID = case
Line 230: ID = ACL_GROUP_OBJ
Line 230: Unrecognized token: 58
Line 231: if
Line 231: (
Line 231: ID = in_group_p
Line 231: (
Line 231: ID = inode
Line 231: -
Line 231: >
Line 231: ID = i_gid
Line 231: )
Line 231: )
Line 231: {
Line 232: ID = found
Line 232: =
Line 232: INTCON = 1
Line 232: ;
Line 233: if
Line 233: (
Line 233: (
Line 233: ID = pa
Line 233: -
Line 233: >
Line 233: ID = e_perm
Line 233: Unrecognized token: 38
Line 233: ID = want
Line 233: )
Line 233: ==
Line 233: ID = want
Line 233: )
Line 234: ID = goto
Line 234: ID = mask
Line 234: ;
Line 235: }
Line 236: ID = break
Line 236: ;
Line 237: ID = case
Line 237: ID = ACL_GROUP
Line 237: Unrecognized token: 58
Line 238: if
Line 238: (
Line 238: ID = in_group_p
Line 238: (
Line 238: ID = pa
Line 238: -
Line 238: >
Line 238: ID = e_id
Line 238: )
Line 238: )
Line 238: {
Line 239: ID = found
Line 239: =
Line 239: INTCON = 1
Line 239: ;
Line 240: if
Line 240: (
Line 240: (
Line 240: ID = pa
Line 240: -
Line 240: >
Line 240: ID = e_perm
Line 240: Unrecognized token: 38
Line 240: ID = want
Line 240: )
Line 240: ==
Line 240: ID = want
Line 240: )
Line 241: ID = goto
Line 241: ID = mask
Line 241: ;
Line 242: }
Line 243: ID = break
Line 243: ;
Line 244: ID = case
Line 244: ID = ACL_MASK
Line 244: Unrecognized token: 58
Line 245: ID = break
Line 245: ;
Line 246: ID = case
Line 246: ID = ACL_OTHER
Line 246: Unrecognized token: 58
Line 247: if
Line 247: (
Line 247: ID = found
Line 247: )
Line 248: return
Line 248: -
Line 248: ID = EACCES
Line 248: ;
Line 249: else
Line 250: ID = goto
Line 250: ID = check_perm
Line 250: ;
Line 251: ID = default
Line 251: Unrecognized token: 58
Line 252: return
Line 252: -
Line 252: ID = EIO
Line 252: ;
Line 253: }
Line 254: }
Line 255: return
Line 255: -
Line 255: ID = EIO
Line 255: ;
Line 257: ID = mask
Line 257: Unrecognized token: 58
Line 258: for
Line 258: (
Line 258: ID = mask_obj
Line 258: =
Line 258: ID = pa
Line 258: +
Line 258: INTCON = 1
Line 258: ;
Line 258: ID = mask_obj
Line 258: !=
Line 258: ID = pe
Line 258: ;
Line 258: ID = mask_obj
Line 258: +
Line 258: +
Line 258: )
Line 258: {
Line 259: if
Line 259: (
Line 259: ID = mask_obj
Line 259: -
Line 259: >
Line 259: ID = e_tag
Line 259: ==
Line 259: ID = ACL_MASK
Line 259: )
Line 259: {
Line 260: if
Line 260: (
Line 260: (
Line 260: ID = pa
Line 260: -
Line 260: >
Line 260: ID = e_perm
Line 260: Unrecognized token: 38
Line 260: ID = mask_obj
Line 260: -
Line 260: >
Line 260: ID = e_perm
Line 260: Unrecognized token: 38
Line 260: ID = want
Line 260: )
Line 260: ==
Line 260: ID = want
Line 260: )
Line 261: return
Line 261: INTCON = 0
Line 261: ;
Line 262: return
Line 262: -
Line 262: ID = EACCES
Line 262: ;
Line 263: }
Line 264: }
Line 266: ID = check_perm
Line 266: Unrecognized token: 58
Line 267: if
Line 267: (
Line 267: (
Line 267: ID = pa
Line 267: -
Line 267: >
Line 267: ID = e_perm
Line 267: Unrecognized token: 38
Line 267: ID = want
Line 267: )
Line 267: ==
Line 267: ID = want
Line 267: )
Line 268: return
Line 268: INTCON = 0
Line 268: ;
Line 269: return
Line 269: -
Line 269: ID = EACCES
Line 269: ;
Line 270: }
Line 280: int
Line 281: ID = posix_acl_create_masq
Line 281: (
Line 281: ID = struct
Line 281: ID = posix_acl
Line 281: *
Line 281: ID = acl
Line 281: ,
Line 281: ID = mode_t
Line 281: *
Line 281: ID = mode_p
Line 281: )
Line 282: {
Line 283: ID = struct
Line 283: ID = posix_acl_entry
Line 283: *
Line 283: ID = pa
Line 283: ,
Line 283: *
Line 283: ID = pe
Line 283: ;
Line 284: ID = struct
Line 284: ID = posix_acl_entry
Line 284: *
Line 284: ID = group_obj
Line 284: =
Line 284: ID = NULL
Line 284: ,
Line 284: *
Line 284: ID = mask_obj
Line 284: =
Line 284: ID = NULL
Line 284: ;
Line 285: ID = mode_t
Line 285: ID = mode
Line 285: =
Line 285: *
Line 285: ID = mode_p
Line 285: ;
Line 286: int
Line 286: ID = not_equiv
Line 286: =
Line 286: INTCON = 0
Line 286: ;
Line 290: ID = FOREACH_ACL_ENTRY
Line 290: (
Line 290: ID = pa
Line 290: ,
Line 290: ID = acl
Line 290: ,
Line 290: ID = pe
Line 290: )
Line 290: {
Line 291: ID = switch
Line 291: (
Line 291: ID = pa
Line 291: -
Line 291: >
Line 291: ID = e_tag
Line 291: )
Line 291: {
Line 292: ID = case
Line 292: ID = ACL_USER_OBJ
Line 292: Unrecognized token: 58
Line 293: ID = pa
Line 293: -
Line 293: >
Line 293: ID = e_perm
Line 293: Unrecognized token: 38
Line 293: =
Line 293: (
Line 293: ID = mode
Line 293: >
Line 293: >
Line 293: INTCON = 6
Line 293: )
Line 293: Unrecognized token: 124
Line 293: Unrecognized token: 126
Line 293: ID = S_IRWXO
Line 293: ;
Line 294: ID = mode
Line 294: Unrecognized token: 38
Line 294: =
Line 294: (
Line 294: ID = pa
Line 294: -
Line 294: >
Line 294: ID = e_perm
Line 294: <
Line 294: <
Line 294: INTCON = 6
Line 294: )
Line 294: Unrecognized token: 124
Line 294: Unrecognized token: 126
Line 294: ID = S_IRWXU
Line 294: ;
Line 295: ID = break
Line 295: ;
Line 297: ID = case
Line 297: ID = ACL_USER
Line 297: Unrecognized token: 58
Line 298: ID = case
Line 298: ID = ACL_GROUP
Line 298: Unrecognized token: 58
Line 299: ID = not_equiv
Line 299: =
Line 299: INTCON = 1
Line 299: ;
Line 300: ID = break
Line 300: ;
Line 302: ID = case
Line 302: ID = ACL_GROUP_OBJ
Line 302: Unrecognized token: 58
Line 303: ID = group_obj
Line 303: =
Line 303: ID = pa
Line 303: ;
Line 304: ID = break
Line 304: ;
Line 306: ID = case
Line 306: ID = ACL_OTHER
Line 306: Unrecognized token: 58
Line 307: ID = pa
Line 307: -
Line 307: >
Line 307: ID = e_perm
Line 307: Unrecognized token: 38
Line 307: =
Line 307: ID = mode
Line 307: Unrecognized token: 124
Line 307: Unrecognized token: 126
Line 307: ID = S_IRWXO
Line 307: ;
Line 308: ID = mode
Line 308: Unrecognized token: 38
Line 308: =
Line 308: ID = pa
Line 308: -
Line 308: >
Line 308: ID = e_perm
Line 308: Unrecognized token: 124
Line 308: Unrecognized token: 126
Line 308: ID = S_IRWXO
Line 308: ;
Line 309: ID = break
Line 309: ;
Line 311: ID = case
Line 311: ID = ACL_MASK
Line 311: Unrecognized token: 58
Line 312: ID = mask_obj
Line 312: =
Line 312: ID = pa
Line 312: ;
Line 313: ID = not_equiv
Line 313: =
Line 313: INTCON = 1
Line 313: ;
Line 314: ID = break
Line 314: ;
Line 316: ID = default
Line 316: Unrecognized token: 58
Line 317: return
Line 317: -
Line 317: ID = EIO
Line 317: ;
Line 318: }
Line 319: }
Line 321: if
Line 321: (
Line 321: ID = mask_obj
Line 321: )
Line 321: {
Line 322: ID = mask_obj
Line 322: -
Line 322: >
Line 322: ID = e_perm
Line 322: Unrecognized token: 38
Line 322: =
Line 322: (
Line 322: ID = mode
Line 322: >
Line 322: >
Line 322: INTCON = 3
Line 322: )
Line 322: Unrecognized token: 124
Line 322: Unrecognized token: 126
Line 322: ID = S_IRWXO
Line 322: ;
Line 323: ID = mode
Line 323: Unrecognized token: 38
Line 323: =
Line 323: (
Line 323: ID = mask_obj
Line 323: -
Line 323: >
Line 323: ID = e_perm
Line 323: <
Line 323: <
Line 323: INTCON = 3
Line 323: )
Line 323: Unrecognized token: 124
Line 323: Unrecognized token: 126
Line 323: ID = S_IRWXG
Line 323: ;
Line 324: }
Line 324: else
Line 324: {
Line 325: if
Line 325: (
Line 325: !
Line 325: ID = group_obj
Line 325: )
Line 326: return
Line 326: -
Line 326: ID = EIO
Line 326: ;
Line 327: ID = group_obj
Line 327: -
Line 327: >
Line 327: ID = e_perm
Line 327: Unrecognized token: 38
Line 327: =
Line 327: (
Line 327: ID = mode
Line 327: >
Line 327: >
Line 327: INTCON = 3
Line 327: )
Line 327: Unrecognized token: 124
Line 327: Unrecognized token: 126
Line 327: ID = S_IRWXO
Line 327: ;
Line 328: ID = mode
Line 328: Unrecognized token: 38
Line 328: =
Line 328: (
Line 328: ID = group_obj
Line 328: -
Line 328: >
Line 328: ID = e_perm
Line 328: <
Line 328: <
Line 328: INTCON = 3
Line 328: )
Line 328: Unrecognized token: 124
Line 328: Unrecognized token: 126
Line 328: ID = S_IRWXG
Line 328: ;
Line 329: }
Line 331: *
Line 331: ID = mode_p
Line 331: =
Line 331: (
Line 331: *
Line 331: ID = mode_p
Line 331: Unrecognized token: 38
Line 331: Unrecognized token: 126
Line 331: ID = S_IRWXUGO
Line 331: )
Line 331: Unrecognized token: 124
Line 331: ID = mode
Line 331: ;
Line 332: return
Line 332: ID = not_equiv
Line 332: ;
Line 333: }
Line 338: int
Line 339: ID = posix_acl_chmod_masq
Line 339: (
Line 339: ID = struct
Line 339: ID = posix_acl
Line 339: *
Line 339: ID = acl
Line 339: ,
Line 339: ID = mode_t
Line 339: ID = mode
Line 339: )
Line 340: {
Line 341: ID = struct
Line 341: ID = posix_acl_entry
Line 341: *
Line 341: ID = group_obj
Line 341: =
Line 341: ID = NULL
Line 341: ,
Line 341: *
Line 341: ID = mask_obj
Line 341: =
Line 341: ID = NULL
Line 341: ;
Line 342: ID = struct
Line 342: ID = posix_acl_entry
Line 342: *
Line 342: ID = pa
Line 342: ,
Line 342: *
Line 342: ID = pe
Line 342: ;
Line 346: ID = FOREACH_ACL_ENTRY
Line 346: (
Line 346: ID = pa
Line 346: ,
Line 346: ID = acl
Line 346: ,
Line 346: ID = pe
Line 346: )
Line 346: {
Line 347: ID = switch
Line 347: (
Line 347: ID = pa
Line 347: -
Line 347: >
Line 347: ID = e_tag
Line 347: )
Line 347: {
Line 348: ID = case
Line 348: ID = ACL_USER_OBJ
Line 348: Unrecognized token: 58
Line 349: ID = pa
Line 349: -
Line 349: >
Line 349: ID = e_perm
Line 349: =
Line 349: (
Line 349: ID = mode
Line 349: Unrecognized token: 38
Line 349: ID = S_IRWXU
Line 349: )
Line 349: >
Line 349: >
Line 349: INTCON = 6
Line 349: ;
Line 350: ID = break
Line 350: ;
Line 352: ID = case
Line 352: ID = ACL_USER
Line 352: Unrecognized token: 58
Line 353: ID = case
Line 353: ID = ACL_GROUP
Line 353: Unrecognized token: 58
Line 354: ID = break
Line 354: ;
Line 356: ID = case
Line 356: ID = ACL_GROUP_OBJ
Line 356: Unrecognized token: 58
Line 357: ID = group_obj
Line 357: =
Line 357: ID = pa
Line 357: ;
Line 358: ID = break
Line 358: ;
Line 360: ID = case
Line 360: ID = ACL_MASK
Line 360: Unrecognized token: 58
Line 361: ID = mask_obj
Line 361: =
Line 361: ID = pa
Line 361: ;
Line 362: ID = break
Line 362: ;
Line 364: ID = case
Line 364: ID = ACL_OTHER
Line 364: Unrecognized token: 58
Line 365: ID = pa
Line 365: -
Line 365: >
Line 365: ID = e_perm
Line 365: =
Line 365: (
Line 365: ID = mode
Line 365: Unrecognized token: 38
Line 365: ID = S_IRWXO
Line 365: )
Line 365: ;
Line 366: ID = break
Line 366: ;
Line 368: ID = default
Line 368: Unrecognized token: 58
Line 369: return
Line 369: -
Line 369: ID = EIO
Line 369: ;
Line 370: }
Line 371: }
Line 373: if
Line 373: (
Line 373: ID = mask_obj
Line 373: )
Line 373: {
Line 374: ID = mask_obj
Line 374: -
Line 374: >
Line 374: ID = e_perm
Line 374: =
Line 374: (
Line 374: ID = mode
Line 374: Unrecognized token: 38
Line 374: ID = S_IRWXG
Line 374: )
Line 374: >
Line 374: >
Line 374: INTCON = 3
Line 374: ;
Line 375: }
Line 375: else
Line 375: {
Line 376: if
Line 376: (
Line 376: !
Line 376: ID = group_obj
Line 376: )
Line 377: return
Line 377: -
Line 377: ID = EIO
Line 377: ;
Line 378: ID = group_obj
Line 378: -
Line 378: >
Line 378: ID = e_perm
Line 378: =
Line 378: (
Line 378: ID = mode
Line 378: Unrecognized token: 38
Line 378: ID = S_IRWXG
Line 378: )
Line 378: >
Line 378: >
Line 378: INTCON = 3
Line 378: ;
Line 379: }
Line 381: return
Line 381: INTCON = 0
Line 381: ;
Line 382: }
Line 398: int
Line 399: ID = posix_acl_masq_nfs_mode
Line 399: (
Line 399: ID = struct
Line 399: ID = posix_acl
Line 399: *
Line 399: ID = acl
Line 399: ,
Line 399: ID = mode_t
Line 399: *
Line 399: ID = mode_p
Line 399: )
Line 400: {
Line 401: ID = struct
Line 401: ID = posix_acl_entry
Line 401: *
Line 401: ID = pa
Line 401: ,
Line 401: *
Line 401: ID = pe
Line 401: ;
Line 401: int
Line 401: ID = min_perm
Line 401: =
Line 401: ID = S_IRWXO
Line 401: ;
Line 403: ID = FOREACH_ACL_ENTRY
Line 403: (
Line 403: ID = pa
Line 403: ,
Line 403: ID = acl
Line 403: ,
Line 403: ID = pe
Line 403: )
Line 403: {
Line 404: ID = switch
Line 404: (
Line 404: ID = pa
Line 404: -
Line 404: >
Line 404: ID = e_tag
Line 404: )
Line 404: {
Line 405: ID = case
Line 405: ID = ACL_USER_OBJ
Line 405: Unrecognized token: 58
Line 406: ID = break
Line 406: ;
Line 408: ID = case
Line 408: ID = ACL_USER
Line 408: Unrecognized token: 58
Line 409: ID = case
Line 409: ID = ACL_GROUP_OBJ
Line 409: Unrecognized token: 58
Line 410: ID = case
Line 410: ID = ACL_GROUP
Line 410: Unrecognized token: 58
Line 411: ID = case
Line 411: ID = ACL_MASK
Line 411: Unrecognized token: 58
Line 412: ID = case
Line 412: ID = ACL_OTHER
Line 412: Unrecognized token: 58
Line 413: ID = min_perm
Line 413: Unrecognized token: 38
Line 413: =
Line 413: ID = pa
Line 413: -
Line 413: >
Line 413: ID = e_perm
Line 413: ;
Line 414: ID = break
Line 414: ;
Line 416: ID = default
Line 416: Unrecognized token: 58
Line 417: return
Line 417: -
Line 417: ID = EIO
Line 417: ;
Line 418: }
Line 419: }
Line 420: *
Line 420: ID = mode_p
Line 420: =
Line 420: (
Line 420: *
Line 420: ID = mode_p
Line 420: Unrecognized token: 38
Line 420: Unrecognized token: 126
Line 420: (
Line 420: ID = S_IRWXG
Line 420: Unrecognized token: 124
Line 420: ID = S_IRWXO
Line 420: )
Line 420: )
Line 420: Unrecognized token: 124
Line 420: (
Line 420: ID = min_perm
Line 420: <
Line 420: <
Line 420: INTCON = 3
Line 420: )
Line 420: Unrecognized token: 124
Line 420: ID = min_perm
Line 420: ;
Line 422: return
Line 422: INTCON = 0
Line 422: ;
Line 423: }
Line 424: -EOF-

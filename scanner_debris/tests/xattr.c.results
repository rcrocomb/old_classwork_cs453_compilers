Line 9: Unrecognized token: 35
Line 9: ID = include
Line 9: <
Line 9: ID = linux
Line 9: /
Line 9: ID = fs
Line 9: Unrecognized token: 46
Line 9: ID = h
Line 9: >
Line 10: Unrecognized token: 35
Line 10: ID = include
Line 10: <
Line 10: ID = linux
Line 10: /
Line 10: ID = slab
Line 10: Unrecognized token: 46
Line 10: ID = h
Line 10: >
Line 11: Unrecognized token: 35
Line 11: ID = include
Line 11: <
Line 11: ID = linux
Line 11: /
Line 11: ID = smp_lock
Line 11: Unrecognized token: 46
Line 11: ID = h
Line 11: >
Line 12: Unrecognized token: 35
Line 12: ID = include
Line 12: <
Line 12: ID = linux
Line 12: /
Line 12: ID = file
Line 12: Unrecognized token: 46
Line 12: ID = h
Line 12: >
Line 13: Unrecognized token: 35
Line 13: ID = include
Line 13: <
Line 13: ID = linux
Line 13: /
Line 13: ID = xattr
Line 13: Unrecognized token: 46
Line 13: ID = h
Line 13: >
Line 14: Unrecognized token: 35
Line 14: ID = include
Line 14: <
Line 14: ID = linux
Line 14: /
Line 14: ID = namei
Line 14: Unrecognized token: 46
Line 14: ID = h
Line 14: >
Line 15: Unrecognized token: 35
Line 15: ID = include
Line 15: <
Line 15: ID = linux
Line 15: /
Line 15: ID = security
Line 15: Unrecognized token: 46
Line 15: ID = h
Line 15: >
Line 16: Unrecognized token: 35
Line 16: ID = include
Line 16: <
Line 16: ID = asm
Line 16: /
Line 16: ID = uaccess
Line 16: Unrecognized token: 46
Line 16: ID = h
Line 16: >
Line 21: ID = static
Line 21: ID = long
Line 22: ID = setxattr
Line 22: (
Line 22: ID = struct
Line 22: ID = dentry
Line 22: *
Line 22: ID = d
Line 22: ,
Line 22: char
Line 22: Unrecognized token: 95
Line 22: Unrecognized token: 95
Line 22: ID = user
Line 22: *
Line 22: ID = name
Line 22: ,
Line 22: void
Line 22: Unrecognized token: 95
Line 22: Unrecognized token: 95
Line 22: ID = user
Line 22: *
Line 22: ID = value
Line 22: ,
Line 23: ID = size_t
Line 23: ID = size
Line 23: ,
Line 23: int
Line 23: ID = flags
Line 23: )
Line 24: {
Line 25: int
Line 25: ID = error
Line 25: ;
Line 26: void
Line 26: *
Line 26: ID = kvalue
Line 26: =
Line 26: ID = NULL
Line 26: ;
Line 27: char
Line 27: ID = kname
Line 27: [
Line 27: ID = XATTR_NAME_MAX
Line 27: +
Line 27: INTCON = 1
Line 27: ]
Line 27: ;
Line 29: if
Line 29: (
Line 29: ID = flags
Line 29: Unrecognized token: 38
Line 29: Unrecognized token: 126
Line 29: (
Line 29: ID = XATTR_CREATE
Line 29: Unrecognized token: 124
Line 29: ID = XATTR_REPLACE
Line 29: )
Line 29: )
Line 30: return
Line 30: -
Line 30: ID = EINVAL
Line 30: ;
Line 32: ID = error
Line 32: =
Line 32: ID = strncpy_from_user
Line 32: (
Line 32: ID = kname
Line 32: ,
Line 32: ID = name
Line 32: ,
Line 32: ID = sizeof
Line 32: (
Line 32: ID = kname
Line 32: )
Line 32: )
Line 32: ;
Line 33: if
Line 33: (
Line 33: ID = error
Line 33: ==
Line 33: INTCON = 0
Line 33: ||
Line 33: ID = error
Line 33: ==
Line 33: ID = sizeof
Line 33: (
Line 33: ID = kname
Line 33: )
Line 33: )
Line 34: ID = error
Line 34: =
Line 34: -
Line 34: ID = ERANGE
Line 34: ;
Line 35: if
Line 35: (
Line 35: ID = error
Line 35: <
Line 35: INTCON = 0
Line 35: )
Line 36: return
Line 36: ID = error
Line 36: ;
Line 38: if
Line 38: (
Line 38: ID = size
Line 38: )
Line 38: {
Line 39: if
Line 39: (
Line 39: ID = size
Line 39: >
Line 39: ID = XATTR_SIZE_MAX
Line 39: )
Line 40: return
Line 40: -
Line 40: ID = E2BIG
Line 40: ;
Line 41: ID = kvalue
Line 41: =
Line 41: ID = kmalloc
Line 41: (
Line 41: ID = size
Line 41: ,
Line 41: ID = GFP_KERNEL
Line 41: )
Line 41: ;
Line 42: if
Line 42: (
Line 42: !
Line 42: ID = kvalue
Line 42: )
Line 43: return
Line 43: -
Line 43: ID = ENOMEM
Line 43: ;
Line 44: if
Line 44: (
Line 44: ID = copy_from_user
Line 44: (
Line 44: ID = kvalue
Line 44: ,
Line 44: ID = value
Line 44: ,
Line 44: ID = size
Line 44: )
Line 44: )
Line 44: {
Line 45: ID = kfree
Line 45: (
Line 45: ID = kvalue
Line 45: )
Line 45: ;
Line 46: return
Line 46: -
Line 46: ID = EFAULT
Line 46: ;
Line 47: }
Line 48: }
Line 50: ID = error
Line 50: =
Line 50: -
Line 50: ID = EOPNOTSUPP
Line 50: ;
Line 51: if
Line 51: (
Line 51: ID = d
Line 51: -
Line 51: >
Line 51: ID = d_inode
Line 51: -
Line 51: >
Line 51: ID = i_op
Line 51: &&
Line 51: ID = d
Line 51: -
Line 51: >
Line 51: ID = d_inode
Line 51: -
Line 51: >
Line 51: ID = i_op
Line 51: -
Line 51: >
Line 51: ID = setxattr
Line 51: )
Line 51: {
Line 52: ID = down
Line 52: (
Line 52: Unrecognized token: 38
Line 52: ID = d
Line 52: -
Line 52: >
Line 52: ID = d_inode
Line 52: -
Line 52: >
Line 52: ID = i_sem
Line 52: )
Line 52: ;
Line 53: ID = error
Line 53: =
Line 53: ID = security_inode_setxattr
Line 53: (
Line 53: ID = d
Line 53: ,
Line 53: ID = kname
Line 53: ,
Line 53: ID = kvalue
Line 53: ,
Line 53: ID = size
Line 53: ,
Line 53: ID = flags
Line 53: )
Line 53: ;
Line 54: if
Line 54: (
Line 54: ID = error
Line 54: )
Line 55: ID = goto
Line 55: ID = out
Line 55: ;
Line 56: ID = error
Line 56: =
Line 56: ID = d
Line 56: -
Line 56: >
Line 56: ID = d_inode
Line 56: -
Line 56: >
Line 56: ID = i_op
Line 56: -
Line 56: >
Line 56: ID = setxattr
Line 56: (
Line 56: ID = d
Line 56: ,
Line 56: ID = kname
Line 56: ,
Line 56: ID = kvalue
Line 56: ,
Line 56: ID = size
Line 56: ,
Line 56: ID = flags
Line 56: )
Line 56: ;
Line 57: if
Line 57: (
Line 57: !
Line 57: ID = error
Line 57: )
Line 58: ID = security_inode_post_setxattr
Line 58: (
Line 58: ID = d
Line 58: ,
Line 58: ID = kname
Line 58: ,
Line 58: ID = kvalue
Line 58: ,
Line 58: ID = size
Line 58: ,
Line 58: ID = flags
Line 58: )
Line 58: ;
Line 59: ID = out
Line 59: Unrecognized token: 58
Line 60: ID = up
Line 60: (
Line 60: Unrecognized token: 38
Line 60: ID = d
Line 60: -
Line 60: >
Line 60: ID = d_inode
Line 60: -
Line 60: >
Line 60: ID = i_sem
Line 60: )
Line 60: ;
Line 61: }
Line 62: if
Line 62: (
Line 62: ID = kvalue
Line 62: )
Line 63: ID = kfree
Line 63: (
Line 63: ID = kvalue
Line 63: )
Line 63: ;
Line 64: return
Line 64: ID = error
Line 64: ;
Line 65: }
Line 67: ID = asmlinkage
Line 67: ID = long
Line 68: ID = sys_setxattr
Line 68: (
Line 68: char
Line 68: Unrecognized token: 95
Line 68: Unrecognized token: 95
Line 68: ID = user
Line 68: *
Line 68: ID = path
Line 68: ,
Line 68: char
Line 68: Unrecognized token: 95
Line 68: Unrecognized token: 95
Line 68: ID = user
Line 68: *
Line 68: ID = name
Line 68: ,
Line 68: void
Line 68: Unrecognized token: 95
Line 68: Unrecognized token: 95
Line 68: ID = user
Line 68: *
Line 68: ID = value
Line 68: ,
Line 69: ID = size_t
Line 69: ID = size
Line 69: ,
Line 69: int
Line 69: ID = flags
Line 69: )
Line 70: {
Line 71: ID = struct
Line 71: ID = nameidata
Line 71: ID = nd
Line 71: ;
Line 72: int
Line 72: ID = error
Line 72: ;
Line 74: ID = error
Line 74: =
Line 74: ID = user_path_walk
Line 74: (
Line 74: ID = path
Line 74: ,
Line 74: Unrecognized token: 38
Line 74: ID = nd
Line 74: )
Line 74: ;
Line 75: if
Line 75: (
Line 75: ID = error
Line 75: )
Line 76: return
Line 76: ID = error
Line 76: ;
Line 77: ID = error
Line 77: =
Line 77: ID = setxattr
Line 77: (
Line 77: ID = nd
Line 77: Unrecognized token: 46
Line 77: ID = dentry
Line 77: ,
Line 77: ID = name
Line 77: ,
Line 77: ID = value
Line 77: ,
Line 77: ID = size
Line 77: ,
Line 77: ID = flags
Line 77: )
Line 77: ;
Line 78: ID = path_release
Line 78: (
Line 78: Unrecognized token: 38
Line 78: ID = nd
Line 78: )
Line 78: ;
Line 79: return
Line 79: ID = error
Line 79: ;
Line 80: }
Line 82: ID = asmlinkage
Line 82: ID = long
Line 83: ID = sys_lsetxattr
Line 83: (
Line 83: char
Line 83: Unrecognized token: 95
Line 83: Unrecognized token: 95
Line 83: ID = user
Line 83: *
Line 83: ID = path
Line 83: ,
Line 83: char
Line 83: Unrecognized token: 95
Line 83: Unrecognized token: 95
Line 83: ID = user
Line 83: *
Line 83: ID = name
Line 83: ,
Line 83: void
Line 83: Unrecognized token: 95
Line 83: Unrecognized token: 95
Line 83: ID = user
Line 83: *
Line 83: ID = value
Line 83: ,
Line 84: ID = size_t
Line 84: ID = size
Line 84: ,
Line 84: int
Line 84: ID = flags
Line 84: )
Line 85: {
Line 86: ID = struct
Line 86: ID = nameidata
Line 86: ID = nd
Line 86: ;
Line 87: int
Line 87: ID = error
Line 87: ;
Line 89: ID = error
Line 89: =
Line 89: ID = user_path_walk_link
Line 89: (
Line 89: ID = path
Line 89: ,
Line 89: Unrecognized token: 38
Line 89: ID = nd
Line 89: )
Line 89: ;
Line 90: if
Line 90: (
Line 90: ID = error
Line 90: )
Line 91: return
Line 91: ID = error
Line 91: ;
Line 92: ID = error
Line 92: =
Line 92: ID = setxattr
Line 92: (
Line 92: ID = nd
Line 92: Unrecognized token: 46
Line 92: ID = dentry
Line 92: ,
Line 92: ID = name
Line 92: ,
Line 92: ID = value
Line 92: ,
Line 92: ID = size
Line 92: ,
Line 92: ID = flags
Line 92: )
Line 92: ;
Line 93: ID = path_release
Line 93: (
Line 93: Unrecognized token: 38
Line 93: ID = nd
Line 93: )
Line 93: ;
Line 94: return
Line 94: ID = error
Line 94: ;
Line 95: }
Line 97: ID = asmlinkage
Line 97: ID = long
Line 98: ID = sys_fsetxattr
Line 98: (
Line 98: int
Line 98: ID = fd
Line 98: ,
Line 98: char
Line 98: Unrecognized token: 95
Line 98: Unrecognized token: 95
Line 98: ID = user
Line 98: *
Line 98: ID = name
Line 98: ,
Line 98: void
Line 98: Unrecognized token: 95
Line 98: Unrecognized token: 95
Line 98: ID = user
Line 98: *
Line 98: ID = value
Line 98: ,
Line 99: ID = size_t
Line 99: ID = size
Line 99: ,
Line 99: int
Line 99: ID = flags
Line 99: )
Line 100: {
Line 101: ID = struct
Line 101: ID = file
Line 101: *
Line 101: ID = f
Line 101: ;
Line 102: int
Line 102: ID = error
Line 102: =
Line 102: -
Line 102: ID = EBADF
Line 102: ;
Line 104: ID = f
Line 104: =
Line 104: ID = fget
Line 104: (
Line 104: ID = fd
Line 104: )
Line 104: ;
Line 105: if
Line 105: (
Line 105: !
Line 105: ID = f
Line 105: )
Line 106: return
Line 106: ID = error
Line 106: ;
Line 107: ID = error
Line 107: =
Line 107: ID = setxattr
Line 107: (
Line 107: ID = f
Line 107: -
Line 107: >
Line 107: ID = f_dentry
Line 107: ,
Line 107: ID = name
Line 107: ,
Line 107: ID = value
Line 107: ,
Line 107: ID = size
Line 107: ,
Line 107: ID = flags
Line 107: )
Line 107: ;
Line 108: ID = fput
Line 108: (
Line 108: ID = f
Line 108: )
Line 108: ;
Line 109: return
Line 109: ID = error
Line 109: ;
Line 110: }
Line 115: ID = static
Line 115: ID = ssize_t
Line 116: ID = getxattr
Line 116: (
Line 116: ID = struct
Line 116: ID = dentry
Line 116: *
Line 116: ID = d
Line 116: ,
Line 116: char
Line 116: Unrecognized token: 95
Line 116: Unrecognized token: 95
Line 116: ID = user
Line 116: *
Line 116: ID = name
Line 116: ,
Line 116: void
Line 116: Unrecognized token: 95
Line 116: Unrecognized token: 95
Line 116: ID = user
Line 116: *
Line 116: ID = value
Line 116: ,
Line 116: ID = size_t
Line 116: ID = size
Line 116: )
Line 117: {
Line 118: ID = ssize_t
Line 118: ID = error
Line 118: ;
Line 119: void
Line 119: *
Line 119: ID = kvalue
Line 119: =
Line 119: ID = NULL
Line 119: ;
Line 120: char
Line 120: ID = kname
Line 120: [
Line 120: ID = XATTR_NAME_MAX
Line 120: +
Line 120: INTCON = 1
Line 120: ]
Line 120: ;
Line 122: ID = error
Line 122: =
Line 122: ID = strncpy_from_user
Line 122: (
Line 122: ID = kname
Line 122: ,
Line 122: ID = name
Line 122: ,
Line 122: ID = sizeof
Line 122: (
Line 122: ID = kname
Line 122: )
Line 122: )
Line 122: ;
Line 123: if
Line 123: (
Line 123: ID = error
Line 123: ==
Line 123: INTCON = 0
Line 123: ||
Line 123: ID = error
Line 123: ==
Line 123: ID = sizeof
Line 123: (
Line 123: ID = kname
Line 123: )
Line 123: )
Line 124: ID = error
Line 124: =
Line 124: -
Line 124: ID = ERANGE
Line 124: ;
Line 125: if
Line 125: (
Line 125: ID = error
Line 125: <
Line 125: INTCON = 0
Line 125: )
Line 126: return
Line 126: ID = error
Line 126: ;
Line 128: if
Line 128: (
Line 128: ID = size
Line 128: )
Line 128: {
Line 129: if
Line 129: (
Line 129: ID = size
Line 129: >
Line 129: ID = XATTR_SIZE_MAX
Line 129: )
Line 130: ID = size
Line 130: =
Line 130: ID = XATTR_SIZE_MAX
Line 130: ;
Line 131: ID = kvalue
Line 131: =
Line 131: ID = kmalloc
Line 131: (
Line 131: ID = size
Line 131: ,
Line 131: ID = GFP_KERNEL
Line 131: )
Line 131: ;
Line 132: if
Line 132: (
Line 132: !
Line 132: ID = kvalue
Line 132: )
Line 133: return
Line 133: -
Line 133: ID = ENOMEM
Line 133: ;
Line 134: }
Line 136: ID = error
Line 136: =
Line 136: -
Line 136: ID = EOPNOTSUPP
Line 136: ;
Line 137: if
Line 137: (
Line 137: ID = d
Line 137: -
Line 137: >
Line 137: ID = d_inode
Line 137: -
Line 137: >
Line 137: ID = i_op
Line 137: &&
Line 137: ID = d
Line 137: -
Line 137: >
Line 137: ID = d_inode
Line 137: -
Line 137: >
Line 137: ID = i_op
Line 137: -
Line 137: >
Line 137: ID = getxattr
Line 137: )
Line 137: {
Line 138: ID = error
Line 138: =
Line 138: ID = security_inode_getxattr
Line 138: (
Line 138: ID = d
Line 138: ,
Line 138: ID = kname
Line 138: )
Line 138: ;
Line 139: if
Line 139: (
Line 139: ID = error
Line 139: )
Line 140: ID = goto
Line 140: ID = out
Line 140: ;
Line 141: ID = error
Line 141: =
Line 141: ID = d
Line 141: -
Line 141: >
Line 141: ID = d_inode
Line 141: -
Line 141: >
Line 141: ID = i_op
Line 141: -
Line 141: >
Line 141: ID = getxattr
Line 141: (
Line 141: ID = d
Line 141: ,
Line 141: ID = kname
Line 141: ,
Line 141: ID = kvalue
Line 141: ,
Line 141: ID = size
Line 141: )
Line 141: ;
Line 142: if
Line 142: (
Line 142: ID = error
Line 142: >
Line 142: INTCON = 0
Line 142: )
Line 142: {
Line 143: if
Line 143: (
Line 143: ID = size
Line 143: &&
Line 143: ID = copy_to_user
Line 143: (
Line 143: ID = value
Line 143: ,
Line 143: ID = kvalue
Line 143: ,
Line 143: ID = error
Line 143: )
Line 143: )
Line 144: ID = error
Line 144: =
Line 144: -
Line 144: ID = EFAULT
Line 144: ;
Line 145: }
Line 145: else
Line 145: if
Line 145: (
Line 145: ID = error
Line 145: ==
Line 145: -
Line 145: ID = ERANGE
Line 145: &&
Line 145: ID = size
Line 145: >=
Line 145: ID = XATTR_SIZE_MAX
Line 145: )
Line 145: {
Line 148: ID = error
Line 148: =
Line 148: -
Line 148: ID = E2BIG
Line 148: ;
Line 149: }
Line 150: }
Line 151: ID = out
Line 151: Unrecognized token: 58
Line 152: if
Line 152: (
Line 152: ID = kvalue
Line 152: )
Line 153: ID = kfree
Line 153: (
Line 153: ID = kvalue
Line 153: )
Line 153: ;
Line 154: return
Line 154: ID = error
Line 154: ;
Line 155: }
Line 157: ID = asmlinkage
Line 157: ID = ssize_t
Line 158: ID = sys_getxattr
Line 158: (
Line 158: char
Line 158: Unrecognized token: 95
Line 158: Unrecognized token: 95
Line 158: ID = user
Line 158: *
Line 158: ID = path
Line 158: ,
Line 158: char
Line 158: Unrecognized token: 95
Line 158: Unrecognized token: 95
Line 158: ID = user
Line 158: *
Line 158: ID = name
Line 158: ,
Line 158: void
Line 158: Unrecognized token: 95
Line 158: Unrecognized token: 95
Line 158: ID = user
Line 158: *
Line 158: ID = value
Line 158: ,
Line 159: ID = size_t
Line 159: ID = size
Line 159: )
Line 160: {
Line 161: ID = struct
Line 161: ID = nameidata
Line 161: ID = nd
Line 161: ;
Line 162: ID = ssize_t
Line 162: ID = error
Line 162: ;
Line 164: ID = error
Line 164: =
Line 164: ID = user_path_walk
Line 164: (
Line 164: ID = path
Line 164: ,
Line 164: Unrecognized token: 38
Line 164: ID = nd
Line 164: )
Line 164: ;
Line 165: if
Line 165: (
Line 165: ID = error
Line 165: )
Line 166: return
Line 166: ID = error
Line 166: ;
Line 167: ID = error
Line 167: =
Line 167: ID = getxattr
Line 167: (
Line 167: ID = nd
Line 167: Unrecognized token: 46
Line 167: ID = dentry
Line 167: ,
Line 167: ID = name
Line 167: ,
Line 167: ID = value
Line 167: ,
Line 167: ID = size
Line 167: )
Line 167: ;
Line 168: ID = path_release
Line 168: (
Line 168: Unrecognized token: 38
Line 168: ID = nd
Line 168: )
Line 168: ;
Line 169: return
Line 169: ID = error
Line 169: ;
Line 170: }
Line 172: ID = asmlinkage
Line 172: ID = ssize_t
Line 173: ID = sys_lgetxattr
Line 173: (
Line 173: char
Line 173: Unrecognized token: 95
Line 173: Unrecognized token: 95
Line 173: ID = user
Line 173: *
Line 173: ID = path
Line 173: ,
Line 173: char
Line 173: Unrecognized token: 95
Line 173: Unrecognized token: 95
Line 173: ID = user
Line 173: *
Line 173: ID = name
Line 173: ,
Line 173: void
Line 173: Unrecognized token: 95
Line 173: Unrecognized token: 95
Line 173: ID = user
Line 173: *
Line 173: ID = value
Line 173: ,
Line 174: ID = size_t
Line 174: ID = size
Line 174: )
Line 175: {
Line 176: ID = struct
Line 176: ID = nameidata
Line 176: ID = nd
Line 176: ;
Line 177: ID = ssize_t
Line 177: ID = error
Line 177: ;
Line 179: ID = error
Line 179: =
Line 179: ID = user_path_walk_link
Line 179: (
Line 179: ID = path
Line 179: ,
Line 179: Unrecognized token: 38
Line 179: ID = nd
Line 179: )
Line 179: ;
Line 180: if
Line 180: (
Line 180: ID = error
Line 180: )
Line 181: return
Line 181: ID = error
Line 181: ;
Line 182: ID = error
Line 182: =
Line 182: ID = getxattr
Line 182: (
Line 182: ID = nd
Line 182: Unrecognized token: 46
Line 182: ID = dentry
Line 182: ,
Line 182: ID = name
Line 182: ,
Line 182: ID = value
Line 182: ,
Line 182: ID = size
Line 182: )
Line 182: ;
Line 183: ID = path_release
Line 183: (
Line 183: Unrecognized token: 38
Line 183: ID = nd
Line 183: )
Line 183: ;
Line 184: return
Line 184: ID = error
Line 184: ;
Line 185: }
Line 187: ID = asmlinkage
Line 187: ID = ssize_t
Line 188: ID = sys_fgetxattr
Line 188: (
Line 188: int
Line 188: ID = fd
Line 188: ,
Line 188: char
Line 188: Unrecognized token: 95
Line 188: Unrecognized token: 95
Line 188: ID = user
Line 188: *
Line 188: ID = name
Line 188: ,
Line 188: void
Line 188: Unrecognized token: 95
Line 188: Unrecognized token: 95
Line 188: ID = user
Line 188: *
Line 188: ID = value
Line 188: ,
Line 188: ID = size_t
Line 188: ID = size
Line 188: )
Line 189: {
Line 190: ID = struct
Line 190: ID = file
Line 190: *
Line 190: ID = f
Line 190: ;
Line 191: ID = ssize_t
Line 191: ID = error
Line 191: =
Line 191: -
Line 191: ID = EBADF
Line 191: ;
Line 193: ID = f
Line 193: =
Line 193: ID = fget
Line 193: (
Line 193: ID = fd
Line 193: )
Line 193: ;
Line 194: if
Line 194: (
Line 194: !
Line 194: ID = f
Line 194: )
Line 195: return
Line 195: ID = error
Line 195: ;
Line 196: ID = error
Line 196: =
Line 196: ID = getxattr
Line 196: (
Line 196: ID = f
Line 196: -
Line 196: >
Line 196: ID = f_dentry
Line 196: ,
Line 196: ID = name
Line 196: ,
Line 196: ID = value
Line 196: ,
Line 196: ID = size
Line 196: )
Line 196: ;
Line 197: ID = fput
Line 197: (
Line 197: ID = f
Line 197: )
Line 197: ;
Line 198: return
Line 198: ID = error
Line 198: ;
Line 199: }
Line 204: ID = static
Line 204: ID = ssize_t
Line 205: ID = listxattr
Line 205: (
Line 205: ID = struct
Line 205: ID = dentry
Line 205: *
Line 205: ID = d
Line 205: ,
Line 205: char
Line 205: Unrecognized token: 95
Line 205: Unrecognized token: 95
Line 205: ID = user
Line 205: *
Line 205: ID = list
Line 205: ,
Line 205: ID = size_t
Line 205: ID = size
Line 205: )
Line 206: {
Line 207: ID = ssize_t
Line 207: ID = error
Line 207: ;
Line 208: char
Line 208: *
Line 208: ID = klist
Line 208: =
Line 208: ID = NULL
Line 208: ;
Line 210: if
Line 210: (
Line 210: ID = size
Line 210: )
Line 210: {
Line 211: if
Line 211: (
Line 211: ID = size
Line 211: >
Line 211: ID = XATTR_LIST_MAX
Line 211: )
Line 212: ID = size
Line 212: =
Line 212: ID = XATTR_LIST_MAX
Line 212: ;
Line 213: ID = klist
Line 213: =
Line 213: ID = kmalloc
Line 213: (
Line 213: ID = size
Line 213: ,
Line 213: ID = GFP_KERNEL
Line 213: )
Line 213: ;
Line 214: if
Line 214: (
Line 214: !
Line 214: ID = klist
Line 214: )
Line 215: return
Line 215: -
Line 215: ID = ENOMEM
Line 215: ;
Line 216: }
Line 218: ID = error
Line 218: =
Line 218: -
Line 218: ID = EOPNOTSUPP
Line 218: ;
Line 219: if
Line 219: (
Line 219: ID = d
Line 219: -
Line 219: >
Line 219: ID = d_inode
Line 219: -
Line 219: >
Line 219: ID = i_op
Line 219: &&
Line 219: ID = d
Line 219: -
Line 219: >
Line 219: ID = d_inode
Line 219: -
Line 219: >
Line 219: ID = i_op
Line 219: -
Line 219: >
Line 219: ID = listxattr
Line 219: )
Line 219: {
Line 220: ID = error
Line 220: =
Line 220: ID = security_inode_listxattr
Line 220: (
Line 220: ID = d
Line 220: )
Line 220: ;
Line 221: if
Line 221: (
Line 221: ID = error
Line 221: )
Line 222: ID = goto
Line 222: ID = out
Line 222: ;
Line 223: ID = error
Line 223: =
Line 223: ID = d
Line 223: -
Line 223: >
Line 223: ID = d_inode
Line 223: -
Line 223: >
Line 223: ID = i_op
Line 223: -
Line 223: >
Line 223: ID = listxattr
Line 223: (
Line 223: ID = d
Line 223: ,
Line 223: ID = klist
Line 223: ,
Line 223: ID = size
Line 223: )
Line 223: ;
Line 224: if
Line 224: (
Line 224: ID = error
Line 224: >
Line 224: INTCON = 0
Line 224: )
Line 224: {
Line 225: if
Line 225: (
Line 225: ID = size
Line 225: &&
Line 225: ID = copy_to_user
Line 225: (
Line 225: ID = list
Line 225: ,
Line 225: ID = klist
Line 225: ,
Line 225: ID = error
Line 225: )
Line 225: )
Line 226: ID = error
Line 226: =
Line 226: -
Line 226: ID = EFAULT
Line 226: ;
Line 227: }
Line 227: else
Line 227: if
Line 227: (
Line 227: ID = error
Line 227: ==
Line 227: -
Line 227: ID = ERANGE
Line 227: &&
Line 227: ID = size
Line 227: >=
Line 227: ID = XATTR_LIST_MAX
Line 227: )
Line 227: {
Line 230: ID = error
Line 230: =
Line 230: -
Line 230: ID = E2BIG
Line 230: ;
Line 231: }
Line 232: }
Line 233: ID = out
Line 233: Unrecognized token: 58
Line 234: if
Line 234: (
Line 234: ID = klist
Line 234: )
Line 235: ID = kfree
Line 235: (
Line 235: ID = klist
Line 235: )
Line 235: ;
Line 236: return
Line 236: ID = error
Line 236: ;
Line 237: }
Line 239: ID = asmlinkage
Line 239: ID = ssize_t
Line 240: ID = sys_listxattr
Line 240: (
Line 240: char
Line 240: Unrecognized token: 95
Line 240: Unrecognized token: 95
Line 240: ID = user
Line 240: *
Line 240: ID = path
Line 240: ,
Line 240: char
Line 240: Unrecognized token: 95
Line 240: Unrecognized token: 95
Line 240: ID = user
Line 240: *
Line 240: ID = list
Line 240: ,
Line 240: ID = size_t
Line 240: ID = size
Line 240: )
Line 241: {
Line 242: ID = struct
Line 242: ID = nameidata
Line 242: ID = nd
Line 242: ;
Line 243: ID = ssize_t
Line 243: ID = error
Line 243: ;
Line 245: ID = error
Line 245: =
Line 245: ID = user_path_walk
Line 245: (
Line 245: ID = path
Line 245: ,
Line 245: Unrecognized token: 38
Line 245: ID = nd
Line 245: )
Line 245: ;
Line 246: if
Line 246: (
Line 246: ID = error
Line 246: )
Line 247: return
Line 247: ID = error
Line 247: ;
Line 248: ID = error
Line 248: =
Line 248: ID = listxattr
Line 248: (
Line 248: ID = nd
Line 248: Unrecognized token: 46
Line 248: ID = dentry
Line 248: ,
Line 248: ID = list
Line 248: ,
Line 248: ID = size
Line 248: )
Line 248: ;
Line 249: ID = path_release
Line 249: (
Line 249: Unrecognized token: 38
Line 249: ID = nd
Line 249: )
Line 249: ;
Line 250: return
Line 250: ID = error
Line 250: ;
Line 251: }
Line 253: ID = asmlinkage
Line 253: ID = ssize_t
Line 254: ID = sys_llistxattr
Line 254: (
Line 254: char
Line 254: Unrecognized token: 95
Line 254: Unrecognized token: 95
Line 254: ID = user
Line 254: *
Line 254: ID = path
Line 254: ,
Line 254: char
Line 254: Unrecognized token: 95
Line 254: Unrecognized token: 95
Line 254: ID = user
Line 254: *
Line 254: ID = list
Line 254: ,
Line 254: ID = size_t
Line 254: ID = size
Line 254: )
Line 255: {
Line 256: ID = struct
Line 256: ID = nameidata
Line 256: ID = nd
Line 256: ;
Line 257: ID = ssize_t
Line 257: ID = error
Line 257: ;
Line 259: ID = error
Line 259: =
Line 259: ID = user_path_walk_link
Line 259: (
Line 259: ID = path
Line 259: ,
Line 259: Unrecognized token: 38
Line 259: ID = nd
Line 259: )
Line 259: ;
Line 260: if
Line 260: (
Line 260: ID = error
Line 260: )
Line 261: return
Line 261: ID = error
Line 261: ;
Line 262: ID = error
Line 262: =
Line 262: ID = listxattr
Line 262: (
Line 262: ID = nd
Line 262: Unrecognized token: 46
Line 262: ID = dentry
Line 262: ,
Line 262: ID = list
Line 262: ,
Line 262: ID = size
Line 262: )
Line 262: ;
Line 263: ID = path_release
Line 263: (
Line 263: Unrecognized token: 38
Line 263: ID = nd
Line 263: )
Line 263: ;
Line 264: return
Line 264: ID = error
Line 264: ;
Line 265: }
Line 267: ID = asmlinkage
Line 267: ID = ssize_t
Line 268: ID = sys_flistxattr
Line 268: (
Line 268: int
Line 268: ID = fd
Line 268: ,
Line 268: char
Line 268: Unrecognized token: 95
Line 268: Unrecognized token: 95
Line 268: ID = user
Line 268: *
Line 268: ID = list
Line 268: ,
Line 268: ID = size_t
Line 268: ID = size
Line 268: )
Line 269: {
Line 270: ID = struct
Line 270: ID = file
Line 270: *
Line 270: ID = f
Line 270: ;
Line 271: ID = ssize_t
Line 271: ID = error
Line 271: =
Line 271: -
Line 271: ID = EBADF
Line 271: ;
Line 273: ID = f
Line 273: =
Line 273: ID = fget
Line 273: (
Line 273: ID = fd
Line 273: )
Line 273: ;
Line 274: if
Line 274: (
Line 274: !
Line 274: ID = f
Line 274: )
Line 275: return
Line 275: ID = error
Line 275: ;
Line 276: ID = error
Line 276: =
Line 276: ID = listxattr
Line 276: (
Line 276: ID = f
Line 276: -
Line 276: >
Line 276: ID = f_dentry
Line 276: ,
Line 276: ID = list
Line 276: ,
Line 276: ID = size
Line 276: )
Line 276: ;
Line 277: ID = fput
Line 277: (
Line 277: ID = f
Line 277: )
Line 277: ;
Line 278: return
Line 278: ID = error
Line 278: ;
Line 279: }
Line 284: ID = static
Line 284: ID = long
Line 285: ID = removexattr
Line 285: (
Line 285: ID = struct
Line 285: ID = dentry
Line 285: *
Line 285: ID = d
Line 285: ,
Line 285: char
Line 285: Unrecognized token: 95
Line 285: Unrecognized token: 95
Line 285: ID = user
Line 285: *
Line 285: ID = name
Line 285: )
Line 286: {
Line 287: int
Line 287: ID = error
Line 287: ;
Line 288: char
Line 288: ID = kname
Line 288: [
Line 288: ID = XATTR_NAME_MAX
Line 288: +
Line 288: INTCON = 1
Line 288: ]
Line 288: ;
Line 290: ID = error
Line 290: =
Line 290: ID = strncpy_from_user
Line 290: (
Line 290: ID = kname
Line 290: ,
Line 290: ID = name
Line 290: ,
Line 290: ID = sizeof
Line 290: (
Line 290: ID = kname
Line 290: )
Line 290: )
Line 290: ;
Line 291: if
Line 291: (
Line 291: ID = error
Line 291: ==
Line 291: INTCON = 0
Line 291: ||
Line 291: ID = error
Line 291: ==
Line 291: ID = sizeof
Line 291: (
Line 291: ID = kname
Line 291: )
Line 291: )
Line 292: ID = error
Line 292: =
Line 292: -
Line 292: ID = ERANGE
Line 292: ;
Line 293: if
Line 293: (
Line 293: ID = error
Line 293: <
Line 293: INTCON = 0
Line 293: )
Line 294: return
Line 294: ID = error
Line 294: ;
Line 296: ID = error
Line 296: =
Line 296: -
Line 296: ID = EOPNOTSUPP
Line 296: ;
Line 297: if
Line 297: (
Line 297: ID = d
Line 297: -
Line 297: >
Line 297: ID = d_inode
Line 297: -
Line 297: >
Line 297: ID = i_op
Line 297: &&
Line 297: ID = d
Line 297: -
Line 297: >
Line 297: ID = d_inode
Line 297: -
Line 297: >
Line 297: ID = i_op
Line 297: -
Line 297: >
Line 297: ID = removexattr
Line 297: )
Line 297: {
Line 298: ID = error
Line 298: =
Line 298: ID = security_inode_removexattr
Line 298: (
Line 298: ID = d
Line 298: ,
Line 298: ID = kname
Line 298: )
Line 298: ;
Line 299: if
Line 299: (
Line 299: ID = error
Line 299: )
Line 300: ID = goto
Line 300: ID = out
Line 300: ;
Line 301: ID = down
Line 301: (
Line 301: Unrecognized token: 38
Line 301: ID = d
Line 301: -
Line 301: >
Line 301: ID = d_inode
Line 301: -
Line 301: >
Line 301: ID = i_sem
Line 301: )
Line 301: ;
Line 302: ID = error
Line 302: =
Line 302: ID = d
Line 302: -
Line 302: >
Line 302: ID = d_inode
Line 302: -
Line 302: >
Line 302: ID = i_op
Line 302: -
Line 302: >
Line 302: ID = removexattr
Line 302: (
Line 302: ID = d
Line 302: ,
Line 302: ID = kname
Line 302: )
Line 302: ;
Line 303: ID = up
Line 303: (
Line 303: Unrecognized token: 38
Line 303: ID = d
Line 303: -
Line 303: >
Line 303: ID = d_inode
Line 303: -
Line 303: >
Line 303: ID = i_sem
Line 303: )
Line 303: ;
Line 304: }
Line 305: ID = out
Line 305: Unrecognized token: 58
Line 306: return
Line 306: ID = error
Line 306: ;
Line 307: }
Line 309: ID = asmlinkage
Line 309: ID = long
Line 310: ID = sys_removexattr
Line 310: (
Line 310: char
Line 310: Unrecognized token: 95
Line 310: Unrecognized token: 95
Line 310: ID = user
Line 310: *
Line 310: ID = path
Line 310: ,
Line 310: char
Line 310: Unrecognized token: 95
Line 310: Unrecognized token: 95
Line 310: ID = user
Line 310: *
Line 310: ID = name
Line 310: )
Line 311: {
Line 312: ID = struct
Line 312: ID = nameidata
Line 312: ID = nd
Line 312: ;
Line 313: int
Line 313: ID = error
Line 313: ;
Line 315: ID = error
Line 315: =
Line 315: ID = user_path_walk
Line 315: (
Line 315: ID = path
Line 315: ,
Line 315: Unrecognized token: 38
Line 315: ID = nd
Line 315: )
Line 315: ;
Line 316: if
Line 316: (
Line 316: ID = error
Line 316: )
Line 317: return
Line 317: ID = error
Line 317: ;
Line 318: ID = error
Line 318: =
Line 318: ID = removexattr
Line 318: (
Line 318: ID = nd
Line 318: Unrecognized token: 46
Line 318: ID = dentry
Line 318: ,
Line 318: ID = name
Line 318: )
Line 318: ;
Line 319: ID = path_release
Line 319: (
Line 319: Unrecognized token: 38
Line 319: ID = nd
Line 319: )
Line 319: ;
Line 320: return
Line 320: ID = error
Line 320: ;
Line 321: }
Line 323: ID = asmlinkage
Line 323: ID = long
Line 324: ID = sys_lremovexattr
Line 324: (
Line 324: char
Line 324: Unrecognized token: 95
Line 324: Unrecognized token: 95
Line 324: ID = user
Line 324: *
Line 324: ID = path
Line 324: ,
Line 324: char
Line 324: Unrecognized token: 95
Line 324: Unrecognized token: 95
Line 324: ID = user
Line 324: *
Line 324: ID = name
Line 324: )
Line 325: {
Line 326: ID = struct
Line 326: ID = nameidata
Line 326: ID = nd
Line 326: ;
Line 327: int
Line 327: ID = error
Line 327: ;
Line 329: ID = error
Line 329: =
Line 329: ID = user_path_walk_link
Line 329: (
Line 329: ID = path
Line 329: ,
Line 329: Unrecognized token: 38
Line 329: ID = nd
Line 329: )
Line 329: ;
Line 330: if
Line 330: (
Line 330: ID = error
Line 330: )
Line 331: return
Line 331: ID = error
Line 331: ;
Line 332: ID = error
Line 332: =
Line 332: ID = removexattr
Line 332: (
Line 332: ID = nd
Line 332: Unrecognized token: 46
Line 332: ID = dentry
Line 332: ,
Line 332: ID = name
Line 332: )
Line 332: ;
Line 333: ID = path_release
Line 333: (
Line 333: Unrecognized token: 38
Line 333: ID = nd
Line 333: )
Line 333: ;
Line 334: return
Line 334: ID = error
Line 334: ;
Line 335: }
Line 337: ID = asmlinkage
Line 337: ID = long
Line 338: ID = sys_fremovexattr
Line 338: (
Line 338: int
Line 338: ID = fd
Line 338: ,
Line 338: char
Line 338: Unrecognized token: 95
Line 338: Unrecognized token: 95
Line 338: ID = user
Line 338: *
Line 338: ID = name
Line 338: )
Line 339: {
Line 340: ID = struct
Line 340: ID = file
Line 340: *
Line 340: ID = f
Line 340: ;
Line 341: int
Line 341: ID = error
Line 341: =
Line 341: -
Line 341: ID = EBADF
Line 341: ;
Line 343: ID = f
Line 343: =
Line 343: ID = fget
Line 343: (
Line 343: ID = fd
Line 343: )
Line 343: ;
Line 344: if
Line 344: (
Line 344: !
Line 344: ID = f
Line 344: )
Line 345: return
Line 345: ID = error
Line 345: ;
Line 346: ID = error
Line 346: =
Line 346: ID = removexattr
Line 346: (
Line 346: ID = f
Line 346: -
Line 346: >
Line 346: ID = f_dentry
Line 346: ,
Line 346: ID = name
Line 346: )
Line 346: ;
Line 347: ID = fput
Line 347: (
Line 347: ID = f
Line 347: )
Line 347: ;
Line 348: return
Line 348: ID = error
Line 348: ;
Line 349: }
Line 350: -EOF-

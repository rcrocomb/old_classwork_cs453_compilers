Line 13: Unrecognized token: 35
Line 13: ID = include
Line 13: <
Line 13: ID = linux
Line 13: /
Line 13: ID = config
Line 13: Unrecognized token: 46
Line 13: ID = h
Line 13: >
Line 14: Unrecognized token: 35
Line 14: ID = include
Line 14: <
Line 14: ID = linux
Line 14: /
Line 14: ID = slab
Line 14: Unrecognized token: 46
Line 14: ID = h
Line 14: >
Line 15: Unrecognized token: 35
Line 15: ID = include
Line 15: <
Line 15: ID = linux
Line 15: /
Line 15: ID = module
Line 15: Unrecognized token: 46
Line 15: ID = h
Line 15: >
Line 16: Unrecognized token: 35
Line 16: ID = include
Line 16: <
Line 16: ID = linux
Line 16: /
Line 16: ID = smp_lock
Line 16: Unrecognized token: 46
Line 16: ID = h
Line 16: >
Line 17: Unrecognized token: 35
Line 17: ID = include
Line 17: <
Line 17: ID = linux
Line 17: /
Line 17: ID = init
Line 17: Unrecognized token: 46
Line 17: ID = h
Line 17: >
Line 18: Unrecognized token: 35
Line 18: ID = include
Line 18: <
Line 18: ID = linux
Line 18: /
Line 18: ID = sched
Line 18: Unrecognized token: 46
Line 18: ID = h
Line 18: >
Line 19: Unrecognized token: 35
Line 19: ID = include
Line 19: <
Line 19: ID = linux
Line 19: /
Line 19: ID = fs
Line 19: Unrecognized token: 46
Line 19: ID = h
Line 19: >
Line 20: Unrecognized token: 35
Line 20: ID = include
Line 20: <
Line 20: ID = linux
Line 20: /
Line 20: ID = tty
Line 20: Unrecognized token: 46
Line 20: ID = h
Line 20: >
Line 21: Unrecognized token: 35
Line 21: ID = include
Line 21: <
Line 21: ID = linux
Line 21: /
Line 21: ID = binfmts
Line 21: Unrecognized token: 46
Line 21: ID = h
Line 21: >
Line 22: Unrecognized token: 35
Line 22: ID = include
Line 22: <
Line 22: ID = linux
Line 22: /
Line 22: ID = security
Line 22: Unrecognized token: 46
Line 22: ID = h
Line 22: >
Line 23: Unrecognized token: 35
Line 23: ID = include
Line 23: <
Line 23: ID = linux
Line 23: /
Line 23: ID = ptrace
Line 23: Unrecognized token: 46
Line 23: ID = h
Line 23: >
Line 24: Unrecognized token: 35
Line 24: ID = include
Line 24: <
Line 24: ID = asm
Line 24: /
Line 24: ID = param
Line 24: Unrecognized token: 46
Line 24: ID = h
Line 24: >
Line 25: Unrecognized token: 35
Line 25: ID = include
Line 25: <
Line 25: ID = asm
Line 25: /
Line 25: ID = uaccess
Line 25: Unrecognized token: 46
Line 25: ID = h
Line 25: >
Line 26: Unrecognized token: 35
Line 26: ID = include
Line 26: <
Line 26: ID = asm
Line 26: /
Line 26: ID = unistd
Line 26: Unrecognized token: 46
Line 26: ID = h
Line 26: >
Line 27: Unrecognized token: 35
Line 27: ID = include
Line 27: <
Line 27: ID = asm
Line 27: /
Line 27: ID = siginfo
Line 27: Unrecognized token: 46
Line 27: ID = h
Line 27: >
Line 33: ID = static
Line 33: ID = kmem_cache_t
Line 33: *
Line 33: ID = sigqueue_cachep
Line 33: ;
Line 109: Unrecognized token: 35
Line 109: ID = ifdef
Line 109: ID = SIGEMT
Line 110: Unrecognized token: 35
Line 110: ID = define
Line 110: ID = M_SIGEMT
Line 110: ID = M
Line 110: (
Line 110: ID = SIGEMT
Line 110: )
Line 111: Unrecognized token: 35
Line 111: else
Line 112: Unrecognized token: 35
Line 112: ID = define
Line 112: ID = M_SIGEMT
Line 112: INTCON = 0
Line 113: Unrecognized token: 35
Line 113: ID = endif
Line 115: Unrecognized token: 35
Line 115: if
Line 115: ID = SIGRTMIN
Line 115: >
Line 115: ID = BITS_PER_LONG
Line 116: Unrecognized token: 35
Line 116: ID = define
Line 116: ID = M
Line 116: (
Line 116: ID = sig
Line 116: )
Line 116: (
Line 116: INTCON = 1
Line 116: ID = ULL
Line 116: <
Line 116: <
Line 116: (
Line 116: (
Line 116: ID = sig
Line 116: )
Line 116: -
Line 116: INTCON = 1
Line 116: )
Line 116: )
Line 117: Unrecognized token: 35
Line 117: else
Line 118: Unrecognized token: 35
Line 118: ID = define
Line 118: ID = M
Line 118: (
Line 118: ID = sig
Line 118: )
Line 118: (
Line 118: INTCON = 1
Line 118: ID = UL
Line 118: <
Line 118: <
Line 118: (
Line 118: (
Line 118: ID = sig
Line 118: )
Line 118: -
Line 118: INTCON = 1
Line 118: )
Line 118: )
Line 119: Unrecognized token: 35
Line 119: ID = endif
Line 120: Unrecognized token: 35
Line 120: ID = define
Line 120: ID = T
Line 120: (
Line 120: ID = sig
Line 120: ,
Line 120: ID = mask
Line 120: )
Line 120: (
Line 120: ID = M
Line 120: (
Line 120: ID = sig
Line 120: )
Line 120: Unrecognized token: 38
Line 120: (
Line 120: ID = mask
Line 120: )
Line 120: )
Line 122: Unrecognized token: 35
Line 122: ID = define
Line 122: ID = SIG_KERNEL_ONLY_MASK
Line 122: (
Line 122: Unrecognized token: 92
Line 123: ID = M
Line 123: (
Line 123: ID = SIGKILL
Line 123: )
Line 123: Unrecognized token: 124
Line 123: ID = M
Line 123: (
Line 123: ID = SIGSTOP
Line 123: )
Line 123: )
Line 125: Unrecognized token: 35
Line 125: ID = define
Line 125: ID = SIG_KERNEL_STOP_MASK
Line 125: (
Line 125: Unrecognized token: 92
Line 126: ID = M
Line 126: (
Line 126: ID = SIGSTOP
Line 126: )
Line 126: Unrecognized token: 124
Line 126: ID = M
Line 126: (
Line 126: ID = SIGTSTP
Line 126: )
Line 126: Unrecognized token: 124
Line 126: ID = M
Line 126: (
Line 126: ID = SIGTTIN
Line 126: )
Line 126: Unrecognized token: 124
Line 126: ID = M
Line 126: (
Line 126: ID = SIGTTOU
Line 126: )
Line 126: )
Line 128: Unrecognized token: 35
Line 128: ID = define
Line 128: ID = SIG_KERNEL_COREDUMP_MASK
Line 128: (
Line 128: Unrecognized token: 92
Line 129: ID = M
Line 129: (
Line 129: ID = SIGQUIT
Line 129: )
Line 129: Unrecognized token: 124
Line 129: ID = M
Line 129: (
Line 129: ID = SIGILL
Line 129: )
Line 129: Unrecognized token: 124
Line 129: ID = M
Line 129: (
Line 129: ID = SIGTRAP
Line 129: )
Line 129: Unrecognized token: 124
Line 129: ID = M
Line 129: (
Line 129: ID = SIGABRT
Line 129: )
Line 129: Unrecognized token: 124
Line 129: Unrecognized token: 92
Line 130: ID = M
Line 130: (
Line 130: ID = SIGFPE
Line 130: )
Line 130: Unrecognized token: 124
Line 130: ID = M
Line 130: (
Line 130: ID = SIGSEGV
Line 130: )
Line 130: Unrecognized token: 124
Line 130: ID = M
Line 130: (
Line 130: ID = SIGBUS
Line 130: )
Line 130: Unrecognized token: 124
Line 130: ID = M
Line 130: (
Line 130: ID = SIGSYS
Line 130: )
Line 130: Unrecognized token: 124
Line 130: Unrecognized token: 92
Line 131: ID = M
Line 131: (
Line 131: ID = SIGXCPU
Line 131: )
Line 131: Unrecognized token: 124
Line 131: ID = M
Line 131: (
Line 131: ID = SIGXFSZ
Line 131: )
Line 131: Unrecognized token: 124
Line 131: ID = M_SIGEMT
Line 131: )
Line 133: Unrecognized token: 35
Line 133: ID = define
Line 133: ID = SIG_KERNEL_IGNORE_MASK
Line 133: (
Line 133: Unrecognized token: 92
Line 134: ID = M
Line 134: (
Line 134: ID = SIGCONT
Line 134: )
Line 134: Unrecognized token: 124
Line 134: ID = M
Line 134: (
Line 134: ID = SIGCHLD
Line 134: )
Line 134: Unrecognized token: 124
Line 134: ID = M
Line 134: (
Line 134: ID = SIGWINCH
Line 134: )
Line 134: Unrecognized token: 124
Line 134: ID = M
Line 134: (
Line 134: ID = SIGURG
Line 134: )
Line 134: )
Line 136: Unrecognized token: 35
Line 136: ID = define
Line 136: ID = sig_kernel_only
Line 136: (
Line 136: ID = sig
Line 136: )
Line 136: Unrecognized token: 92
Line 137: (
Line 137: (
Line 137: (
Line 137: ID = sig
Line 137: )
Line 137: <
Line 137: ID = SIGRTMIN
Line 137: )
Line 137: &&
Line 137: ID = T
Line 137: (
Line 137: ID = sig
Line 137: ,
Line 137: ID = SIG_KERNEL_ONLY_MASK
Line 137: )
Line 137: )
Line 138: Unrecognized token: 35
Line 138: ID = define
Line 138: ID = sig_kernel_coredump
Line 138: (
Line 138: ID = sig
Line 138: )
Line 138: Unrecognized token: 92
Line 139: (
Line 139: (
Line 139: (
Line 139: ID = sig
Line 139: )
Line 139: <
Line 139: ID = SIGRTMIN
Line 139: )
Line 139: &&
Line 139: ID = T
Line 139: (
Line 139: ID = sig
Line 139: ,
Line 139: ID = SIG_KERNEL_COREDUMP_MASK
Line 139: )
Line 139: )
Line 140: Unrecognized token: 35
Line 140: ID = define
Line 140: ID = sig_kernel_ignore
Line 140: (
Line 140: ID = sig
Line 140: )
Line 140: Unrecognized token: 92
Line 141: (
Line 141: (
Line 141: (
Line 141: ID = sig
Line 141: )
Line 141: <
Line 141: ID = SIGRTMIN
Line 141: )
Line 141: &&
Line 141: ID = T
Line 141: (
Line 141: ID = sig
Line 141: ,
Line 141: ID = SIG_KERNEL_IGNORE_MASK
Line 141: )
Line 141: )
Line 142: Unrecognized token: 35
Line 142: ID = define
Line 142: ID = sig_kernel_stop
Line 142: (
Line 142: ID = sig
Line 142: )
Line 142: Unrecognized token: 92
Line 143: (
Line 143: (
Line 143: (
Line 143: ID = sig
Line 143: )
Line 143: <
Line 143: ID = SIGRTMIN
Line 143: )
Line 143: &&
Line 143: ID = T
Line 143: (
Line 143: ID = sig
Line 143: ,
Line 143: ID = SIG_KERNEL_STOP_MASK
Line 143: )
Line 143: )
Line 145: Unrecognized token: 35
Line 145: ID = define
Line 145: ID = sig_user_defined
Line 145: (
Line 145: ID = t
Line 145: ,
Line 145: ID = signr
Line 145: )
Line 145: Unrecognized token: 92
Line 146: (
Line 146: (
Line 146: (
Line 146: ID = t
Line 146: )
Line 146: -
Line 146: >
Line 146: ID = sighand
Line 146: -
Line 146: >
Line 146: ID = action
Line 146: [
Line 146: (
Line 146: ID = signr
Line 146: )
Line 146: -
Line 146: INTCON = 1
Line 146: ]
Line 146: Unrecognized token: 46
Line 146: ID = sa
Line 146: Unrecognized token: 46
Line 146: ID = sa_handler
Line 146: !=
Line 146: ID = SIG_DFL
Line 146: )
Line 146: &&
Line 146: Unrecognized token: 92
Line 147: (
Line 147: (
Line 147: ID = t
Line 147: )
Line 147: -
Line 147: >
Line 147: ID = sighand
Line 147: -
Line 147: >
Line 147: ID = action
Line 147: [
Line 147: (
Line 147: ID = signr
Line 147: )
Line 147: -
Line 147: INTCON = 1
Line 147: ]
Line 147: Unrecognized token: 46
Line 147: ID = sa
Line 147: Unrecognized token: 46
Line 147: ID = sa_handler
Line 147: !=
Line 147: ID = SIG_IGN
Line 147: )
Line 147: )
Line 149: Unrecognized token: 35
Line 149: ID = define
Line 149: ID = sig_fatal
Line 149: (
Line 149: ID = t
Line 149: ,
Line 149: ID = signr
Line 149: )
Line 149: Unrecognized token: 92
Line 150: (
Line 150: !
Line 150: ID = T
Line 150: (
Line 150: ID = signr
Line 150: ,
Line 150: ID = SIG_KERNEL_IGNORE_MASK
Line 150: Unrecognized token: 124
Line 150: ID = SIG_KERNEL_STOP_MASK
Line 150: )
Line 150: &&
Line 150: Unrecognized token: 92
Line 151: (
Line 151: ID = t
Line 151: )
Line 151: -
Line 151: >
Line 151: ID = sighand
Line 151: -
Line 151: >
Line 151: ID = action
Line 151: [
Line 151: (
Line 151: ID = signr
Line 151: )
Line 151: -
Line 151: INTCON = 1
Line 151: ]
Line 151: Unrecognized token: 46
Line 151: ID = sa
Line 151: Unrecognized token: 46
Line 151: ID = sa_handler
Line 151: ==
Line 151: ID = SIG_DFL
Line 151: )
Line 153: Unrecognized token: 35
Line 153: ID = define
Line 153: ID = sig_avoid_stop_race
Line 153: (
Line 153: )
Line 153: Unrecognized token: 92
Line 154: (
Line 154: ID = sigtestsetmask
Line 154: (
Line 154: Unrecognized token: 38
Line 154: ID = current
Line 154: -
Line 154: >
Line 154: ID = pending
Line 154: Unrecognized token: 46
Line 154: ID = signal
Line 154: ,
Line 154: ID = M
Line 154: (
Line 154: ID = SIGCONT
Line 154: )
Line 154: Unrecognized token: 124
Line 154: ID = M
Line 154: (
Line 154: ID = SIGKILL
Line 154: )
Line 154: )
Line 154: ||
Line 154: Unrecognized token: 92
Line 155: ID = sigtestsetmask
Line 155: (
Line 155: Unrecognized token: 38
Line 155: ID = current
Line 155: -
Line 155: >
Line 155: ID = signal
Line 155: -
Line 155: >
Line 155: ID = shared_pending
Line 155: Unrecognized token: 46
Line 155: ID = signal
Line 155: ,
Line 155: Unrecognized token: 92
Line 156: ID = M
Line 156: (
Line 156: ID = SIGCONT
Line 156: )
Line 156: Unrecognized token: 124
Line 156: ID = M
Line 156: (
Line 156: ID = SIGKILL
Line 156: )
Line 156: )
Line 156: )
Line 158: ID = static
Line 158: int
Line 158: ID = sig_ignored
Line 158: (
Line 158: ID = struct
Line 158: ID = task_struct
Line 158: *
Line 158: ID = t
Line 158: ,
Line 158: int
Line 158: ID = sig
Line 158: )
Line 159: {
Line 160: void
Line 160: Unrecognized token: 95
Line 160: Unrecognized token: 95
Line 160: ID = user
Line 160: *
Line 160: ID = handler
Line 160: ;
Line 165: if
Line 165: (
Line 165: ID = t
Line 165: -
Line 165: >
Line 165: ID = ptrace
Line 165: Unrecognized token: 38
Line 165: ID = PT_PTRACED
Line 165: )
Line 166: return
Line 166: INTCON = 0
Line 166: ;
Line 173: if
Line 173: (
Line 173: ID = sigismember
Line 173: (
Line 173: Unrecognized token: 38
Line 173: ID = t
Line 173: -
Line 173: >
Line 173: ID = blocked
Line 173: ,
Line 173: ID = sig
Line 173: )
Line 173: )
Line 174: return
Line 174: INTCON = 0
Line 174: ;
Line 177: ID = handler
Line 177: =
Line 177: ID = t
Line 177: -
Line 177: >
Line 177: ID = sighand
Line 177: -
Line 177: >
Line 177: ID = action
Line 177: [
Line 177: ID = sig
Line 177: -
Line 177: INTCON = 1
Line 177: ]
Line 177: Unrecognized token: 46
Line 177: ID = sa
Line 177: Unrecognized token: 46
Line 177: ID = sa_handler
Line 177: ;
Line 178: return
Line 178: ID = handler
Line 178: ==
Line 178: ID = SIG_IGN
Line 178: ||
Line 179: (
Line 179: ID = handler
Line 179: ==
Line 179: ID = SIG_DFL
Line 179: &&
Line 179: ID = sig_kernel_ignore
Line 179: (
Line 179: ID = sig
Line 179: )
Line 179: )
Line 179: ;
Line 180: }
Line 186: ID = static
Line 186: ID = inline
Line 186: int
Line 186: ID = has_pending_signals
Line 186: (
Line 186: ID = sigset_t
Line 186: *
Line 186: ID = signal
Line 186: ,
Line 186: ID = sigset_t
Line 186: *
Line 186: ID = blocked
Line 186: )
Line 187: {
Line 188: ID = unsigned
Line 188: ID = long
Line 188: ID = ready
Line 188: ;
Line 189: ID = long
Line 189: ID = i
Line 189: ;
Line 191: ID = switch
Line 191: (
Line 191: Unrecognized token: 95
Line 191: ID = NSIG_WORDS
Line 191: )
Line 191: {
Line 192: ID = default
Line 192: Unrecognized token: 58
Line 193: for
Line 193: (
Line 193: ID = i
Line 193: =
Line 193: Unrecognized token: 95
Line 193: ID = NSIG_WORDS
Line 193: ,
Line 193: ID = ready
Line 193: =
Line 193: INTCON = 0
Line 193: ;
Line 193: -
Line 193: -
Line 193: ID = i
Line 193: >=
Line 193: INTCON = 0
Line 193: ;
Line 193: )
Line 194: ID = ready
Line 194: Unrecognized token: 124
Line 194: =
Line 194: ID = signal
Line 194: -
Line 194: >
Line 194: ID = sig
Line 194: [
Line 194: ID = i
Line 194: ]
Line 194: Unrecognized token: 38
Line 194: Unrecognized token: 126
Line 194: ID = blocked
Line 194: -
Line 194: >
Line 194: ID = sig
Line 194: [
Line 194: ID = i
Line 194: ]
Line 194: ;
Line 195: ID = break
Line 195: ;
Line 197: ID = case
Line 197: INTCON = 4
Line 197: Unrecognized token: 58
Line 197: ID = ready
Line 197: =
Line 197: ID = signal
Line 197: -
Line 197: >
Line 197: ID = sig
Line 197: [
Line 197: INTCON = 3
Line 197: ]
Line 197: Unrecognized token: 38
Line 197: Unrecognized token: 126
Line 197: ID = blocked
Line 197: -
Line 197: >
Line 197: ID = sig
Line 197: [
Line 197: INTCON = 3
Line 197: ]
Line 197: ;
Line 198: ID = ready
Line 198: Unrecognized token: 124
Line 198: =
Line 198: ID = signal
Line 198: -
Line 198: >
Line 198: ID = sig
Line 198: [
Line 198: INTCON = 2
Line 198: ]
Line 198: Unrecognized token: 38
Line 198: Unrecognized token: 126
Line 198: ID = blocked
Line 198: -
Line 198: >
Line 198: ID = sig
Line 198: [
Line 198: INTCON = 2
Line 198: ]
Line 198: ;
Line 199: ID = ready
Line 199: Unrecognized token: 124
Line 199: =
Line 199: ID = signal
Line 199: -
Line 199: >
Line 199: ID = sig
Line 199: [
Line 199: INTCON = 1
Line 199: ]
Line 199: Unrecognized token: 38
Line 199: Unrecognized token: 126
Line 199: ID = blocked
Line 199: -
Line 199: >
Line 199: ID = sig
Line 199: [
Line 199: INTCON = 1
Line 199: ]
Line 199: ;
Line 200: ID = ready
Line 200: Unrecognized token: 124
Line 200: =
Line 200: ID = signal
Line 200: -
Line 200: >
Line 200: ID = sig
Line 200: [
Line 200: INTCON = 0
Line 200: ]
Line 200: Unrecognized token: 38
Line 200: Unrecognized token: 126
Line 200: ID = blocked
Line 200: -
Line 200: >
Line 200: ID = sig
Line 200: [
Line 200: INTCON = 0
Line 200: ]
Line 200: ;
Line 201: ID = break
Line 201: ;
Line 203: ID = case
Line 203: INTCON = 2
Line 203: Unrecognized token: 58
Line 203: ID = ready
Line 203: =
Line 203: ID = signal
Line 203: -
Line 203: >
Line 203: ID = sig
Line 203: [
Line 203: INTCON = 1
Line 203: ]
Line 203: Unrecognized token: 38
Line 203: Unrecognized token: 126
Line 203: ID = blocked
Line 203: -
Line 203: >
Line 203: ID = sig
Line 203: [
Line 203: INTCON = 1
Line 203: ]
Line 203: ;
Line 204: ID = ready
Line 204: Unrecognized token: 124
Line 204: =
Line 204: ID = signal
Line 204: -
Line 204: >
Line 204: ID = sig
Line 204: [
Line 204: INTCON = 0
Line 204: ]
Line 204: Unrecognized token: 38
Line 204: Unrecognized token: 126
Line 204: ID = blocked
Line 204: -
Line 204: >
Line 204: ID = sig
Line 204: [
Line 204: INTCON = 0
Line 204: ]
Line 204: ;
Line 205: ID = break
Line 205: ;
Line 207: ID = case
Line 207: INTCON = 1
Line 207: Unrecognized token: 58
Line 207: ID = ready
Line 207: =
Line 207: ID = signal
Line 207: -
Line 207: >
Line 207: ID = sig
Line 207: [
Line 207: INTCON = 0
Line 207: ]
Line 207: Unrecognized token: 38
Line 207: Unrecognized token: 126
Line 207: ID = blocked
Line 207: -
Line 207: >
Line 207: ID = sig
Line 207: [
Line 207: INTCON = 0
Line 207: ]
Line 207: ;
Line 208: }
Line 209: return
Line 209: ID = ready
Line 209: !=
Line 209: INTCON = 0
Line 209: ;
Line 210: }
Line 212: Unrecognized token: 35
Line 212: ID = define
Line 212: ID = PENDING
Line 212: (
Line 212: ID = p
Line 212: ,
Line 212: ID = b
Line 212: )
Line 212: ID = has_pending_signals
Line 212: (
Line 212: Unrecognized token: 38
Line 212: (
Line 212: ID = p
Line 212: )
Line 212: -
Line 212: >
Line 212: ID = signal
Line 212: ,
Line 212: (
Line 212: ID = b
Line 212: )
Line 212: )
Line 214: ID = fastcall
Line 214: void
Line 214: ID = recalc_sigpending_tsk
Line 214: (
Line 214: ID = struct
Line 214: ID = task_struct
Line 214: *
Line 214: ID = t
Line 214: )
Line 215: {
Line 216: if
Line 216: (
Line 216: ID = t
Line 216: -
Line 216: >
Line 216: ID = signal
Line 216: -
Line 216: >
Line 216: ID = group_stop_count
Line 216: >
Line 216: INTCON = 0
Line 216: ||
Line 217: ID = PENDING
Line 217: (
Line 217: Unrecognized token: 38
Line 217: ID = t
Line 217: -
Line 217: >
Line 217: ID = pending
Line 217: ,
Line 217: Unrecognized token: 38
Line 217: ID = t
Line 217: -
Line 217: >
Line 217: ID = blocked
Line 217: )
Line 217: ||
Line 218: ID = PENDING
Line 218: (
Line 218: Unrecognized token: 38
Line 218: ID = t
Line 218: -
Line 218: >
Line 218: ID = signal
Line 218: -
Line 218: >
Line 218: ID = shared_pending
Line 218: ,
Line 218: Unrecognized token: 38
Line 218: ID = t
Line 218: -
Line 218: >
Line 218: ID = blocked
Line 218: )
Line 218: )
Line 219: ID = set_tsk_thread_flag
Line 219: (
Line 219: ID = t
Line 219: ,
Line 219: ID = TIF_SIGPENDING
Line 219: )
Line 219: ;
Line 220: else
Line 221: ID = clear_tsk_thread_flag
Line 221: (
Line 221: ID = t
Line 221: ,
Line 221: ID = TIF_SIGPENDING
Line 221: )
Line 221: ;
Line 222: }
Line 224: void
Line 224: ID = recalc_sigpending
Line 224: (
Line 224: void
Line 224: )
Line 225: {
Line 226: ID = recalc_sigpending_tsk
Line 226: (
Line 226: ID = current
Line 226: )
Line 226: ;
Line 227: }
Line 231: ID = static
Line 231: int
Line 232: ID = next_signal
Line 232: (
Line 232: ID = struct
Line 232: ID = sigpending
Line 232: *
Line 232: ID = pending
Line 232: ,
Line 232: ID = sigset_t
Line 232: *
Line 232: ID = mask
Line 232: )
Line 233: {
Line 234: ID = unsigned
Line 234: ID = long
Line 234: ID = i
Line 234: ,
Line 234: *
Line 234: ID = s
Line 234: ,
Line 234: *
Line 234: ID = m
Line 234: ,
Line 234: ID = x
Line 234: ;
Line 235: int
Line 235: ID = sig
Line 235: =
Line 235: INTCON = 0
Line 235: ;
Line 237: ID = s
Line 237: =
Line 237: ID = pending
Line 237: -
Line 237: >
Line 237: ID = signal
Line 237: Unrecognized token: 46
Line 237: ID = sig
Line 237: ;
Line 238: ID = m
Line 238: =
Line 238: ID = mask
Line 238: -
Line 238: >
Line 238: ID = sig
Line 238: ;
Line 239: ID = switch
Line 239: (
Line 239: Unrecognized token: 95
Line 239: ID = NSIG_WORDS
Line 239: )
Line 239: {
Line 240: ID = default
Line 240: Unrecognized token: 58
Line 241: for
Line 241: (
Line 241: ID = i
Line 241: =
Line 241: INTCON = 0
Line 241: ;
Line 241: ID = i
Line 241: <
Line 241: Unrecognized token: 95
Line 241: ID = NSIG_WORDS
Line 241: ;
Line 241: +
Line 241: +
Line 241: ID = i
Line 241: ,
Line 241: +
Line 241: +
Line 241: ID = s
Line 241: ,
Line 241: +
Line 241: +
Line 241: ID = m
Line 241: )
Line 242: if
Line 242: (
Line 242: (
Line 242: ID = x
Line 242: =
Line 242: *
Line 242: ID = s
Line 242: Unrecognized token: 38
Line 242: Unrecognized token: 126
Line 242: *
Line 242: ID = m
Line 242: )
Line 242: !=
Line 242: INTCON = 0
Line 242: )
Line 242: {
Line 243: ID = sig
Line 243: =
Line 243: ID = ffz
Line 243: (
Line 243: Unrecognized token: 126
Line 243: ID = x
Line 243: )
Line 243: +
Line 243: ID = i
Line 243: *
Line 243: Unrecognized token: 95
Line 243: ID = NSIG_BPW
Line 243: +
Line 243: INTCON = 1
Line 243: ;
Line 244: ID = break
Line 244: ;
Line 245: }
Line 246: ID = break
Line 246: ;
Line 248: ID = case
Line 248: INTCON = 2
Line 248: Unrecognized token: 58
Line 248: if
Line 248: (
Line 248: (
Line 248: ID = x
Line 248: =
Line 248: ID = s
Line 248: [
Line 248: INTCON = 0
Line 248: ]
Line 248: Unrecognized token: 38
Line 248: Unrecognized token: 126
Line 248: ID = m
Line 248: [
Line 248: INTCON = 0
Line 248: ]
Line 248: )
Line 248: !=
Line 248: INTCON = 0
Line 248: )
Line 249: ID = sig
Line 249: =
Line 249: INTCON = 1
Line 249: ;
Line 250: else
Line 250: if
Line 250: (
Line 250: (
Line 250: ID = x
Line 250: =
Line 250: ID = s
Line 250: [
Line 250: INTCON = 1
Line 250: ]
Line 250: Unrecognized token: 38
Line 250: Unrecognized token: 126
Line 250: ID = m
Line 250: [
Line 250: INTCON = 1
Line 250: ]
Line 250: )
Line 250: !=
Line 250: INTCON = 0
Line 250: )
Line 251: ID = sig
Line 251: =
Line 251: Unrecognized token: 95
Line 251: ID = NSIG_BPW
Line 251: +
Line 251: INTCON = 1
Line 251: ;
Line 252: else
Line 253: ID = break
Line 253: ;
Line 254: ID = sig
Line 254: +
Line 254: =
Line 254: ID = ffz
Line 254: (
Line 254: Unrecognized token: 126
Line 254: ID = x
Line 254: )
Line 254: ;
Line 255: ID = break
Line 255: ;
Line 257: ID = case
Line 257: INTCON = 1
Line 257: Unrecognized token: 58
Line 257: if
Line 257: (
Line 257: (
Line 257: ID = x
Line 257: =
Line 257: *
Line 257: ID = s
Line 257: Unrecognized token: 38
Line 257: Unrecognized token: 126
Line 257: *
Line 257: ID = m
Line 257: )
Line 257: !=
Line 257: INTCON = 0
Line 257: )
Line 258: ID = sig
Line 258: =
Line 258: ID = ffz
Line 258: (
Line 258: Unrecognized token: 126
Line 258: ID = x
Line 258: )
Line 258: +
Line 258: INTCON = 1
Line 258: ;
Line 259: ID = break
Line 259: ;
Line 260: }
Line 262: return
Line 262: ID = sig
Line 262: ;
Line 263: }
Line 265: ID = static
Line 265: ID = struct
Line 265: ID = sigqueue
Line 265: *
Line 265: Unrecognized token: 95
Line 265: Unrecognized token: 95
Line 265: ID = sigqueue_alloc
Line 265: (
Line 265: void
Line 265: )
Line 266: {
Line 267: ID = struct
Line 267: ID = sigqueue
Line 267: *
Line 267: ID = q
Line 267: =
Line 267: ID = NULL
Line 267: ;
Line 269: if
Line 269: (
Line 269: ID = atomic_read
Line 269: (
Line 269: Unrecognized token: 38
Line 269: ID = current
Line 269: -
Line 269: >
Line 269: ID = user
Line 269: -
Line 269: >
Line 269: ID = sigpending
Line 269: )
Line 269: <
Line 270: ID = current
Line 270: -
Line 270: >
Line 270: ID = rlim
Line 270: [
Line 270: ID = RLIMIT_SIGPENDING
Line 270: ]
Line 270: Unrecognized token: 46
Line 270: ID = rlim_cur
Line 270: )
Line 271: ID = q
Line 271: =
Line 271: ID = kmem_cache_alloc
Line 271: (
Line 271: ID = sigqueue_cachep
Line 271: ,
Line 271: ID = GFP_ATOMIC
Line 271: )
Line 271: ;
Line 272: if
Line 272: (
Line 272: ID = q
Line 272: )
Line 272: {
Line 273: ID = INIT_LIST_HEAD
Line 273: (
Line 273: Unrecognized token: 38
Line 273: ID = q
Line 273: -
Line 273: >
Line 273: ID = list
Line 273: )
Line 273: ;
Line 274: ID = q
Line 274: -
Line 274: >
Line 274: ID = flags
Line 274: =
Line 274: INTCON = 0
Line 274: ;
Line 275: ID = q
Line 275: -
Line 275: >
Line 275: ID = lock
Line 275: =
Line 275: ID = NULL
Line 275: ;
Line 276: ID = q
Line 276: -
Line 276: >
Line 276: ID = user
Line 276: =
Line 276: ID = get_uid
Line 276: (
Line 276: ID = current
Line 276: -
Line 276: >
Line 276: ID = user
Line 276: )
Line 276: ;
Line 277: ID = atomic_inc
Line 277: (
Line 277: Unrecognized token: 38
Line 277: ID = q
Line 277: -
Line 277: >
Line 277: ID = user
Line 277: -
Line 277: >
Line 277: ID = sigpending
Line 277: )
Line 277: ;
Line 278: }
Line 279: return
Line 279: (
Line 279: ID = q
Line 279: )
Line 279: ;
Line 280: }
Line 282: ID = static
Line 282: ID = inline
Line 282: void
Line 282: Unrecognized token: 95
Line 282: Unrecognized token: 95
Line 282: ID = sigqueue_free
Line 282: (
Line 282: ID = struct
Line 282: ID = sigqueue
Line 282: *
Line 282: ID = q
Line 282: )
Line 283: {
Line 284: if
Line 284: (
Line 284: ID = q
Line 284: -
Line 284: >
Line 284: ID = flags
Line 284: Unrecognized token: 38
Line 284: ID = SIGQUEUE_PREALLOC
Line 284: )
Line 285: return
Line 285: ;
Line 286: ID = atomic_dec
Line 286: (
Line 286: Unrecognized token: 38
Line 286: ID = q
Line 286: -
Line 286: >
Line 286: ID = user
Line 286: -
Line 286: >
Line 286: ID = sigpending
Line 286: )
Line 286: ;
Line 287: ID = free_uid
Line 287: (
Line 287: ID = q
Line 287: -
Line 287: >
Line 287: ID = user
Line 287: )
Line 287: ;
Line 288: ID = kmem_cache_free
Line 288: (
Line 288: ID = sigqueue_cachep
Line 288: ,
Line 288: ID = q
Line 288: )
Line 288: ;
Line 289: }
Line 291: ID = static
Line 291: void
Line 291: ID = flush_sigqueue
Line 291: (
Line 291: ID = struct
Line 291: ID = sigpending
Line 291: *
Line 291: ID = queue
Line 291: )
Line 292: {
Line 293: ID = struct
Line 293: ID = sigqueue
Line 293: *
Line 293: ID = q
Line 293: ;
Line 295: ID = sigemptyset
Line 295: (
Line 295: Unrecognized token: 38
Line 295: ID = queue
Line 295: -
Line 295: >
Line 295: ID = signal
Line 295: )
Line 295: ;
Line 296: while
Line 296: (
Line 296: !
Line 296: ID = list_empty
Line 296: (
Line 296: Unrecognized token: 38
Line 296: ID = queue
Line 296: -
Line 296: >
Line 296: ID = list
Line 296: )
Line 296: )
Line 296: {
Line 297: ID = q
Line 297: =
Line 297: ID = list_entry
Line 297: (
Line 297: ID = queue
Line 297: -
Line 297: >
Line 297: ID = list
Line 297: Unrecognized token: 46
Line 297: ID = next
Line 297: ,
Line 297: ID = struct
Line 297: ID = sigqueue
Line 297: ,
Line 297: ID = list
Line 297: )
Line 297: ;
Line 298: ID = list_del_init
Line 298: (
Line 298: Unrecognized token: 38
Line 298: ID = q
Line 298: -
Line 298: >
Line 298: ID = list
Line 298: )
Line 298: ;
Line 299: Unrecognized token: 95
Line 299: Unrecognized token: 95
Line 299: ID = sigqueue_free
Line 299: (
Line 299: ID = q
Line 299: )
Line 299: ;
Line 300: }
Line 301: }
Line 307: void
Line 308: ID = flush_signals
Line 308: (
Line 308: ID = struct
Line 308: ID = task_struct
Line 308: *
Line 308: ID = t
Line 308: )
Line 309: {
Line 310: ID = unsigned
Line 310: ID = long
Line 310: ID = flags
Line 310: ;
Line 312: ID = spin_lock_irqsave
Line 312: (
Line 312: Unrecognized token: 38
Line 312: ID = t
Line 312: -
Line 312: >
Line 312: ID = sighand
Line 312: -
Line 312: >
Line 312: ID = siglock
Line 312: ,
Line 312: ID = flags
Line 312: )
Line 312: ;
Line 313: ID = clear_tsk_thread_flag
Line 313: (
Line 313: ID = t
Line 313: ,
Line 313: ID = TIF_SIGPENDING
Line 313: )
Line 313: ;
Line 314: ID = flush_sigqueue
Line 314: (
Line 314: Unrecognized token: 38
Line 314: ID = t
Line 314: -
Line 314: >
Line 314: ID = pending
Line 314: )
Line 314: ;
Line 315: ID = flush_sigqueue
Line 315: (
Line 315: Unrecognized token: 38
Line 315: ID = t
Line 315: -
Line 315: >
Line 315: ID = signal
Line 315: -
Line 315: >
Line 315: ID = shared_pending
Line 315: )
Line 315: ;
Line 316: ID = spin_unlock_irqrestore
Line 316: (
Line 316: Unrecognized token: 38
Line 316: ID = t
Line 316: -
Line 316: >
Line 316: ID = sighand
Line 316: -
Line 316: >
Line 316: ID = siglock
Line 316: ,
Line 316: ID = flags
Line 316: )
Line 316: ;
Line 317: }
Line 322: void
Line 322: Unrecognized token: 95
Line 322: Unrecognized token: 95
Line 322: ID = exit_sighand
Line 322: (
Line 322: ID = struct
Line 322: ID = task_struct
Line 322: *
Line 322: ID = tsk
Line 322: )
Line 323: {
Line 324: ID = struct
Line 324: ID = sighand_struct
Line 324: *
Line 324: ID = sighand
Line 324: =
Line 324: ID = tsk
Line 324: -
Line 324: >
Line 324: ID = sighand
Line 324: ;
Line 327: ID = tsk
Line 327: -
Line 327: >
Line 327: ID = sighand
Line 327: =
Line 327: ID = NULL
Line 327: ;
Line 328: if
Line 328: (
Line 328: ID = atomic_dec_and_test
Line 328: (
Line 328: Unrecognized token: 38
Line 328: ID = sighand
Line 328: -
Line 328: >
Line 328: ID = count
Line 328: )
Line 328: )
Line 329: ID = kmem_cache_free
Line 329: (
Line 329: ID = sighand_cachep
Line 329: ,
Line 329: ID = sighand
Line 329: )
Line 329: ;
Line 330: }
Line 332: void
Line 332: ID = exit_sighand
Line 332: (
Line 332: ID = struct
Line 332: ID = task_struct
Line 332: *
Line 332: ID = tsk
Line 332: )
Line 333: {
Line 334: ID = write_lock_irq
Line 334: (
Line 334: Unrecognized token: 38
Line 334: ID = tasklist_lock
Line 334: )
Line 334: ;
Line 335: Unrecognized token: 95
Line 335: Unrecognized token: 95
Line 335: ID = exit_sighand
Line 335: (
Line 335: ID = tsk
Line 335: )
Line 335: ;
Line 336: ID = write_unlock_irq
Line 336: (
Line 336: Unrecognized token: 38
Line 336: ID = tasklist_lock
Line 336: )
Line 336: ;
Line 337: }
Line 342: void
Line 342: Unrecognized token: 95
Line 342: Unrecognized token: 95
Line 342: ID = exit_signal
Line 342: (
Line 342: ID = struct
Line 342: ID = task_struct
Line 342: *
Line 342: ID = tsk
Line 342: )
Line 343: {
Line 344: ID = struct
Line 344: ID = signal_struct
Line 344: *
Line 344: ID = sig
Line 344: =
Line 344: ID = tsk
Line 344: -
Line 344: >
Line 344: ID = signal
Line 344: ;
Line 345: ID = struct
Line 345: ID = sighand_struct
Line 345: *
Line 345: ID = sighand
Line 345: =
Line 345: ID = tsk
Line 345: -
Line 345: >
Line 345: ID = sighand
Line 345: ;
Line 347: if
Line 347: (
Line 347: !
Line 347: ID = sig
Line 347: )
Line 348: ID = BUG
Line 348: (
Line 348: )
Line 348: ;
Line 349: if
Line 349: (
Line 349: !
Line 349: ID = atomic_read
Line 349: (
Line 349: Unrecognized token: 38
Line 349: ID = sig
Line 349: -
Line 349: >
Line 349: ID = count
Line 349: )
Line 349: )
Line 350: ID = BUG
Line 350: (
Line 350: )
Line 350: ;
Line 351: ID = spin_lock
Line 351: (
Line 351: Unrecognized token: 38
Line 351: ID = sighand
Line 351: -
Line 351: >
Line 351: ID = siglock
Line 351: )
Line 351: ;
Line 352: if
Line 352: (
Line 352: ID = atomic_dec_and_test
Line 352: (
Line 352: Unrecognized token: 38
Line 352: ID = sig
Line 352: -
Line 352: >
Line 352: ID = count
Line 352: )
Line 352: )
Line 352: {
Line 353: if
Line 353: (
Line 353: ID = tsk
Line 353: ==
Line 353: ID = sig
Line 353: -
Line 353: >
Line 353: ID = curr_target
Line 353: )
Line 354: ID = sig
Line 354: -
Line 354: >
Line 354: ID = curr_target
Line 354: =
Line 354: ID = next_thread
Line 354: (
Line 354: ID = tsk
Line 354: )
Line 354: ;
Line 355: ID = tsk
Line 355: -
Line 355: >
Line 355: ID = signal
Line 355: =
Line 355: ID = NULL
Line 355: ;
Line 356: ID = spin_unlock
Line 356: (
Line 356: Unrecognized token: 38
Line 356: ID = sighand
Line 356: -
Line 356: >
Line 356: ID = siglock
Line 356: )
Line 356: ;
Line 357: ID = flush_sigqueue
Line 357: (
Line 357: Unrecognized token: 38
Line 357: ID = sig
Line 357: -
Line 357: >
Line 357: ID = shared_pending
Line 357: )
Line 357: ;
Line 358: }
Line 358: else
Line 358: {
Line 363: if
Line 363: (
Line 363: ID = sig
Line 363: -
Line 363: >
Line 363: ID = group_exit_task
Line 363: &&
Line 363: ID = atomic_read
Line 363: (
Line 363: Unrecognized token: 38
Line 363: ID = sig
Line 363: -
Line 363: >
Line 363: ID = count
Line 363: )
Line 363: ==
Line 363: ID = sig
Line 363: -
Line 363: >
Line 363: ID = notify_count
Line 363: )
Line 363: {
Line 364: ID = wake_up_process
Line 364: (
Line 364: ID = sig
Line 364: -
Line 364: >
Line 364: ID = group_exit_task
Line 364: )
Line 364: ;
Line 365: ID = sig
Line 365: -
Line 365: >
Line 365: ID = group_exit_task
Line 365: =
Line 365: ID = NULL
Line 365: ;
Line 366: }
Line 367: if
Line 367: (
Line 367: ID = tsk
Line 367: ==
Line 367: ID = sig
Line 367: -
Line 367: >
Line 367: ID = curr_target
Line 367: )
Line 368: ID = sig
Line 368: -
Line 368: >
Line 368: ID = curr_target
Line 368: =
Line 368: ID = next_thread
Line 368: (
Line 368: ID = tsk
Line 368: )
Line 368: ;
Line 369: ID = tsk
Line 369: -
Line 369: >
Line 369: ID = signal
Line 369: =
Line 369: ID = NULL
Line 369: ;
Line 370: ID = spin_unlock
Line 370: (
Line 370: Unrecognized token: 38
Line 370: ID = sighand
Line 370: -
Line 370: >
Line 370: ID = siglock
Line 370: )
Line 370: ;
Line 371: ID = sig
Line 371: =
Line 371: ID = NULL
Line 371: ;
Line 372: }
Line 373: ID = clear_tsk_thread_flag
Line 373: (
Line 373: ID = tsk
Line 373: ,
Line 373: ID = TIF_SIGPENDING
Line 373: )
Line 373: ;
Line 374: ID = flush_sigqueue
Line 374: (
Line 374: Unrecognized token: 38
Line 374: ID = tsk
Line 374: -
Line 374: >
Line 374: ID = pending
Line 374: )
Line 374: ;
Line 375: if
Line 375: (
Line 375: ID = sig
Line 375: )
Line 375: {
Line 390: ID = exit_itimers
Line 390: (
Line 390: ID = sig
Line 390: )
Line 390: ;
Line 391: ID = kmem_cache_free
Line 391: (
Line 391: ID = signal_cachep
Line 391: ,
Line 391: ID = sig
Line 391: )
Line 391: ;
Line 392: }
Line 393: }
Line 395: void
Line 395: ID = exit_signal
Line 395: (
Line 395: ID = struct
Line 395: ID = task_struct
Line 395: *
Line 395: ID = tsk
Line 395: )
Line 396: {
Line 397: ID = write_lock_irq
Line 397: (
Line 397: Unrecognized token: 38
Line 397: ID = tasklist_lock
Line 397: )
Line 397: ;
Line 398: Unrecognized token: 95
Line 398: Unrecognized token: 95
Line 398: ID = exit_signal
Line 398: (
Line 398: ID = tsk
Line 398: )
Line 398: ;
Line 399: ID = write_unlock_irq
Line 399: (
Line 399: Unrecognized token: 38
Line 399: ID = tasklist_lock
Line 399: )
Line 399: ;
Line 400: }
Line 406: void
Line 407: ID = flush_signal_handlers
Line 407: (
Line 407: ID = struct
Line 407: ID = task_struct
Line 407: *
Line 407: ID = t
Line 407: ,
Line 407: int
Line 407: ID = force_default
Line 407: )
Line 408: {
Line 409: int
Line 409: ID = i
Line 409: ;
Line 410: ID = struct
Line 410: ID = k_sigaction
Line 410: *
Line 410: ID = ka
Line 410: =
Line 410: Unrecognized token: 38
Line 410: ID = t
Line 410: -
Line 410: >
Line 410: ID = sighand
Line 410: -
Line 410: >
Line 410: ID = action
Line 410: [
Line 410: INTCON = 0
Line 410: ]
Line 410: ;
Line 411: for
Line 411: (
Line 411: ID = i
Line 411: =
Line 411: Unrecognized token: 95
Line 411: ID = NSIG
Line 411: ;
Line 411: ID = i
Line 411: !=
Line 411: INTCON = 0
Line 411: ;
Line 411: ID = i
Line 411: -
Line 411: -
Line 411: )
Line 411: {
Line 412: if
Line 412: (
Line 412: ID = force_default
Line 412: ||
Line 412: ID = ka
Line 412: -
Line 412: >
Line 412: ID = sa
Line 412: Unrecognized token: 46
Line 412: ID = sa_handler
Line 412: !=
Line 412: ID = SIG_IGN
Line 412: )
Line 413: ID = ka
Line 413: -
Line 413: >
Line 413: ID = sa
Line 413: Unrecognized token: 46
Line 413: ID = sa_handler
Line 413: =
Line 413: ID = SIG_DFL
Line 413: ;
Line 414: ID = ka
Line 414: -
Line 414: >
Line 414: ID = sa
Line 414: Unrecognized token: 46
Line 414: ID = sa_flags
Line 414: =
Line 414: INTCON = 0
Line 414: ;
Line 415: ID = sigemptyset
Line 415: (
Line 415: Unrecognized token: 38
Line 415: ID = ka
Line 415: -
Line 415: >
Line 415: ID = sa
Line 415: Unrecognized token: 46
Line 415: ID = sa_mask
Line 415: )
Line 415: ;
Line 416: ID = ka
Line 416: +
Line 416: +
Line 416: ;
Line 417: }
Line 418: }
Line 429: void
Line 430: ID = block_all_signals
Line 430: (
Line 430: int
Line 430: (
Line 430: *
Line 430: ID = notifier
Line 430: )
Line 430: (
Line 430: void
Line 430: *
Line 430: ID = priv
Line 430: )
Line 430: ,
Line 430: void
Line 430: *
Line 430: ID = priv
Line 430: ,
Line 430: ID = sigset_t
Line 430: *
Line 430: ID = mask
Line 430: )
Line 431: {
Line 432: ID = unsigned
Line 432: ID = long
Line 432: ID = flags
Line 432: ;
Line 434: ID = spin_lock_irqsave
Line 434: (
Line 434: Unrecognized token: 38
Line 434: ID = current
Line 434: -
Line 434: >
Line 434: ID = sighand
Line 434: -
Line 434: >
Line 434: ID = siglock
Line 434: ,
Line 434: ID = flags
Line 434: )
Line 434: ;
Line 435: ID = current
Line 435: -
Line 435: >
Line 435: ID = notifier_mask
Line 435: =
Line 435: ID = mask
Line 435: ;
Line 436: ID = current
Line 436: -
Line 436: >
Line 436: ID = notifier_data
Line 436: =
Line 436: ID = priv
Line 436: ;
Line 437: ID = current
Line 437: -
Line 437: >
Line 437: ID = notifier
Line 437: =
Line 437: ID = notifier
Line 437: ;
Line 438: ID = spin_unlock_irqrestore
Line 438: (
Line 438: Unrecognized token: 38
Line 438: ID = current
Line 438: -
Line 438: >
Line 438: ID = sighand
Line 438: -
Line 438: >
Line 438: ID = siglock
Line 438: ,
Line 438: ID = flags
Line 438: )
Line 438: ;
Line 439: }
Line 443: void
Line 444: ID = unblock_all_signals
Line 444: (
Line 444: void
Line 444: )
Line 445: {
Line 446: ID = unsigned
Line 446: ID = long
Line 446: ID = flags
Line 446: ;
Line 448: ID = spin_lock_irqsave
Line 448: (
Line 448: Unrecognized token: 38
Line 448: ID = current
Line 448: -
Line 448: >
Line 448: ID = sighand
Line 448: -
Line 448: >
Line 448: ID = siglock
Line 448: ,
Line 448: ID = flags
Line 448: )
Line 448: ;
Line 449: ID = current
Line 449: -
Line 449: >
Line 449: ID = notifier
Line 449: =
Line 449: ID = NULL
Line 449: ;
Line 450: ID = current
Line 450: -
Line 450: >
Line 450: ID = notifier_data
Line 450: =
Line 450: ID = NULL
Line 450: ;
Line 451: ID = recalc_sigpending
Line 451: (
Line 451: )
Line 451: ;
Line 452: ID = spin_unlock_irqrestore
Line 452: (
Line 452: Unrecognized token: 38
Line 452: ID = current
Line 452: -
Line 452: >
Line 452: ID = sighand
Line 452: -
Line 452: >
Line 452: ID = siglock
Line 452: ,
Line 452: ID = flags
Line 452: )
Line 452: ;
Line 453: }
Line 455: ID = static
Line 455: ID = inline
Line 455: int
Line 455: ID = collect_signal
Line 455: (
Line 455: int
Line 455: ID = sig
Line 455: ,
Line 455: ID = struct
Line 455: ID = sigpending
Line 455: *
Line 455: ID = list
Line 455: ,
Line 455: ID = siginfo_t
Line 455: *
Line 455: ID = info
Line 455: )
Line 456: {
Line 457: ID = struct
Line 457: ID = sigqueue
Line 457: *
Line 457: ID = q
Line 457: ,
Line 457: *
Line 457: ID = first
Line 457: =
Line 457: ID = NULL
Line 457: ;
Line 458: int
Line 458: ID = still_pending
Line 458: =
Line 458: INTCON = 0
Line 458: ;
Line 460: if
Line 460: (
Line 460: ID = unlikely
Line 460: (
Line 460: !
Line 460: ID = sigismember
Line 460: (
Line 460: Unrecognized token: 38
Line 460: ID = list
Line 460: -
Line 460: >
Line 460: ID = signal
Line 460: ,
Line 460: ID = sig
Line 460: )
Line 460: )
Line 460: )
Line 461: return
Line 461: INTCON = 0
Line 461: ;
Line 467: ID = list_for_each_entry
Line 467: (
Line 467: ID = q
Line 467: ,
Line 467: Unrecognized token: 38
Line 467: ID = list
Line 467: -
Line 467: >
Line 467: ID = list
Line 467: ,
Line 467: ID = list
Line 467: )
Line 467: {
Line 468: if
Line 468: (
Line 468: ID = q
Line 468: -
Line 468: >
Line 468: ID = info
Line 468: Unrecognized token: 46
Line 468: ID = si_signo
Line 468: ==
Line 468: ID = sig
Line 468: )
Line 468: {
Line 469: if
Line 469: (
Line 469: ID = first
Line 469: )
Line 469: {
Line 470: ID = still_pending
Line 470: =
Line 470: INTCON = 1
Line 470: ;
Line 471: ID = break
Line 471: ;
Line 472: }
Line 473: ID = first
Line 473: =
Line 473: ID = q
Line 473: ;
Line 474: }
Line 475: }
Line 476: if
Line 476: (
Line 476: ID = first
Line 476: )
Line 476: {
Line 477: ID = list_del_init
Line 477: (
Line 477: Unrecognized token: 38
Line 477: ID = first
Line 477: -
Line 477: >
Line 477: ID = list
Line 477: )
Line 477: ;
Line 478: ID = copy_siginfo
Line 478: (
Line 478: ID = info
Line 478: ,
Line 478: Unrecognized token: 38
Line 478: ID = first
Line 478: -
Line 478: >
Line 478: ID = info
Line 478: )
Line 478: ;
Line 479: Unrecognized token: 95
Line 479: Unrecognized token: 95
Line 479: ID = sigqueue_free
Line 479: (
Line 479: ID = first
Line 479: )
Line 479: ;
Line 480: if
Line 480: (
Line 480: !
Line 480: ID = still_pending
Line 480: )
Line 481: ID = sigdelset
Line 481: (
Line 481: Unrecognized token: 38
Line 481: ID = list
Line 481: -
Line 481: >
Line 481: ID = signal
Line 481: ,
Line 481: ID = sig
Line 481: )
Line 481: ;
Line 482: }
Line 482: else
Line 482: {
Line 488: ID = sigdelset
Line 488: (
Line 488: Unrecognized token: 38
Line 488: ID = list
Line 488: -
Line 488: >
Line 488: ID = signal
Line 488: ,
Line 488: ID = sig
Line 488: )
Line 488: ;
Line 489: ID = info
Line 489: -
Line 489: >
Line 489: ID = si_signo
Line 489: =
Line 489: ID = sig
Line 489: ;
Line 490: ID = info
Line 490: -
Line 490: >
Line 490: ID = si_errno
Line 490: =
Line 490: INTCON = 0
Line 490: ;
Line 491: ID = info
Line 491: -
Line 491: >
Line 491: ID = si_code
Line 491: =
Line 491: INTCON = 0
Line 491: ;
Line 492: ID = info
Line 492: -
Line 492: >
Line 492: ID = si_pid
Line 492: =
Line 492: INTCON = 0
Line 492: ;
Line 493: ID = info
Line 493: -
Line 493: >
Line 493: ID = si_uid
Line 493: =
Line 493: INTCON = 0
Line 493: ;
Line 494: }
Line 495: return
Line 495: INTCON = 1
Line 495: ;
Line 496: }
Line 498: ID = static
Line 498: int
Line 498: Unrecognized token: 95
Line 498: Unrecognized token: 95
Line 498: ID = dequeue_signal
Line 498: (
Line 498: ID = struct
Line 498: ID = sigpending
Line 498: *
Line 498: ID = pending
Line 498: ,
Line 498: ID = sigset_t
Line 498: *
Line 498: ID = mask
Line 498: ,
Line 499: ID = siginfo_t
Line 499: *
Line 499: ID = info
Line 499: )
Line 500: {
Line 501: int
Line 501: ID = sig
Line 501: =
Line 501: INTCON = 0
Line 501: ;
Line 503: ID = sig
Line 503: =
Line 503: ID = next_signal
Line 503: (
Line 503: ID = pending
Line 503: ,
Line 503: ID = mask
Line 503: )
Line 503: ;
Line 504: if
Line 504: (
Line 504: ID = sig
Line 504: )
Line 504: {
Line 505: if
Line 505: (
Line 505: ID = current
Line 505: -
Line 505: >
Line 505: ID = notifier
Line 505: )
Line 505: {
Line 506: if
Line 506: (
Line 506: ID = sigismember
Line 506: (
Line 506: ID = current
Line 506: -
Line 506: >
Line 506: ID = notifier_mask
Line 506: ,
Line 506: ID = sig
Line 506: )
Line 506: )
Line 506: {
Line 507: if
Line 507: (
Line 507: !
Line 507: (
Line 507: ID = current
Line 507: -
Line 507: >
Line 507: ID = notifier
Line 507: )
Line 507: (
Line 507: ID = current
Line 507: -
Line 507: >
Line 507: ID = notifier_data
Line 507: )
Line 507: )
Line 507: {
Line 508: ID = clear_thread_flag
Line 508: (
Line 508: ID = TIF_SIGPENDING
Line 508: )
Line 508: ;
Line 509: return
Line 509: INTCON = 0
Line 509: ;
Line 510: }
Line 511: }
Line 512: }
Line 514: if
Line 514: (
Line 514: !
Line 514: ID = collect_signal
Line 514: (
Line 514: ID = sig
Line 514: ,
Line 514: ID = pending
Line 514: ,
Line 514: ID = info
Line 514: )
Line 514: )
Line 515: ID = sig
Line 515: =
Line 515: INTCON = 0
Line 515: ;
Line 517: }
Line 518: ID = recalc_sigpending
Line 518: (
Line 518: )
Line 518: ;
Line 520: return
Line 520: ID = sig
Line 520: ;
Line 521: }
Line 529: int
Line 529: ID = dequeue_signal
Line 529: (
Line 529: ID = struct
Line 529: ID = task_struct
Line 529: *
Line 529: ID = tsk
Line 529: ,
Line 529: ID = sigset_t
Line 529: *
Line 529: ID = mask
Line 529: ,
Line 529: ID = siginfo_t
Line 529: *
Line 529: ID = info
Line 529: )
Line 530: {
Line 531: int
Line 531: ID = signr
Line 531: =
Line 531: Unrecognized token: 95
Line 531: Unrecognized token: 95
Line 531: ID = dequeue_signal
Line 531: (
Line 531: Unrecognized token: 38
Line 531: ID = tsk
Line 531: -
Line 531: >
Line 531: ID = pending
Line 531: ,
Line 531: ID = mask
Line 531: ,
Line 531: ID = info
Line 531: )
Line 531: ;
Line 532: if
Line 532: (
Line 532: !
Line 532: ID = signr
Line 532: )
Line 533: ID = signr
Line 533: =
Line 533: Unrecognized token: 95
Line 533: Unrecognized token: 95
Line 533: ID = dequeue_signal
Line 533: (
Line 533: Unrecognized token: 38
Line 533: ID = tsk
Line 533: -
Line 533: >
Line 533: ID = signal
Line 533: -
Line 533: >
Line 533: ID = shared_pending
Line 533: ,
Line 534: ID = mask
Line 534: ,
Line 534: ID = info
Line 534: )
Line 534: ;
Line 535: if
Line 535: (
Line 535: ID = signr
Line 535: &&
Line 536: (
Line 536: (
Line 536: ID = info
Line 536: -
Line 536: >
Line 536: ID = si_code
Line 536: Unrecognized token: 38
Line 536: Unrecognized token: 95
Line 536: Unrecognized token: 95
Line 536: ID = SI_MASK
Line 536: )
Line 536: ==
Line 536: Unrecognized token: 95
Line 536: Unrecognized token: 95
Line 536: ID = SI_TIMER
Line 536: )
Line 536: &&
Line 537: ID = info
Line 537: -
Line 537: >
Line 537: ID = si_sys_private
Line 537: )
Line 537: {
Line 538: ID = do_schedule_next_timer
Line 538: (
Line 538: ID = info
Line 538: )
Line 538: ;
Line 539: }
Line 540: return
Line 540: ID = signr
Line 540: ;
Line 541: }
Line 554: void
Line 554: ID = signal_wake_up
Line 554: (
Line 554: ID = struct
Line 554: ID = task_struct
Line 554: *
Line 554: ID = t
Line 554: ,
Line 554: int
Line 554: ID = resume
Line 554: )
Line 555: {
Line 556: ID = unsigned
Line 556: int
Line 556: ID = mask
Line 556: ;
Line 558: ID = set_tsk_thread_flag
Line 558: (
Line 558: ID = t
Line 558: ,
Line 558: ID = TIF_SIGPENDING
Line 558: )
Line 558: ;
Line 567: ID = mask
Line 567: =
Line 567: ID = TASK_INTERRUPTIBLE
Line 567: ;
Line 568: if
Line 568: (
Line 568: ID = resume
Line 568: )
Line 569: ID = mask
Line 569: Unrecognized token: 124
Line 569: =
Line 569: ID = TASK_STOPPED
Line 569: ;
Line 570: if
Line 570: (
Line 570: !
Line 570: ID = wake_up_state
Line 570: (
Line 570: ID = t
Line 570: ,
Line 570: ID = mask
Line 570: )
Line 570: )
Line 571: ID = kick_process
Line 571: (
Line 571: ID = t
Line 571: )
Line 571: ;
Line 572: }
Line 580: ID = static
Line 580: int
Line 580: ID = rm_from_queue
Line 580: (
Line 580: ID = unsigned
Line 580: ID = long
Line 580: ID = mask
Line 580: ,
Line 580: ID = struct
Line 580: ID = sigpending
Line 580: *
Line 580: ID = s
Line 580: )
Line 581: {
Line 582: ID = struct
Line 582: ID = sigqueue
Line 582: *
Line 582: ID = q
Line 582: ,
Line 582: *
Line 582: ID = n
Line 582: ;
Line 584: if
Line 584: (
Line 584: !
Line 584: ID = sigtestsetmask
Line 584: (
Line 584: Unrecognized token: 38
Line 584: ID = s
Line 584: -
Line 584: >
Line 584: ID = signal
Line 584: ,
Line 584: ID = mask
Line 584: )
Line 584: )
Line 585: return
Line 585: INTCON = 0
Line 585: ;
Line 587: ID = sigdelsetmask
Line 587: (
Line 587: Unrecognized token: 38
Line 587: ID = s
Line 587: -
Line 587: >
Line 587: ID = signal
Line 587: ,
Line 587: ID = mask
Line 587: )
Line 587: ;
Line 588: ID = list_for_each_entry_safe
Line 588: (
Line 588: ID = q
Line 588: ,
Line 588: ID = n
Line 588: ,
Line 588: Unrecognized token: 38
Line 588: ID = s
Line 588: -
Line 588: >
Line 588: ID = list
Line 588: ,
Line 588: ID = list
Line 588: )
Line 588: {
Line 589: if
Line 589: (
Line 589: ID = q
Line 589: -
Line 589: >
Line 589: ID = info
Line 589: Unrecognized token: 46
Line 589: ID = si_signo
Line 589: <
Line 589: ID = SIGRTMIN
Line 589: &&
Line 590: (
Line 590: ID = mask
Line 590: Unrecognized token: 38
Line 590: ID = sigmask
Line 590: (
Line 590: ID = q
Line 590: -
Line 590: >
Line 590: ID = info
Line 590: Unrecognized token: 46
Line 590: ID = si_signo
Line 590: )
Line 590: )
Line 590: )
Line 590: {
Line 591: ID = list_del_init
Line 591: (
Line 591: Unrecognized token: 38
Line 591: ID = q
Line 591: -
Line 591: >
Line 591: ID = list
Line 591: )
Line 591: ;
Line 592: Unrecognized token: 95
Line 592: Unrecognized token: 95
Line 592: ID = sigqueue_free
Line 592: (
Line 592: ID = q
Line 592: )
Line 592: ;
Line 593: }
Line 594: }
Line 595: return
Line 595: INTCON = 1
Line 595: ;
Line 596: }
Line 601: ID = static
Line 601: int
Line 601: ID = check_kill_permission
Line 601: (
Line 601: int
Line 601: ID = sig
Line 601: ,
Line 601: ID = struct
Line 601: ID = siginfo
Line 601: *
Line 601: ID = info
Line 601: ,
Line 602: ID = struct
Line 602: ID = task_struct
Line 602: *
Line 602: ID = t
Line 602: )
Line 603: {
Line 604: int
Line 604: ID = error
Line 604: =
Line 604: -
Line 604: ID = EINVAL
Line 604: ;
Line 605: if
Line 605: (
Line 605: ID = sig
Line 605: <
Line 605: INTCON = 0
Line 605: ||
Line 605: ID = sig
Line 605: >
Line 605: Unrecognized token: 95
Line 605: ID = NSIG
Line 605: )
Line 606: return
Line 606: ID = error
Line 606: ;
Line 607: ID = error
Line 607: =
Line 607: -
Line 607: ID = EPERM
Line 607: ;
Line 608: if
Line 608: (
Line 608: (
Line 608: !
Line 608: ID = info
Line 608: ||
Line 608: (
Line 608: (
Line 608: ID = unsigned
Line 608: ID = long
Line 608: )
Line 608: ID = info
Line 608: !=
Line 608: INTCON = 1
Line 608: &&
Line 609: (
Line 609: ID = unsigned
Line 609: ID = long
Line 609: )
Line 609: ID = info
Line 609: !=
Line 609: INTCON = 2
Line 609: &&
Line 609: ID = SI_FROMUSER
Line 609: (
Line 609: ID = info
Line 609: )
Line 609: )
Line 609: )
Line 610: &&
Line 610: (
Line 610: (
Line 610: ID = sig
Line 610: !=
Line 610: ID = SIGCONT
Line 610: )
Line 610: ||
Line 611: (
Line 611: ID = current
Line 611: -
Line 611: >
Line 611: ID = signal
Line 611: -
Line 611: >
Line 611: ID = session
Line 611: !=
Line 611: ID = t
Line 611: -
Line 611: >
Line 611: ID = signal
Line 611: -
Line 611: >
Line 611: ID = session
Line 611: )
Line 611: )
Line 612: &&
Line 612: (
Line 612: ID = current
Line 612: -
Line 612: >
Line 612: ID = euid
Line 612: Unrecognized token: 94
Line 612: ID = t
Line 612: -
Line 612: >
Line 612: ID = suid
Line 612: )
Line 612: &&
Line 612: (
Line 612: ID = current
Line 612: -
Line 612: >
Line 612: ID = euid
Line 612: Unrecognized token: 94
Line 612: ID = t
Line 612: -
Line 612: >
Line 612: ID = uid
Line 612: )
Line 613: &&
Line 613: (
Line 613: ID = current
Line 613: -
Line 613: >
Line 613: ID = uid
Line 613: Unrecognized token: 94
Line 613: ID = t
Line 613: -
Line 613: >
Line 613: ID = suid
Line 613: )
Line 613: &&
Line 613: (
Line 613: ID = current
Line 613: -
Line 613: >
Line 613: ID = uid
Line 613: Unrecognized token: 94
Line 613: ID = t
Line 613: -
Line 613: >
Line 613: ID = uid
Line 613: )
Line 614: &&
Line 614: !
Line 614: ID = capable
Line 614: (
Line 614: ID = CAP_KILL
Line 614: )
Line 614: )
Line 615: return
Line 615: ID = error
Line 615: ;
Line 616: return
Line 616: ID = security_task_kill
Line 616: (
Line 616: ID = t
Line 616: ,
Line 616: ID = info
Line 616: ,
Line 616: ID = sig
Line 616: )
Line 616: ;
Line 617: }
Line 620: ID = static
Line 620: void
Line 620: ID = do_notify_parent_cldstop
Line 620: (
Line 620: ID = struct
Line 620: ID = task_struct
Line 620: *
Line 620: ID = tsk
Line 620: ,
Line 621: ID = struct
Line 621: ID = task_struct
Line 621: *
Line 621: ID = parent
Line 621: )
Line 621: ;
Line 630: ID = static
Line 630: void
Line 630: ID = handle_stop_signal
Line 630: (
Line 630: int
Line 630: ID = sig
Line 630: ,
Line 630: ID = struct
Line 630: ID = task_struct
Line 630: *
Line 630: ID = p
Line 630: )
Line 631: {
Line 632: ID = struct
Line 632: ID = task_struct
Line 632: *
Line 632: ID = t
Line 632: ;
Line 634: if
Line 634: (
Line 634: ID = sig_kernel_stop
Line 634: (
Line 634: ID = sig
Line 634: )
Line 634: )
Line 634: {
Line 638: ID = rm_from_queue
Line 638: (
Line 638: ID = sigmask
Line 638: (
Line 638: ID = SIGCONT
Line 638: )
Line 638: ,
Line 638: Unrecognized token: 38
Line 638: ID = p
Line 638: -
Line 638: >
Line 638: ID = signal
Line 638: -
Line 638: >
Line 638: ID = shared_pending
Line 638: )
Line 638: ;
Line 639: ID = t
Line 639: =
Line 639: ID = p
Line 639: ;
Line 640: ID = do
Line 640: {
Line 641: ID = rm_from_queue
Line 641: (
Line 641: ID = sigmask
Line 641: (
Line 641: ID = SIGCONT
Line 641: )
Line 641: ,
Line 641: Unrecognized token: 38
Line 641: ID = t
Line 641: -
Line 641: >
Line 641: ID = pending
Line 641: )
Line 641: ;
Line 642: ID = t
Line 642: =
Line 642: ID = next_thread
Line 642: (
Line 642: ID = t
Line 642: )
Line 642: ;
Line 643: }
Line 643: while
Line 643: (
Line 643: ID = t
Line 643: !=
Line 643: ID = p
Line 643: )
Line 643: ;
Line 644: }
Line 644: else
Line 644: if
Line 644: (
Line 644: ID = sig
Line 644: ==
Line 644: ID = SIGCONT
Line 644: )
Line 644: {
Line 649: if
Line 649: (
Line 649: ID = unlikely
Line 649: (
Line 649: ID = p
Line 649: -
Line 649: >
Line 649: ID = signal
Line 649: -
Line 649: >
Line 649: ID = group_stop_count
Line 649: >
Line 649: INTCON = 0
Line 649: )
Line 649: )
Line 649: {
Line 662: ID = p
Line 662: -
Line 662: >
Line 662: ID = signal
Line 662: -
Line 662: >
Line 662: ID = group_stop_count
Line 662: =
Line 662: INTCON = 0
Line 662: ;
Line 663: if
Line 663: (
Line 663: ID = p
Line 663: -
Line 663: >
Line 663: ID = ptrace
Line 663: Unrecognized token: 38
Line 663: ID = PT_PTRACED
Line 663: )
Line 664: ID = do_notify_parent_cldstop
Line 664: (
Line 664: ID = p
Line 664: ,
Line 664: ID = p
Line 664: -
Line 664: >
Line 664: ID = parent
Line 664: )
Line 664: ;
Line 665: else
Line 666: ID = do_notify_parent_cldstop
Line 666: (
Line 667: ID = p
Line 667: -
Line 667: >
Line 667: ID = group_leader
Line 667: ,
Line 668: ID = p
Line 668: -
Line 668: >
Line 668: ID = group_leader
Line 668: -
Line 668: >
Line 668: ID = real_parent
Line 668: )
Line 668: ;
Line 669: }
Line 670: ID = rm_from_queue
Line 670: (
Line 670: ID = SIG_KERNEL_STOP_MASK
Line 670: ,
Line 670: Unrecognized token: 38
Line 670: ID = p
Line 670: -
Line 670: >
Line 670: ID = signal
Line 670: -
Line 670: >
Line 670: ID = shared_pending
Line 670: )
Line 670: ;
Line 671: ID = t
Line 671: =
Line 671: ID = p
Line 671: ;
Line 672: ID = do
Line 672: {
Line 673: ID = unsigned
Line 673: int
Line 673: ID = state
Line 673: ;
Line 674: ID = rm_from_queue
Line 674: (
Line 674: ID = SIG_KERNEL_STOP_MASK
Line 674: ,
Line 674: Unrecognized token: 38
Line 674: ID = t
Line 674: -
Line 674: >
Line 674: ID = pending
Line 674: )
Line 674: ;
Line 690: ID = state
Line 690: =
Line 690: ID = TASK_STOPPED
Line 690: ;
Line 691: if
Line 691: (
Line 691: ID = sig_user_defined
Line 691: (
Line 691: ID = t
Line 691: ,
Line 691: ID = SIGCONT
Line 691: )
Line 691: &&
Line 691: !
Line 691: ID = sigismember
Line 691: (
Line 691: Unrecognized token: 38
Line 691: ID = t
Line 691: -
Line 691: >
Line 691: ID = blocked
Line 691: ,
Line 691: ID = SIGCONT
Line 691: )
Line 691: )
Line 691: {
Line 692: ID = set_tsk_thread_flag
Line 692: (
Line 692: ID = t
Line 692: ,
Line 692: ID = TIF_SIGPENDING
Line 692: )
Line 692: ;
Line 693: ID = state
Line 693: Unrecognized token: 124
Line 693: =
Line 693: ID = TASK_INTERRUPTIBLE
Line 693: ;
Line 694: }
Line 695: ID = wake_up_state
Line 695: (
Line 695: ID = t
Line 695: ,
Line 695: ID = state
Line 695: )
Line 695: ;
Line 697: ID = t
Line 697: =
Line 697: ID = next_thread
Line 697: (
Line 697: ID = t
Line 697: )
Line 697: ;
Line 698: }
Line 698: while
Line 698: (
Line 698: ID = t
Line 698: !=
Line 698: ID = p
Line 698: )
Line 698: ;
Line 699: }
Line 700: }
Line 702: ID = static
Line 702: int
Line 702: ID = send_signal
Line 702: (
Line 702: int
Line 702: ID = sig
Line 702: ,
Line 702: ID = struct
Line 702: ID = siginfo
Line 702: *
Line 702: ID = info
Line 702: ,
Line 702: ID = struct
Line 702: ID = task_struct
Line 702: *
Line 702: ID = t
Line 702: ,
Line 703: ID = struct
Line 703: ID = sigpending
Line 703: *
Line 703: ID = signals
Line 703: )
Line 704: {
Line 705: ID = struct
Line 705: ID = sigqueue
Line 705: *
Line 705: ID = q
Line 705: =
Line 705: ID = NULL
Line 705: ;
Line 706: int
Line 706: ID = ret
Line 706: =
Line 706: INTCON = 0
Line 706: ;
Line 712: if
Line 712: (
Line 712: (
Line 712: ID = unsigned
Line 712: ID = long
Line 712: )
Line 712: ID = info
Line 712: ==
Line 712: INTCON = 2
Line 712: )
Line 713: ID = goto
Line 713: ID = out_set
Line 713: ;
Line 723: if
Line 723: (
Line 723: ID = atomic_read
Line 723: (
Line 723: Unrecognized token: 38
Line 723: ID = t
Line 723: -
Line 723: >
Line 723: ID = user
Line 723: -
Line 723: >
Line 723: ID = sigpending
Line 723: )
Line 723: <
Line 724: ID = t
Line 724: -
Line 724: >
Line 724: ID = rlim
Line 724: [
Line 724: ID = RLIMIT_SIGPENDING
Line 724: ]
Line 724: Unrecognized token: 46
Line 724: ID = rlim_cur
Line 724: )
Line 725: ID = q
Line 725: =
Line 725: ID = kmem_cache_alloc
Line 725: (
Line 725: ID = sigqueue_cachep
Line 725: ,
Line 725: ID = GFP_ATOMIC
Line 725: )
Line 725: ;
Line 727: if
Line 727: (
Line 727: ID = q
Line 727: )
Line 727: {
Line 728: ID = q
Line 728: -
Line 728: >
Line 728: ID = flags
Line 728: =
Line 728: INTCON = 0
Line 728: ;
Line 729: ID = q
Line 729: -
Line 729: >
Line 729: ID = user
Line 729: =
Line 729: ID = get_uid
Line 729: (
Line 729: ID = t
Line 729: -
Line 729: >
Line 729: ID = user
Line 729: )
Line 729: ;
Line 730: ID = atomic_inc
Line 730: (
Line 730: Unrecognized token: 38
Line 730: ID = q
Line 730: -
Line 730: >
Line 730: ID = user
Line 730: -
Line 730: >
Line 730: ID = sigpending
Line 730: )
Line 730: ;
Line 731: ID = list_add_tail
Line 731: (
Line 731: Unrecognized token: 38
Line 731: ID = q
Line 731: -
Line 731: >
Line 731: ID = list
Line 731: ,
Line 731: Unrecognized token: 38
Line 731: ID = signals
Line 731: -
Line 731: >
Line 731: ID = list
Line 731: )
Line 731: ;
Line 732: ID = switch
Line 732: (
Line 732: (
Line 732: ID = unsigned
Line 732: ID = long
Line 732: )
Line 732: ID = info
Line 732: )
Line 732: {
Line 733: ID = case
Line 733: INTCON = 0
Line 733: Unrecognized token: 58
Line 734: ID = q
Line 734: -
Line 734: >
Line 734: ID = info
Line 734: Unrecognized token: 46
Line 734: ID = si_signo
Line 734: =
Line 734: ID = sig
Line 734: ;
Line 735: ID = q
Line 735: -
Line 735: >
Line 735: ID = info
Line 735: Unrecognized token: 46
Line 735: ID = si_errno
Line 735: =
Line 735: INTCON = 0
Line 735: ;
Line 736: ID = q
Line 736: -
Line 736: >
Line 736: ID = info
Line 736: Unrecognized token: 46
Line 736: ID = si_code
Line 736: =
Line 736: ID = SI_USER
Line 736: ;
Line 737: ID = q
Line 737: -
Line 737: >
Line 737: ID = info
Line 737: Unrecognized token: 46
Line 737: ID = si_pid
Line 737: =
Line 737: ID = current
Line 737: -
Line 737: >
Line 737: ID = pid
Line 737: ;
Line 738: ID = q
Line 738: -
Line 738: >
Line 738: ID = info
Line 738: Unrecognized token: 46
Line 738: ID = si_uid
Line 738: =
Line 738: ID = current
Line 738: -
Line 738: >
Line 738: ID = uid
Line 738: ;
Line 739: ID = break
Line 739: ;
Line 740: ID = case
Line 740: INTCON = 1
Line 740: Unrecognized token: 58
Line 741: ID = q
Line 741: -
Line 741: >
Line 741: ID = info
Line 741: Unrecognized token: 46
Line 741: ID = si_signo
Line 741: =
Line 741: ID = sig
Line 741: ;
Line 742: ID = q
Line 742: -
Line 742: >
Line 742: ID = info
Line 742: Unrecognized token: 46
Line 742: ID = si_errno
Line 742: =
Line 742: INTCON = 0
Line 742: ;
Line 743: ID = q
Line 743: -
Line 743: >
Line 743: ID = info
Line 743: Unrecognized token: 46
Line 743: ID = si_code
Line 743: =
Line 743: ID = SI_KERNEL
Line 743: ;
Line 744: ID = q
Line 744: -
Line 744: >
Line 744: ID = info
Line 744: Unrecognized token: 46
Line 744: ID = si_pid
Line 744: =
Line 744: INTCON = 0
Line 744: ;
Line 745: ID = q
Line 745: -
Line 745: >
Line 745: ID = info
Line 745: Unrecognized token: 46
Line 745: ID = si_uid
Line 745: =
Line 745: INTCON = 0
Line 745: ;
Line 746: ID = break
Line 746: ;
Line 747: ID = default
Line 747: Unrecognized token: 58
Line 748: ID = copy_siginfo
Line 748: (
Line 748: Unrecognized token: 38
Line 748: ID = q
Line 748: -
Line 748: >
Line 748: ID = info
Line 748: ,
Line 748: ID = info
Line 748: )
Line 748: ;
Line 749: ID = break
Line 749: ;
Line 750: }
Line 751: }
Line 751: else
Line 751: {
Line 752: if
Line 752: (
Line 752: ID = sig
Line 752: >=
Line 752: ID = SIGRTMIN
Line 752: &&
Line 752: ID = info
Line 752: &&
Line 752: (
Line 752: ID = unsigned
Line 752: ID = long
Line 752: )
Line 752: ID = info
Line 752: !=
Line 752: INTCON = 1
Line 753: &&
Line 753: ID = info
Line 753: -
Line 753: >
Line 753: ID = si_code
Line 753: !=
Line 753: ID = SI_USER
Line 753: )
Line 758: return
Line 758: -
Line 758: ID = EAGAIN
Line 758: ;
Line 759: if
Line 759: (
Line 759: (
Line 759: (
Line 759: ID = unsigned
Line 759: ID = long
Line 759: )
Line 759: ID = info
Line 759: >
Line 759: INTCON = 1
Line 759: )
Line 759: &&
Line 759: (
Line 759: ID = info
Line 759: -
Line 759: >
Line 759: ID = si_code
Line 759: ==
Line 759: ID = SI_TIMER
Line 759: )
Line 759: )
Line 764: ID = ret
Line 764: =
Line 764: ID = info
Line 764: -
Line 764: >
Line 764: ID = si_sys_private
Line 764: ;
Line 765: }
Line 767: ID = out_set
Line 767: Unrecognized token: 58
Line 768: ID = sigaddset
Line 768: (
Line 768: Unrecognized token: 38
Line 768: ID = signals
Line 768: -
Line 768: >
Line 768: ID = signal
Line 768: ,
Line 768: ID = sig
Line 768: )
Line 768: ;
Line 769: return
Line 769: ID = ret
Line 769: ;
Line 770: }
Line 772: Unrecognized token: 35
Line 772: ID = define
Line 772: ID = LEGACY_QUEUE
Line 772: (
Line 772: ID = sigptr
Line 772: ,
Line 772: ID = sig
Line 772: )
Line 772: Unrecognized token: 92
Line 773: (
Line 773: (
Line 773: (
Line 773: ID = sig
Line 773: )
Line 773: <
Line 773: ID = SIGRTMIN
Line 773: )
Line 773: &&
Line 773: ID = sigismember
Line 773: (
Line 773: Unrecognized token: 38
Line 773: (
Line 773: ID = sigptr
Line 773: )
Line 773: -
Line 773: >
Line 773: ID = signal
Line 773: ,
Line 773: (
Line 773: ID = sig
Line 773: )
Line 773: )
Line 773: )
Line 776: ID = static
Line 776: int
Line 777: ID = specific_send_sig_info
Line 777: (
Line 777: int
Line 777: ID = sig
Line 777: ,
Line 777: ID = struct
Line 777: ID = siginfo
Line 777: *
Line 777: ID = info
Line 777: ,
Line 777: ID = struct
Line 777: ID = task_struct
Line 777: *
Line 777: ID = t
Line 777: )
Line 778: {
Line 779: int
Line 779: ID = ret
Line 779: =
Line 779: INTCON = 0
Line 779: ;
Line 781: if
Line 781: (
Line 781: !
Line 781: ID = irqs_disabled
Line 781: (
Line 781: )
Line 781: )
Line 782: ID = BUG
Line 782: (
Line 782: )
Line 782: ;
Line 783: Unrecognized token: 35
Line 783: ID = ifdef
Line 783: ID = CONFIG_SMP
Line 784: if
Line 784: (
Line 784: !
Line 784: ID = spin_is_locked
Line 784: (
Line 784: Unrecognized token: 38
Line 784: ID = t
Line 784: -
Line 784: >
Line 784: ID = sighand
Line 784: -
Line 784: >
Line 784: ID = siglock
Line 784: )
Line 784: )
Line 785: ID = BUG
Line 785: (
Line 785: )
Line 785: ;
Line 786: Unrecognized token: 35
Line 786: ID = endif
Line 788: if
Line 788: (
Line 788: (
Line 788: (
Line 788: ID = unsigned
Line 788: ID = long
Line 788: )
Line 788: ID = info
Line 788: >
Line 788: INTCON = 2
Line 788: )
Line 788: &&
Line 788: (
Line 788: ID = info
Line 788: -
Line 788: >
Line 788: ID = si_code
Line 788: ==
Line 788: ID = SI_TIMER
Line 788: )
Line 788: )
Line 792: ID = ret
Line 792: =
Line 792: ID = info
Line 792: -
Line 792: >
Line 792: ID = si_sys_private
Line 792: ;
Line 795: if
Line 795: (
Line 795: ID = sig_ignored
Line 795: (
Line 795: ID = t
Line 795: ,
Line 795: ID = sig
Line 795: )
Line 795: )
Line 796: ID = goto
Line 796: ID = out
Line 796: ;
Line 801: if
Line 801: (
Line 801: ID = LEGACY_QUEUE
Line 801: (
Line 801: Unrecognized token: 38
Line 801: ID = t
Line 801: -
Line 801: >
Line 801: ID = pending
Line 801: ,
Line 801: ID = sig
Line 801: )
Line 801: )
Line 802: ID = goto
Line 802: ID = out
Line 802: ;
Line 804: ID = ret
Line 804: =
Line 804: ID = send_signal
Line 804: (
Line 804: ID = sig
Line 804: ,
Line 804: ID = info
Line 804: ,
Line 804: ID = t
Line 804: ,
Line 804: Unrecognized token: 38
Line 804: ID = t
Line 804: -
Line 804: >
Line 804: ID = pending
Line 804: )
Line 804: ;
Line 805: if
Line 805: (
Line 805: !
Line 805: ID = ret
Line 805: &&
Line 805: !
Line 805: ID = sigismember
Line 805: (
Line 805: Unrecognized token: 38
Line 805: ID = t
Line 805: -
Line 805: >
Line 805: ID = blocked
Line 805: ,
Line 805: ID = sig
Line 805: )
Line 805: )
Line 806: ID = signal_wake_up
Line 806: (
Line 806: ID = t
Line 806: ,
Line 806: ID = sig
Line 806: ==
Line 806: ID = SIGKILL
Line 806: )
Line 806: ;
Line 807: ID = out
Line 807: Unrecognized token: 58
Line 808: return
Line 808: ID = ret
Line 808: ;
Line 809: }
Line 816: int
Line 817: ID = force_sig_info
Line 817: (
Line 817: int
Line 817: ID = sig
Line 817: ,
Line 817: ID = struct
Line 817: ID = siginfo
Line 817: *
Line 817: ID = info
Line 817: ,
Line 817: ID = struct
Line 817: ID = task_struct
Line 817: *
Line 817: ID = t
Line 817: )
Line 818: {
Line 819: ID = unsigned
Line 819: ID = long
Line 819: int
Line 819: ID = flags
Line 819: ;
Line 820: int
Line 820: ID = ret
Line 820: ;
Line 822: ID = spin_lock_irqsave
Line 822: (
Line 822: Unrecognized token: 38
Line 822: ID = t
Line 822: -
Line 822: >
Line 822: ID = sighand
Line 822: -
Line 822: >
Line 822: ID = siglock
Line 822: ,
Line 822: ID = flags
Line 822: )
Line 822: ;
Line 823: if
Line 823: (
Line 823: ID = sigismember
Line 823: (
Line 823: Unrecognized token: 38
Line 823: ID = t
Line 823: -
Line 823: >
Line 823: ID = blocked
Line 823: ,
Line 823: ID = sig
Line 823: )
Line 823: ||
Line 823: ID = t
Line 823: -
Line 823: >
Line 823: ID = sighand
Line 823: -
Line 823: >
Line 823: ID = action
Line 823: [
Line 823: ID = sig
Line 823: -
Line 823: INTCON = 1
Line 823: ]
Line 823: Unrecognized token: 46
Line 823: ID = sa
Line 823: Unrecognized token: 46
Line 823: ID = sa_handler
Line 823: ==
Line 823: ID = SIG_IGN
Line 823: )
Line 823: {
Line 824: ID = t
Line 824: -
Line 824: >
Line 824: ID = sighand
Line 824: -
Line 824: >
Line 824: ID = action
Line 824: [
Line 824: ID = sig
Line 824: -
Line 824: INTCON = 1
Line 824: ]
Line 824: Unrecognized token: 46
Line 824: ID = sa
Line 824: Unrecognized token: 46
Line 824: ID = sa_handler
Line 824: =
Line 824: ID = SIG_DFL
Line 824: ;
Line 825: ID = sigdelset
Line 825: (
Line 825: Unrecognized token: 38
Line 825: ID = t
Line 825: -
Line 825: >
Line 825: ID = blocked
Line 825: ,
Line 825: ID = sig
Line 825: )
Line 825: ;
Line 826: ID = recalc_sigpending_tsk
Line 826: (
Line 826: ID = t
Line 826: )
Line 826: ;
Line 827: }
Line 828: ID = ret
Line 828: =
Line 828: ID = specific_send_sig_info
Line 828: (
Line 828: ID = sig
Line 828: ,
Line 828: ID = info
Line 828: ,
Line 828: ID = t
Line 828: )
Line 828: ;
Line 829: ID = spin_unlock_irqrestore
Line 829: (
Line 829: Unrecognized token: 38
Line 829: ID = t
Line 829: -
Line 829: >
Line 829: ID = sighand
Line 829: -
Line 829: >
Line 829: ID = siglock
Line 829: ,
Line 829: ID = flags
Line 829: )
Line 829: ;
Line 831: return
Line 831: ID = ret
Line 831: ;
Line 832: }
Line 834: void
Line 835: ID = force_sig_specific
Line 835: (
Line 835: int
Line 835: ID = sig
Line 835: ,
Line 835: ID = struct
Line 835: ID = task_struct
Line 835: *
Line 835: ID = t
Line 835: )
Line 836: {
Line 837: ID = unsigned
Line 837: ID = long
Line 837: int
Line 837: ID = flags
Line 837: ;
Line 839: ID = spin_lock_irqsave
Line 839: (
Line 839: Unrecognized token: 38
Line 839: ID = t
Line 839: -
Line 839: >
Line 839: ID = sighand
Line 839: -
Line 839: >
Line 839: ID = siglock
Line 839: ,
Line 839: ID = flags
Line 839: )
Line 839: ;
Line 840: if
Line 840: (
Line 840: ID = t
Line 840: -
Line 840: >
Line 840: ID = sighand
Line 840: -
Line 840: >
Line 840: ID = action
Line 840: [
Line 840: ID = sig
Line 840: -
Line 840: INTCON = 1
Line 840: ]
Line 840: Unrecognized token: 46
Line 840: ID = sa
Line 840: Unrecognized token: 46
Line 840: ID = sa_handler
Line 840: ==
Line 840: ID = SIG_IGN
Line 840: )
Line 841: ID = t
Line 841: -
Line 841: >
Line 841: ID = sighand
Line 841: -
Line 841: >
Line 841: ID = action
Line 841: [
Line 841: ID = sig
Line 841: -
Line 841: INTCON = 1
Line 841: ]
Line 841: Unrecognized token: 46
Line 841: ID = sa
Line 841: Unrecognized token: 46
Line 841: ID = sa_handler
Line 841: =
Line 841: ID = SIG_DFL
Line 841: ;
Line 842: ID = sigdelset
Line 842: (
Line 842: Unrecognized token: 38
Line 842: ID = t
Line 842: -
Line 842: >
Line 842: ID = blocked
Line 842: ,
Line 842: ID = sig
Line 842: )
Line 842: ;
Line 843: ID = recalc_sigpending_tsk
Line 843: (
Line 843: ID = t
Line 843: )
Line 843: ;
Line 844: ID = specific_send_sig_info
Line 844: (
Line 844: ID = sig
Line 844: ,
Line 844: (
Line 844: void
Line 844: *
Line 844: )
Line 844: INTCON = 2
Line 844: ,
Line 844: ID = t
Line 844: )
Line 844: ;
Line 845: ID = spin_unlock_irqrestore
Line 845: (
Line 845: Unrecognized token: 38
Line 845: ID = t
Line 845: -
Line 845: >
Line 845: ID = sighand
Line 845: -
Line 845: >
Line 845: ID = siglock
Line 845: ,
Line 845: ID = flags
Line 845: )
Line 845: ;
Line 846: }
Line 856: Unrecognized token: 35
Line 856: ID = define
Line 856: ID = wants_signal
Line 856: (
Line 856: ID = sig
Line 856: ,
Line 856: ID = p
Line 856: ,
Line 856: ID = mask
Line 856: )
Line 856: Unrecognized token: 92
Line 857: (
Line 857: !
Line 857: ID = sigismember
Line 857: (
Line 857: Unrecognized token: 38
Line 857: (
Line 857: ID = p
Line 857: )
Line 857: -
Line 857: >
Line 857: ID = blocked
Line 857: ,
Line 857: ID = sig
Line 857: )
Line 857: Unrecognized token: 92
Line 858: &&
Line 858: !
Line 858: (
Line 858: (
Line 858: ID = p
Line 858: )
Line 858: -
Line 858: >
Line 858: ID = state
Line 858: Unrecognized token: 38
Line 858: ID = mask
Line 858: )
Line 858: Unrecognized token: 92
Line 859: &&
Line 859: !
Line 859: (
Line 859: (
Line 859: ID = p
Line 859: )
Line 859: -
Line 859: >
Line 859: ID = flags
Line 859: Unrecognized token: 38
Line 859: ID = PF_EXITING
Line 859: )
Line 859: Unrecognized token: 92
Line 860: &&
Line 860: (
Line 860: ID = task_curr
Line 860: (
Line 860: ID = p
Line 860: )
Line 860: ||
Line 860: !
Line 860: ID = signal_pending
Line 860: (
Line 860: ID = p
Line 860: )
Line 860: )
Line 860: )
Line 863: ID = static
Line 863: void
Line 864: Unrecognized token: 95
Line 864: Unrecognized token: 95
Line 864: ID = group_complete_signal
Line 864: (
Line 864: int
Line 864: ID = sig
Line 864: ,
Line 864: ID = struct
Line 864: ID = task_struct
Line 864: *
Line 864: ID = p
Line 864: ,
Line 864: ID = unsigned
Line 864: int
Line 864: ID = mask
Line 864: )
Line 865: {
Line 866: ID = struct
Line 866: ID = task_struct
Line 866: *
Line 866: ID = t
Line 866: ;
Line 874: if
Line 874: (
Line 874: ID = wants_signal
Line 874: (
Line 874: ID = sig
Line 874: ,
Line 874: ID = p
Line 874: ,
Line 874: ID = mask
Line 874: )
Line 874: )
Line 875: ID = t
Line 875: =
Line 875: ID = p
Line 875: ;
Line 876: else
Line 876: if
Line 876: (
Line 876: ID = thread_group_empty
Line 876: (
Line 876: ID = p
Line 876: )
Line 876: )
Line 881: return
Line 881: ;
Line 882: else
Line 882: {
Line 886: ID = t
Line 886: =
Line 886: ID = p
Line 886: -
Line 886: >
Line 886: ID = signal
Line 886: -
Line 886: >
Line 886: ID = curr_target
Line 886: ;
Line 887: if
Line 887: (
Line 887: ID = t
Line 887: ==
Line 887: ID = NULL
Line 887: )
Line 889: ID = t
Line 889: =
Line 889: ID = p
Line 889: -
Line 889: >
Line 889: ID = signal
Line 889: -
Line 889: >
Line 889: ID = curr_target
Line 889: =
Line 889: ID = p
Line 889: ;
Line 890: ID = BUG_ON
Line 890: (
Line 890: ID = t
Line 890: -
Line 890: >
Line 890: ID = tgid
Line 890: !=
Line 890: ID = p
Line 890: -
Line 890: >
Line 890: ID = tgid
Line 890: )
Line 890: ;
Line 892: while
Line 892: (
Line 892: !
Line 892: ID = wants_signal
Line 892: (
Line 892: ID = sig
Line 892: ,
Line 892: ID = t
Line 892: ,
Line 892: ID = mask
Line 892: )
Line 892: )
Line 892: {
Line 893: ID = t
Line 893: =
Line 893: ID = next_thread
Line 893: (
Line 893: ID = t
Line 893: )
Line 893: ;
Line 894: if
Line 894: (
Line 894: ID = t
Line 894: ==
Line 894: ID = p
Line 894: -
Line 894: >
Line 894: ID = signal
Line 894: -
Line 894: >
Line 894: ID = curr_target
Line 894: )
Line 900: return
Line 900: ;
Line 901: }
Line 902: ID = p
Line 902: -
Line 902: >
Line 902: ID = signal
Line 902: -
Line 902: >
Line 902: ID = curr_target
Line 902: =
Line 902: ID = t
Line 902: ;
Line 903: }
Line 909: if
Line 909: (
Line 909: ID = sig_fatal
Line 909: (
Line 909: ID = p
Line 909: ,
Line 909: ID = sig
Line 909: )
Line 909: &&
Line 909: !
Line 909: ID = p
Line 909: -
Line 909: >
Line 909: ID = signal
Line 909: -
Line 909: >
Line 909: ID = group_exit
Line 909: &&
Line 910: !
Line 910: ID = sigismember
Line 910: (
Line 910: Unrecognized token: 38
Line 910: ID = t
Line 910: -
Line 910: >
Line 910: ID = real_blocked
Line 910: ,
Line 910: ID = sig
Line 910: )
Line 910: &&
Line 911: (
Line 911: ID = sig
Line 911: ==
Line 911: ID = SIGKILL
Line 911: ||
Line 911: !
Line 911: (
Line 911: ID = t
Line 911: -
Line 911: >
Line 911: ID = ptrace
Line 911: Unrecognized token: 38
Line 911: ID = PT_PTRACED
Line 911: )
Line 911: )
Line 911: )
Line 911: {
Line 915: if
Line 915: (
Line 915: !
Line 915: ID = sig_kernel_coredump
Line 915: (
Line 915: ID = sig
Line 915: )
Line 915: )
Line 915: {
Line 922: ID = p
Line 922: -
Line 922: >
Line 922: ID = signal
Line 922: -
Line 922: >
Line 922: ID = group_exit
Line 922: =
Line 922: INTCON = 1
Line 922: ;
Line 923: ID = p
Line 923: -
Line 923: >
Line 923: ID = signal
Line 923: -
Line 923: >
Line 923: ID = group_exit_code
Line 923: =
Line 923: ID = sig
Line 923: ;
Line 924: ID = p
Line 924: -
Line 924: >
Line 924: ID = signal
Line 924: -
Line 924: >
Line 924: ID = group_stop_count
Line 924: =
Line 924: INTCON = 0
Line 924: ;
Line 925: ID = t
Line 925: =
Line 925: ID = p
Line 925: ;
Line 926: ID = do
Line 926: {
Line 927: ID = sigaddset
Line 927: (
Line 927: Unrecognized token: 38
Line 927: ID = t
Line 927: -
Line 927: >
Line 927: ID = pending
Line 927: Unrecognized token: 46
Line 927: ID = signal
Line 927: ,
Line 927: ID = SIGKILL
Line 927: )
Line 927: ;
Line 928: ID = signal_wake_up
Line 928: (
Line 928: ID = t
Line 928: ,
Line 928: INTCON = 1
Line 928: )
Line 928: ;
Line 929: ID = t
Line 929: =
Line 929: ID = next_thread
Line 929: (
Line 929: ID = t
Line 929: )
Line 929: ;
Line 930: }
Line 930: while
Line 930: (
Line 930: ID = t
Line 930: !=
Line 930: ID = p
Line 930: )
Line 930: ;
Line 931: return
Line 931: ;
Line 932: }
Line 944: ID = rm_from_queue
Line 944: (
Line 944: ID = SIG_KERNEL_STOP_MASK
Line 944: ,
Line 944: Unrecognized token: 38
Line 944: ID = t
Line 944: -
Line 944: >
Line 944: ID = pending
Line 944: )
Line 944: ;
Line 945: ID = rm_from_queue
Line 945: (
Line 945: ID = SIG_KERNEL_STOP_MASK
Line 945: ,
Line 945: Unrecognized token: 38
Line 945: ID = p
Line 945: -
Line 945: >
Line 945: ID = signal
Line 945: -
Line 945: >
Line 945: ID = shared_pending
Line 945: )
Line 945: ;
Line 946: ID = p
Line 946: -
Line 946: >
Line 946: ID = signal
Line 946: -
Line 946: >
Line 946: ID = group_stop_count
Line 946: =
Line 946: INTCON = 0
Line 946: ;
Line 947: ID = p
Line 947: -
Line 947: >
Line 947: ID = signal
Line 947: -
Line 947: >
Line 947: ID = group_exit_task
Line 947: =
Line 947: ID = t
Line 947: ;
Line 948: ID = t
Line 948: =
Line 948: ID = p
Line 948: ;
Line 949: ID = do
Line 949: {
Line 950: ID = p
Line 950: -
Line 950: >
Line 950: ID = signal
Line 950: -
Line 950: >
Line 950: ID = group_stop_count
Line 950: +
Line 950: +
Line 950: ;
Line 951: ID = signal_wake_up
Line 951: (
Line 951: ID = t
Line 951: ,
Line 951: INTCON = 0
Line 951: )
Line 951: ;
Line 952: ID = t
Line 952: =
Line 952: ID = next_thread
Line 952: (
Line 952: ID = t
Line 952: )
Line 952: ;
Line 953: }
Line 953: while
Line 953: (
Line 953: ID = t
Line 953: !=
Line 953: ID = p
Line 953: )
Line 953: ;
Line 954: ID = wake_up_process
Line 954: (
Line 954: ID = p
Line 954: -
Line 954: >
Line 954: ID = signal
Line 954: -
Line 954: >
Line 954: ID = group_exit_task
Line 954: )
Line 954: ;
Line 955: return
Line 955: ;
Line 956: }
Line 962: ID = signal_wake_up
Line 962: (
Line 962: ID = t
Line 962: ,
Line 962: ID = sig
Line 962: ==
Line 962: ID = SIGKILL
Line 962: )
Line 962: ;
Line 963: return
Line 963: ;
Line 964: }
Line 966: ID = static
Line 966: int
Line 967: Unrecognized token: 95
Line 967: Unrecognized token: 95
Line 967: ID = group_send_sig_info
Line 967: (
Line 967: int
Line 967: ID = sig
Line 967: ,
Line 967: ID = struct
Line 967: ID = siginfo
Line 967: *
Line 967: ID = info
Line 967: ,
Line 967: ID = struct
Line 967: ID = task_struct
Line 967: *
Line 967: ID = p
Line 967: )
Line 968: {
Line 969: ID = unsigned
Line 969: int
Line 969: ID = mask
Line 969: ;
Line 970: int
Line 970: ID = ret
Line 970: =
Line 970: INTCON = 0
Line 970: ;
Line 972: Unrecognized token: 35
Line 972: ID = ifdef
Line 972: ID = CONFIG_SMP
Line 973: if
Line 973: (
Line 973: !
Line 973: ID = spin_is_locked
Line 973: (
Line 973: Unrecognized token: 38
Line 973: ID = p
Line 973: -
Line 973: >
Line 973: ID = sighand
Line 973: -
Line 973: >
Line 973: ID = siglock
Line 973: )
Line 973: )
Line 974: ID = BUG
Line 974: (
Line 974: )
Line 974: ;
Line 975: Unrecognized token: 35
Line 975: ID = endif
Line 976: ID = handle_stop_signal
Line 976: (
Line 976: ID = sig
Line 976: ,
Line 976: ID = p
Line 976: )
Line 976: ;
Line 978: if
Line 978: (
Line 978: (
Line 978: (
Line 978: ID = unsigned
Line 978: ID = long
Line 978: )
Line 978: ID = info
Line 978: >
Line 978: INTCON = 2
Line 978: )
Line 978: &&
Line 978: (
Line 978: ID = info
Line 978: -
Line 978: >
Line 978: ID = si_code
Line 978: ==
Line 978: ID = SI_TIMER
Line 978: )
Line 978: )
Line 982: ID = ret
Line 982: =
Line 982: ID = info
Line 982: -
Line 982: >
Line 982: ID = si_sys_private
Line 982: ;
Line 985: if
Line 985: (
Line 985: ID = sig_ignored
Line 985: (
Line 985: ID = p
Line 985: ,
Line 985: ID = sig
Line 985: )
Line 985: )
Line 986: return
Line 986: ID = ret
Line 986: ;
Line 988: if
Line 988: (
Line 988: ID = LEGACY_QUEUE
Line 988: (
Line 988: Unrecognized token: 38
Line 988: ID = p
Line 988: -
Line 988: >
Line 988: ID = signal
Line 988: -
Line 988: >
Line 988: ID = shared_pending
Line 988: ,
Line 988: ID = sig
Line 988: )
Line 988: )
Line 990: return
Line 990: ID = ret
Line 990: ;
Line 996: ID = mask
Line 996: =
Line 996: ID = TASK_DEAD
Line 996: Unrecognized token: 124
Line 996: ID = TASK_ZOMBIE
Line 996: ;
Line 997: if
Line 997: (
Line 997: ID = sig
Line 997: !=
Line 997: ID = SIGKILL
Line 997: )
Line 998: ID = mask
Line 998: Unrecognized token: 124
Line 998: =
Line 998: ID = TASK_STOPPED
Line 998: ;
Line 1005: ID = ret
Line 1005: =
Line 1005: ID = send_signal
Line 1005: (
Line 1005: ID = sig
Line 1005: ,
Line 1005: ID = info
Line 1005: ,
Line 1005: ID = p
Line 1005: ,
Line 1005: Unrecognized token: 38
Line 1005: ID = p
Line 1005: -
Line 1005: >
Line 1005: ID = signal
Line 1005: -
Line 1005: >
Line 1005: ID = shared_pending
Line 1005: )
Line 1005: ;
Line 1006: if
Line 1006: (
Line 1006: ID = unlikely
Line 1006: (
Line 1006: ID = ret
Line 1006: )
Line 1006: )
Line 1007: return
Line 1007: ID = ret
Line 1007: ;
Line 1009: Unrecognized token: 95
Line 1009: Unrecognized token: 95
Line 1009: ID = group_complete_signal
Line 1009: (
Line 1009: ID = sig
Line 1009: ,
Line 1009: ID = p
Line 1009: ,
Line 1009: ID = mask
Line 1009: )
Line 1009: ;
Line 1010: return
Line 1010: INTCON = 0
Line 1010: ;
Line 1011: }
Line 1016: void
Line 1016: ID = zap_other_threads
Line 1016: (
Line 1016: ID = struct
Line 1016: ID = task_struct
Line 1016: *
Line 1016: ID = p
Line 1016: )
Line 1017: {
Line 1018: ID = struct
Line 1018: ID = task_struct
Line 1018: *
Line 1018: ID = t
Line 1018: ;
Line 1020: ID = p
Line 1020: -
Line 1020: >
Line 1020: ID = signal
Line 1020: -
Line 1020: >
Line 1020: ID = group_stop_count
Line 1020: =
Line 1020: INTCON = 0
Line 1020: ;
Line 1022: if
Line 1022: (
Line 1022: ID = thread_group_empty
Line 1022: (
Line 1022: ID = p
Line 1022: )
Line 1022: )
Line 1023: return
Line 1023: ;
Line 1025: for
Line 1025: (
Line 1025: ID = t
Line 1025: =
Line 1025: ID = next_thread
Line 1025: (
Line 1025: ID = p
Line 1025: )
Line 1025: ;
Line 1025: ID = t
Line 1025: !=
Line 1025: ID = p
Line 1025: ;
Line 1025: ID = t
Line 1025: =
Line 1025: ID = next_thread
Line 1025: (
Line 1025: ID = t
Line 1025: )
Line 1025: )
Line 1025: {
Line 1029: if
Line 1029: (
Line 1029: ID = t
Line 1029: -
Line 1029: >
Line 1029: ID = state
Line 1029: Unrecognized token: 38
Line 1029: (
Line 1029: ID = TASK_ZOMBIE
Line 1029: Unrecognized token: 124
Line 1029: ID = TASK_DEAD
Line 1029: )
Line 1029: )
Line 1030: ID = continue
Line 1030: ;
Line 1040: if
Line 1040: (
Line 1040: ID = t
Line 1040: !=
Line 1040: ID = p
Line 1040: -
Line 1040: >
Line 1040: ID = group_leader
Line 1040: )
Line 1041: ID = t
Line 1041: -
Line 1041: >
Line 1041: ID = exit_signal
Line 1041: =
Line 1041: -
Line 1041: INTCON = 1
Line 1041: ;
Line 1043: ID = sigaddset
Line 1043: (
Line 1043: Unrecognized token: 38
Line 1043: ID = t
Line 1043: -
Line 1043: >
Line 1043: ID = pending
Line 1043: Unrecognized token: 46
Line 1043: ID = signal
Line 1043: ,
Line 1043: ID = SIGKILL
Line 1043: )
Line 1043: ;
Line 1044: ID = rm_from_queue
Line 1044: (
Line 1044: ID = SIG_KERNEL_STOP_MASK
Line 1044: ,
Line 1044: Unrecognized token: 38
Line 1044: ID = t
Line 1044: -
Line 1044: >
Line 1044: ID = pending
Line 1044: )
Line 1044: ;
Line 1045: ID = signal_wake_up
Line 1045: (
Line 1045: ID = t
Line 1045: ,
Line 1045: INTCON = 1
Line 1045: )
Line 1045: ;
Line 1046: }
Line 1047: }
Line 1052: int
Line 1052: ID = group_send_sig_info
Line 1052: (
Line 1052: int
Line 1052: ID = sig
Line 1052: ,
Line 1052: ID = struct
Line 1052: ID = siginfo
Line 1052: *
Line 1052: ID = info
Line 1052: ,
Line 1052: ID = struct
Line 1052: ID = task_struct
Line 1052: *
Line 1052: ID = p
Line 1052: )
Line 1053: {
Line 1054: ID = unsigned
Line 1054: ID = long
Line 1054: ID = flags
Line 1054: ;
Line 1055: int
Line 1055: ID = ret
Line 1055: ;
Line 1057: ID = ret
Line 1057: =
Line 1057: ID = check_kill_permission
Line 1057: (
Line 1057: ID = sig
Line 1057: ,
Line 1057: ID = info
Line 1057: ,
Line 1057: ID = p
Line 1057: )
Line 1057: ;
Line 1058: if
Line 1058: (
Line 1058: !
Line 1058: ID = ret
Line 1058: &&
Line 1058: ID = sig
Line 1058: &&
Line 1058: ID = p
Line 1058: -
Line 1058: >
Line 1058: ID = sighand
Line 1058: )
Line 1058: {
Line 1059: ID = spin_lock_irqsave
Line 1059: (
Line 1059: Unrecognized token: 38
Line 1059: ID = p
Line 1059: -
Line 1059: >
Line 1059: ID = sighand
Line 1059: -
Line 1059: >
Line 1059: ID = siglock
Line 1059: ,
Line 1059: ID = flags
Line 1059: )
Line 1059: ;
Line 1060: ID = ret
Line 1060: =
Line 1060: Unrecognized token: 95
Line 1060: Unrecognized token: 95
Line 1060: ID = group_send_sig_info
Line 1060: (
Line 1060: ID = sig
Line 1060: ,
Line 1060: ID = info
Line 1060: ,
Line 1060: ID = p
Line 1060: )
Line 1060: ;
Line 1061: ID = spin_unlock_irqrestore
Line 1061: (
Line 1061: Unrecognized token: 38
Line 1061: ID = p
Line 1061: -
Line 1061: >
Line 1061: ID = sighand
Line 1061: -
Line 1061: >
Line 1061: ID = siglock
Line 1061: ,
Line 1061: ID = flags
Line 1061: )
Line 1061: ;
Line 1062: }
Line 1064: return
Line 1064: ID = ret
Line 1064: ;
Line 1065: }
Line 1072: int
Line 1072: Unrecognized token: 95
Line 1072: Unrecognized token: 95
Line 1072: ID = kill_pg_info
Line 1072: (
Line 1072: int
Line 1072: ID = sig
Line 1072: ,
Line 1072: ID = struct
Line 1072: ID = siginfo
Line 1072: *
Line 1072: ID = info
Line 1072: ,
Line 1072: ID = pid_t
Line 1072: ID = pgrp
Line 1072: )
Line 1073: {
Line 1074: ID = struct
Line 1074: ID = task_struct
Line 1074: *
Line 1074: ID = p
Line 1074: ;
Line 1075: ID = struct
Line 1075: ID = list_head
Line 1075: *
Line 1075: ID = l
Line 1075: ;
Line 1076: ID = struct
Line 1076: ID = pid
Line 1076: *
Line 1076: ID = pid
Line 1076: ;
Line 1077: int
Line 1077: ID = retval
Line 1077: ,
Line 1077: ID = success
Line 1077: ;
Line 1079: if
Line 1079: (
Line 1079: ID = pgrp
Line 1079: <=
Line 1079: INTCON = 0
Line 1079: )
Line 1080: return
Line 1080: -
Line 1080: ID = EINVAL
Line 1080: ;
Line 1082: ID = success
Line 1082: =
Line 1082: INTCON = 0
Line 1082: ;
Line 1083: ID = retval
Line 1083: =
Line 1083: -
Line 1083: ID = ESRCH
Line 1083: ;
Line 1084: ID = for_each_task_pid
Line 1084: (
Line 1084: ID = pgrp
Line 1084: ,
Line 1084: ID = PIDTYPE_PGID
Line 1084: ,
Line 1084: ID = p
Line 1084: ,
Line 1084: ID = l
Line 1084: ,
Line 1084: ID = pid
Line 1084: )
Line 1084: {
Line 1085: int
Line 1085: ID = err
Line 1085: =
Line 1085: ID = group_send_sig_info
Line 1085: (
Line 1085: ID = sig
Line 1085: ,
Line 1085: ID = info
Line 1085: ,
Line 1085: ID = p
Line 1085: )
Line 1085: ;
Line 1086: ID = success
Line 1086: Unrecognized token: 124
Line 1086: =
Line 1086: !
Line 1086: ID = err
Line 1086: ;
Line 1087: ID = retval
Line 1087: =
Line 1087: ID = err
Line 1087: ;
Line 1088: }
Line 1089: return
Line 1089: ID = success
Line 1089: Unrecognized token: 63
Line 1089: INTCON = 0
Line 1089: Unrecognized token: 58
Line 1089: ID = retval
Line 1089: ;
Line 1090: }
Line 1092: int
Line 1093: ID = kill_pg_info
Line 1093: (
Line 1093: int
Line 1093: ID = sig
Line 1093: ,
Line 1093: ID = struct
Line 1093: ID = siginfo
Line 1093: *
Line 1093: ID = info
Line 1093: ,
Line 1093: ID = pid_t
Line 1093: ID = pgrp
Line 1093: )
Line 1094: {
Line 1095: int
Line 1095: ID = retval
Line 1095: ;
Line 1097: ID = read_lock
Line 1097: (
Line 1097: Unrecognized token: 38
Line 1097: ID = tasklist_lock
Line 1097: )
Line 1097: ;
Line 1098: ID = retval
Line 1098: =
Line 1098: Unrecognized token: 95
Line 1098: Unrecognized token: 95
Line 1098: ID = kill_pg_info
Line 1098: (
Line 1098: ID = sig
Line 1098: ,
Line 1098: ID = info
Line 1098: ,
Line 1098: ID = pgrp
Line 1098: )
Line 1098: ;
Line 1099: ID = read_unlock
Line 1099: (
Line 1099: Unrecognized token: 38
Line 1099: ID = tasklist_lock
Line 1099: )
Line 1099: ;
Line 1101: return
Line 1101: ID = retval
Line 1101: ;
Line 1102: }
Line 1111: int
Line 1112: ID = kill_sl_info
Line 1112: (
Line 1112: int
Line 1112: ID = sig
Line 1112: ,
Line 1112: ID = struct
Line 1112: ID = siginfo
Line 1112: *
Line 1112: ID = info
Line 1112: ,
Line 1112: ID = pid_t
Line 1112: ID = sid
Line 1112: )
Line 1113: {
Line 1114: int
Line 1114: ID = err
Line 1114: ,
Line 1114: ID = retval
Line 1114: =
Line 1114: -
Line 1114: ID = EINVAL
Line 1114: ;
Line 1115: ID = struct
Line 1115: ID = pid
Line 1115: *
Line 1115: ID = pid
Line 1115: ;
Line 1116: ID = struct
Line 1116: ID = list_head
Line 1116: *
Line 1116: ID = l
Line 1116: ;
Line 1117: ID = struct
Line 1117: ID = task_struct
Line 1117: *
Line 1117: ID = p
Line 1117: ;
Line 1119: if
Line 1119: (
Line 1119: ID = sid
Line 1119: <=
Line 1119: INTCON = 0
Line 1119: )
Line 1120: ID = goto
Line 1120: ID = out
Line 1120: ;
Line 1122: ID = retval
Line 1122: =
Line 1122: -
Line 1122: ID = ESRCH
Line 1122: ;
Line 1123: ID = read_lock
Line 1123: (
Line 1123: Unrecognized token: 38
Line 1123: ID = tasklist_lock
Line 1123: )
Line 1123: ;
Line 1124: ID = for_each_task_pid
Line 1124: (
Line 1124: ID = sid
Line 1124: ,
Line 1124: ID = PIDTYPE_SID
Line 1124: ,
Line 1124: ID = p
Line 1124: ,
Line 1124: ID = l
Line 1124: ,
Line 1124: ID = pid
Line 1124: )
Line 1124: {
Line 1125: if
Line 1125: (
Line 1125: !
Line 1125: ID = p
Line 1125: -
Line 1125: >
Line 1125: ID = signal
Line 1125: -
Line 1125: >
Line 1125: ID = leader
Line 1125: )
Line 1126: ID = continue
Line 1126: ;
Line 1127: ID = err
Line 1127: =
Line 1127: ID = group_send_sig_info
Line 1127: (
Line 1127: ID = sig
Line 1127: ,
Line 1127: ID = info
Line 1127: ,
Line 1127: ID = p
Line 1127: )
Line 1127: ;
Line 1128: if
Line 1128: (
Line 1128: ID = retval
Line 1128: )
Line 1129: ID = retval
Line 1129: =
Line 1129: ID = err
Line 1129: ;
Line 1130: }
Line 1131: ID = read_unlock
Line 1131: (
Line 1131: Unrecognized token: 38
Line 1131: ID = tasklist_lock
Line 1131: )
Line 1131: ;
Line 1132: ID = out
Line 1132: Unrecognized token: 58
Line 1133: return
Line 1133: ID = retval
Line 1133: ;
Line 1134: }
Line 1136: int
Line 1137: ID = kill_proc_info
Line 1137: (
Line 1137: int
Line 1137: ID = sig
Line 1137: ,
Line 1137: ID = struct
Line 1137: ID = siginfo
Line 1137: *
Line 1137: ID = info
Line 1137: ,
Line 1137: ID = pid_t
Line 1137: ID = pid
Line 1137: )
Line 1138: {
Line 1139: int
Line 1139: ID = error
Line 1139: ;
Line 1140: ID = struct
Line 1140: ID = task_struct
Line 1140: *
Line 1140: ID = p
Line 1140: ;
Line 1142: ID = read_lock
Line 1142: (
Line 1142: Unrecognized token: 38
Line 1142: ID = tasklist_lock
Line 1142: )
Line 1142: ;
Line 1143: ID = p
Line 1143: =
Line 1143: ID = find_task_by_pid
Line 1143: (
Line 1143: ID = pid
Line 1143: )
Line 1143: ;
Line 1144: ID = error
Line 1144: =
Line 1144: -
Line 1144: ID = ESRCH
Line 1144: ;
Line 1145: if
Line 1145: (
Line 1145: ID = p
Line 1145: )
Line 1146: ID = error
Line 1146: =
Line 1146: ID = group_send_sig_info
Line 1146: (
Line 1146: ID = sig
Line 1146: ,
Line 1146: ID = info
Line 1146: ,
Line 1146: ID = p
Line 1146: )
Line 1146: ;
Line 1147: ID = read_unlock
Line 1147: (
Line 1147: Unrecognized token: 38
Line 1147: ID = tasklist_lock
Line 1147: )
Line 1147: ;
Line 1148: return
Line 1148: ID = error
Line 1148: ;
Line 1149: }
Line 1159: ID = static
Line 1159: int
Line 1159: ID = kill_something_info
Line 1159: (
Line 1159: int
Line 1159: ID = sig
Line 1159: ,
Line 1159: ID = struct
Line 1159: ID = siginfo
Line 1159: *
Line 1159: ID = info
Line 1159: ,
Line 1159: int
Line 1159: ID = pid
Line 1159: )
Line 1160: {
Line 1161: if
Line 1161: (
Line 1161: !
Line 1161: ID = pid
Line 1161: )
Line 1161: {
Line 1162: return
Line 1162: ID = kill_pg_info
Line 1162: (
Line 1162: ID = sig
Line 1162: ,
Line 1162: ID = info
Line 1162: ,
Line 1162: ID = process_group
Line 1162: (
Line 1162: ID = current
Line 1162: )
Line 1162: )
Line 1162: ;
Line 1163: }
Line 1163: else
Line 1163: if
Line 1163: (
Line 1163: ID = pid
Line 1163: ==
Line 1163: -
Line 1163: INTCON = 1
Line 1163: )
Line 1163: {
Line 1164: int
Line 1164: ID = retval
Line 1164: =
Line 1164: INTCON = 0
Line 1164: ,
Line 1164: ID = count
Line 1164: =
Line 1164: INTCON = 0
Line 1164: ;
Line 1165: ID = struct
Line 1165: ID = task_struct
Line 1165: *
Line 1165: ID = p
Line 1165: ;
Line 1167: ID = read_lock
Line 1167: (
Line 1167: Unrecognized token: 38
Line 1167: ID = tasklist_lock
Line 1167: )
Line 1167: ;
Line 1168: ID = for_each_process
Line 1168: (
Line 1168: ID = p
Line 1168: )
Line 1168: {
Line 1169: if
Line 1169: (
Line 1169: ID = p
Line 1169: -
Line 1169: >
Line 1169: ID = pid
Line 1169: >
Line 1169: INTCON = 1
Line 1169: &&
Line 1169: ID = p
Line 1169: -
Line 1169: >
Line 1169: ID = tgid
Line 1169: !=
Line 1169: ID = current
Line 1169: -
Line 1169: >
Line 1169: ID = tgid
Line 1169: )
Line 1169: {
Line 1170: int
Line 1170: ID = err
Line 1170: =
Line 1170: ID = group_send_sig_info
Line 1170: (
Line 1170: ID = sig
Line 1170: ,
Line 1170: ID = info
Line 1170: ,
Line 1170: ID = p
Line 1170: )
Line 1170: ;
Line 1171: +
Line 1171: +
Line 1171: ID = count
Line 1171: ;
Line 1172: if
Line 1172: (
Line 1172: ID = err
Line 1172: !=
Line 1172: -
Line 1172: ID = EPERM
Line 1172: )
Line 1173: ID = retval
Line 1173: =
Line 1173: ID = err
Line 1173: ;
Line 1174: }
Line 1175: }
Line 1176: ID = read_unlock
Line 1176: (
Line 1176: Unrecognized token: 38
Line 1176: ID = tasklist_lock
Line 1176: )
Line 1176: ;
Line 1177: return
Line 1177: ID = count
Line 1177: Unrecognized token: 63
Line 1177: ID = retval
Line 1177: Unrecognized token: 58
Line 1177: -
Line 1177: ID = ESRCH
Line 1177: ;
Line 1178: }
Line 1178: else
Line 1178: if
Line 1178: (
Line 1178: ID = pid
Line 1178: <
Line 1178: INTCON = 0
Line 1178: )
Line 1178: {
Line 1179: return
Line 1179: ID = kill_pg_info
Line 1179: (
Line 1179: ID = sig
Line 1179: ,
Line 1179: ID = info
Line 1179: ,
Line 1179: -
Line 1179: ID = pid
Line 1179: )
Line 1179: ;
Line 1180: }
Line 1180: else
Line 1180: {
Line 1181: return
Line 1181: ID = kill_proc_info
Line 1181: (
Line 1181: ID = sig
Line 1181: ,
Line 1181: ID = info
Line 1181: ,
Line 1181: ID = pid
Line 1181: )
Line 1181: ;
Line 1182: }
Line 1183: }
Line 1193: int
Line 1194: ID = send_sig_info
Line 1194: (
Line 1194: int
Line 1194: ID = sig
Line 1194: ,
Line 1194: ID = struct
Line 1194: ID = siginfo
Line 1194: *
Line 1194: ID = info
Line 1194: ,
Line 1194: ID = struct
Line 1194: ID = task_struct
Line 1194: *
Line 1194: ID = p
Line 1194: )
Line 1195: {
Line 1196: int
Line 1196: ID = ret
Line 1196: ;
Line 1197: ID = unsigned
Line 1197: ID = long
Line 1197: ID = flags
Line 1197: ;
Line 1203: if
Line 1203: (
Line 1203: ID = sig
Line 1203: <
Line 1203: INTCON = 0
Line 1203: ||
Line 1203: ID = sig
Line 1203: >
Line 1203: Unrecognized token: 95
Line 1203: ID = NSIG
Line 1203: )
Line 1204: return
Line 1204: -
Line 1204: ID = EINVAL
Line 1204: ;
Line 1212: ID = read_lock
Line 1212: (
Line 1212: Unrecognized token: 38
Line 1212: ID = tasklist_lock
Line 1212: )
Line 1212: ;
Line 1213: ID = spin_lock_irqsave
Line 1213: (
Line 1213: Unrecognized token: 38
Line 1213: ID = p
Line 1213: -
Line 1213: >
Line 1213: ID = sighand
Line 1213: -
Line 1213: >
Line 1213: ID = siglock
Line 1213: ,
Line 1213: ID = flags
Line 1213: )
Line 1213: ;
Line 1214: ID = ret
Line 1214: =
Line 1214: ID = specific_send_sig_info
Line 1214: (
Line 1214: ID = sig
Line 1214: ,
Line 1214: ID = info
Line 1214: ,
Line 1214: ID = p
Line 1214: )
Line 1214: ;
Line 1215: ID = spin_unlock_irqrestore
Line 1215: (
Line 1215: Unrecognized token: 38
Line 1215: ID = p
Line 1215: -
Line 1215: >
Line 1215: ID = sighand
Line 1215: -
Line 1215: >
Line 1215: ID = siglock
Line 1215: ,
Line 1215: ID = flags
Line 1215: )
Line 1215: ;
Line 1216: ID = read_unlock
Line 1216: (
Line 1216: Unrecognized token: 38
Line 1216: ID = tasklist_lock
Line 1216: )
Line 1216: ;
Line 1217: return
Line 1217: ID = ret
Line 1217: ;
Line 1218: }
Line 1220: int
Line 1221: ID = send_sig
Line 1221: (
Line 1221: int
Line 1221: ID = sig
Line 1221: ,
Line 1221: ID = struct
Line 1221: ID = task_struct
Line 1221: *
Line 1221: ID = p
Line 1221: ,
Line 1221: int
Line 1221: ID = priv
Line 1221: )
Line 1222: {
Line 1223: return
Line 1223: ID = send_sig_info
Line 1223: (
Line 1223: ID = sig
Line 1223: ,
Line 1223: (
Line 1223: void
Line 1223: *
Line 1223: )
Line 1223: (
Line 1223: ID = long
Line 1223: )
Line 1223: (
Line 1223: ID = priv
Line 1223: !=
Line 1223: INTCON = 0
Line 1223: )
Line 1223: ,
Line 1223: ID = p
Line 1223: )
Line 1223: ;
Line 1224: }
Line 1230: int
Line 1231: ID = send_group_sig_info
Line 1231: (
Line 1231: int
Line 1231: ID = sig
Line 1231: ,
Line 1231: ID = struct
Line 1231: ID = siginfo
Line 1231: *
Line 1231: ID = info
Line 1231: ,
Line 1231: ID = struct
Line 1231: ID = task_struct
Line 1231: *
Line 1231: ID = p
Line 1231: )
Line 1232: {
Line 1233: int
Line 1233: ID = ret
Line 1233: ;
Line 1234: ID = read_lock
Line 1234: (
Line 1234: Unrecognized token: 38
Line 1234: ID = tasklist_lock
Line 1234: )
Line 1234: ;
Line 1235: ID = ret
Line 1235: =
Line 1235: ID = group_send_sig_info
Line 1235: (
Line 1235: ID = sig
Line 1235: ,
Line 1235: ID = info
Line 1235: ,
Line 1235: ID = p
Line 1235: )
Line 1235: ;
Line 1236: ID = read_unlock
Line 1236: (
Line 1236: Unrecognized token: 38
Line 1236: ID = tasklist_lock
Line 1236: )
Line 1236: ;
Line 1237: return
Line 1237: ID = ret
Line 1237: ;
Line 1238: }
Line 1240: void
Line 1241: ID = force_sig
Line 1241: (
Line 1241: int
Line 1241: ID = sig
Line 1241: ,
Line 1241: ID = struct
Line 1241: ID = task_struct
Line 1241: *
Line 1241: ID = p
Line 1241: )
Line 1242: {
Line 1243: ID = force_sig_info
Line 1243: (
Line 1243: ID = sig
Line 1243: ,
Line 1243: (
Line 1243: void
Line 1243: *
Line 1243: )
Line 1243: INTCON = 1
Line 1243: ID = L
Line 1243: ,
Line 1243: ID = p
Line 1243: )
Line 1243: ;
Line 1244: }
Line 1246: int
Line 1247: ID = kill_pg
Line 1247: (
Line 1247: ID = pid_t
Line 1247: ID = pgrp
Line 1247: ,
Line 1247: int
Line 1247: ID = sig
Line 1247: ,
Line 1247: int
Line 1247: ID = priv
Line 1247: )
Line 1248: {
Line 1249: return
Line 1249: ID = kill_pg_info
Line 1249: (
Line 1249: ID = sig
Line 1249: ,
Line 1249: (
Line 1249: void
Line 1249: *
Line 1249: )
Line 1249: (
Line 1249: ID = long
Line 1249: )
Line 1249: (
Line 1249: ID = priv
Line 1249: !=
Line 1249: INTCON = 0
Line 1249: )
Line 1249: ,
Line 1249: ID = pgrp
Line 1249: )
Line 1249: ;
Line 1250: }
Line 1252: int
Line 1253: ID = kill_sl
Line 1253: (
Line 1253: ID = pid_t
Line 1253: ID = sess
Line 1253: ,
Line 1253: int
Line 1253: ID = sig
Line 1253: ,
Line 1253: int
Line 1253: ID = priv
Line 1253: )
Line 1254: {
Line 1255: return
Line 1255: ID = kill_sl_info
Line 1255: (
Line 1255: ID = sig
Line 1255: ,
Line 1255: (
Line 1255: void
Line 1255: *
Line 1255: )
Line 1255: (
Line 1255: ID = long
Line 1255: )
Line 1255: (
Line 1255: ID = priv
Line 1255: !=
Line 1255: INTCON = 0
Line 1255: )
Line 1255: ,
Line 1255: ID = sess
Line 1255: )
Line 1255: ;
Line 1256: }
Line 1258: int
Line 1259: ID = kill_proc
Line 1259: (
Line 1259: ID = pid_t
Line 1259: ID = pid
Line 1259: ,
Line 1259: int
Line 1259: ID = sig
Line 1259: ,
Line 1259: int
Line 1259: ID = priv
Line 1259: )
Line 1260: {
Line 1261: return
Line 1261: ID = kill_proc_info
Line 1261: (
Line 1261: ID = sig
Line 1261: ,
Line 1261: (
Line 1261: void
Line 1261: *
Line 1261: )
Line 1261: (
Line 1261: ID = long
Line 1261: )
Line 1261: (
Line 1261: ID = priv
Line 1261: !=
Line 1261: INTCON = 0
Line 1261: )
Line 1261: ,
Line 1261: ID = pid
Line 1261: )
Line 1261: ;
Line 1262: }
Line 1274: ID = struct
Line 1274: ID = sigqueue
Line 1274: *
Line 1274: ID = sigqueue_alloc
Line 1274: (
Line 1274: void
Line 1274: )
Line 1275: {
Line 1276: ID = struct
Line 1276: ID = sigqueue
Line 1276: *
Line 1276: ID = q
Line 1276: ;
Line 1278: if
Line 1278: (
Line 1278: (
Line 1278: ID = q
Line 1278: =
Line 1278: Unrecognized token: 95
Line 1278: Unrecognized token: 95
Line 1278: ID = sigqueue_alloc
Line 1278: (
Line 1278: )
Line 1278: )
Line 1278: )
Line 1279: ID = q
Line 1279: -
Line 1279: >
Line 1279: ID = flags
Line 1279: Unrecognized token: 124
Line 1279: =
Line 1279: ID = SIGQUEUE_PREALLOC
Line 1279: ;
Line 1280: return
Line 1280: (
Line 1280: ID = q
Line 1280: )
Line 1280: ;
Line 1281: }
Line 1283: void
Line 1283: ID = sigqueue_free
Line 1283: (
Line 1283: ID = struct
Line 1283: ID = sigqueue
Line 1283: *
Line 1283: ID = q
Line 1283: )
Line 1284: {
Line 1285: ID = unsigned
Line 1285: ID = long
Line 1285: ID = flags
Line 1285: ;
Line 1286: ID = BUG_ON
Line 1286: (
Line 1286: !
Line 1286: (
Line 1286: ID = q
Line 1286: -
Line 1286: >
Line 1286: ID = flags
Line 1286: Unrecognized token: 38
Line 1286: ID = SIGQUEUE_PREALLOC
Line 1286: )
Line 1286: )
Line 1286: ;
Line 1291: if
Line 1291: (
Line 1291: ID = unlikely
Line 1291: (
Line 1291: !
Line 1291: ID = list_empty
Line 1291: (
Line 1291: Unrecognized token: 38
Line 1291: ID = q
Line 1291: -
Line 1291: >
Line 1291: ID = list
Line 1291: )
Line 1291: )
Line 1291: )
Line 1291: {
Line 1292: ID = read_lock
Line 1292: (
Line 1292: Unrecognized token: 38
Line 1292: ID = tasklist_lock
Line 1292: )
Line 1292: ;
Line 1293: ID = spin_lock_irqsave
Line 1293: (
Line 1293: ID = q
Line 1293: -
Line 1293: >
Line 1293: ID = lock
Line 1293: ,
Line 1293: ID = flags
Line 1293: )
Line 1293: ;
Line 1294: if
Line 1294: (
Line 1294: !
Line 1294: ID = list_empty
Line 1294: (
Line 1294: Unrecognized token: 38
Line 1294: ID = q
Line 1294: -
Line 1294: >
Line 1294: ID = list
Line 1294: )
Line 1294: )
Line 1295: ID = list_del_init
Line 1295: (
Line 1295: Unrecognized token: 38
Line 1295: ID = q
Line 1295: -
Line 1295: >
Line 1295: ID = list
Line 1295: )
Line 1295: ;
Line 1296: ID = spin_unlock_irqrestore
Line 1296: (
Line 1296: ID = q
Line 1296: -
Line 1296: >
Line 1296: ID = lock
Line 1296: ,
Line 1296: ID = flags
Line 1296: )
Line 1296: ;
Line 1297: ID = read_unlock
Line 1297: (
Line 1297: Unrecognized token: 38
Line 1297: ID = tasklist_lock
Line 1297: )
Line 1297: ;
Line 1298: }
Line 1299: ID = q
Line 1299: -
Line 1299: >
Line 1299: ID = flags
Line 1299: Unrecognized token: 38
Line 1299: =
Line 1299: Unrecognized token: 126
Line 1299: ID = SIGQUEUE_PREALLOC
Line 1299: ;
Line 1300: Unrecognized token: 95
Line 1300: Unrecognized token: 95
Line 1300: ID = sigqueue_free
Line 1300: (
Line 1300: ID = q
Line 1300: )
Line 1300: ;
Line 1301: }
Line 1303: int
Line 1304: ID = send_sigqueue
Line 1304: (
Line 1304: int
Line 1304: ID = sig
Line 1304: ,
Line 1304: ID = struct
Line 1304: ID = sigqueue
Line 1304: *
Line 1304: ID = q
Line 1304: ,
Line 1304: ID = struct
Line 1304: ID = task_struct
Line 1304: *
Line 1304: ID = p
Line 1304: )
Line 1305: {
Line 1306: ID = unsigned
Line 1306: ID = long
Line 1306: ID = flags
Line 1306: ;
Line 1307: int
Line 1307: ID = ret
Line 1307: =
Line 1307: INTCON = 0
Line 1307: ;
Line 1315: ID = BUG_ON
Line 1315: (
Line 1315: !
Line 1315: (
Line 1315: ID = q
Line 1315: -
Line 1315: >
Line 1315: ID = flags
Line 1315: Unrecognized token: 38
Line 1315: ID = SIGQUEUE_PREALLOC
Line 1315: )
Line 1315: )
Line 1315: ;
Line 1316: ID = read_lock
Line 1316: (
Line 1316: Unrecognized token: 38
Line 1316: ID = tasklist_lock
Line 1316: )
Line 1316: ;
Line 1317: ID = spin_lock_irqsave
Line 1317: (
Line 1317: Unrecognized token: 38
Line 1317: ID = p
Line 1317: -
Line 1317: >
Line 1317: ID = sighand
Line 1317: -
Line 1317: >
Line 1317: ID = siglock
Line 1317: ,
Line 1317: ID = flags
Line 1317: )
Line 1317: ;
Line 1319: if
Line 1319: (
Line 1319: ID = unlikely
Line 1319: (
Line 1319: !
Line 1319: ID = list_empty
Line 1319: (
Line 1319: Unrecognized token: 38
Line 1319: ID = q
Line 1319: -
Line 1319: >
Line 1319: ID = list
Line 1319: )
Line 1319: )
Line 1319: )
Line 1319: {
Line 1324: if
Line 1324: (
Line 1324: ID = q
Line 1324: -
Line 1324: >
Line 1324: ID = info
Line 1324: Unrecognized token: 46
Line 1324: ID = si_code
Line 1324: !=
Line 1324: ID = SI_TIMER
Line 1324: )
Line 1325: ID = BUG
Line 1325: (
Line 1325: )
Line 1325: ;
Line 1326: ID = q
Line 1326: -
Line 1326: >
Line 1326: ID = info
Line 1326: Unrecognized token: 46
Line 1326: ID = si_overrun
Line 1326: +
Line 1326: +
Line 1326: ;
Line 1327: ID = goto
Line 1327: ID = out
Line 1327: ;
Line 1328: }
Line 1330: if
Line 1330: (
Line 1330: ID = sig_ignored
Line 1330: (
Line 1330: ID = p
Line 1330: ,
Line 1330: ID = sig
Line 1330: )
Line 1330: )
Line 1330: {
Line 1331: ID = ret
Line 1331: =
Line 1331: INTCON = 1
Line 1331: ;
Line 1332: ID = goto
Line 1332: ID = out
Line 1332: ;
Line 1333: }
Line 1335: ID = q
Line 1335: -
Line 1335: >
Line 1335: ID = lock
Line 1335: =
Line 1335: Unrecognized token: 38
Line 1335: ID = p
Line 1335: -
Line 1335: >
Line 1335: ID = sighand
Line 1335: -
Line 1335: >
Line 1335: ID = siglock
Line 1335: ;
Line 1336: ID = list_add_tail
Line 1336: (
Line 1336: Unrecognized token: 38
Line 1336: ID = q
Line 1336: -
Line 1336: >
Line 1336: ID = list
Line 1336: ,
Line 1336: Unrecognized token: 38
Line 1336: ID = p
Line 1336: -
Line 1336: >
Line 1336: ID = pending
Line 1336: Unrecognized token: 46
Line 1336: ID = list
Line 1336: )
Line 1336: ;
Line 1337: ID = sigaddset
Line 1337: (
Line 1337: Unrecognized token: 38
Line 1337: ID = p
Line 1337: -
Line 1337: >
Line 1337: ID = pending
Line 1337: Unrecognized token: 46
Line 1337: ID = signal
Line 1337: ,
Line 1337: ID = sig
Line 1337: )
Line 1337: ;
Line 1338: if
Line 1338: (
Line 1338: !
Line 1338: ID = sigismember
Line 1338: (
Line 1338: Unrecognized token: 38
Line 1338: ID = p
Line 1338: -
Line 1338: >
Line 1338: ID = blocked
Line 1338: ,
Line 1338: ID = sig
Line 1338: )
Line 1338: )
Line 1339: ID = signal_wake_up
Line 1339: (
Line 1339: ID = p
Line 1339: ,
Line 1339: ID = sig
Line 1339: ==
Line 1339: ID = SIGKILL
Line 1339: )
Line 1339: ;
Line 1341: ID = out
Line 1341: Unrecognized token: 58
Line 1342: ID = spin_unlock_irqrestore
Line 1342: (
Line 1342: Unrecognized token: 38
Line 1342: ID = p
Line 1342: -
Line 1342: >
Line 1342: ID = sighand
Line 1342: -
Line 1342: >
Line 1342: ID = siglock
Line 1342: ,
Line 1342: ID = flags
Line 1342: )
Line 1342: ;
Line 1343: ID = read_unlock
Line 1343: (
Line 1343: Unrecognized token: 38
Line 1343: ID = tasklist_lock
Line 1343: )
Line 1343: ;
Line 1344: return
Line 1344: (
Line 1344: ID = ret
Line 1344: )
Line 1344: ;
Line 1345: }
Line 1347: int
Line 1348: ID = send_group_sigqueue
Line 1348: (
Line 1348: int
Line 1348: ID = sig
Line 1348: ,
Line 1348: ID = struct
Line 1348: ID = sigqueue
Line 1348: *
Line 1348: ID = q
Line 1348: ,
Line 1348: ID = struct
Line 1348: ID = task_struct
Line 1348: *
Line 1348: ID = p
Line 1348: )
Line 1349: {
Line 1350: ID = unsigned
Line 1350: ID = long
Line 1350: ID = flags
Line 1350: ;
Line 1351: ID = unsigned
Line 1351: int
Line 1351: ID = mask
Line 1351: ;
Line 1352: int
Line 1352: ID = ret
Line 1352: =
Line 1352: INTCON = 0
Line 1352: ;
Line 1354: ID = BUG_ON
Line 1354: (
Line 1354: !
Line 1354: (
Line 1354: ID = q
Line 1354: -
Line 1354: >
Line 1354: ID = flags
Line 1354: Unrecognized token: 38
Line 1354: ID = SIGQUEUE_PREALLOC
Line 1354: )
Line 1354: )
Line 1354: ;
Line 1355: ID = read_lock
Line 1355: (
Line 1355: Unrecognized token: 38
Line 1355: ID = tasklist_lock
Line 1355: )
Line 1355: ;
Line 1356: ID = spin_lock_irqsave
Line 1356: (
Line 1356: Unrecognized token: 38
Line 1356: ID = p
Line 1356: -
Line 1356: >
Line 1356: ID = sighand
Line 1356: -
Line 1356: >
Line 1356: ID = siglock
Line 1356: ,
Line 1356: ID = flags
Line 1356: )
Line 1356: ;
Line 1357: ID = handle_stop_signal
Line 1357: (
Line 1357: ID = sig
Line 1357: ,
Line 1357: ID = p
Line 1357: )
Line 1357: ;
Line 1360: if
Line 1360: (
Line 1360: ID = sig_ignored
Line 1360: (
Line 1360: ID = p
Line 1360: ,
Line 1360: ID = sig
Line 1360: )
Line 1360: )
Line 1360: {
Line 1361: ID = ret
Line 1361: =
Line 1361: INTCON = 1
Line 1361: ;
Line 1362: ID = goto
Line 1362: ID = out
Line 1362: ;
Line 1363: }
Line 1365: if
Line 1365: (
Line 1365: ID = unlikely
Line 1365: (
Line 1365: !
Line 1365: ID = list_empty
Line 1365: (
Line 1365: Unrecognized token: 38
Line 1365: ID = q
Line 1365: -
Line 1365: >
Line 1365: ID = list
Line 1365: )
Line 1365: )
Line 1365: )
Line 1365: {
Line 1371: if
Line 1371: (
Line 1371: ID = q
Line 1371: -
Line 1371: >
Line 1371: ID = info
Line 1371: Unrecognized token: 46
Line 1371: ID = si_code
Line 1371: !=
Line 1371: ID = SI_TIMER
Line 1371: )
Line 1372: ID = BUG
Line 1372: (
Line 1372: )
Line 1372: ;
Line 1373: ID = q
Line 1373: -
Line 1373: >
Line 1373: ID = info
Line 1373: Unrecognized token: 46
Line 1373: ID = si_overrun
Line 1373: +
Line 1373: +
Line 1373: ;
Line 1374: ID = goto
Line 1374: ID = out
Line 1374: ;
Line 1375: }
Line 1380: ID = mask
Line 1380: =
Line 1380: ID = TASK_DEAD
Line 1380: Unrecognized token: 124
Line 1380: ID = TASK_ZOMBIE
Line 1380: ;
Line 1381: if
Line 1381: (
Line 1381: ID = sig
Line 1381: !=
Line 1381: ID = SIGKILL
Line 1381: )
Line 1382: ID = mask
Line 1382: Unrecognized token: 124
Line 1382: =
Line 1382: ID = TASK_STOPPED
Line 1382: ;
Line 1389: ID = q
Line 1389: -
Line 1389: >
Line 1389: ID = lock
Line 1389: =
Line 1389: Unrecognized token: 38
Line 1389: ID = p
Line 1389: -
Line 1389: >
Line 1389: ID = sighand
Line 1389: -
Line 1389: >
Line 1389: ID = siglock
Line 1389: ;
Line 1390: ID = list_add_tail
Line 1390: (
Line 1390: Unrecognized token: 38
Line 1390: ID = q
Line 1390: -
Line 1390: >
Line 1390: ID = list
Line 1390: ,
Line 1390: Unrecognized token: 38
Line 1390: ID = p
Line 1390: -
Line 1390: >
Line 1390: ID = signal
Line 1390: -
Line 1390: >
Line 1390: ID = shared_pending
Line 1390: Unrecognized token: 46
Line 1390: ID = list
Line 1390: )
Line 1390: ;
Line 1391: ID = sigaddset
Line 1391: (
Line 1391: Unrecognized token: 38
Line 1391: ID = p
Line 1391: -
Line 1391: >
Line 1391: ID = signal
Line 1391: -
Line 1391: >
Line 1391: ID = shared_pending
Line 1391: Unrecognized token: 46
Line 1391: ID = signal
Line 1391: ,
Line 1391: ID = sig
Line 1391: )
Line 1391: ;
Line 1393: Unrecognized token: 95
Line 1393: Unrecognized token: 95
Line 1393: ID = group_complete_signal
Line 1393: (
Line 1393: ID = sig
Line 1393: ,
Line 1393: ID = p
Line 1393: ,
Line 1393: ID = mask
Line 1393: )
Line 1393: ;
Line 1394: ID = out
Line 1394: Unrecognized token: 58
Line 1395: ID = spin_unlock_irqrestore
Line 1395: (
Line 1395: Unrecognized token: 38
Line 1395: ID = p
Line 1395: -
Line 1395: >
Line 1395: ID = sighand
Line 1395: -
Line 1395: >
Line 1395: ID = siglock
Line 1395: ,
Line 1395: ID = flags
Line 1395: )
Line 1395: ;
Line 1396: ID = read_unlock
Line 1396: (
Line 1396: Unrecognized token: 38
Line 1396: ID = tasklist_lock
Line 1396: )
Line 1396: ;
Line 1397: return
Line 1397: (
Line 1397: ID = ret
Line 1397: )
Line 1397: ;
Line 1398: }
Line 1404: ID = static
Line 1404: void
Line 1404: Unrecognized token: 95
Line 1404: Unrecognized token: 95
Line 1404: ID = wake_up_parent
Line 1404: (
Line 1404: ID = struct
Line 1404: ID = task_struct
Line 1404: *
Line 1404: ID = p
Line 1404: ,
Line 1405: ID = struct
Line 1405: ID = task_struct
Line 1405: *
Line 1405: ID = parent
Line 1405: )
Line 1406: {
Line 1407: ID = struct
Line 1407: ID = task_struct
Line 1407: *
Line 1407: ID = tsk
Line 1407: =
Line 1407: ID = parent
Line 1407: ;
Line 1412: if
Line 1412: (
Line 1412: ID = p
Line 1412: -
Line 1412: >
Line 1412: ID = tgid
Line 1412: ==
Line 1412: ID = tsk
Line 1412: -
Line 1412: >
Line 1412: ID = tgid
Line 1412: )
Line 1412: {
Line 1413: ID = wake_up_interruptible_sync
Line 1413: (
Line 1413: Unrecognized token: 38
Line 1413: ID = tsk
Line 1413: -
Line 1413: >
Line 1413: ID = wait_chldexit
Line 1413: )
Line 1413: ;
Line 1414: return
Line 1414: ;
Line 1415: }
Line 1417: ID = do
Line 1417: {
Line 1418: ID = wake_up_interruptible_sync
Line 1418: (
Line 1418: Unrecognized token: 38
Line 1418: ID = tsk
Line 1418: -
Line 1418: >
Line 1418: ID = wait_chldexit
Line 1418: )
Line 1418: ;
Line 1419: ID = tsk
Line 1419: =
Line 1419: ID = next_thread
Line 1419: (
Line 1419: ID = tsk
Line 1419: )
Line 1419: ;
Line 1420: if
Line 1420: (
Line 1420: ID = tsk
Line 1420: -
Line 1420: >
Line 1420: ID = signal
Line 1420: !=
Line 1420: ID = parent
Line 1420: -
Line 1420: >
Line 1420: ID = signal
Line 1420: )
Line 1421: ID = BUG
Line 1421: (
Line 1421: )
Line 1421: ;
Line 1422: }
Line 1422: while
Line 1422: (
Line 1422: ID = tsk
Line 1422: !=
Line 1422: ID = parent
Line 1422: )
Line 1422: ;
Line 1423: }
Line 1429: void
Line 1429: ID = do_notify_parent
Line 1429: (
Line 1429: ID = struct
Line 1429: ID = task_struct
Line 1429: *
Line 1429: ID = tsk
Line 1429: ,
Line 1429: int
Line 1429: ID = sig
Line 1429: )
Line 1430: {
Line 1431: ID = struct
Line 1431: ID = siginfo
Line 1431: ID = info
Line 1431: ;
Line 1432: ID = unsigned
Line 1432: ID = long
Line 1432: ID = flags
Line 1432: ;
Line 1433: int
Line 1433: ID = why
Line 1433: ,
Line 1433: ID = status
Line 1433: ;
Line 1434: ID = struct
Line 1434: ID = sighand_struct
Line 1434: *
Line 1434: ID = psig
Line 1434: ;
Line 1436: if
Line 1436: (
Line 1436: ID = sig
Line 1436: ==
Line 1436: -
Line 1436: INTCON = 1
Line 1436: )
Line 1437: ID = BUG
Line 1437: (
Line 1437: )
Line 1437: ;
Line 1439: ID = BUG_ON
Line 1439: (
Line 1439: ID = tsk
Line 1439: -
Line 1439: >
Line 1439: ID = group_leader
Line 1439: !=
Line 1439: ID = tsk
Line 1439: &&
Line 1439: ID = tsk
Line 1439: -
Line 1439: >
Line 1439: ID = group_leader
Line 1439: -
Line 1439: >
Line 1439: ID = state
Line 1439: !=
Line 1439: ID = TASK_ZOMBIE
Line 1439: &&
Line 1439: !
Line 1439: ID = tsk
Line 1439: -
Line 1439: >
Line 1439: ID = ptrace
Line 1439: )
Line 1439: ;
Line 1440: ID = BUG_ON
Line 1440: (
Line 1440: ID = tsk
Line 1440: -
Line 1440: >
Line 1440: ID = group_leader
Line 1440: ==
Line 1440: ID = tsk
Line 1440: &&
Line 1440: !
Line 1440: ID = thread_group_empty
Line 1440: (
Line 1440: ID = tsk
Line 1440: )
Line 1440: &&
Line 1440: !
Line 1440: ID = tsk
Line 1440: -
Line 1440: >
Line 1440: ID = ptrace
Line 1440: )
Line 1440: ;
Line 1442: ID = info
Line 1442: Unrecognized token: 46
Line 1442: ID = si_signo
Line 1442: =
Line 1442: ID = sig
Line 1442: ;
Line 1443: ID = info
Line 1443: Unrecognized token: 46
Line 1443: ID = si_errno
Line 1443: =
Line 1443: INTCON = 0
Line 1443: ;
Line 1444: ID = info
Line 1444: Unrecognized token: 46
Line 1444: ID = si_pid
Line 1444: =
Line 1444: ID = tsk
Line 1444: -
Line 1444: >
Line 1444: ID = pid
Line 1444: ;
Line 1445: ID = info
Line 1445: Unrecognized token: 46
Line 1445: ID = si_uid
Line 1445: =
Line 1445: ID = tsk
Line 1445: -
Line 1445: >
Line 1445: ID = uid
Line 1445: ;
Line 1448: ID = info
Line 1448: Unrecognized token: 46
Line 1448: ID = si_utime
Line 1448: =
Line 1448: ID = tsk
Line 1448: -
Line 1448: >
Line 1448: ID = utime
Line 1448: ;
Line 1449: ID = info
Line 1449: Unrecognized token: 46
Line 1449: ID = si_stime
Line 1449: =
Line 1449: ID = tsk
Line 1449: -
Line 1449: >
Line 1449: ID = stime
Line 1449: ;
Line 1451: ID = status
Line 1451: =
Line 1451: ID = tsk
Line 1451: -
Line 1451: >
Line 1451: ID = exit_code
Line 1451: Unrecognized token: 38
Line 1451: INTCON = 0
Line 1451: ID = x7f
Line 1451: ;
Line 1452: ID = why
Line 1452: =
Line 1452: ID = SI_KERNEL
Line 1452: ;
Line 1453: ID = switch
Line 1453: (
Line 1453: ID = tsk
Line 1453: -
Line 1453: >
Line 1453: ID = state
Line 1453: )
Line 1453: {
Line 1454: ID = case
Line 1454: ID = TASK_STOPPED
Line 1454: Unrecognized token: 58
Line 1456: if
Line 1456: (
Line 1456: ID = tsk
Line 1456: -
Line 1456: >
Line 1456: ID = ptrace
Line 1456: Unrecognized token: 38
Line 1456: ID = PT_PTRACED
Line 1456: )
Line 1457: ID = why
Line 1457: =
Line 1457: ID = CLD_TRAPPED
Line 1457: ;
Line 1458: else
Line 1459: ID = why
Line 1459: =
Line 1459: ID = CLD_STOPPED
Line 1459: ;
Line 1460: ID = break
Line 1460: ;
Line 1462: ID = default
Line 1462: Unrecognized token: 58
Line 1463: if
Line 1463: (
Line 1463: ID = tsk
Line 1463: -
Line 1463: >
Line 1463: ID = exit_code
Line 1463: Unrecognized token: 38
Line 1463: INTCON = 0
Line 1463: ID = x80
Line 1463: )
Line 1464: ID = why
Line 1464: =
Line 1464: ID = CLD_DUMPED
Line 1464: ;
Line 1465: else
Line 1465: if
Line 1465: (
Line 1465: ID = tsk
Line 1465: -
Line 1465: >
Line 1465: ID = exit_code
Line 1465: Unrecognized token: 38
Line 1465: INTCON = 0
Line 1465: ID = x7f
Line 1465: )
Line 1466: ID = why
Line 1466: =
Line 1466: ID = CLD_KILLED
Line 1466: ;
Line 1467: else
Line 1467: {
Line 1468: ID = why
Line 1468: =
Line 1468: ID = CLD_EXITED
Line 1468: ;
Line 1469: ID = status
Line 1469: =
Line 1469: ID = tsk
Line 1469: -
Line 1469: >
Line 1469: ID = exit_code
Line 1469: >
Line 1469: >
Line 1469: INTCON = 8
Line 1469: ;
Line 1470: }
Line 1471: ID = break
Line 1471: ;
Line 1472: }
Line 1473: ID = info
Line 1473: Unrecognized token: 46
Line 1473: ID = si_code
Line 1473: =
Line 1473: ID = why
Line 1473: ;
Line 1474: ID = info
Line 1474: Unrecognized token: 46
Line 1474: ID = si_status
Line 1474: =
Line 1474: ID = status
Line 1474: ;
Line 1476: ID = psig
Line 1476: =
Line 1476: ID = tsk
Line 1476: -
Line 1476: >
Line 1476: ID = parent
Line 1476: -
Line 1476: >
Line 1476: ID = sighand
Line 1476: ;
Line 1477: ID = spin_lock_irqsave
Line 1477: (
Line 1477: Unrecognized token: 38
Line 1477: ID = psig
Line 1477: -
Line 1477: >
Line 1477: ID = siglock
Line 1477: ,
Line 1477: ID = flags
Line 1477: )
Line 1477: ;
Line 1478: if
Line 1478: (
Line 1478: ID = sig
Line 1478: ==
Line 1478: ID = SIGCHLD
Line 1478: &&
Line 1478: ID = tsk
Line 1478: -
Line 1478: >
Line 1478: ID = state
Line 1478: !=
Line 1478: ID = TASK_STOPPED
Line 1478: &&
Line 1479: (
Line 1479: ID = psig
Line 1479: -
Line 1479: >
Line 1479: ID = action
Line 1479: [
Line 1479: ID = SIGCHLD
Line 1479: -
Line 1479: INTCON = 1
Line 1479: ]
Line 1479: Unrecognized token: 46
Line 1479: ID = sa
Line 1479: Unrecognized token: 46
Line 1479: ID = sa_handler
Line 1479: ==
Line 1479: ID = SIG_IGN
Line 1479: ||
Line 1480: (
Line 1480: ID = psig
Line 1480: -
Line 1480: >
Line 1480: ID = action
Line 1480: [
Line 1480: ID = SIGCHLD
Line 1480: -
Line 1480: INTCON = 1
Line 1480: ]
Line 1480: Unrecognized token: 46
Line 1480: ID = sa
Line 1480: Unrecognized token: 46
Line 1480: ID = sa_flags
Line 1480: Unrecognized token: 38
Line 1480: ID = SA_NOCLDWAIT
Line 1480: )
Line 1480: )
Line 1480: )
Line 1480: {
Line 1496: ID = tsk
Line 1496: -
Line 1496: >
Line 1496: ID = exit_signal
Line 1496: =
Line 1496: -
Line 1496: INTCON = 1
Line 1496: ;
Line 1497: if
Line 1497: (
Line 1497: ID = psig
Line 1497: -
Line 1497: >
Line 1497: ID = action
Line 1497: [
Line 1497: ID = SIGCHLD
Line 1497: -
Line 1497: INTCON = 1
Line 1497: ]
Line 1497: Unrecognized token: 46
Line 1497: ID = sa
Line 1497: Unrecognized token: 46
Line 1497: ID = sa_handler
Line 1497: ==
Line 1497: ID = SIG_IGN
Line 1497: )
Line 1498: ID = sig
Line 1498: =
Line 1498: INTCON = 0
Line 1498: ;
Line 1499: }
Line 1500: if
Line 1500: (
Line 1500: ID = sig
Line 1500: >
Line 1500: INTCON = 0
Line 1500: &&
Line 1500: ID = sig
Line 1500: <=
Line 1500: Unrecognized token: 95
Line 1500: ID = NSIG
Line 1500: )
Line 1501: Unrecognized token: 95
Line 1501: Unrecognized token: 95
Line 1501: ID = group_send_sig_info
Line 1501: (
Line 1501: ID = sig
Line 1501: ,
Line 1501: Unrecognized token: 38
Line 1501: ID = info
Line 1501: ,
Line 1501: ID = tsk
Line 1501: -
Line 1501: >
Line 1501: ID = parent
Line 1501: )
Line 1501: ;
Line 1502: Unrecognized token: 95
Line 1502: Unrecognized token: 95
Line 1502: ID = wake_up_parent
Line 1502: (
Line 1502: ID = tsk
Line 1502: ,
Line 1502: ID = tsk
Line 1502: -
Line 1502: >
Line 1502: ID = parent
Line 1502: )
Line 1502: ;
Line 1503: ID = spin_unlock_irqrestore
Line 1503: (
Line 1503: Unrecognized token: 38
Line 1503: ID = psig
Line 1503: -
Line 1503: >
Line 1503: ID = siglock
Line 1503: ,
Line 1503: ID = flags
Line 1503: )
Line 1503: ;
Line 1504: }
Line 1514: void
Line 1515: ID = notify_parent
Line 1515: (
Line 1515: ID = struct
Line 1515: ID = task_struct
Line 1515: *
Line 1515: ID = tsk
Line 1515: ,
Line 1515: int
Line 1515: ID = sig
Line 1515: )
Line 1516: {
Line 1517: if
Line 1517: (
Line 1517: ID = sig
Line 1517: !=
Line 1517: -
Line 1517: INTCON = 1
Line 1517: )
Line 1517: {
Line 1518: ID = read_lock
Line 1518: (
Line 1518: Unrecognized token: 38
Line 1518: ID = tasklist_lock
Line 1518: )
Line 1518: ;
Line 1519: ID = do_notify_parent
Line 1519: (
Line 1519: ID = tsk
Line 1519: ,
Line 1519: ID = sig
Line 1519: )
Line 1519: ;
Line 1520: ID = read_unlock
Line 1520: (
Line 1520: Unrecognized token: 38
Line 1520: ID = tasklist_lock
Line 1520: )
Line 1520: ;
Line 1521: }
Line 1522: }
Line 1524: ID = static
Line 1524: void
Line 1525: ID = do_notify_parent_cldstop
Line 1525: (
Line 1525: ID = struct
Line 1525: ID = task_struct
Line 1525: *
Line 1525: ID = tsk
Line 1525: ,
Line 1525: ID = struct
Line 1525: ID = task_struct
Line 1525: *
Line 1525: ID = parent
Line 1525: )
Line 1526: {
Line 1527: ID = struct
Line 1527: ID = siginfo
Line 1527: ID = info
Line 1527: ;
Line 1528: ID = unsigned
Line 1528: ID = long
Line 1528: ID = flags
Line 1528: ;
Line 1529: ID = struct
Line 1529: ID = sighand_struct
Line 1529: *
Line 1529: ID = sighand
Line 1529: ;
Line 1531: ID = info
Line 1531: Unrecognized token: 46
Line 1531: ID = si_signo
Line 1531: =
Line 1531: ID = SIGCHLD
Line 1531: ;
Line 1532: ID = info
Line 1532: Unrecognized token: 46
Line 1532: ID = si_errno
Line 1532: =
Line 1532: INTCON = 0
Line 1532: ;
Line 1533: ID = info
Line 1533: Unrecognized token: 46
Line 1533: ID = si_pid
Line 1533: =
Line 1533: ID = tsk
Line 1533: -
Line 1533: >
Line 1533: ID = pid
Line 1533: ;
Line 1534: ID = info
Line 1534: Unrecognized token: 46
Line 1534: ID = si_uid
Line 1534: =
Line 1534: ID = tsk
Line 1534: -
Line 1534: >
Line 1534: ID = uid
Line 1534: ;
Line 1537: ID = info
Line 1537: Unrecognized token: 46
Line 1537: ID = si_utime
Line 1537: =
Line 1537: ID = tsk
Line 1537: -
Line 1537: >
Line 1537: ID = utime
Line 1537: ;
Line 1538: ID = info
Line 1538: Unrecognized token: 46
Line 1538: ID = si_stime
Line 1538: =
Line 1538: ID = tsk
Line 1538: -
Line 1538: >
Line 1538: ID = stime
Line 1538: ;
Line 1540: ID = info
Line 1540: Unrecognized token: 46
Line 1540: ID = si_status
Line 1540: =
Line 1540: ID = tsk
Line 1540: -
Line 1540: >
Line 1540: ID = exit_code
Line 1540: Unrecognized token: 38
Line 1540: INTCON = 0
Line 1540: ID = x7f
Line 1540: ;
Line 1541: ID = info
Line 1541: Unrecognized token: 46
Line 1541: ID = si_code
Line 1541: =
Line 1541: ID = CLD_STOPPED
Line 1541: ;
Line 1543: ID = sighand
Line 1543: =
Line 1543: ID = parent
Line 1543: -
Line 1543: >
Line 1543: ID = sighand
Line 1543: ;
Line 1544: ID = spin_lock_irqsave
Line 1544: (
Line 1544: Unrecognized token: 38
Line 1544: ID = sighand
Line 1544: -
Line 1544: >
Line 1544: ID = siglock
Line 1544: ,
Line 1544: ID = flags
Line 1544: )
Line 1544: ;
Line 1545: if
Line 1545: (
Line 1545: ID = sighand
Line 1545: -
Line 1545: >
Line 1545: ID = action
Line 1545: [
Line 1545: ID = SIGCHLD
Line 1545: -
Line 1545: INTCON = 1
Line 1545: ]
Line 1545: Unrecognized token: 46
Line 1545: ID = sa
Line 1545: Unrecognized token: 46
Line 1545: ID = sa_handler
Line 1545: !=
Line 1545: ID = SIG_IGN
Line 1545: &&
Line 1546: !
Line 1546: (
Line 1546: ID = sighand
Line 1546: -
Line 1546: >
Line 1546: ID = action
Line 1546: [
Line 1546: ID = SIGCHLD
Line 1546: -
Line 1546: INTCON = 1
Line 1546: ]
Line 1546: Unrecognized token: 46
Line 1546: ID = sa
Line 1546: Unrecognized token: 46
Line 1546: ID = sa_flags
Line 1546: Unrecognized token: 38
Line 1546: ID = SA_NOCLDSTOP
Line 1546: )
Line 1546: )
Line 1547: Unrecognized token: 95
Line 1547: Unrecognized token: 95
Line 1547: ID = group_send_sig_info
Line 1547: (
Line 1547: ID = SIGCHLD
Line 1547: ,
Line 1547: Unrecognized token: 38
Line 1547: ID = info
Line 1547: ,
Line 1547: ID = parent
Line 1547: )
Line 1547: ;
Line 1551: Unrecognized token: 95
Line 1551: Unrecognized token: 95
Line 1551: ID = wake_up_parent
Line 1551: (
Line 1551: ID = tsk
Line 1551: ,
Line 1551: ID = parent
Line 1551: )
Line 1551: ;
Line 1552: ID = spin_unlock_irqrestore
Line 1552: (
Line 1552: Unrecognized token: 38
Line 1552: ID = sighand
Line 1552: -
Line 1552: >
Line 1552: ID = siglock
Line 1552: ,
Line 1552: ID = flags
Line 1552: )
Line 1552: ;
Line 1553: }
Line 1556: Unrecognized token: 35
Line 1556: ID = ifndef
Line 1556: ID = HAVE_ARCH_GET_SIGNAL_TO_DELIVER
Line 1558: ID = static
Line 1558: void
Line 1559: ID = finish_stop
Line 1559: (
Line 1559: int
Line 1559: ID = stop_count
Line 1559: )
Line 1560: {
Line 1566: if
Line 1566: (
Line 1566: ID = stop_count
Line 1566: <
Line 1566: INTCON = 0
Line 1566: ||
Line 1566: (
Line 1566: ID = current
Line 1566: -
Line 1566: >
Line 1566: ID = ptrace
Line 1566: Unrecognized token: 38
Line 1566: ID = PT_PTRACED
Line 1566: )
Line 1566: )
Line 1566: {
Line 1567: ID = read_lock
Line 1567: (
Line 1567: Unrecognized token: 38
Line 1567: ID = tasklist_lock
Line 1567: )
Line 1567: ;
Line 1568: ID = do_notify_parent_cldstop
Line 1568: (
Line 1568: ID = current
Line 1568: ,
Line 1568: ID = current
Line 1568: -
Line 1568: >
Line 1568: ID = parent
Line 1568: )
Line 1568: ;
Line 1569: ID = read_unlock
Line 1569: (
Line 1569: Unrecognized token: 38
Line 1569: ID = tasklist_lock
Line 1569: )
Line 1569: ;
Line 1570: }
Line 1571: else
Line 1571: if
Line 1571: (
Line 1571: ID = stop_count
Line 1571: ==
Line 1571: INTCON = 0
Line 1571: )
Line 1571: {
Line 1572: ID = read_lock
Line 1572: (
Line 1572: Unrecognized token: 38
Line 1572: ID = tasklist_lock
Line 1572: )
Line 1572: ;
Line 1573: ID = do_notify_parent_cldstop
Line 1573: (
Line 1573: ID = current
Line 1573: -
Line 1573: >
Line 1573: ID = group_leader
Line 1573: ,
Line 1574: ID = current
Line 1574: -
Line 1574: >
Line 1574: ID = group_leader
Line 1574: -
Line 1574: >
Line 1574: ID = real_parent
Line 1574: )
Line 1574: ;
Line 1575: ID = read_unlock
Line 1575: (
Line 1575: Unrecognized token: 38
Line 1575: ID = tasklist_lock
Line 1575: )
Line 1575: ;
Line 1576: }
Line 1578: ID = schedule
Line 1578: (
Line 1578: )
Line 1578: ;
Line 1582: ID = current
Line 1582: -
Line 1582: >
Line 1582: ID = exit_code
Line 1582: =
Line 1582: INTCON = 0
Line 1582: ;
Line 1583: }
Line 1589: ID = static
Line 1589: void
Line 1590: ID = do_signal_stop
Line 1590: (
Line 1590: int
Line 1590: ID = signr
Line 1590: )
Line 1591: {
Line 1592: ID = struct
Line 1592: ID = signal_struct
Line 1592: *
Line 1592: ID = sig
Line 1592: =
Line 1592: ID = current
Line 1592: -
Line 1592: >
Line 1592: ID = signal
Line 1592: ;
Line 1593: ID = struct
Line 1593: ID = sighand_struct
Line 1593: *
Line 1593: ID = sighand
Line 1593: =
Line 1593: ID = current
Line 1593: -
Line 1593: >
Line 1593: ID = sighand
Line 1593: ;
Line 1594: int
Line 1594: ID = stop_count
Line 1594: =
Line 1594: -
Line 1594: INTCON = 1
Line 1594: ;
Line 1598: if
Line 1598: (
Line 1598: ID = sig
Line 1598: -
Line 1598: >
Line 1598: ID = group_stop_count
Line 1598: >
Line 1598: INTCON = 0
Line 1598: )
Line 1598: {
Line 1603: ID = signr
Line 1603: =
Line 1603: ID = sig
Line 1603: -
Line 1603: >
Line 1603: ID = group_exit_code
Line 1603: ;
Line 1604: ID = stop_count
Line 1604: =
Line 1604: -
Line 1604: -
Line 1604: ID = sig
Line 1604: -
Line 1604: >
Line 1604: ID = group_stop_count
Line 1604: ;
Line 1605: ID = current
Line 1605: -
Line 1605: >
Line 1605: ID = exit_code
Line 1605: =
Line 1605: ID = signr
Line 1605: ;
Line 1606: ID = set_current_state
Line 1606: (
Line 1606: ID = TASK_STOPPED
Line 1606: )
Line 1606: ;
Line 1607: ID = spin_unlock_irq
Line 1607: (
Line 1607: Unrecognized token: 38
Line 1607: ID = sighand
Line 1607: -
Line 1607: >
Line 1607: ID = siglock
Line 1607: )
Line 1607: ;
Line 1608: }
Line 1609: else
Line 1609: if
Line 1609: (
Line 1609: ID = thread_group_empty
Line 1609: (
Line 1609: ID = current
Line 1609: )
Line 1609: )
Line 1609: {
Line 1613: ID = current
Line 1613: -
Line 1613: >
Line 1613: ID = exit_code
Line 1613: =
Line 1613: ID = signr
Line 1613: ;
Line 1614: ID = set_current_state
Line 1614: (
Line 1614: ID = TASK_STOPPED
Line 1614: )
Line 1614: ;
Line 1615: ID = spin_unlock_irq
Line 1615: (
Line 1615: Unrecognized token: 38
Line 1615: ID = sighand
Line 1615: -
Line 1615: >
Line 1615: ID = siglock
Line 1615: )
Line 1615: ;
Line 1616: }
Line 1617: else
Line 1617: {
Line 1626: ID = struct
Line 1626: ID = task_struct
Line 1626: *
Line 1626: ID = t
Line 1626: ;
Line 1628: ID = spin_unlock_irq
Line 1628: (
Line 1628: Unrecognized token: 38
Line 1628: ID = sighand
Line 1628: -
Line 1628: >
Line 1628: ID = siglock
Line 1628: )
Line 1628: ;
Line 1632: ID = read_lock
Line 1632: (
Line 1632: Unrecognized token: 38
Line 1632: ID = tasklist_lock
Line 1632: )
Line 1632: ;
Line 1633: ID = spin_lock_irq
Line 1633: (
Line 1633: Unrecognized token: 38
Line 1633: ID = sighand
Line 1633: -
Line 1633: >
Line 1633: ID = siglock
Line 1633: )
Line 1633: ;
Line 1635: if
Line 1635: (
Line 1635: ID = unlikely
Line 1635: (
Line 1635: ID = sig
Line 1635: -
Line 1635: >
Line 1635: ID = group_exit
Line 1635: )
Line 1635: )
Line 1635: {
Line 1641: ID = spin_unlock_irq
Line 1641: (
Line 1641: Unrecognized token: 38
Line 1641: ID = sighand
Line 1641: -
Line 1641: >
Line 1641: ID = siglock
Line 1641: )
Line 1641: ;
Line 1642: ID = read_unlock
Line 1642: (
Line 1642: Unrecognized token: 38
Line 1642: ID = tasklist_lock
Line 1642: )
Line 1642: ;
Line 1643: return
Line 1643: ;
Line 1644: }
Line 1646: if
Line 1646: (
Line 1646: ID = unlikely
Line 1646: (
Line 1646: ID = sig_avoid_stop_race
Line 1646: (
Line 1646: )
Line 1646: )
Line 1646: )
Line 1646: {
Line 1651: ID = spin_unlock_irq
Line 1651: (
Line 1651: Unrecognized token: 38
Line 1651: ID = sighand
Line 1651: -
Line 1651: >
Line 1651: ID = siglock
Line 1651: )
Line 1651: ;
Line 1652: ID = read_unlock
Line 1652: (
Line 1652: Unrecognized token: 38
Line 1652: ID = tasklist_lock
Line 1652: )
Line 1652: ;
Line 1653: return
Line 1653: ;
Line 1654: }
Line 1656: if
Line 1656: (
Line 1656: ID = sig
Line 1656: -
Line 1656: >
Line 1656: ID = group_stop_count
Line 1656: ==
Line 1656: INTCON = 0
Line 1656: )
Line 1656: {
Line 1657: ID = sig
Line 1657: -
Line 1657: >
Line 1657: ID = group_exit_code
Line 1657: =
Line 1657: ID = signr
Line 1657: ;
Line 1658: ID = stop_count
Line 1658: =
Line 1658: INTCON = 0
Line 1658: ;
Line 1659: for
Line 1659: (
Line 1659: ID = t
Line 1659: =
Line 1659: ID = next_thread
Line 1659: (
Line 1659: ID = current
Line 1659: )
Line 1659: ;
Line 1659: ID = t
Line 1659: !=
Line 1659: ID = current
Line 1659: ;
Line 1660: ID = t
Line 1660: =
Line 1660: ID = next_thread
Line 1660: (
Line 1660: ID = t
Line 1660: )
Line 1660: )
Line 1666: if
Line 1666: (
Line 1666: ID = t
Line 1666: -
Line 1666: >
Line 1666: ID = state
Line 1666: <
Line 1666: ID = TASK_STOPPED
Line 1666: )
Line 1666: {
Line 1667: ID = stop_count
Line 1667: +
Line 1667: +
Line 1667: ;
Line 1668: ID = signal_wake_up
Line 1668: (
Line 1668: ID = t
Line 1668: ,
Line 1668: INTCON = 0
Line 1668: )
Line 1668: ;
Line 1669: }
Line 1670: ID = sig
Line 1670: -
Line 1670: >
Line 1670: ID = group_stop_count
Line 1670: =
Line 1670: ID = stop_count
Line 1670: ;
Line 1671: }
Line 1672: else
Line 1672: {
Line 1674: ID = signr
Line 1674: =
Line 1674: ID = sig
Line 1674: -
Line 1674: >
Line 1674: ID = group_exit_code
Line 1674: ;
Line 1675: ID = stop_count
Line 1675: =
Line 1675: -
Line 1675: -
Line 1675: ID = sig
Line 1675: -
Line 1675: >
Line 1675: ID = group_stop_count
Line 1675: ;
Line 1676: }
Line 1678: ID = current
Line 1678: -
Line 1678: >
Line 1678: ID = exit_code
Line 1678: =
Line 1678: ID = signr
Line 1678: ;
Line 1679: ID = set_current_state
Line 1679: (
Line 1679: ID = TASK_STOPPED
Line 1679: )
Line 1679: ;
Line 1681: ID = spin_unlock_irq
Line 1681: (
Line 1681: Unrecognized token: 38
Line 1681: ID = sighand
Line 1681: -
Line 1681: >
Line 1681: ID = siglock
Line 1681: )
Line 1681: ;
Line 1682: ID = read_unlock
Line 1682: (
Line 1682: Unrecognized token: 38
Line 1682: ID = tasklist_lock
Line 1682: )
Line 1682: ;
Line 1683: }
Line 1685: ID = finish_stop
Line 1685: (
Line 1685: ID = stop_count
Line 1685: )
Line 1685: ;
Line 1686: }
Line 1694: ID = static
Line 1694: ID = inline
Line 1694: int
Line 1694: ID = handle_group_stop
Line 1694: (
Line 1694: void
Line 1694: )
Line 1695: {
Line 1696: int
Line 1696: ID = stop_count
Line 1696: ;
Line 1698: if
Line 1698: (
Line 1698: ID = current
Line 1698: -
Line 1698: >
Line 1698: ID = signal
Line 1698: -
Line 1698: >
Line 1698: ID = group_exit_task
Line 1698: ==
Line 1698: ID = current
Line 1698: )
Line 1698: {
Line 1703: ID = current
Line 1703: -
Line 1703: >
Line 1703: ID = signal
Line 1703: -
Line 1703: >
Line 1703: ID = group_exit_task
Line 1703: =
Line 1703: ID = NULL
Line 1703: ;
Line 1704: return
Line 1704: INTCON = 0
Line 1704: ;
Line 1705: }
Line 1707: if
Line 1707: (
Line 1707: ID = current
Line 1707: -
Line 1707: >
Line 1707: ID = signal
Line 1707: -
Line 1707: >
Line 1707: ID = group_exit
Line 1707: )
Line 1713: return
Line 1713: INTCON = 0
Line 1713: ;
Line 1719: ID = stop_count
Line 1719: =
Line 1719: -
Line 1719: -
Line 1719: ID = current
Line 1719: -
Line 1719: >
Line 1719: ID = signal
Line 1719: -
Line 1719: >
Line 1719: ID = group_stop_count
Line 1719: ;
Line 1720: ID = current
Line 1720: -
Line 1720: >
Line 1720: ID = exit_code
Line 1720: =
Line 1720: ID = current
Line 1720: -
Line 1720: >
Line 1720: ID = signal
Line 1720: -
Line 1720: >
Line 1720: ID = group_exit_code
Line 1720: ;
Line 1721: ID = set_current_state
Line 1721: (
Line 1721: ID = TASK_STOPPED
Line 1721: )
Line 1721: ;
Line 1722: ID = spin_unlock_irq
Line 1722: (
Line 1722: Unrecognized token: 38
Line 1722: ID = current
Line 1722: -
Line 1722: >
Line 1722: ID = sighand
Line 1722: -
Line 1722: >
Line 1722: ID = siglock
Line 1722: )
Line 1722: ;
Line 1723: ID = finish_stop
Line 1723: (
Line 1723: ID = stop_count
Line 1723: )
Line 1723: ;
Line 1724: return
Line 1724: INTCON = 1
Line 1724: ;
Line 1725: }
Line 1727: int
Line 1727: ID = get_signal_to_deliver
Line 1727: (
Line 1727: ID = siginfo_t
Line 1727: *
Line 1727: ID = info
Line 1727: ,
Line 1727: ID = struct
Line 1727: ID = pt_regs
Line 1727: *
Line 1727: ID = regs
Line 1727: ,
Line 1727: void
Line 1727: *
Line 1727: ID = cookie
Line 1727: )
Line 1728: {
Line 1729: ID = sigset_t
Line 1729: *
Line 1729: ID = mask
Line 1729: =
Line 1729: Unrecognized token: 38
Line 1729: ID = current
Line 1729: -
Line 1729: >
Line 1729: ID = blocked
Line 1729: ;
Line 1730: int
Line 1730: ID = signr
Line 1730: =
Line 1730: INTCON = 0
Line 1730: ;
Line 1732: ID = relock
Line 1732: Unrecognized token: 58
Line 1733: ID = spin_lock_irq
Line 1733: (
Line 1733: Unrecognized token: 38
Line 1733: ID = current
Line 1733: -
Line 1733: >
Line 1733: ID = sighand
Line 1733: -
Line 1733: >
Line 1733: ID = siglock
Line 1733: )
Line 1733: ;
Line 1734: for
Line 1734: (
Line 1734: ;
Line 1734: ;
Line 1734: )
Line 1734: {
Line 1735: ID = struct
Line 1735: ID = k_sigaction
Line 1735: *
Line 1735: ID = ka
Line 1735: ;
Line 1737: if
Line 1737: (
Line 1737: ID = unlikely
Line 1737: (
Line 1737: ID = current
Line 1737: -
Line 1737: >
Line 1737: ID = signal
Line 1737: -
Line 1737: >
Line 1737: ID = group_stop_count
Line 1737: >
Line 1737: INTCON = 0
Line 1737: )
Line 1737: &&
Line 1738: ID = handle_group_stop
Line 1738: (
Line 1738: )
Line 1738: )
Line 1739: ID = goto
Line 1739: ID = relock
Line 1739: ;
Line 1741: ID = signr
Line 1741: =
Line 1741: ID = dequeue_signal
Line 1741: (
Line 1741: ID = current
Line 1741: ,
Line 1741: ID = mask
Line 1741: ,
Line 1741: ID = info
Line 1741: )
Line 1741: ;
Line 1743: if
Line 1743: (
Line 1743: !
Line 1743: ID = signr
Line 1743: )
Line 1744: ID = break
Line 1744: ;
Line 1746: if
Line 1746: (
Line 1746: (
Line 1746: ID = current
Line 1746: -
Line 1746: >
Line 1746: ID = ptrace
Line 1746: Unrecognized token: 38
Line 1746: ID = PT_PTRACED
Line 1746: )
Line 1746: &&
Line 1746: ID = signr
Line 1746: !=
Line 1746: ID = SIGKILL
Line 1746: )
Line 1746: {
Line 1747: ID = ptrace_signal_deliver
Line 1747: (
Line 1747: ID = regs
Line 1747: ,
Line 1747: ID = cookie
Line 1747: )
Line 1747: ;
Line 1753: if
Line 1753: (
Line 1753: ID = current
Line 1753: -
Line 1753: >
Line 1753: ID = signal
Line 1753: -
Line 1753: >
Line 1753: ID = group_stop_count
Line 1753: >
Line 1753: INTCON = 0
Line 1753: )
Line 1754: -
Line 1754: -
Line 1754: ID = current
Line 1754: -
Line 1754: >
Line 1754: ID = signal
Line 1754: -
Line 1754: >
Line 1754: ID = group_stop_count
Line 1754: ;
Line 1757: ID = current
Line 1757: -
Line 1757: >
Line 1757: ID = exit_code
Line 1757: =
Line 1757: ID = signr
Line 1757: ;
Line 1758: ID = current
Line 1758: -
Line 1758: >
Line 1758: ID = last_siginfo
Line 1758: =
Line 1758: ID = info
Line 1758: ;
Line 1759: ID = set_current_state
Line 1759: (
Line 1759: ID = TASK_STOPPED
Line 1759: )
Line 1759: ;
Line 1760: ID = spin_unlock_irq
Line 1760: (
Line 1760: Unrecognized token: 38
Line 1760: ID = current
Line 1760: -
Line 1760: >
Line 1760: ID = sighand
Line 1760: -
Line 1760: >
Line 1760: ID = siglock
Line 1760: )
Line 1760: ;
Line 1761: ID = notify_parent
Line 1761: (
Line 1761: ID = current
Line 1761: ,
Line 1761: ID = SIGCHLD
Line 1761: )
Line 1761: ;
Line 1762: ID = schedule
Line 1762: (
Line 1762: )
Line 1762: ;
Line 1764: ID = current
Line 1764: -
Line 1764: >
Line 1764: ID = last_siginfo
Line 1764: =
Line 1764: ID = NULL
Line 1764: ;
Line 1767: ID = spin_lock_irq
Line 1767: (
Line 1767: Unrecognized token: 38
Line 1767: ID = current
Line 1767: -
Line 1767: >
Line 1767: ID = sighand
Line 1767: -
Line 1767: >
Line 1767: ID = siglock
Line 1767: )
Line 1767: ;
Line 1768: ID = signr
Line 1768: =
Line 1768: ID = current
Line 1768: -
Line 1768: >
Line 1768: ID = exit_code
Line 1768: ;
Line 1769: if
Line 1769: (
Line 1769: ID = signr
Line 1769: ==
Line 1769: INTCON = 0
Line 1769: )
Line 1770: ID = continue
Line 1770: ;
Line 1772: ID = current
Line 1772: -
Line 1772: >
Line 1772: ID = exit_code
Line 1772: =
Line 1772: INTCON = 0
Line 1772: ;
Line 1778: if
Line 1778: (
Line 1778: ID = signr
Line 1778: !=
Line 1778: ID = info
Line 1778: -
Line 1778: >
Line 1778: ID = si_signo
Line 1778: )
Line 1778: {
Line 1779: ID = info
Line 1779: -
Line 1779: >
Line 1779: ID = si_signo
Line 1779: =
Line 1779: ID = signr
Line 1779: ;
Line 1780: ID = info
Line 1780: -
Line 1780: >
Line 1780: ID = si_errno
Line 1780: =
Line 1780: INTCON = 0
Line 1780: ;
Line 1781: ID = info
Line 1781: -
Line 1781: >
Line 1781: ID = si_code
Line 1781: =
Line 1781: ID = SI_USER
Line 1781: ;
Line 1782: ID = info
Line 1782: -
Line 1782: >
Line 1782: ID = si_pid
Line 1782: =
Line 1782: ID = current
Line 1782: -
Line 1782: >
Line 1782: ID = parent
Line 1782: -
Line 1782: >
Line 1782: ID = pid
Line 1782: ;
Line 1783: ID = info
Line 1783: -
Line 1783: >
Line 1783: ID = si_uid
Line 1783: =
Line 1783: ID = current
Line 1783: -
Line 1783: >
Line 1783: ID = parent
Line 1783: -
Line 1783: >
Line 1783: ID = uid
Line 1783: ;
Line 1784: }
Line 1787: if
Line 1787: (
Line 1787: ID = sigismember
Line 1787: (
Line 1787: Unrecognized token: 38
Line 1787: ID = current
Line 1787: -
Line 1787: >
Line 1787: ID = blocked
Line 1787: ,
Line 1787: ID = signr
Line 1787: )
Line 1787: )
Line 1787: {
Line 1788: ID = specific_send_sig_info
Line 1788: (
Line 1788: ID = signr
Line 1788: ,
Line 1788: ID = info
Line 1788: ,
Line 1788: ID = current
Line 1788: )
Line 1788: ;
Line 1789: ID = continue
Line 1789: ;
Line 1790: }
Line 1791: }
Line 1793: ID = ka
Line 1793: =
Line 1793: Unrecognized token: 38
Line 1793: ID = current
Line 1793: -
Line 1793: >
Line 1793: ID = sighand
Line 1793: -
Line 1793: >
Line 1793: ID = action
Line 1793: [
Line 1793: ID = signr
Line 1793: -
Line 1793: INTCON = 1
Line 1793: ]
Line 1793: ;
Line 1794: if
Line 1794: (
Line 1794: ID = ka
Line 1794: -
Line 1794: >
Line 1794: ID = sa
Line 1794: Unrecognized token: 46
Line 1794: ID = sa_handler
Line 1794: ==
Line 1794: ID = SIG_IGN
Line 1794: )
Line 1795: ID = continue
Line 1795: ;
Line 1796: if
Line 1796: (
Line 1796: ID = ka
Line 1796: -
Line 1796: >
Line 1796: ID = sa
Line 1796: Unrecognized token: 46
Line 1796: ID = sa_handler
Line 1796: !=
Line 1796: ID = SIG_DFL
Line 1796: )
Line 1797: ID = break
Line 1797: ;
Line 1802: if
Line 1802: (
Line 1802: ID = sig_kernel_ignore
Line 1802: (
Line 1802: ID = signr
Line 1802: )
Line 1802: )
Line 1803: ID = continue
Line 1803: ;
Line 1806: if
Line 1806: (
Line 1806: ID = current
Line 1806: -
Line 1806: >
Line 1806: ID = pid
Line 1806: ==
Line 1806: INTCON = 1
Line 1806: )
Line 1807: ID = continue
Line 1807: ;
Line 1809: if
Line 1809: (
Line 1809: ID = sig_kernel_stop
Line 1809: (
Line 1809: ID = signr
Line 1809: )
Line 1809: )
Line 1809: {
Line 1820: if
Line 1820: (
Line 1820: ID = signr
Line 1820: ==
Line 1820: ID = SIGSTOP
Line 1820: )
Line 1820: {
Line 1821: ID = do_signal_stop
Line 1821: (
Line 1821: ID = signr
Line 1821: )
Line 1821: ;
Line 1822: ID = goto
Line 1822: ID = relock
Line 1822: ;
Line 1823: }
Line 1824: ID = spin_unlock_irq
Line 1824: (
Line 1824: Unrecognized token: 38
Line 1824: ID = current
Line 1824: -
Line 1824: >
Line 1824: ID = sighand
Line 1824: -
Line 1824: >
Line 1824: ID = siglock
Line 1824: )
Line 1824: ;
Line 1828: if
Line 1828: (
Line 1828: ID = is_orphaned_pgrp
Line 1828: (
Line 1828: ID = process_group
Line 1828: (
Line 1828: ID = current
Line 1828: )
Line 1828: )
Line 1828: )
Line 1829: ID = goto
Line 1829: ID = relock
Line 1829: ;
Line 1831: ID = spin_lock_irq
Line 1831: (
Line 1831: Unrecognized token: 38
Line 1831: ID = current
Line 1831: -
Line 1831: >
Line 1831: ID = sighand
Line 1831: -
Line 1831: >
Line 1831: ID = siglock
Line 1831: )
Line 1831: ;
Line 1832: if
Line 1832: (
Line 1832: ID = unlikely
Line 1832: (
Line 1832: ID = sig_avoid_stop_race
Line 1832: (
Line 1832: )
Line 1832: )
Line 1832: )
Line 1832: {
Line 1837: ID = continue
Line 1837: ;
Line 1838: }
Line 1840: ID = do_signal_stop
Line 1840: (
Line 1840: ID = signr
Line 1840: )
Line 1840: ;
Line 1841: ID = goto
Line 1841: ID = relock
Line 1841: ;
Line 1842: }
Line 1844: ID = spin_unlock_irq
Line 1844: (
Line 1844: Unrecognized token: 38
Line 1844: ID = current
Line 1844: -
Line 1844: >
Line 1844: ID = sighand
Line 1844: -
Line 1844: >
Line 1844: ID = siglock
Line 1844: )
Line 1844: ;
Line 1849: ID = current
Line 1849: -
Line 1849: >
Line 1849: ID = flags
Line 1849: Unrecognized token: 124
Line 1849: =
Line 1849: ID = PF_SIGNALED
Line 1849: ;
Line 1850: if
Line 1850: (
Line 1850: ID = sig_kernel_coredump
Line 1850: (
Line 1850: ID = signr
Line 1850: )
Line 1850: &&
Line 1851: ID = do_coredump
Line 1851: (
Line 1851: (
Line 1851: ID = long
Line 1851: )
Line 1851: ID = signr
Line 1851: ,
Line 1851: ID = signr
Line 1851: ,
Line 1851: ID = regs
Line 1851: )
Line 1851: )
Line 1851: {
Line 1861: ID = const
Line 1861: int
Line 1861: ID = code
Line 1861: =
Line 1861: ID = signr
Line 1861: Unrecognized token: 124
Line 1861: INTCON = 0
Line 1861: ID = x80
Line 1861: ;
Line 1862: ID = BUG_ON
Line 1862: (
Line 1862: !
Line 1862: ID = current
Line 1862: -
Line 1862: >
Line 1862: ID = signal
Line 1862: -
Line 1862: >
Line 1862: ID = group_exit
Line 1862: )
Line 1862: ;
Line 1863: ID = BUG_ON
Line 1863: (
Line 1863: ID = current
Line 1863: -
Line 1863: >
Line 1863: ID = signal
Line 1863: -
Line 1863: >
Line 1863: ID = group_exit_code
Line 1863: !=
Line 1863: ID = code
Line 1863: )
Line 1863: ;
Line 1864: ID = do_exit
Line 1864: (
Line 1864: ID = code
Line 1864: )
Line 1864: ;
Line 1866: }
Line 1871: ID = do_group_exit
Line 1871: (
Line 1871: ID = signr
Line 1871: )
Line 1871: ;
Line 1873: }
Line 1874: ID = spin_unlock_irq
Line 1874: (
Line 1874: Unrecognized token: 38
Line 1874: ID = current
Line 1874: -
Line 1874: >
Line 1874: ID = sighand
Line 1874: -
Line 1874: >
Line 1874: ID = siglock
Line 1874: )
Line 1874: ;
Line 1875: return
Line 1875: ID = signr
Line 1875: ;
Line 1876: }
Line 1878: Unrecognized token: 35
Line 1878: ID = endif
Line 1880: ID = EXPORT_SYMBOL
Line 1880: (
Line 1880: ID = recalc_sigpending
Line 1880: )
Line 1880: ;
Line 1881: ID = EXPORT_SYMBOL_GPL
Line 1881: (
Line 1881: ID = dequeue_signal
Line 1881: )
Line 1881: ;
Line 1882: ID = EXPORT_SYMBOL
Line 1882: (
Line 1882: ID = flush_signals
Line 1882: )
Line 1882: ;
Line 1883: ID = EXPORT_SYMBOL
Line 1883: (
Line 1883: ID = force_sig
Line 1883: )
Line 1883: ;
Line 1884: ID = EXPORT_SYMBOL
Line 1884: (
Line 1884: ID = force_sig_info
Line 1884: )
Line 1884: ;
Line 1885: ID = EXPORT_SYMBOL
Line 1885: (
Line 1885: ID = kill_pg
Line 1885: )
Line 1885: ;
Line 1886: ID = EXPORT_SYMBOL
Line 1886: (
Line 1886: ID = kill_pg_info
Line 1886: )
Line 1886: ;
Line 1887: ID = EXPORT_SYMBOL
Line 1887: (
Line 1887: ID = kill_proc
Line 1887: )
Line 1887: ;
Line 1888: ID = EXPORT_SYMBOL
Line 1888: (
Line 1888: ID = kill_proc_info
Line 1888: )
Line 1888: ;
Line 1889: ID = EXPORT_SYMBOL
Line 1889: (
Line 1889: ID = kill_sl
Line 1889: )
Line 1889: ;
Line 1890: ID = EXPORT_SYMBOL
Line 1890: (
Line 1890: ID = kill_sl_info
Line 1890: )
Line 1890: ;
Line 1891: ID = EXPORT_SYMBOL
Line 1891: (
Line 1891: ID = notify_parent
Line 1891: )
Line 1891: ;
Line 1892: ID = EXPORT_SYMBOL
Line 1892: (
Line 1892: ID = send_sig
Line 1892: )
Line 1892: ;
Line 1893: ID = EXPORT_SYMBOL
Line 1893: (
Line 1893: ID = send_sig_info
Line 1893: )
Line 1893: ;
Line 1894: ID = EXPORT_SYMBOL
Line 1894: (
Line 1894: ID = send_group_sig_info
Line 1894: )
Line 1894: ;
Line 1895: ID = EXPORT_SYMBOL
Line 1895: (
Line 1895: ID = sigqueue_alloc
Line 1895: )
Line 1895: ;
Line 1896: ID = EXPORT_SYMBOL
Line 1896: (
Line 1896: ID = sigqueue_free
Line 1896: )
Line 1896: ;
Line 1897: ID = EXPORT_SYMBOL
Line 1897: (
Line 1897: ID = send_sigqueue
Line 1897: )
Line 1897: ;
Line 1898: ID = EXPORT_SYMBOL
Line 1898: (
Line 1898: ID = send_group_sigqueue
Line 1898: )
Line 1898: ;
Line 1899: ID = EXPORT_SYMBOL
Line 1899: (
Line 1899: ID = sigprocmask
Line 1899: )
Line 1899: ;
Line 1900: ID = EXPORT_SYMBOL
Line 1900: (
Line 1900: ID = block_all_signals
Line 1900: )
Line 1900: ;
Line 1901: ID = EXPORT_SYMBOL
Line 1901: (
Line 1901: ID = unblock_all_signals
Line 1901: )
Line 1901: ;
Line 1908: ID = asmlinkage
Line 1908: ID = long
Line 1908: ID = sys_restart_syscall
Line 1908: (
Line 1908: void
Line 1908: )
Line 1909: {
Line 1910: ID = struct
Line 1910: ID = restart_block
Line 1910: *
Line 1910: ID = restart
Line 1910: =
Line 1910: Unrecognized token: 38
Line 1910: ID = current_thread_info
Line 1910: (
Line 1910: )
Line 1910: -
Line 1910: >
Line 1910: ID = restart_block
Line 1910: ;
Line 1911: return
Line 1911: ID = restart
Line 1911: -
Line 1911: >
Line 1911: ID = fn
Line 1911: (
Line 1911: ID = restart
Line 1911: )
Line 1911: ;
Line 1912: }
Line 1914: ID = long
Line 1914: ID = do_no_restart_syscall
Line 1914: (
Line 1914: ID = struct
Line 1914: ID = restart_block
Line 1914: *
Line 1914: ID = param
Line 1914: )
Line 1915: {
Line 1916: return
Line 1916: -
Line 1916: ID = EINTR
Line 1916: ;
Line 1917: }
Line 1933: int
Line 1933: ID = sigprocmask
Line 1933: (
Line 1933: int
Line 1933: ID = how
Line 1933: ,
Line 1933: ID = sigset_t
Line 1933: *
Line 1933: ID = set
Line 1933: ,
Line 1933: ID = sigset_t
Line 1933: *
Line 1933: ID = oldset
Line 1933: )
Line 1934: {
Line 1935: int
Line 1935: ID = error
Line 1935: ;
Line 1936: ID = sigset_t
Line 1936: ID = old_block
Line 1936: ;
Line 1938: ID = spin_lock_irq
Line 1938: (
Line 1938: Unrecognized token: 38
Line 1938: ID = current
Line 1938: -
Line 1938: >
Line 1938: ID = sighand
Line 1938: -
Line 1938: >
Line 1938: ID = siglock
Line 1938: )
Line 1938: ;
Line 1939: ID = old_block
Line 1939: =
Line 1939: ID = current
Line 1939: -
Line 1939: >
Line 1939: ID = blocked
Line 1939: ;
Line 1940: ID = error
Line 1940: =
Line 1940: INTCON = 0
Line 1940: ;
Line 1941: ID = switch
Line 1941: (
Line 1941: ID = how
Line 1941: )
Line 1941: {
Line 1942: ID = case
Line 1942: ID = SIG_BLOCK
Line 1942: Unrecognized token: 58
Line 1943: ID = sigorsets
Line 1943: (
Line 1943: Unrecognized token: 38
Line 1943: ID = current
Line 1943: -
Line 1943: >
Line 1943: ID = blocked
Line 1943: ,
Line 1943: Unrecognized token: 38
Line 1943: ID = current
Line 1943: -
Line 1943: >
Line 1943: ID = blocked
Line 1943: ,
Line 1943: ID = set
Line 1943: )
Line 1943: ;
Line 1944: ID = break
Line 1944: ;
Line 1945: ID = case
Line 1945: ID = SIG_UNBLOCK
Line 1945: Unrecognized token: 58
Line 1946: ID = signandsets
Line 1946: (
Line 1946: Unrecognized token: 38
Line 1946: ID = current
Line 1946: -
Line 1946: >
Line 1946: ID = blocked
Line 1946: ,
Line 1946: Unrecognized token: 38
Line 1946: ID = current
Line 1946: -
Line 1946: >
Line 1946: ID = blocked
Line 1946: ,
Line 1946: ID = set
Line 1946: )
Line 1946: ;
Line 1947: ID = break
Line 1947: ;
Line 1948: ID = case
Line 1948: ID = SIG_SETMASK
Line 1948: Unrecognized token: 58
Line 1949: ID = current
Line 1949: -
Line 1949: >
Line 1949: ID = blocked
Line 1949: =
Line 1949: *
Line 1949: ID = set
Line 1949: ;
Line 1950: ID = break
Line 1950: ;
Line 1951: ID = default
Line 1951: Unrecognized token: 58
Line 1952: ID = error
Line 1952: =
Line 1952: -
Line 1952: ID = EINVAL
Line 1952: ;
Line 1953: }
Line 1954: ID = recalc_sigpending
Line 1954: (
Line 1954: )
Line 1954: ;
Line 1955: ID = spin_unlock_irq
Line 1955: (
Line 1955: Unrecognized token: 38
Line 1955: ID = current
Line 1955: -
Line 1955: >
Line 1955: ID = sighand
Line 1955: -
Line 1955: >
Line 1955: ID = siglock
Line 1955: )
Line 1955: ;
Line 1956: if
Line 1956: (
Line 1956: ID = oldset
Line 1956: )
Line 1957: *
Line 1957: ID = oldset
Line 1957: =
Line 1957: ID = old_block
Line 1957: ;
Line 1958: return
Line 1958: ID = error
Line 1958: ;
Line 1959: }
Line 1961: ID = asmlinkage
Line 1961: ID = long
Line 1962: ID = sys_rt_sigprocmask
Line 1962: (
Line 1962: int
Line 1962: ID = how
Line 1962: ,
Line 1962: ID = sigset_t
Line 1962: Unrecognized token: 95
Line 1962: Unrecognized token: 95
Line 1962: ID = user
Line 1962: *
Line 1962: ID = set
Line 1962: ,
Line 1962: ID = sigset_t
Line 1962: Unrecognized token: 95
Line 1962: Unrecognized token: 95
Line 1962: ID = user
Line 1962: *
Line 1962: ID = oset
Line 1962: ,
Line 1962: ID = size_t
Line 1962: ID = sigsetsize
Line 1962: )
Line 1963: {
Line 1964: int
Line 1964: ID = error
Line 1964: =
Line 1964: -
Line 1964: ID = EINVAL
Line 1964: ;
Line 1965: ID = sigset_t
Line 1965: ID = old_set
Line 1965: ,
Line 1965: ID = new_set
Line 1965: ;
Line 1968: if
Line 1968: (
Line 1968: ID = sigsetsize
Line 1968: !=
Line 1968: ID = sizeof
Line 1968: (
Line 1968: ID = sigset_t
Line 1968: )
Line 1968: )
Line 1969: ID = goto
Line 1969: ID = out
Line 1969: ;
Line 1971: if
Line 1971: (
Line 1971: ID = set
Line 1971: )
Line 1971: {
Line 1972: ID = error
Line 1972: =
Line 1972: -
Line 1972: ID = EFAULT
Line 1972: ;
Line 1973: if
Line 1973: (
Line 1973: ID = copy_from_user
Line 1973: (
Line 1973: Unrecognized token: 38
Line 1973: ID = new_set
Line 1973: ,
Line 1973: ID = set
Line 1973: ,
Line 1973: ID = sizeof
Line 1973: (
Line 1973: *
Line 1973: ID = set
Line 1973: )
Line 1973: )
Line 1973: )
Line 1974: ID = goto
Line 1974: ID = out
Line 1974: ;
Line 1975: ID = sigdelsetmask
Line 1975: (
Line 1975: Unrecognized token: 38
Line 1975: ID = new_set
Line 1975: ,
Line 1975: ID = sigmask
Line 1975: (
Line 1975: ID = SIGKILL
Line 1975: )
Line 1975: Unrecognized token: 124
Line 1975: ID = sigmask
Line 1975: (
Line 1975: ID = SIGSTOP
Line 1975: )
Line 1975: )
Line 1975: ;
Line 1977: ID = error
Line 1977: =
Line 1977: ID = sigprocmask
Line 1977: (
Line 1977: ID = how
Line 1977: ,
Line 1977: Unrecognized token: 38
Line 1977: ID = new_set
Line 1977: ,
Line 1977: Unrecognized token: 38
Line 1977: ID = old_set
Line 1977: )
Line 1977: ;
Line 1978: if
Line 1978: (
Line 1978: ID = error
Line 1978: )
Line 1979: ID = goto
Line 1979: ID = out
Line 1979: ;
Line 1980: if
Line 1980: (
Line 1980: ID = oset
Line 1980: )
Line 1981: ID = goto
Line 1981: ID = set_old
Line 1981: ;
Line 1982: }
Line 1982: else
Line 1982: if
Line 1982: (
Line 1982: ID = oset
Line 1982: )
Line 1982: {
Line 1983: ID = spin_lock_irq
Line 1983: (
Line 1983: Unrecognized token: 38
Line 1983: ID = current
Line 1983: -
Line 1983: >
Line 1983: ID = sighand
Line 1983: -
Line 1983: >
Line 1983: ID = siglock
Line 1983: )
Line 1983: ;
Line 1984: ID = old_set
Line 1984: =
Line 1984: ID = current
Line 1984: -
Line 1984: >
Line 1984: ID = blocked
Line 1984: ;
Line 1985: ID = spin_unlock_irq
Line 1985: (
Line 1985: Unrecognized token: 38
Line 1985: ID = current
Line 1985: -
Line 1985: >
Line 1985: ID = sighand
Line 1985: -
Line 1985: >
Line 1985: ID = siglock
Line 1985: )
Line 1985: ;
Line 1987: ID = set_old
Line 1987: Unrecognized token: 58
Line 1988: ID = error
Line 1988: =
Line 1988: -
Line 1988: ID = EFAULT
Line 1988: ;
Line 1989: if
Line 1989: (
Line 1989: ID = copy_to_user
Line 1989: (
Line 1989: ID = oset
Line 1989: ,
Line 1989: Unrecognized token: 38
Line 1989: ID = old_set
Line 1989: ,
Line 1989: ID = sizeof
Line 1989: (
Line 1989: *
Line 1989: ID = oset
Line 1989: )
Line 1989: )
Line 1989: )
Line 1990: ID = goto
Line 1990: ID = out
Line 1990: ;
Line 1991: }
Line 1992: ID = error
Line 1992: =
Line 1992: INTCON = 0
Line 1992: ;
Line 1993: ID = out
Line 1993: Unrecognized token: 58
Line 1994: return
Line 1994: ID = error
Line 1994: ;
Line 1995: }
Line 1997: ID = long
Line 1997: ID = do_sigpending
Line 1997: (
Line 1997: void
Line 1997: Unrecognized token: 95
Line 1997: Unrecognized token: 95
Line 1997: ID = user
Line 1997: *
Line 1997: ID = set
Line 1997: ,
Line 1997: ID = unsigned
Line 1997: ID = long
Line 1997: ID = sigsetsize
Line 1997: )
Line 1998: {
Line 1999: ID = long
Line 1999: ID = error
Line 1999: =
Line 1999: -
Line 1999: ID = EINVAL
Line 1999: ;
Line 2000: ID = sigset_t
Line 2000: ID = pending
Line 2000: ;
Line 2002: if
Line 2002: (
Line 2002: ID = sigsetsize
Line 2002: >
Line 2002: ID = sizeof
Line 2002: (
Line 2002: ID = sigset_t
Line 2002: )
Line 2002: )
Line 2003: ID = goto
Line 2003: ID = out
Line 2003: ;
Line 2005: ID = spin_lock_irq
Line 2005: (
Line 2005: Unrecognized token: 38
Line 2005: ID = current
Line 2005: -
Line 2005: >
Line 2005: ID = sighand
Line 2005: -
Line 2005: >
Line 2005: ID = siglock
Line 2005: )
Line 2005: ;
Line 2006: ID = sigorsets
Line 2006: (
Line 2006: Unrecognized token: 38
Line 2006: ID = pending
Line 2006: ,
Line 2006: Unrecognized token: 38
Line 2006: ID = current
Line 2006: -
Line 2006: >
Line 2006: ID = pending
Line 2006: Unrecognized token: 46
Line 2006: ID = signal
Line 2006: ,
Line 2007: Unrecognized token: 38
Line 2007: ID = current
Line 2007: -
Line 2007: >
Line 2007: ID = signal
Line 2007: -
Line 2007: >
Line 2007: ID = shared_pending
Line 2007: Unrecognized token: 46
Line 2007: ID = signal
Line 2007: )
Line 2007: ;
Line 2008: ID = spin_unlock_irq
Line 2008: (
Line 2008: Unrecognized token: 38
Line 2008: ID = current
Line 2008: -
Line 2008: >
Line 2008: ID = sighand
Line 2008: -
Line 2008: >
Line 2008: ID = siglock
Line 2008: )
Line 2008: ;
Line 2011: ID = sigandsets
Line 2011: (
Line 2011: Unrecognized token: 38
Line 2011: ID = pending
Line 2011: ,
Line 2011: Unrecognized token: 38
Line 2011: ID = current
Line 2011: -
Line 2011: >
Line 2011: ID = blocked
Line 2011: ,
Line 2011: Unrecognized token: 38
Line 2011: ID = pending
Line 2011: )
Line 2011: ;
Line 2013: ID = error
Line 2013: =
Line 2013: -
Line 2013: ID = EFAULT
Line 2013: ;
Line 2014: if
Line 2014: (
Line 2014: !
Line 2014: ID = copy_to_user
Line 2014: (
Line 2014: ID = set
Line 2014: ,
Line 2014: Unrecognized token: 38
Line 2014: ID = pending
Line 2014: ,
Line 2014: ID = sigsetsize
Line 2014: )
Line 2014: )
Line 2015: ID = error
Line 2015: =
Line 2015: INTCON = 0
Line 2015: ;
Line 2017: ID = out
Line 2017: Unrecognized token: 58
Line 2018: return
Line 2018: ID = error
Line 2018: ;
Line 2019: }
Line 2021: ID = asmlinkage
Line 2021: ID = long
Line 2022: ID = sys_rt_sigpending
Line 2022: (
Line 2022: ID = sigset_t
Line 2022: Unrecognized token: 95
Line 2022: Unrecognized token: 95
Line 2022: ID = user
Line 2022: *
Line 2022: ID = set
Line 2022: ,
Line 2022: ID = size_t
Line 2022: ID = sigsetsize
Line 2022: )
Line 2023: {
Line 2024: return
Line 2024: ID = do_sigpending
Line 2024: (
Line 2024: ID = set
Line 2024: ,
Line 2024: ID = sigsetsize
Line 2024: )
Line 2024: ;
Line 2025: }
Line 2027: Unrecognized token: 35
Line 2027: ID = ifndef
Line 2027: ID = HAVE_ARCH_COPY_SIGINFO_TO_USER
Line 2029: int
Line 2029: ID = copy_siginfo_to_user
Line 2029: (
Line 2029: ID = siginfo_t
Line 2029: Unrecognized token: 95
Line 2029: Unrecognized token: 95
Line 2029: ID = user
Line 2029: *
Line 2029: ID = to
Line 2029: ,
Line 2029: ID = siginfo_t
Line 2029: *
Line 2029: ID = from
Line 2029: )
Line 2030: {
Line 2031: int
Line 2031: ID = err
Line 2031: ;
Line 2033: if
Line 2033: (
Line 2033: !
Line 2033: ID = access_ok
Line 2033: (
Line 2033: ID = VERIFY_WRITE
Line 2033: ,
Line 2033: ID = to
Line 2033: ,
Line 2033: ID = sizeof
Line 2033: (
Line 2033: ID = siginfo_t
Line 2033: )
Line 2033: )
Line 2033: )
Line 2034: return
Line 2034: -
Line 2034: ID = EFAULT
Line 2034: ;
Line 2035: if
Line 2035: (
Line 2035: ID = from
Line 2035: -
Line 2035: >
Line 2035: ID = si_code
Line 2035: <
Line 2035: INTCON = 0
Line 2035: )
Line 2036: return
Line 2036: Unrecognized token: 95
Line 2036: Unrecognized token: 95
Line 2036: ID = copy_to_user
Line 2036: (
Line 2036: ID = to
Line 2036: ,
Line 2036: ID = from
Line 2036: ,
Line 2036: ID = sizeof
Line 2036: (
Line 2036: ID = siginfo_t
Line 2036: )
Line 2036: )
Line 2037: Unrecognized token: 63
Line 2037: -
Line 2037: ID = EFAULT
Line 2037: Unrecognized token: 58
Line 2037: INTCON = 0
Line 2037: ;
Line 2045: ID = err
Line 2045: =
Line 2045: Unrecognized token: 95
Line 2045: Unrecognized token: 95
Line 2045: ID = put_user
Line 2045: (
Line 2045: ID = from
Line 2045: -
Line 2045: >
Line 2045: ID = si_signo
Line 2045: ,
Line 2045: Unrecognized token: 38
Line 2045: ID = to
Line 2045: -
Line 2045: >
Line 2045: ID = si_signo
Line 2045: )
Line 2045: ;
Line 2046: ID = err
Line 2046: Unrecognized token: 124
Line 2046: =
Line 2046: Unrecognized token: 95
Line 2046: Unrecognized token: 95
Line 2046: ID = put_user
Line 2046: (
Line 2046: ID = from
Line 2046: -
Line 2046: >
Line 2046: ID = si_errno
Line 2046: ,
Line 2046: Unrecognized token: 38
Line 2046: ID = to
Line 2046: -
Line 2046: >
Line 2046: ID = si_errno
Line 2046: )
Line 2046: ;
Line 2047: ID = err
Line 2047: Unrecognized token: 124
Line 2047: =
Line 2047: Unrecognized token: 95
Line 2047: Unrecognized token: 95
Line 2047: ID = put_user
Line 2047: (
Line 2047: (
Line 2047: ID = short
Line 2047: )
Line 2047: ID = from
Line 2047: -
Line 2047: >
Line 2047: ID = si_code
Line 2047: ,
Line 2047: Unrecognized token: 38
Line 2047: ID = to
Line 2047: -
Line 2047: >
Line 2047: ID = si_code
Line 2047: )
Line 2047: ;
Line 2048: ID = switch
Line 2048: (
Line 2048: ID = from
Line 2048: -
Line 2048: >
Line 2048: ID = si_code
Line 2048: Unrecognized token: 38
Line 2048: Unrecognized token: 95
Line 2048: Unrecognized token: 95
Line 2048: ID = SI_MASK
Line 2048: )
Line 2048: {
Line 2049: ID = case
Line 2049: Unrecognized token: 95
Line 2049: Unrecognized token: 95
Line 2049: ID = SI_KILL
Line 2049: Unrecognized token: 58
Line 2050: ID = err
Line 2050: Unrecognized token: 124
Line 2050: =
Line 2050: Unrecognized token: 95
Line 2050: Unrecognized token: 95
Line 2050: ID = put_user
Line 2050: (
Line 2050: ID = from
Line 2050: -
Line 2050: >
Line 2050: ID = si_pid
Line 2050: ,
Line 2050: Unrecognized token: 38
Line 2050: ID = to
Line 2050: -
Line 2050: >
Line 2050: ID = si_pid
Line 2050: )
Line 2050: ;
Line 2051: ID = err
Line 2051: Unrecognized token: 124
Line 2051: =
Line 2051: Unrecognized token: 95
Line 2051: Unrecognized token: 95
Line 2051: ID = put_user
Line 2051: (
Line 2051: ID = from
Line 2051: -
Line 2051: >
Line 2051: ID = si_uid
Line 2051: ,
Line 2051: Unrecognized token: 38
Line 2051: ID = to
Line 2051: -
Line 2051: >
Line 2051: ID = si_uid
Line 2051: )
Line 2051: ;
Line 2052: ID = break
Line 2052: ;
Line 2053: ID = case
Line 2053: Unrecognized token: 95
Line 2053: Unrecognized token: 95
Line 2053: ID = SI_TIMER
Line 2053: Unrecognized token: 58
Line 2054: ID = err
Line 2054: Unrecognized token: 124
Line 2054: =
Line 2054: Unrecognized token: 95
Line 2054: Unrecognized token: 95
Line 2054: ID = put_user
Line 2054: (
Line 2054: ID = from
Line 2054: -
Line 2054: >
Line 2054: ID = si_tid
Line 2054: ,
Line 2054: Unrecognized token: 38
Line 2054: ID = to
Line 2054: -
Line 2054: >
Line 2054: ID = si_tid
Line 2054: )
Line 2054: ;
Line 2055: ID = err
Line 2055: Unrecognized token: 124
Line 2055: =
Line 2055: Unrecognized token: 95
Line 2055: Unrecognized token: 95
Line 2055: ID = put_user
Line 2055: (
Line 2055: ID = from
Line 2055: -
Line 2055: >
Line 2055: ID = si_overrun
Line 2055: ,
Line 2055: Unrecognized token: 38
Line 2055: ID = to
Line 2055: -
Line 2055: >
Line 2055: ID = si_overrun
Line 2055: )
Line 2055: ;
Line 2056: ID = err
Line 2056: Unrecognized token: 124
Line 2056: =
Line 2056: Unrecognized token: 95
Line 2056: Unrecognized token: 95
Line 2056: ID = put_user
Line 2056: (
Line 2056: ID = from
Line 2056: -
Line 2056: >
Line 2056: ID = si_ptr
Line 2056: ,
Line 2056: Unrecognized token: 38
Line 2056: ID = to
Line 2056: -
Line 2056: >
Line 2056: ID = si_ptr
Line 2056: )
Line 2056: ;
Line 2057: ID = break
Line 2057: ;
Line 2058: ID = case
Line 2058: Unrecognized token: 95
Line 2058: Unrecognized token: 95
Line 2058: ID = SI_POLL
Line 2058: Unrecognized token: 58
Line 2059: ID = err
Line 2059: Unrecognized token: 124
Line 2059: =
Line 2059: Unrecognized token: 95
Line 2059: Unrecognized token: 95
Line 2059: ID = put_user
Line 2059: (
Line 2059: ID = from
Line 2059: -
Line 2059: >
Line 2059: ID = si_band
Line 2059: ,
Line 2059: Unrecognized token: 38
Line 2059: ID = to
Line 2059: -
Line 2059: >
Line 2059: ID = si_band
Line 2059: )
Line 2059: ;
Line 2060: ID = err
Line 2060: Unrecognized token: 124
Line 2060: =
Line 2060: Unrecognized token: 95
Line 2060: Unrecognized token: 95
Line 2060: ID = put_user
Line 2060: (
Line 2060: ID = from
Line 2060: -
Line 2060: >
Line 2060: ID = si_fd
Line 2060: ,
Line 2060: Unrecognized token: 38
Line 2060: ID = to
Line 2060: -
Line 2060: >
Line 2060: ID = si_fd
Line 2060: )
Line 2060: ;
Line 2061: ID = break
Line 2061: ;
Line 2062: ID = case
Line 2062: Unrecognized token: 95
Line 2062: Unrecognized token: 95
Line 2062: ID = SI_FAULT
Line 2062: Unrecognized token: 58
Line 2063: ID = err
Line 2063: Unrecognized token: 124
Line 2063: =
Line 2063: Unrecognized token: 95
Line 2063: Unrecognized token: 95
Line 2063: ID = put_user
Line 2063: (
Line 2063: ID = from
Line 2063: -
Line 2063: >
Line 2063: ID = si_addr
Line 2063: ,
Line 2063: Unrecognized token: 38
Line 2063: ID = to
Line 2063: -
Line 2063: >
Line 2063: ID = si_addr
Line 2063: )
Line 2063: ;
Line 2064: Unrecognized token: 35
Line 2064: ID = ifdef
Line 2064: Unrecognized token: 95
Line 2064: Unrecognized token: 95
Line 2064: ID = ARCH_SI_TRAPNO
Line 2065: ID = err
Line 2065: Unrecognized token: 124
Line 2065: =
Line 2065: Unrecognized token: 95
Line 2065: Unrecognized token: 95
Line 2065: ID = put_user
Line 2065: (
Line 2065: ID = from
Line 2065: -
Line 2065: >
Line 2065: ID = si_trapno
Line 2065: ,
Line 2065: Unrecognized token: 38
Line 2065: ID = to
Line 2065: -
Line 2065: >
Line 2065: ID = si_trapno
Line 2065: )
Line 2065: ;
Line 2066: Unrecognized token: 35
Line 2066: ID = endif
Line 2067: ID = break
Line 2067: ;
Line 2068: ID = case
Line 2068: Unrecognized token: 95
Line 2068: Unrecognized token: 95
Line 2068: ID = SI_CHLD
Line 2068: Unrecognized token: 58
Line 2069: ID = err
Line 2069: Unrecognized token: 124
Line 2069: =
Line 2069: Unrecognized token: 95
Line 2069: Unrecognized token: 95
Line 2069: ID = put_user
Line 2069: (
Line 2069: ID = from
Line 2069: -
Line 2069: >
Line 2069: ID = si_pid
Line 2069: ,
Line 2069: Unrecognized token: 38
Line 2069: ID = to
Line 2069: -
Line 2069: >
Line 2069: ID = si_pid
Line 2069: )
Line 2069: ;
Line 2070: ID = err
Line 2070: Unrecognized token: 124
Line 2070: =
Line 2070: Unrecognized token: 95
Line 2070: Unrecognized token: 95
Line 2070: ID = put_user
Line 2070: (
Line 2070: ID = from
Line 2070: -
Line 2070: >
Line 2070: ID = si_uid
Line 2070: ,
Line 2070: Unrecognized token: 38
Line 2070: ID = to
Line 2070: -
Line 2070: >
Line 2070: ID = si_uid
Line 2070: )
Line 2070: ;
Line 2071: ID = err
Line 2071: Unrecognized token: 124
Line 2071: =
Line 2071: Unrecognized token: 95
Line 2071: Unrecognized token: 95
Line 2071: ID = put_user
Line 2071: (
Line 2071: ID = from
Line 2071: -
Line 2071: >
Line 2071: ID = si_status
Line 2071: ,
Line 2071: Unrecognized token: 38
Line 2071: ID = to
Line 2071: -
Line 2071: >
Line 2071: ID = si_status
Line 2071: )
Line 2071: ;
Line 2072: ID = err
Line 2072: Unrecognized token: 124
Line 2072: =
Line 2072: Unrecognized token: 95
Line 2072: Unrecognized token: 95
Line 2072: ID = put_user
Line 2072: (
Line 2072: ID = from
Line 2072: -
Line 2072: >
Line 2072: ID = si_utime
Line 2072: ,
Line 2072: Unrecognized token: 38
Line 2072: ID = to
Line 2072: -
Line 2072: >
Line 2072: ID = si_utime
Line 2072: )
Line 2072: ;
Line 2073: ID = err
Line 2073: Unrecognized token: 124
Line 2073: =
Line 2073: Unrecognized token: 95
Line 2073: Unrecognized token: 95
Line 2073: ID = put_user
Line 2073: (
Line 2073: ID = from
Line 2073: -
Line 2073: >
Line 2073: ID = si_stime
Line 2073: ,
Line 2073: Unrecognized token: 38
Line 2073: ID = to
Line 2073: -
Line 2073: >
Line 2073: ID = si_stime
Line 2073: )
Line 2073: ;
Line 2074: ID = break
Line 2074: ;
Line 2075: ID = case
Line 2075: Unrecognized token: 95
Line 2075: Unrecognized token: 95
Line 2075: ID = SI_RT
Line 2075: Unrecognized token: 58
Line 2076: ID = case
Line 2076: Unrecognized token: 95
Line 2076: Unrecognized token: 95
Line 2076: ID = SI_MESGQ
Line 2076: Unrecognized token: 58
Line 2077: ID = err
Line 2077: Unrecognized token: 124
Line 2077: =
Line 2077: Unrecognized token: 95
Line 2077: Unrecognized token: 95
Line 2077: ID = put_user
Line 2077: (
Line 2077: ID = from
Line 2077: -
Line 2077: >
Line 2077: ID = si_pid
Line 2077: ,
Line 2077: Unrecognized token: 38
Line 2077: ID = to
Line 2077: -
Line 2077: >
Line 2077: ID = si_pid
Line 2077: )
Line 2077: ;
Line 2078: ID = err
Line 2078: Unrecognized token: 124
Line 2078: =
Line 2078: Unrecognized token: 95
Line 2078: Unrecognized token: 95
Line 2078: ID = put_user
Line 2078: (
Line 2078: ID = from
Line 2078: -
Line 2078: >
Line 2078: ID = si_uid
Line 2078: ,
Line 2078: Unrecognized token: 38
Line 2078: ID = to
Line 2078: -
Line 2078: >
Line 2078: ID = si_uid
Line 2078: )
Line 2078: ;
Line 2079: ID = err
Line 2079: Unrecognized token: 124
Line 2079: =
Line 2079: Unrecognized token: 95
Line 2079: Unrecognized token: 95
Line 2079: ID = put_user
Line 2079: (
Line 2079: ID = from
Line 2079: -
Line 2079: >
Line 2079: ID = si_ptr
Line 2079: ,
Line 2079: Unrecognized token: 38
Line 2079: ID = to
Line 2079: -
Line 2079: >
Line 2079: ID = si_ptr
Line 2079: )
Line 2079: ;
Line 2080: ID = break
Line 2080: ;
Line 2081: ID = default
Line 2081: Unrecognized token: 58
Line 2082: ID = err
Line 2082: Unrecognized token: 124
Line 2082: =
Line 2082: Unrecognized token: 95
Line 2082: Unrecognized token: 95
Line 2082: ID = put_user
Line 2082: (
Line 2082: ID = from
Line 2082: -
Line 2082: >
Line 2082: ID = si_pid
Line 2082: ,
Line 2082: Unrecognized token: 38
Line 2082: ID = to
Line 2082: -
Line 2082: >
Line 2082: ID = si_pid
Line 2082: )
Line 2082: ;
Line 2083: ID = err
Line 2083: Unrecognized token: 124
Line 2083: =
Line 2083: Unrecognized token: 95
Line 2083: Unrecognized token: 95
Line 2083: ID = put_user
Line 2083: (
Line 2083: ID = from
Line 2083: -
Line 2083: >
Line 2083: ID = si_uid
Line 2083: ,
Line 2083: Unrecognized token: 38
Line 2083: ID = to
Line 2083: -
Line 2083: >
Line 2083: ID = si_uid
Line 2083: )
Line 2083: ;
Line 2084: ID = break
Line 2084: ;
Line 2085: }
Line 2086: return
Line 2086: ID = err
Line 2086: ;
Line 2087: }
Line 2089: Unrecognized token: 35
Line 2089: ID = endif
Line 2091: ID = asmlinkage
Line 2091: ID = long
Line 2092: ID = sys_rt_sigtimedwait
Line 2092: (
Line 2092: ID = const
Line 2092: ID = sigset_t
Line 2092: Unrecognized token: 95
Line 2092: Unrecognized token: 95
Line 2092: ID = user
Line 2092: *
Line 2092: ID = uthese
Line 2092: ,
Line 2093: ID = siginfo_t
Line 2093: Unrecognized token: 95
Line 2093: Unrecognized token: 95
Line 2093: ID = user
Line 2093: *
Line 2093: ID = uinfo
Line 2093: ,
Line 2094: ID = const
Line 2094: ID = struct
Line 2094: ID = timespec
Line 2094: Unrecognized token: 95
Line 2094: Unrecognized token: 95
Line 2094: ID = user
Line 2094: *
Line 2094: ID = uts
Line 2094: ,
Line 2095: ID = size_t
Line 2095: ID = sigsetsize
Line 2095: )
Line 2096: {
Line 2097: int
Line 2097: ID = ret
Line 2097: ,
Line 2097: ID = sig
Line 2097: ;
Line 2098: ID = sigset_t
Line 2098: ID = these
Line 2098: ;
Line 2099: ID = struct
Line 2099: ID = timespec
Line 2099: ID = ts
Line 2099: ;
Line 2100: ID = siginfo_t
Line 2100: ID = info
Line 2100: ;
Line 2101: ID = long
Line 2101: ID = timeout
Line 2101: =
Line 2101: INTCON = 0
Line 2101: ;
Line 2104: if
Line 2104: (
Line 2104: ID = sigsetsize
Line 2104: !=
Line 2104: ID = sizeof
Line 2104: (
Line 2104: ID = sigset_t
Line 2104: )
Line 2104: )
Line 2105: return
Line 2105: -
Line 2105: ID = EINVAL
Line 2105: ;
Line 2107: if
Line 2107: (
Line 2107: ID = copy_from_user
Line 2107: (
Line 2107: Unrecognized token: 38
Line 2107: ID = these
Line 2107: ,
Line 2107: ID = uthese
Line 2107: ,
Line 2107: ID = sizeof
Line 2107: (
Line 2107: ID = these
Line 2107: )
Line 2107: )
Line 2107: )
Line 2108: return
Line 2108: -
Line 2108: ID = EFAULT
Line 2108: ;
Line 2114: ID = sigdelsetmask
Line 2114: (
Line 2114: Unrecognized token: 38
Line 2114: ID = these
Line 2114: ,
Line 2114: ID = sigmask
Line 2114: (
Line 2114: ID = SIGKILL
Line 2114: )
Line 2114: Unrecognized token: 124
Line 2114: ID = sigmask
Line 2114: (
Line 2114: ID = SIGSTOP
Line 2114: )
Line 2114: )
Line 2114: ;
Line 2115: ID = signotset
Line 2115: (
Line 2115: Unrecognized token: 38
Line 2115: ID = these
Line 2115: )
Line 2115: ;
Line 2117: if
Line 2117: (
Line 2117: ID = uts
Line 2117: )
Line 2117: {
Line 2118: if
Line 2118: (
Line 2118: ID = copy_from_user
Line 2118: (
Line 2118: Unrecognized token: 38
Line 2118: ID = ts
Line 2118: ,
Line 2118: ID = uts
Line 2118: ,
Line 2118: ID = sizeof
Line 2118: (
Line 2118: ID = ts
Line 2118: )
Line 2118: )
Line 2118: )
Line 2119: return
Line 2119: -
Line 2119: ID = EFAULT
Line 2119: ;
Line 2120: if
Line 2120: (
Line 2120: ID = ts
Line 2120: Unrecognized token: 46
Line 2120: ID = tv_nsec
Line 2120: >=
Line 2120: INTCON = 1000000000
Line 2120: ID = L
Line 2120: ||
Line 2120: ID = ts
Line 2120: Unrecognized token: 46
Line 2120: ID = tv_nsec
Line 2120: <
Line 2120: INTCON = 0
Line 2121: ||
Line 2121: ID = ts
Line 2121: Unrecognized token: 46
Line 2121: ID = tv_sec
Line 2121: <
Line 2121: INTCON = 0
Line 2121: )
Line 2122: return
Line 2122: -
Line 2122: ID = EINVAL
Line 2122: ;
Line 2123: }
Line 2125: ID = spin_lock_irq
Line 2125: (
Line 2125: Unrecognized token: 38
Line 2125: ID = current
Line 2125: -
Line 2125: >
Line 2125: ID = sighand
Line 2125: -
Line 2125: >
Line 2125: ID = siglock
Line 2125: )
Line 2125: ;
Line 2126: ID = sig
Line 2126: =
Line 2126: ID = dequeue_signal
Line 2126: (
Line 2126: ID = current
Line 2126: ,
Line 2126: Unrecognized token: 38
Line 2126: ID = these
Line 2126: ,
Line 2126: Unrecognized token: 38
Line 2126: ID = info
Line 2126: )
Line 2126: ;
Line 2127: if
Line 2127: (
Line 2127: !
Line 2127: ID = sig
Line 2127: )
Line 2127: {
Line 2128: ID = timeout
Line 2128: =
Line 2128: ID = MAX_SCHEDULE_TIMEOUT
Line 2128: ;
Line 2129: if
Line 2129: (
Line 2129: ID = uts
Line 2129: )
Line 2130: ID = timeout
Line 2130: =
Line 2130: (
Line 2130: ID = timespec_to_jiffies
Line 2130: (
Line 2130: Unrecognized token: 38
Line 2130: ID = ts
Line 2130: )
Line 2131: +
Line 2131: (
Line 2131: ID = ts
Line 2131: Unrecognized token: 46
Line 2131: ID = tv_sec
Line 2131: ||
Line 2131: ID = ts
Line 2131: Unrecognized token: 46
Line 2131: ID = tv_nsec
Line 2131: )
Line 2131: )
Line 2131: ;
Line 2133: if
Line 2133: (
Line 2133: ID = timeout
Line 2133: )
Line 2133: {
Line 2137: ID = current
Line 2137: -
Line 2137: >
Line 2137: ID = real_blocked
Line 2137: =
Line 2137: ID = current
Line 2137: -
Line 2137: >
Line 2137: ID = blocked
Line 2137: ;
Line 2138: ID = sigandsets
Line 2138: (
Line 2138: Unrecognized token: 38
Line 2138: ID = current
Line 2138: -
Line 2138: >
Line 2138: ID = blocked
Line 2138: ,
Line 2138: Unrecognized token: 38
Line 2138: ID = current
Line 2138: -
Line 2138: >
Line 2138: ID = blocked
Line 2138: ,
Line 2138: Unrecognized token: 38
Line 2138: ID = these
Line 2138: )
Line 2138: ;
Line 2139: ID = recalc_sigpending
Line 2139: (
Line 2139: )
Line 2139: ;
Line 2140: ID = spin_unlock_irq
Line 2140: (
Line 2140: Unrecognized token: 38
Line 2140: ID = current
Line 2140: -
Line 2140: >
Line 2140: ID = sighand
Line 2140: -
Line 2140: >
Line 2140: ID = siglock
Line 2140: )
Line 2140: ;
Line 2142: ID = current
Line 2142: -
Line 2142: >
Line 2142: ID = state
Line 2142: =
Line 2142: ID = TASK_INTERRUPTIBLE
Line 2142: ;
Line 2143: ID = timeout
Line 2143: =
Line 2143: ID = schedule_timeout
Line 2143: (
Line 2143: ID = timeout
Line 2143: )
Line 2143: ;
Line 2145: ID = spin_lock_irq
Line 2145: (
Line 2145: Unrecognized token: 38
Line 2145: ID = current
Line 2145: -
Line 2145: >
Line 2145: ID = sighand
Line 2145: -
Line 2145: >
Line 2145: ID = siglock
Line 2145: )
Line 2145: ;
Line 2146: ID = sig
Line 2146: =
Line 2146: ID = dequeue_signal
Line 2146: (
Line 2146: ID = current
Line 2146: ,
Line 2146: Unrecognized token: 38
Line 2146: ID = these
Line 2146: ,
Line 2146: Unrecognized token: 38
Line 2146: ID = info
Line 2146: )
Line 2146: ;
Line 2147: ID = current
Line 2147: -
Line 2147: >
Line 2147: ID = blocked
Line 2147: =
Line 2147: ID = current
Line 2147: -
Line 2147: >
Line 2147: ID = real_blocked
Line 2147: ;
Line 2148: ID = siginitset
Line 2148: (
Line 2148: Unrecognized token: 38
Line 2148: ID = current
Line 2148: -
Line 2148: >
Line 2148: ID = real_blocked
Line 2148: ,
Line 2148: INTCON = 0
Line 2148: )
Line 2148: ;
Line 2149: ID = recalc_sigpending
Line 2149: (
Line 2149: )
Line 2149: ;
Line 2150: }
Line 2151: }
Line 2152: ID = spin_unlock_irq
Line 2152: (
Line 2152: Unrecognized token: 38
Line 2152: ID = current
Line 2152: -
Line 2152: >
Line 2152: ID = sighand
Line 2152: -
Line 2152: >
Line 2152: ID = siglock
Line 2152: )
Line 2152: ;
Line 2154: if
Line 2154: (
Line 2154: ID = sig
Line 2154: )
Line 2154: {
Line 2155: ID = ret
Line 2155: =
Line 2155: ID = sig
Line 2155: ;
Line 2156: if
Line 2156: (
Line 2156: ID = uinfo
Line 2156: )
Line 2156: {
Line 2157: if
Line 2157: (
Line 2157: ID = copy_siginfo_to_user
Line 2157: (
Line 2157: ID = uinfo
Line 2157: ,
Line 2157: Unrecognized token: 38
Line 2157: ID = info
Line 2157: )
Line 2157: )
Line 2158: ID = ret
Line 2158: =
Line 2158: -
Line 2158: ID = EFAULT
Line 2158: ;
Line 2159: }
Line 2160: }
Line 2160: else
Line 2160: {
Line 2161: ID = ret
Line 2161: =
Line 2161: -
Line 2161: ID = EAGAIN
Line 2161: ;
Line 2162: if
Line 2162: (
Line 2162: ID = timeout
Line 2162: )
Line 2163: ID = ret
Line 2163: =
Line 2163: -
Line 2163: ID = EINTR
Line 2163: ;
Line 2164: }
Line 2166: return
Line 2166: ID = ret
Line 2166: ;
Line 2167: }
Line 2169: ID = asmlinkage
Line 2169: ID = long
Line 2170: ID = sys_kill
Line 2170: (
Line 2170: int
Line 2170: ID = pid
Line 2170: ,
Line 2170: int
Line 2170: ID = sig
Line 2170: )
Line 2171: {
Line 2172: ID = struct
Line 2172: ID = siginfo
Line 2172: ID = info
Line 2172: ;
Line 2174: ID = info
Line 2174: Unrecognized token: 46
Line 2174: ID = si_signo
Line 2174: =
Line 2174: ID = sig
Line 2174: ;
Line 2175: ID = info
Line 2175: Unrecognized token: 46
Line 2175: ID = si_errno
Line 2175: =
Line 2175: INTCON = 0
Line 2175: ;
Line 2176: ID = info
Line 2176: Unrecognized token: 46
Line 2176: ID = si_code
Line 2176: =
Line 2176: ID = SI_USER
Line 2176: ;
Line 2177: ID = info
Line 2177: Unrecognized token: 46
Line 2177: ID = si_pid
Line 2177: =
Line 2177: ID = current
Line 2177: -
Line 2177: >
Line 2177: ID = tgid
Line 2177: ;
Line 2178: ID = info
Line 2178: Unrecognized token: 46
Line 2178: ID = si_uid
Line 2178: =
Line 2178: ID = current
Line 2178: -
Line 2178: >
Line 2178: ID = uid
Line 2178: ;
Line 2180: return
Line 2180: ID = kill_something_info
Line 2180: (
Line 2180: ID = sig
Line 2180: ,
Line 2180: Unrecognized token: 38
Line 2180: ID = info
Line 2180: ,
Line 2180: ID = pid
Line 2180: )
Line 2180: ;
Line 2181: }
Line 2193: ID = asmlinkage
Line 2193: ID = long
Line 2193: ID = sys_tgkill
Line 2193: (
Line 2193: int
Line 2193: ID = tgid
Line 2193: ,
Line 2193: int
Line 2193: ID = pid
Line 2193: ,
Line 2193: int
Line 2193: ID = sig
Line 2193: )
Line 2194: {
Line 2195: ID = struct
Line 2195: ID = siginfo
Line 2195: ID = info
Line 2195: ;
Line 2196: int
Line 2196: ID = error
Line 2196: ;
Line 2197: ID = struct
Line 2197: ID = task_struct
Line 2197: *
Line 2197: ID = p
Line 2197: ;
Line 2200: if
Line 2200: (
Line 2200: ID = pid
Line 2200: <=
Line 2200: INTCON = 0
Line 2200: ||
Line 2200: ID = tgid
Line 2200: <=
Line 2200: INTCON = 0
Line 2200: )
Line 2201: return
Line 2201: -
Line 2201: ID = EINVAL
Line 2201: ;
Line 2203: ID = info
Line 2203: Unrecognized token: 46
Line 2203: ID = si_signo
Line 2203: =
Line 2203: ID = sig
Line 2203: ;
Line 2204: ID = info
Line 2204: Unrecognized token: 46
Line 2204: ID = si_errno
Line 2204: =
Line 2204: INTCON = 0
Line 2204: ;
Line 2205: ID = info
Line 2205: Unrecognized token: 46
Line 2205: ID = si_code
Line 2205: =
Line 2205: ID = SI_TKILL
Line 2205: ;
Line 2206: ID = info
Line 2206: Unrecognized token: 46
Line 2206: ID = si_pid
Line 2206: =
Line 2206: ID = current
Line 2206: -
Line 2206: >
Line 2206: ID = tgid
Line 2206: ;
Line 2207: ID = info
Line 2207: Unrecognized token: 46
Line 2207: ID = si_uid
Line 2207: =
Line 2207: ID = current
Line 2207: -
Line 2207: >
Line 2207: ID = uid
Line 2207: ;
Line 2209: ID = read_lock
Line 2209: (
Line 2209: Unrecognized token: 38
Line 2209: ID = tasklist_lock
Line 2209: )
Line 2209: ;
Line 2210: ID = p
Line 2210: =
Line 2210: ID = find_task_by_pid
Line 2210: (
Line 2210: ID = pid
Line 2210: )
Line 2210: ;
Line 2211: ID = error
Line 2211: =
Line 2211: -
Line 2211: ID = ESRCH
Line 2211: ;
Line 2212: if
Line 2212: (
Line 2212: ID = p
Line 2212: &&
Line 2212: (
Line 2212: ID = p
Line 2212: -
Line 2212: >
Line 2212: ID = tgid
Line 2212: ==
Line 2212: ID = tgid
Line 2212: )
Line 2212: )
Line 2212: {
Line 2213: ID = error
Line 2213: =
Line 2213: ID = check_kill_permission
Line 2213: (
Line 2213: ID = sig
Line 2213: ,
Line 2213: Unrecognized token: 38
Line 2213: ID = info
Line 2213: ,
Line 2213: ID = p
Line 2213: )
Line 2213: ;
Line 2218: if
Line 2218: (
Line 2218: !
Line 2218: ID = error
Line 2218: &&
Line 2218: ID = sig
Line 2218: &&
Line 2218: ID = p
Line 2218: -
Line 2218: >
Line 2218: ID = sighand
Line 2218: )
Line 2218: {
Line 2219: ID = spin_lock_irq
Line 2219: (
Line 2219: Unrecognized token: 38
Line 2219: ID = p
Line 2219: -
Line 2219: >
Line 2219: ID = sighand
Line 2219: -
Line 2219: >
Line 2219: ID = siglock
Line 2219: )
Line 2219: ;
Line 2220: ID = handle_stop_signal
Line 2220: (
Line 2220: ID = sig
Line 2220: ,
Line 2220: ID = p
Line 2220: )
Line 2220: ;
Line 2221: ID = error
Line 2221: =
Line 2221: ID = specific_send_sig_info
Line 2221: (
Line 2221: ID = sig
Line 2221: ,
Line 2221: Unrecognized token: 38
Line 2221: ID = info
Line 2221: ,
Line 2221: ID = p
Line 2221: )
Line 2221: ;
Line 2222: ID = spin_unlock_irq
Line 2222: (
Line 2222: Unrecognized token: 38
Line 2222: ID = p
Line 2222: -
Line 2222: >
Line 2222: ID = sighand
Line 2222: -
Line 2222: >
Line 2222: ID = siglock
Line 2222: )
Line 2222: ;
Line 2223: }
Line 2224: }
Line 2225: ID = read_unlock
Line 2225: (
Line 2225: Unrecognized token: 38
Line 2225: ID = tasklist_lock
Line 2225: )
Line 2225: ;
Line 2226: return
Line 2226: ID = error
Line 2226: ;
Line 2227: }
Line 2232: ID = asmlinkage
Line 2232: ID = long
Line 2233: ID = sys_tkill
Line 2233: (
Line 2233: int
Line 2233: ID = pid
Line 2233: ,
Line 2233: int
Line 2233: ID = sig
Line 2233: )
Line 2234: {
Line 2235: ID = struct
Line 2235: ID = siginfo
Line 2235: ID = info
Line 2235: ;
Line 2236: int
Line 2236: ID = error
Line 2236: ;
Line 2237: ID = struct
Line 2237: ID = task_struct
Line 2237: *
Line 2237: ID = p
Line 2237: ;
Line 2240: if
Line 2240: (
Line 2240: ID = pid
Line 2240: <=
Line 2240: INTCON = 0
Line 2240: )
Line 2241: return
Line 2241: -
Line 2241: ID = EINVAL
Line 2241: ;
Line 2243: ID = info
Line 2243: Unrecognized token: 46
Line 2243: ID = si_signo
Line 2243: =
Line 2243: ID = sig
Line 2243: ;
Line 2244: ID = info
Line 2244: Unrecognized token: 46
Line 2244: ID = si_errno
Line 2244: =
Line 2244: INTCON = 0
Line 2244: ;
Line 2245: ID = info
Line 2245: Unrecognized token: 46
Line 2245: ID = si_code
Line 2245: =
Line 2245: ID = SI_TKILL
Line 2245: ;
Line 2246: ID = info
Line 2246: Unrecognized token: 46
Line 2246: ID = si_pid
Line 2246: =
Line 2246: ID = current
Line 2246: -
Line 2246: >
Line 2246: ID = tgid
Line 2246: ;
Line 2247: ID = info
Line 2247: Unrecognized token: 46
Line 2247: ID = si_uid
Line 2247: =
Line 2247: ID = current
Line 2247: -
Line 2247: >
Line 2247: ID = uid
Line 2247: ;
Line 2249: ID = read_lock
Line 2249: (
Line 2249: Unrecognized token: 38
Line 2249: ID = tasklist_lock
Line 2249: )
Line 2249: ;
Line 2250: ID = p
Line 2250: =
Line 2250: ID = find_task_by_pid
Line 2250: (
Line 2250: ID = pid
Line 2250: )
Line 2250: ;
Line 2251: ID = error
Line 2251: =
Line 2251: -
Line 2251: ID = ESRCH
Line 2251: ;
Line 2252: if
Line 2252: (
Line 2252: ID = p
Line 2252: )
Line 2252: {
Line 2253: ID = error
Line 2253: =
Line 2253: ID = check_kill_permission
Line 2253: (
Line 2253: ID = sig
Line 2253: ,
Line 2253: Unrecognized token: 38
Line 2253: ID = info
Line 2253: ,
Line 2253: ID = p
Line 2253: )
Line 2253: ;
Line 2258: if
Line 2258: (
Line 2258: !
Line 2258: ID = error
Line 2258: &&
Line 2258: ID = sig
Line 2258: &&
Line 2258: ID = p
Line 2258: -
Line 2258: >
Line 2258: ID = sighand
Line 2258: )
Line 2258: {
Line 2259: ID = spin_lock_irq
Line 2259: (
Line 2259: Unrecognized token: 38
Line 2259: ID = p
Line 2259: -
Line 2259: >
Line 2259: ID = sighand
Line 2259: -
Line 2259: >
Line 2259: ID = siglock
Line 2259: )
Line 2259: ;
Line 2260: ID = handle_stop_signal
Line 2260: (
Line 2260: ID = sig
Line 2260: ,
Line 2260: ID = p
Line 2260: )
Line 2260: ;
Line 2261: ID = error
Line 2261: =
Line 2261: ID = specific_send_sig_info
Line 2261: (
Line 2261: ID = sig
Line 2261: ,
Line 2261: Unrecognized token: 38
Line 2261: ID = info
Line 2261: ,
Line 2261: ID = p
Line 2261: )
Line 2261: ;
Line 2262: ID = spin_unlock_irq
Line 2262: (
Line 2262: Unrecognized token: 38
Line 2262: ID = p
Line 2262: -
Line 2262: >
Line 2262: ID = sighand
Line 2262: -
Line 2262: >
Line 2262: ID = siglock
Line 2262: )
Line 2262: ;
Line 2263: }
Line 2264: }
Line 2265: ID = read_unlock
Line 2265: (
Line 2265: Unrecognized token: 38
Line 2265: ID = tasklist_lock
Line 2265: )
Line 2265: ;
Line 2266: return
Line 2266: ID = error
Line 2266: ;
Line 2267: }
Line 2269: ID = asmlinkage
Line 2269: ID = long
Line 2270: ID = sys_rt_sigqueueinfo
Line 2270: (
Line 2270: int
Line 2270: ID = pid
Line 2270: ,
Line 2270: int
Line 2270: ID = sig
Line 2270: ,
Line 2270: ID = siginfo_t
Line 2270: Unrecognized token: 95
Line 2270: Unrecognized token: 95
Line 2270: ID = user
Line 2270: *
Line 2270: ID = uinfo
Line 2270: )
Line 2271: {
Line 2272: ID = siginfo_t
Line 2272: ID = info
Line 2272: ;
Line 2274: if
Line 2274: (
Line 2274: ID = copy_from_user
Line 2274: (
Line 2274: Unrecognized token: 38
Line 2274: ID = info
Line 2274: ,
Line 2274: ID = uinfo
Line 2274: ,
Line 2274: ID = sizeof
Line 2274: (
Line 2274: ID = siginfo_t
Line 2274: )
Line 2274: )
Line 2274: )
Line 2275: return
Line 2275: -
Line 2275: ID = EFAULT
Line 2275: ;
Line 2279: if
Line 2279: (
Line 2279: ID = info
Line 2279: Unrecognized token: 46
Line 2279: ID = si_code
Line 2279: >=
Line 2279: INTCON = 0
Line 2279: )
Line 2280: return
Line 2280: -
Line 2280: ID = EPERM
Line 2280: ;
Line 2281: ID = info
Line 2281: Unrecognized token: 46
Line 2281: ID = si_signo
Line 2281: =
Line 2281: ID = sig
Line 2281: ;
Line 2284: return
Line 2284: ID = kill_proc_info
Line 2284: (
Line 2284: ID = sig
Line 2284: ,
Line 2284: Unrecognized token: 38
Line 2284: ID = info
Line 2284: ,
Line 2284: ID = pid
Line 2284: )
Line 2284: ;
Line 2285: }
Line 2287: int
Line 2288: ID = do_sigaction
Line 2288: (
Line 2288: int
Line 2288: ID = sig
Line 2288: ,
Line 2288: ID = const
Line 2288: ID = struct
Line 2288: ID = k_sigaction
Line 2288: *
Line 2288: ID = act
Line 2288: ,
Line 2288: ID = struct
Line 2288: ID = k_sigaction
Line 2288: *
Line 2288: ID = oact
Line 2288: )
Line 2289: {
Line 2290: ID = struct
Line 2290: ID = k_sigaction
Line 2290: *
Line 2290: ID = k
Line 2290: ;
Line 2292: if
Line 2292: (
Line 2292: ID = sig
Line 2292: <
Line 2292: INTCON = 1
Line 2292: ||
Line 2292: ID = sig
Line 2292: >
Line 2292: Unrecognized token: 95
Line 2292: ID = NSIG
Line 2292: ||
Line 2292: (
Line 2292: ID = act
Line 2292: &&
Line 2292: ID = sig_kernel_only
Line 2292: (
Line 2292: ID = sig
Line 2292: )
Line 2292: )
Line 2292: )
Line 2293: return
Line 2293: -
Line 2293: ID = EINVAL
Line 2293: ;
Line 2295: ID = k
Line 2295: =
Line 2295: Unrecognized token: 38
Line 2295: ID = current
Line 2295: -
Line 2295: >
Line 2295: ID = sighand
Line 2295: -
Line 2295: >
Line 2295: ID = action
Line 2295: [
Line 2295: ID = sig
Line 2295: -
Line 2295: INTCON = 1
Line 2295: ]
Line 2295: ;
Line 2297: ID = spin_lock_irq
Line 2297: (
Line 2297: Unrecognized token: 38
Line 2297: ID = current
Line 2297: -
Line 2297: >
Line 2297: ID = sighand
Line 2297: -
Line 2297: >
Line 2297: ID = siglock
Line 2297: )
Line 2297: ;
Line 2298: if
Line 2298: (
Line 2298: ID = signal_pending
Line 2298: (
Line 2298: ID = current
Line 2298: )
Line 2298: )
Line 2298: {
Line 2303: ID = spin_unlock_irq
Line 2303: (
Line 2303: Unrecognized token: 38
Line 2303: ID = current
Line 2303: -
Line 2303: >
Line 2303: ID = sighand
Line 2303: -
Line 2303: >
Line 2303: ID = siglock
Line 2303: )
Line 2303: ;
Line 2304: return
Line 2304: -
Line 2304: ID = ERESTARTNOINTR
Line 2304: ;
Line 2305: }
Line 2307: if
Line 2307: (
Line 2307: ID = oact
Line 2307: )
Line 2308: *
Line 2308: ID = oact
Line 2308: =
Line 2308: *
Line 2308: ID = k
Line 2308: ;
Line 2310: if
Line 2310: (
Line 2310: ID = act
Line 2310: )
Line 2310: {
Line 2322: if
Line 2322: (
Line 2322: ID = act
Line 2322: -
Line 2322: >
Line 2322: ID = sa
Line 2322: Unrecognized token: 46
Line 2322: ID = sa_handler
Line 2322: ==
Line 2322: ID = SIG_IGN
Line 2322: ||
Line 2323: (
Line 2323: ID = act
Line 2323: -
Line 2323: >
Line 2323: ID = sa
Line 2323: Unrecognized token: 46
Line 2323: ID = sa_handler
Line 2323: ==
Line 2323: ID = SIG_DFL
Line 2323: &&
Line 2324: ID = sig_kernel_ignore
Line 2324: (
Line 2324: ID = sig
Line 2324: )
Line 2324: )
Line 2324: )
Line 2324: {
Line 2331: ID = struct
Line 2331: ID = task_struct
Line 2331: *
Line 2331: ID = t
Line 2331: =
Line 2331: ID = current
Line 2331: ;
Line 2332: ID = spin_unlock_irq
Line 2332: (
Line 2332: Unrecognized token: 38
Line 2332: ID = t
Line 2332: -
Line 2332: >
Line 2332: ID = sighand
Line 2332: -
Line 2332: >
Line 2332: ID = siglock
Line 2332: )
Line 2332: ;
Line 2333: ID = read_lock
Line 2333: (
Line 2333: Unrecognized token: 38
Line 2333: ID = tasklist_lock
Line 2333: )
Line 2333: ;
Line 2334: ID = spin_lock_irq
Line 2334: (
Line 2334: Unrecognized token: 38
Line 2334: ID = t
Line 2334: -
Line 2334: >
Line 2334: ID = sighand
Line 2334: -
Line 2334: >
Line 2334: ID = siglock
Line 2334: )
Line 2334: ;
Line 2335: *
Line 2335: ID = k
Line 2335: =
Line 2335: *
Line 2335: ID = act
Line 2335: ;
Line 2336: ID = sigdelsetmask
Line 2336: (
Line 2336: Unrecognized token: 38
Line 2336: ID = k
Line 2336: -
Line 2336: >
Line 2336: ID = sa
Line 2336: Unrecognized token: 46
Line 2336: ID = sa_mask
Line 2336: ,
Line 2337: ID = sigmask
Line 2337: (
Line 2337: ID = SIGKILL
Line 2337: )
Line 2337: Unrecognized token: 124
Line 2337: ID = sigmask
Line 2337: (
Line 2337: ID = SIGSTOP
Line 2337: )
Line 2337: )
Line 2337: ;
Line 2338: ID = rm_from_queue
Line 2338: (
Line 2338: ID = sigmask
Line 2338: (
Line 2338: ID = sig
Line 2338: )
Line 2338: ,
Line 2338: Unrecognized token: 38
Line 2338: ID = t
Line 2338: -
Line 2338: >
Line 2338: ID = signal
Line 2338: -
Line 2338: >
Line 2338: ID = shared_pending
Line 2338: )
Line 2338: ;
Line 2339: ID = do
Line 2339: {
Line 2340: ID = rm_from_queue
Line 2340: (
Line 2340: ID = sigmask
Line 2340: (
Line 2340: ID = sig
Line 2340: )
Line 2340: ,
Line 2340: Unrecognized token: 38
Line 2340: ID = t
Line 2340: -
Line 2340: >
Line 2340: ID = pending
Line 2340: )
Line 2340: ;
Line 2341: ID = recalc_sigpending_tsk
Line 2341: (
Line 2341: ID = t
Line 2341: )
Line 2341: ;
Line 2342: ID = t
Line 2342: =
Line 2342: ID = next_thread
Line 2342: (
Line 2342: ID = t
Line 2342: )
Line 2342: ;
Line 2343: }
Line 2343: while
Line 2343: (
Line 2343: ID = t
Line 2343: !=
Line 2343: ID = current
Line 2343: )
Line 2343: ;
Line 2344: ID = spin_unlock_irq
Line 2344: (
Line 2344: Unrecognized token: 38
Line 2344: ID = current
Line 2344: -
Line 2344: >
Line 2344: ID = sighand
Line 2344: -
Line 2344: >
Line 2344: ID = siglock
Line 2344: )
Line 2344: ;
Line 2345: ID = read_unlock
Line 2345: (
Line 2345: Unrecognized token: 38
Line 2345: ID = tasklist_lock
Line 2345: )
Line 2345: ;
Line 2346: return
Line 2346: INTCON = 0
Line 2346: ;
Line 2347: }
Line 2349: *
Line 2349: ID = k
Line 2349: =
Line 2349: *
Line 2349: ID = act
Line 2349: ;
Line 2350: ID = sigdelsetmask
Line 2350: (
Line 2350: Unrecognized token: 38
Line 2350: ID = k
Line 2350: -
Line 2350: >
Line 2350: ID = sa
Line 2350: Unrecognized token: 46
Line 2350: ID = sa_mask
Line 2350: ,
Line 2351: ID = sigmask
Line 2351: (
Line 2351: ID = SIGKILL
Line 2351: )
Line 2351: Unrecognized token: 124
Line 2351: ID = sigmask
Line 2351: (
Line 2351: ID = SIGSTOP
Line 2351: )
Line 2351: )
Line 2351: ;
Line 2352: }
Line 2354: ID = spin_unlock_irq
Line 2354: (
Line 2354: Unrecognized token: 38
Line 2354: ID = current
Line 2354: -
Line 2354: >
Line 2354: ID = sighand
Line 2354: -
Line 2354: >
Line 2354: ID = siglock
Line 2354: )
Line 2354: ;
Line 2355: return
Line 2355: INTCON = 0
Line 2355: ;
Line 2356: }
Line 2358: int
Line 2359: ID = do_sigaltstack
Line 2359: (
Line 2359: ID = const
Line 2359: ID = stack_t
Line 2359: Unrecognized token: 95
Line 2359: Unrecognized token: 95
Line 2359: ID = user
Line 2359: *
Line 2359: ID = uss
Line 2359: ,
Line 2359: ID = stack_t
Line 2359: Unrecognized token: 95
Line 2359: Unrecognized token: 95
Line 2359: ID = user
Line 2359: *
Line 2359: ID = uoss
Line 2359: ,
Line 2359: ID = unsigned
Line 2359: ID = long
Line 2359: ID = sp
Line 2359: )
Line 2360: {
Line 2361: ID = stack_t
Line 2361: ID = oss
Line 2361: ;
Line 2362: int
Line 2362: ID = error
Line 2362: ;
Line 2364: if
Line 2364: (
Line 2364: ID = uoss
Line 2364: )
Line 2364: {
Line 2365: ID = oss
Line 2365: Unrecognized token: 46
Line 2365: ID = ss_sp
Line 2365: =
Line 2365: (
Line 2365: void
Line 2365: Unrecognized token: 95
Line 2365: Unrecognized token: 95
Line 2365: ID = user
Line 2365: *
Line 2365: )
Line 2365: ID = current
Line 2365: -
Line 2365: >
Line 2365: ID = sas_ss_sp
Line 2365: ;
Line 2366: ID = oss
Line 2366: Unrecognized token: 46
Line 2366: ID = ss_size
Line 2366: =
Line 2366: ID = current
Line 2366: -
Line 2366: >
Line 2366: ID = sas_ss_size
Line 2366: ;
Line 2367: ID = oss
Line 2367: Unrecognized token: 46
Line 2367: ID = ss_flags
Line 2367: =
Line 2367: ID = sas_ss_flags
Line 2367: (
Line 2367: ID = sp
Line 2367: )
Line 2367: ;
Line 2368: }
Line 2370: if
Line 2370: (
Line 2370: ID = uss
Line 2370: )
Line 2370: {
Line 2371: void
Line 2371: Unrecognized token: 95
Line 2371: Unrecognized token: 95
Line 2371: ID = user
Line 2371: *
Line 2371: ID = ss_sp
Line 2371: ;
Line 2372: ID = size_t
Line 2372: ID = ss_size
Line 2372: ;
Line 2373: int
Line 2373: ID = ss_flags
Line 2373: ;
Line 2375: ID = error
Line 2375: =
Line 2375: -
Line 2375: ID = EFAULT
Line 2375: ;
Line 2376: if
Line 2376: (
Line 2376: ID = verify_area
Line 2376: (
Line 2376: ID = VERIFY_READ
Line 2376: ,
Line 2376: ID = uss
Line 2376: ,
Line 2376: ID = sizeof
Line 2376: (
Line 2376: *
Line 2376: ID = uss
Line 2376: )
Line 2376: )
Line 2377: ||
Line 2377: Unrecognized token: 95
Line 2377: Unrecognized token: 95
Line 2377: ID = get_user
Line 2377: (
Line 2377: ID = ss_sp
Line 2377: ,
Line 2377: Unrecognized token: 38
Line 2377: ID = uss
Line 2377: -
Line 2377: >
Line 2377: ID = ss_sp
Line 2377: )
Line 2378: ||
Line 2378: Unrecognized token: 95
Line 2378: Unrecognized token: 95
Line 2378: ID = get_user
Line 2378: (
Line 2378: ID = ss_flags
Line 2378: ,
Line 2378: Unrecognized token: 38
Line 2378: ID = uss
Line 2378: -
Line 2378: >
Line 2378: ID = ss_flags
Line 2378: )
Line 2379: ||
Line 2379: Unrecognized token: 95
Line 2379: Unrecognized token: 95
Line 2379: ID = get_user
Line 2379: (
Line 2379: ID = ss_size
Line 2379: ,
Line 2379: Unrecognized token: 38
Line 2379: ID = uss
Line 2379: -
Line 2379: >
Line 2379: ID = ss_size
Line 2379: )
Line 2379: )
Line 2380: ID = goto
Line 2380: ID = out
Line 2380: ;
Line 2382: ID = error
Line 2382: =
Line 2382: -
Line 2382: ID = EPERM
Line 2382: ;
Line 2383: if
Line 2383: (
Line 2383: ID = on_sig_stack
Line 2383: (
Line 2383: ID = sp
Line 2383: )
Line 2383: )
Line 2384: ID = goto
Line 2384: ID = out
Line 2384: ;
Line 2386: ID = error
Line 2386: =
Line 2386: -
Line 2386: ID = EINVAL
Line 2386: ;
Line 2395: if
Line 2395: (
Line 2395: ID = ss_flags
Line 2395: !=
Line 2395: ID = SS_DISABLE
Line 2395: &&
Line 2395: ID = ss_flags
Line 2395: !=
Line 2395: ID = SS_ONSTACK
Line 2395: &&
Line 2395: ID = ss_flags
Line 2395: !=
Line 2395: INTCON = 0
Line 2395: )
Line 2396: ID = goto
Line 2396: ID = out
Line 2396: ;
Line 2398: if
Line 2398: (
Line 2398: ID = ss_flags
Line 2398: ==
Line 2398: ID = SS_DISABLE
Line 2398: )
Line 2398: {
Line 2399: ID = ss_size
Line 2399: =
Line 2399: INTCON = 0
Line 2399: ;
Line 2400: ID = ss_sp
Line 2400: =
Line 2400: ID = NULL
Line 2400: ;
Line 2401: }
Line 2401: else
Line 2401: {
Line 2402: ID = error
Line 2402: =
Line 2402: -
Line 2402: ID = ENOMEM
Line 2402: ;
Line 2403: if
Line 2403: (
Line 2403: ID = ss_size
Line 2403: <
Line 2403: ID = MINSIGSTKSZ
Line 2403: )
Line 2404: ID = goto
Line 2404: ID = out
Line 2404: ;
Line 2405: }
Line 2407: ID = current
Line 2407: -
Line 2407: >
Line 2407: ID = sas_ss_sp
Line 2407: =
Line 2407: (
Line 2407: ID = unsigned
Line 2407: ID = long
Line 2407: )
Line 2407: ID = ss_sp
Line 2407: ;
Line 2408: ID = current
Line 2408: -
Line 2408: >
Line 2408: ID = sas_ss_size
Line 2408: =
Line 2408: ID = ss_size
Line 2408: ;
Line 2409: }
Line 2411: if
Line 2411: (
Line 2411: ID = uoss
Line 2411: )
Line 2411: {
Line 2412: ID = error
Line 2412: =
Line 2412: -
Line 2412: ID = EFAULT
Line 2412: ;
Line 2413: if
Line 2413: (
Line 2413: ID = copy_to_user
Line 2413: (
Line 2413: ID = uoss
Line 2413: ,
Line 2413: Unrecognized token: 38
Line 2413: ID = oss
Line 2413: ,
Line 2413: ID = sizeof
Line 2413: (
Line 2413: ID = oss
Line 2413: )
Line 2413: )
Line 2413: )
Line 2414: ID = goto
Line 2414: ID = out
Line 2414: ;
Line 2415: }
Line 2417: ID = error
Line 2417: =
Line 2417: INTCON = 0
Line 2417: ;
Line 2418: ID = out
Line 2418: Unrecognized token: 58
Line 2419: return
Line 2419: ID = error
Line 2419: ;
Line 2420: }
Line 2422: Unrecognized token: 35
Line 2422: ID = ifdef
Line 2422: Unrecognized token: 95
Line 2422: Unrecognized token: 95
Line 2422: ID = ARCH_WANT_SYS_SIGPENDING
Line 2424: ID = asmlinkage
Line 2424: ID = long
Line 2425: ID = sys_sigpending
Line 2425: (
Line 2425: ID = old_sigset_t
Line 2425: Unrecognized token: 95
Line 2425: Unrecognized token: 95
Line 2425: ID = user
Line 2425: *
Line 2425: ID = set
Line 2425: )
Line 2426: {
Line 2427: return
Line 2427: ID = do_sigpending
Line 2427: (
Line 2427: ID = set
Line 2427: ,
Line 2427: ID = sizeof
Line 2427: (
Line 2427: *
Line 2427: ID = set
Line 2427: )
Line 2427: )
Line 2427: ;
Line 2428: }
Line 2430: Unrecognized token: 35
Line 2430: ID = endif
Line 2432: Unrecognized token: 35
Line 2432: ID = ifdef
Line 2432: Unrecognized token: 95
Line 2432: Unrecognized token: 95
Line 2432: ID = ARCH_WANT_SYS_SIGPROCMASK
Line 2436: ID = asmlinkage
Line 2436: ID = long
Line 2437: ID = sys_sigprocmask
Line 2437: (
Line 2437: int
Line 2437: ID = how
Line 2437: ,
Line 2437: ID = old_sigset_t
Line 2437: Unrecognized token: 95
Line 2437: Unrecognized token: 95
Line 2437: ID = user
Line 2437: *
Line 2437: ID = set
Line 2437: ,
Line 2437: ID = old_sigset_t
Line 2437: Unrecognized token: 95
Line 2437: Unrecognized token: 95
Line 2437: ID = user
Line 2437: *
Line 2437: ID = oset
Line 2437: )
Line 2438: {
Line 2439: int
Line 2439: ID = error
Line 2439: ;
Line 2440: ID = old_sigset_t
Line 2440: ID = old_set
Line 2440: ,
Line 2440: ID = new_set
Line 2440: ;
Line 2442: if
Line 2442: (
Line 2442: ID = set
Line 2442: )
Line 2442: {
Line 2443: ID = error
Line 2443: =
Line 2443: -
Line 2443: ID = EFAULT
Line 2443: ;
Line 2444: if
Line 2444: (
Line 2444: ID = copy_from_user
Line 2444: (
Line 2444: Unrecognized token: 38
Line 2444: ID = new_set
Line 2444: ,
Line 2444: ID = set
Line 2444: ,
Line 2444: ID = sizeof
Line 2444: (
Line 2444: *
Line 2444: ID = set
Line 2444: )
Line 2444: )
Line 2444: )
Line 2445: ID = goto
Line 2445: ID = out
Line 2445: ;
Line 2446: ID = new_set
Line 2446: Unrecognized token: 38
Line 2446: =
Line 2446: Unrecognized token: 126
Line 2446: (
Line 2446: ID = sigmask
Line 2446: (
Line 2446: ID = SIGKILL
Line 2446: )
Line 2446: Unrecognized token: 124
Line 2446: ID = sigmask
Line 2446: (
Line 2446: ID = SIGSTOP
Line 2446: )
Line 2446: )
Line 2446: ;
Line 2448: ID = spin_lock_irq
Line 2448: (
Line 2448: Unrecognized token: 38
Line 2448: ID = current
Line 2448: -
Line 2448: >
Line 2448: ID = sighand
Line 2448: -
Line 2448: >
Line 2448: ID = siglock
Line 2448: )
Line 2448: ;
Line 2449: ID = old_set
Line 2449: =
Line 2449: ID = current
Line 2449: -
Line 2449: >
Line 2449: ID = blocked
Line 2449: Unrecognized token: 46
Line 2449: ID = sig
Line 2449: [
Line 2449: INTCON = 0
Line 2449: ]
Line 2449: ;
Line 2451: ID = error
Line 2451: =
Line 2451: INTCON = 0
Line 2451: ;
Line 2452: ID = switch
Line 2452: (
Line 2452: ID = how
Line 2452: )
Line 2452: {
Line 2453: ID = default
Line 2453: Unrecognized token: 58
Line 2454: ID = error
Line 2454: =
Line 2454: -
Line 2454: ID = EINVAL
Line 2454: ;
Line 2455: ID = break
Line 2455: ;
Line 2456: ID = case
Line 2456: ID = SIG_BLOCK
Line 2456: Unrecognized token: 58
Line 2457: ID = sigaddsetmask
Line 2457: (
Line 2457: Unrecognized token: 38
Line 2457: ID = current
Line 2457: -
Line 2457: >
Line 2457: ID = blocked
Line 2457: ,
Line 2457: ID = new_set
Line 2457: )
Line 2457: ;
Line 2458: ID = break
Line 2458: ;
Line 2459: ID = case
Line 2459: ID = SIG_UNBLOCK
Line 2459: Unrecognized token: 58
Line 2460: ID = sigdelsetmask
Line 2460: (
Line 2460: Unrecognized token: 38
Line 2460: ID = current
Line 2460: -
Line 2460: >
Line 2460: ID = blocked
Line 2460: ,
Line 2460: ID = new_set
Line 2460: )
Line 2460: ;
Line 2461: ID = break
Line 2461: ;
Line 2462: ID = case
Line 2462: ID = SIG_SETMASK
Line 2462: Unrecognized token: 58
Line 2463: ID = current
Line 2463: -
Line 2463: >
Line 2463: ID = blocked
Line 2463: Unrecognized token: 46
Line 2463: ID = sig
Line 2463: [
Line 2463: INTCON = 0
Line 2463: ]
Line 2463: =
Line 2463: ID = new_set
Line 2463: ;
Line 2464: ID = break
Line 2464: ;
Line 2465: }
Line 2467: ID = recalc_sigpending
Line 2467: (
Line 2467: )
Line 2467: ;
Line 2468: ID = spin_unlock_irq
Line 2468: (
Line 2468: Unrecognized token: 38
Line 2468: ID = current
Line 2468: -
Line 2468: >
Line 2468: ID = sighand
Line 2468: -
Line 2468: >
Line 2468: ID = siglock
Line 2468: )
Line 2468: ;
Line 2469: if
Line 2469: (
Line 2469: ID = error
Line 2469: )
Line 2470: ID = goto
Line 2470: ID = out
Line 2470: ;
Line 2471: if
Line 2471: (
Line 2471: ID = oset
Line 2471: )
Line 2472: ID = goto
Line 2472: ID = set_old
Line 2472: ;
Line 2473: }
Line 2473: else
Line 2473: if
Line 2473: (
Line 2473: ID = oset
Line 2473: )
Line 2473: {
Line 2474: ID = old_set
Line 2474: =
Line 2474: ID = current
Line 2474: -
Line 2474: >
Line 2474: ID = blocked
Line 2474: Unrecognized token: 46
Line 2474: ID = sig
Line 2474: [
Line 2474: INTCON = 0
Line 2474: ]
Line 2474: ;
Line 2475: ID = set_old
Line 2475: Unrecognized token: 58
Line 2476: ID = error
Line 2476: =
Line 2476: -
Line 2476: ID = EFAULT
Line 2476: ;
Line 2477: if
Line 2477: (
Line 2477: ID = copy_to_user
Line 2477: (
Line 2477: ID = oset
Line 2477: ,
Line 2477: Unrecognized token: 38
Line 2477: ID = old_set
Line 2477: ,
Line 2477: ID = sizeof
Line 2477: (
Line 2477: *
Line 2477: ID = oset
Line 2477: )
Line 2477: )
Line 2477: )
Line 2478: ID = goto
Line 2478: ID = out
Line 2478: ;
Line 2479: }
Line 2480: ID = error
Line 2480: =
Line 2480: INTCON = 0
Line 2480: ;
Line 2481: ID = out
Line 2481: Unrecognized token: 58
Line 2482: return
Line 2482: ID = error
Line 2482: ;
Line 2483: }
Line 2484: Unrecognized token: 35
Line 2484: ID = endif
Line 2486: Unrecognized token: 35
Line 2486: ID = ifdef
Line 2486: Unrecognized token: 95
Line 2486: Unrecognized token: 95
Line 2486: ID = ARCH_WANT_SYS_RT_SIGACTION
Line 2487: ID = asmlinkage
Line 2487: ID = long
Line 2488: ID = sys_rt_sigaction
Line 2488: (
Line 2488: int
Line 2488: ID = sig
Line 2488: ,
Line 2489: ID = const
Line 2489: ID = struct
Line 2489: ID = sigaction
Line 2489: Unrecognized token: 95
Line 2489: Unrecognized token: 95
Line 2489: ID = user
Line 2489: *
Line 2489: ID = act
Line 2489: ,
Line 2490: ID = struct
Line 2490: ID = sigaction
Line 2490: Unrecognized token: 95
Line 2490: Unrecognized token: 95
Line 2490: ID = user
Line 2490: *
Line 2490: ID = oact
Line 2490: ,
Line 2491: ID = size_t
Line 2491: ID = sigsetsize
Line 2491: )
Line 2492: {
Line 2493: ID = struct
Line 2493: ID = k_sigaction
Line 2493: ID = new_sa
Line 2493: ,
Line 2493: ID = old_sa
Line 2493: ;
Line 2494: int
Line 2494: ID = ret
Line 2494: =
Line 2494: -
Line 2494: ID = EINVAL
Line 2494: ;
Line 2497: if
Line 2497: (
Line 2497: ID = sigsetsize
Line 2497: !=
Line 2497: ID = sizeof
Line 2497: (
Line 2497: ID = sigset_t
Line 2497: )
Line 2497: )
Line 2498: ID = goto
Line 2498: ID = out
Line 2498: ;
Line 2500: if
Line 2500: (
Line 2500: ID = act
Line 2500: )
Line 2500: {
Line 2501: if
Line 2501: (
Line 2501: ID = copy_from_user
Line 2501: (
Line 2501: Unrecognized token: 38
Line 2501: ID = new_sa
Line 2501: Unrecognized token: 46
Line 2501: ID = sa
Line 2501: ,
Line 2501: ID = act
Line 2501: ,
Line 2501: ID = sizeof
Line 2501: (
Line 2501: ID = new_sa
Line 2501: Unrecognized token: 46
Line 2501: ID = sa
Line 2501: )
Line 2501: )
Line 2501: )
Line 2502: return
Line 2502: -
Line 2502: ID = EFAULT
Line 2502: ;
Line 2503: }
Line 2505: ID = ret
Line 2505: =
Line 2505: ID = do_sigaction
Line 2505: (
Line 2505: ID = sig
Line 2505: ,
Line 2505: ID = act
Line 2505: Unrecognized token: 63
Line 2505: Unrecognized token: 38
Line 2505: ID = new_sa
Line 2505: Unrecognized token: 58
Line 2505: ID = NULL
Line 2505: ,
Line 2505: ID = oact
Line 2505: Unrecognized token: 63
Line 2505: Unrecognized token: 38
Line 2505: ID = old_sa
Line 2505: Unrecognized token: 58
Line 2505: ID = NULL
Line 2505: )
Line 2505: ;
Line 2507: if
Line 2507: (
Line 2507: !
Line 2507: ID = ret
Line 2507: &&
Line 2507: ID = oact
Line 2507: )
Line 2507: {
Line 2508: if
Line 2508: (
Line 2508: ID = copy_to_user
Line 2508: (
Line 2508: ID = oact
Line 2508: ,
Line 2508: Unrecognized token: 38
Line 2508: ID = old_sa
Line 2508: Unrecognized token: 46
Line 2508: ID = sa
Line 2508: ,
Line 2508: ID = sizeof
Line 2508: (
Line 2508: ID = old_sa
Line 2508: Unrecognized token: 46
Line 2508: ID = sa
Line 2508: )
Line 2508: )
Line 2508: )
Line 2509: return
Line 2509: -
Line 2509: ID = EFAULT
Line 2509: ;
Line 2510: }
Line 2511: ID = out
Line 2511: Unrecognized token: 58
Line 2512: return
Line 2512: ID = ret
Line 2512: ;
Line 2513: }
Line 2514: Unrecognized token: 35
Line 2514: ID = endif
Line 2516: Unrecognized token: 35
Line 2516: ID = ifdef
Line 2516: Unrecognized token: 95
Line 2516: Unrecognized token: 95
Line 2516: ID = ARCH_WANT_SYS_SGETMASK
Line 2521: ID = asmlinkage
Line 2521: ID = long
Line 2522: ID = sys_sgetmask
Line 2522: (
Line 2522: void
Line 2522: )
Line 2523: {
Line 2525: return
Line 2525: ID = current
Line 2525: -
Line 2525: >
Line 2525: ID = blocked
Line 2525: Unrecognized token: 46
Line 2525: ID = sig
Line 2525: [
Line 2525: INTCON = 0
Line 2525: ]
Line 2525: ;
Line 2526: }
Line 2528: ID = asmlinkage
Line 2528: ID = long
Line 2529: ID = sys_ssetmask
Line 2529: (
Line 2529: int
Line 2529: ID = newmask
Line 2529: )
Line 2530: {
Line 2531: int
Line 2531: ID = old
Line 2531: ;
Line 2533: ID = spin_lock_irq
Line 2533: (
Line 2533: Unrecognized token: 38
Line 2533: ID = current
Line 2533: -
Line 2533: >
Line 2533: ID = sighand
Line 2533: -
Line 2533: >
Line 2533: ID = siglock
Line 2533: )
Line 2533: ;
Line 2534: ID = old
Line 2534: =
Line 2534: ID = current
Line 2534: -
Line 2534: >
Line 2534: ID = blocked
Line 2534: Unrecognized token: 46
Line 2534: ID = sig
Line 2534: [
Line 2534: INTCON = 0
Line 2534: ]
Line 2534: ;
Line 2536: ID = siginitset
Line 2536: (
Line 2536: Unrecognized token: 38
Line 2536: ID = current
Line 2536: -
Line 2536: >
Line 2536: ID = blocked
Line 2536: ,
Line 2536: ID = newmask
Line 2536: Unrecognized token: 38
Line 2536: Unrecognized token: 126
Line 2536: (
Line 2536: ID = sigmask
Line 2536: (
Line 2536: ID = SIGKILL
Line 2536: )
Line 2536: Unrecognized token: 124
Line 2537: ID = sigmask
Line 2537: (
Line 2537: ID = SIGSTOP
Line 2537: )
Line 2537: )
Line 2537: )
Line 2537: ;
Line 2538: ID = recalc_sigpending
Line 2538: (
Line 2538: )
Line 2538: ;
Line 2539: ID = spin_unlock_irq
Line 2539: (
Line 2539: Unrecognized token: 38
Line 2539: ID = current
Line 2539: -
Line 2539: >
Line 2539: ID = sighand
Line 2539: -
Line 2539: >
Line 2539: ID = siglock
Line 2539: )
Line 2539: ;
Line 2541: return
Line 2541: ID = old
Line 2541: ;
Line 2542: }
Line 2543: Unrecognized token: 35
Line 2543: ID = endif
Line 2545: Unrecognized token: 35
Line 2545: ID = ifdef
Line 2545: Unrecognized token: 95
Line 2545: Unrecognized token: 95
Line 2545: ID = ARCH_WANT_SYS_SIGNAL
Line 2549: ID = asmlinkage
Line 2549: ID = unsigned
Line 2549: ID = long
Line 2550: ID = sys_signal
Line 2550: (
Line 2550: int
Line 2550: ID = sig
Line 2550: ,
Line 2550: Unrecognized token: 95
Line 2550: Unrecognized token: 95
Line 2550: ID = sighandler_t
Line 2550: ID = handler
Line 2550: )
Line 2551: {
Line 2552: ID = struct
Line 2552: ID = k_sigaction
Line 2552: ID = new_sa
Line 2552: ,
Line 2552: ID = old_sa
Line 2552: ;
Line 2553: int
Line 2553: ID = ret
Line 2553: ;
Line 2555: ID = new_sa
Line 2555: Unrecognized token: 46
Line 2555: ID = sa
Line 2555: Unrecognized token: 46
Line 2555: ID = sa_handler
Line 2555: =
Line 2555: ID = handler
Line 2555: ;
Line 2556: ID = new_sa
Line 2556: Unrecognized token: 46
Line 2556: ID = sa
Line 2556: Unrecognized token: 46
Line 2556: ID = sa_flags
Line 2556: =
Line 2556: ID = SA_ONESHOT
Line 2556: Unrecognized token: 124
Line 2556: ID = SA_NOMASK
Line 2556: ;
Line 2558: ID = ret
Line 2558: =
Line 2558: ID = do_sigaction
Line 2558: (
Line 2558: ID = sig
Line 2558: ,
Line 2558: Unrecognized token: 38
Line 2558: ID = new_sa
Line 2558: ,
Line 2558: Unrecognized token: 38
Line 2558: ID = old_sa
Line 2558: )
Line 2558: ;
Line 2560: return
Line 2560: ID = ret
Line 2560: Unrecognized token: 63
Line 2560: ID = ret
Line 2560: Unrecognized token: 58
Line 2560: (
Line 2560: ID = unsigned
Line 2560: ID = long
Line 2560: )
Line 2560: ID = old_sa
Line 2560: Unrecognized token: 46
Line 2560: ID = sa
Line 2560: Unrecognized token: 46
Line 2560: ID = sa_handler
Line 2560: ;
Line 2561: }
Line 2562: Unrecognized token: 35
Line 2562: ID = endif
Line 2564: Unrecognized token: 35
Line 2564: ID = ifdef
Line 2564: Unrecognized token: 95
Line 2564: Unrecognized token: 95
Line 2564: ID = ARCH_WANT_SYS_PAUSE
Line 2566: ID = asmlinkage
Line 2566: ID = long
Line 2567: ID = sys_pause
Line 2567: (
Line 2567: void
Line 2567: )
Line 2568: {
Line 2569: ID = current
Line 2569: -
Line 2569: >
Line 2569: ID = state
Line 2569: =
Line 2569: ID = TASK_INTERRUPTIBLE
Line 2569: ;
Line 2570: ID = schedule
Line 2570: (
Line 2570: )
Line 2570: ;
Line 2571: return
Line 2571: -
Line 2571: ID = ERESTARTNOHAND
Line 2571: ;
Line 2572: }
Line 2574: Unrecognized token: 35
Line 2574: ID = endif
Line 2576: void
Line 2576: Unrecognized token: 95
Line 2576: Unrecognized token: 95
Line 2576: ID = init
Line 2576: ID = signals_init
Line 2576: (
Line 2576: void
Line 2576: )
Line 2577: {
Line 2578: ID = sigqueue_cachep
Line 2578: =
Line 2579: ID = kmem_cache_create
Line 2579: (
Line 2579: STRINGCON = "sigqueue"
Line 2579: ,
Line 2580: ID = sizeof
Line 2580: (
Line 2580: ID = struct
Line 2580: ID = sigqueue
Line 2580: )
Line 2580: ,
Line 2581: Unrecognized token: 95
Line 2581: Unrecognized token: 95
Line 2581: ID = alignof__
Line 2581: (
Line 2581: ID = struct
Line 2581: ID = sigqueue
Line 2581: )
Line 2581: ,
Line 2582: ID = SLAB_PANIC
Line 2582: ,
Line 2582: ID = NULL
Line 2582: ,
Line 2582: ID = NULL
Line 2582: )
Line 2582: ;
Line 2583: }
Line 2584: -EOF-

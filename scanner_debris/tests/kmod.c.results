Line 21: Unrecognized token: 35
Line 21: ID = define
Line 21: Unrecognized token: 95
Line 21: Unrecognized token: 95
Line 21: ID = KERNEL_SYSCALLS__
Line 23: Unrecognized token: 35
Line 23: ID = include
Line 23: <
Line 23: ID = linux
Line 23: /
Line 23: ID = config
Line 23: Unrecognized token: 46
Line 23: ID = h
Line 23: >
Line 24: Unrecognized token: 35
Line 24: ID = include
Line 24: <
Line 24: ID = linux
Line 24: /
Line 24: ID = module
Line 24: Unrecognized token: 46
Line 24: ID = h
Line 24: >
Line 25: Unrecognized token: 35
Line 25: ID = include
Line 25: <
Line 25: ID = linux
Line 25: /
Line 25: ID = sched
Line 25: Unrecognized token: 46
Line 25: ID = h
Line 25: >
Line 26: Unrecognized token: 35
Line 26: ID = include
Line 26: <
Line 26: ID = linux
Line 26: /
Line 26: ID = syscalls
Line 26: Unrecognized token: 46
Line 26: ID = h
Line 26: >
Line 27: Unrecognized token: 35
Line 27: ID = include
Line 27: <
Line 27: ID = linux
Line 27: /
Line 27: ID = unistd
Line 27: Unrecognized token: 46
Line 27: ID = h
Line 27: >
Line 28: Unrecognized token: 35
Line 28: ID = include
Line 28: <
Line 28: ID = linux
Line 28: /
Line 28: ID = kmod
Line 28: Unrecognized token: 46
Line 28: ID = h
Line 28: >
Line 29: Unrecognized token: 35
Line 29: ID = include
Line 29: <
Line 29: ID = linux
Line 29: /
Line 29: ID = smp_lock
Line 29: Unrecognized token: 46
Line 29: ID = h
Line 29: >
Line 30: Unrecognized token: 35
Line 30: ID = include
Line 30: <
Line 30: ID = linux
Line 30: /
Line 30: ID = slab
Line 30: Unrecognized token: 46
Line 30: ID = h
Line 30: >
Line 31: Unrecognized token: 35
Line 31: ID = include
Line 31: <
Line 31: ID = linux
Line 31: /
Line 31: ID = namespace
Line 31: Unrecognized token: 46
Line 31: ID = h
Line 31: >
Line 32: Unrecognized token: 35
Line 32: ID = include
Line 32: <
Line 32: ID = linux
Line 32: /
Line 32: ID = completion
Line 32: Unrecognized token: 46
Line 32: ID = h
Line 32: >
Line 33: Unrecognized token: 35
Line 33: ID = include
Line 33: <
Line 33: ID = linux
Line 33: /
Line 33: ID = file
Line 33: Unrecognized token: 46
Line 33: ID = h
Line 33: >
Line 34: Unrecognized token: 35
Line 34: ID = include
Line 34: <
Line 34: ID = linux
Line 34: /
Line 34: ID = workqueue
Line 34: Unrecognized token: 46
Line 34: ID = h
Line 34: >
Line 35: Unrecognized token: 35
Line 35: ID = include
Line 35: <
Line 35: ID = linux
Line 35: /
Line 35: ID = security
Line 35: Unrecognized token: 46
Line 35: ID = h
Line 35: >
Line 36: Unrecognized token: 35
Line 36: ID = include
Line 36: <
Line 36: ID = linux
Line 36: /
Line 36: ID = mount
Line 36: Unrecognized token: 46
Line 36: ID = h
Line 36: >
Line 37: Unrecognized token: 35
Line 37: ID = include
Line 37: <
Line 37: ID = linux
Line 37: /
Line 37: ID = kernel
Line 37: Unrecognized token: 46
Line 37: ID = h
Line 37: >
Line 38: Unrecognized token: 35
Line 38: ID = include
Line 38: <
Line 38: ID = linux
Line 38: /
Line 38: ID = init
Line 38: Unrecognized token: 46
Line 38: ID = h
Line 38: >
Line 39: Unrecognized token: 35
Line 39: ID = include
Line 39: <
Line 39: ID = asm
Line 39: /
Line 39: ID = uaccess
Line 39: Unrecognized token: 46
Line 39: ID = h
Line 39: >
Line 41: extern
Line 41: int
Line 41: ID = max_threads
Line 41: ;
Line 43: ID = static
Line 43: ID = struct
Line 43: ID = workqueue_struct
Line 43: *
Line 43: ID = khelper_wq
Line 43: ;
Line 45: Unrecognized token: 35
Line 45: ID = ifdef
Line 45: ID = CONFIG_KMOD
Line 50: char
Line 50: ID = modprobe_path
Line 50: [
Line 50: ID = KMOD_PATH_LEN
Line 50: ]
Line 50: =
Line 50: STRINGCON = "/sbin/modprobe"
Line 50: ;
Line 66: int
Line 66: ID = request_module
Line 66: (
Line 66: ID = const
Line 66: char
Line 66: *
Line 66: ID = fmt
Line 66: ,
Line 66: Unrecognized token: 46
Line 66: Unrecognized token: 46
Line 66: Unrecognized token: 46
Line 66: )
Line 67: {
Line 68: ID = va_list
Line 68: ID = args
Line 68: ;
Line 69: char
Line 69: ID = module_name
Line 69: [
Line 69: ID = MODULE_NAME_LEN
Line 69: ]
Line 69: ;
Line 70: ID = unsigned
Line 70: int
Line 70: ID = max_modprobes
Line 70: ;
Line 71: int
Line 71: ID = ret
Line 71: ;
Line 72: char
Line 72: *
Line 72: ID = argv
Line 72: [
Line 72: ]
Line 72: =
Line 72: {
Line 72: ID = modprobe_path
Line 72: ,
Line 72: STRINGCON = "-q"
Line 72: ,
Line 72: STRINGCON = "--"
Line 72: ,
Line 72: ID = module_name
Line 72: ,
Line 72: ID = NULL
Line 72: }
Line 72: ;
Line 73: ID = static
Line 73: char
Line 73: *
Line 73: ID = envp
Line 73: [
Line 73: ]
Line 73: =
Line 73: {
Line 73: STRINGCON = "HOME=/"
Line 73: ,
Line 74: STRINGCON = "TERM=linux"
Line 74: ,
Line 75: STRINGCON = "PATH=/sbin:/usr/sbin:/bin:/usr/bin"
Line 75: ,
Line 76: ID = NULL
Line 76: }
Line 76: ;
Line 77: ID = static
Line 77: ID = atomic_t
Line 77: ID = kmod_concurrent
Line 77: =
Line 77: ID = ATOMIC_INIT
Line 77: (
Line 77: INTCON = 0
Line 77: )
Line 77: ;
Line 78: Unrecognized token: 35
Line 78: ID = define
Line 78: ID = MAX_KMOD_CONCURRENT
Line 78: INTCON = 50
Line 79: ID = static
Line 79: int
Line 79: ID = kmod_loop_msg
Line 79: ;
Line 81: ID = va_start
Line 81: (
Line 81: ID = args
Line 81: ,
Line 81: ID = fmt
Line 81: )
Line 81: ;
Line 82: ID = ret
Line 82: =
Line 82: ID = vsnprintf
Line 82: (
Line 82: ID = module_name
Line 82: ,
Line 82: ID = MODULE_NAME_LEN
Line 82: ,
Line 82: ID = fmt
Line 82: ,
Line 82: ID = args
Line 82: )
Line 82: ;
Line 83: ID = va_end
Line 83: (
Line 83: ID = args
Line 83: )
Line 83: ;
Line 84: if
Line 84: (
Line 84: ID = ret
Line 84: >=
Line 84: ID = MODULE_NAME_LEN
Line 84: )
Line 85: return
Line 85: -
Line 85: ID = ENAMETOOLONG
Line 85: ;
Line 99: ID = max_modprobes
Line 99: =
Line 99: ID = min
Line 99: (
Line 99: ID = max_threads
Line 99: /
Line 99: INTCON = 2
Line 99: ,
Line 99: ID = MAX_KMOD_CONCURRENT
Line 99: )
Line 99: ;
Line 100: ID = atomic_inc
Line 100: (
Line 100: Unrecognized token: 38
Line 100: ID = kmod_concurrent
Line 100: )
Line 100: ;
Line 101: if
Line 101: (
Line 101: ID = atomic_read
Line 101: (
Line 101: Unrecognized token: 38
Line 101: ID = kmod_concurrent
Line 101: )
Line 101: >
Line 101: ID = max_modprobes
Line 101: )
Line 101: {
Line 103: if
Line 103: (
Line 103: ID = kmod_loop_msg
Line 103: +
Line 103: +
Line 103: <
Line 103: INTCON = 5
Line 103: )
Line 104: ID = printk
Line 104: (
Line 104: ID = KERN_ERR
Line 105: STRINGCON = "request_module: runaway loop modprobe %s\n"
Line 105: ,
Line 106: ID = module_name
Line 106: )
Line 106: ;
Line 107: ID = atomic_dec
Line 107: (
Line 107: Unrecognized token: 38
Line 107: ID = kmod_concurrent
Line 107: )
Line 107: ;
Line 108: return
Line 108: -
Line 108: ID = ENOMEM
Line 108: ;
Line 109: }
Line 111: ID = ret
Line 111: =
Line 111: ID = call_usermodehelper
Line 111: (
Line 111: ID = modprobe_path
Line 111: ,
Line 111: ID = argv
Line 111: ,
Line 111: ID = envp
Line 111: ,
Line 111: INTCON = 1
Line 111: )
Line 111: ;
Line 112: ID = atomic_dec
Line 112: (
Line 112: Unrecognized token: 38
Line 112: ID = kmod_concurrent
Line 112: )
Line 112: ;
Line 113: return
Line 113: ID = ret
Line 113: ;
Line 114: }
Line 115: ID = EXPORT_SYMBOL
Line 115: (
Line 115: ID = request_module
Line 115: )
Line 115: ;
Line 116: Unrecognized token: 35
Line 116: ID = endif
Line 118: Unrecognized token: 35
Line 118: ID = ifdef
Line 118: ID = CONFIG_HOTPLUG
Line 135: char
Line 135: ID = hotplug_path
Line 135: [
Line 135: ID = KMOD_PATH_LEN
Line 135: ]
Line 135: =
Line 135: STRINGCON = "/sbin/hotplug"
Line 135: ;
Line 137: ID = EXPORT_SYMBOL
Line 137: (
Line 137: ID = hotplug_path
Line 137: )
Line 137: ;
Line 139: Unrecognized token: 35
Line 139: ID = endif
Line 141: ID = struct
Line 141: ID = subprocess_info
Line 141: {
Line 142: ID = struct
Line 142: ID = completion
Line 142: *
Line 142: ID = complete
Line 142: ;
Line 143: char
Line 143: *
Line 143: ID = path
Line 143: ;
Line 144: char
Line 144: *
Line 144: *
Line 144: ID = argv
Line 144: ;
Line 145: char
Line 145: *
Line 145: *
Line 145: ID = envp
Line 145: ;
Line 146: int
Line 146: ID = wait
Line 146: ;
Line 147: int
Line 147: ID = retval
Line 147: ;
Line 148: }
Line 148: ;
Line 153: ID = static
Line 153: int
Line 153: Unrecognized token: 95
Line 153: Unrecognized token: 95
Line 153: Unrecognized token: 95
Line 153: Unrecognized token: 95
Line 153: ID = call_usermodehelper
Line 153: (
Line 153: void
Line 153: *
Line 153: ID = data
Line 153: )
Line 154: {
Line 155: ID = struct
Line 155: ID = subprocess_info
Line 155: *
Line 155: ID = sub_info
Line 155: =
Line 155: ID = data
Line 155: ;
Line 156: int
Line 156: ID = retval
Line 156: ;
Line 159: ID = flush_signals
Line 159: (
Line 159: ID = current
Line 159: )
Line 159: ;
Line 160: ID = spin_lock_irq
Line 160: (
Line 160: Unrecognized token: 38
Line 160: ID = current
Line 160: -
Line 160: >
Line 160: ID = sighand
Line 160: -
Line 160: >
Line 160: ID = siglock
Line 160: )
Line 160: ;
Line 161: ID = flush_signal_handlers
Line 161: (
Line 161: ID = current
Line 161: ,
Line 161: INTCON = 1
Line 161: )
Line 161: ;
Line 162: ID = sigemptyset
Line 162: (
Line 162: Unrecognized token: 38
Line 162: ID = current
Line 162: -
Line 162: >
Line 162: ID = blocked
Line 162: )
Line 162: ;
Line 163: ID = recalc_sigpending
Line 163: (
Line 163: )
Line 163: ;
Line 164: ID = spin_unlock_irq
Line 164: (
Line 164: Unrecognized token: 38
Line 164: ID = current
Line 164: -
Line 164: >
Line 164: ID = sighand
Line 164: -
Line 164: >
Line 164: ID = siglock
Line 164: )
Line 164: ;
Line 167: ID = set_cpus_allowed
Line 167: (
Line 167: ID = current
Line 167: ,
Line 167: ID = CPU_MASK_ALL
Line 167: )
Line 167: ;
Line 169: ID = retval
Line 169: =
Line 169: -
Line 169: ID = EPERM
Line 169: ;
Line 170: if
Line 170: (
Line 170: ID = current
Line 170: -
Line 170: >
Line 170: ID = fs
Line 170: -
Line 170: >
Line 170: ID = root
Line 170: )
Line 171: ID = retval
Line 171: =
Line 171: ID = execve
Line 171: (
Line 171: ID = sub_info
Line 171: -
Line 171: >
Line 171: ID = path
Line 171: ,
Line 171: ID = sub_info
Line 171: -
Line 171: >
Line 171: ID = argv
Line 171: ,
Line 171: ID = sub_info
Line 171: -
Line 171: >
Line 171: ID = envp
Line 171: )
Line 171: ;
Line 174: ID = sub_info
Line 174: -
Line 174: >
Line 174: ID = retval
Line 174: =
Line 174: ID = retval
Line 174: ;
Line 175: ID = do_exit
Line 175: (
Line 175: INTCON = 0
Line 175: )
Line 175: ;
Line 176: }
Line 179: ID = static
Line 179: int
Line 179: ID = wait_for_helper
Line 179: (
Line 179: void
Line 179: *
Line 179: ID = data
Line 179: )
Line 180: {
Line 181: ID = struct
Line 181: ID = subprocess_info
Line 181: *
Line 181: ID = sub_info
Line 181: =
Line 181: ID = data
Line 181: ;
Line 182: ID = pid_t
Line 182: ID = pid
Line 182: ;
Line 183: ID = struct
Line 183: ID = k_sigaction
Line 183: ID = sa
Line 183: ;
Line 187: ID = sa
Line 187: Unrecognized token: 46
Line 187: ID = sa
Line 187: Unrecognized token: 46
Line 187: ID = sa_handler
Line 187: =
Line 187: ID = SIG_IGN
Line 187: ;
Line 188: ID = sa
Line 188: Unrecognized token: 46
Line 188: ID = sa
Line 188: Unrecognized token: 46
Line 188: ID = sa_flags
Line 188: =
Line 188: INTCON = 0
Line 188: ;
Line 189: ID = siginitset
Line 189: (
Line 189: Unrecognized token: 38
Line 189: ID = sa
Line 189: Unrecognized token: 46
Line 189: ID = sa
Line 189: Unrecognized token: 46
Line 189: ID = sa_mask
Line 189: ,
Line 189: ID = sigmask
Line 189: (
Line 189: ID = SIGCHLD
Line 189: )
Line 189: )
Line 189: ;
Line 190: ID = do_sigaction
Line 190: (
Line 190: ID = SIGCHLD
Line 190: ,
Line 190: Unrecognized token: 38
Line 190: ID = sa
Line 190: ,
Line 190: (
Line 190: ID = struct
Line 190: ID = k_sigaction
Line 190: *
Line 190: )
Line 190: INTCON = 0
Line 190: )
Line 190: ;
Line 191: ID = allow_signal
Line 191: (
Line 191: ID = SIGCHLD
Line 191: )
Line 191: ;
Line 193: ID = pid
Line 193: =
Line 193: ID = kernel_thread
Line 193: (
Line 193: Unrecognized token: 95
Line 193: Unrecognized token: 95
Line 193: Unrecognized token: 95
Line 193: Unrecognized token: 95
Line 193: ID = call_usermodehelper
Line 193: ,
Line 193: ID = sub_info
Line 193: ,
Line 193: ID = SIGCHLD
Line 193: )
Line 193: ;
Line 194: if
Line 194: (
Line 194: ID = pid
Line 194: <
Line 194: INTCON = 0
Line 194: )
Line 194: {
Line 195: ID = sub_info
Line 195: -
Line 195: >
Line 195: ID = retval
Line 195: =
Line 195: ID = pid
Line 195: ;
Line 196: }
Line 196: else
Line 196: {
Line 206: ID = sys_wait4
Line 206: (
Line 206: ID = pid
Line 206: ,
Line 206: (
Line 206: int
Line 206: Unrecognized token: 95
Line 206: Unrecognized token: 95
Line 206: ID = user
Line 206: *
Line 206: )
Line 206: Unrecognized token: 38
Line 206: ID = sub_info
Line 206: -
Line 206: >
Line 206: ID = retval
Line 206: ,
Line 206: INTCON = 0
Line 206: ,
Line 206: ID = NULL
Line 206: )
Line 206: ;
Line 207: }
Line 209: ID = complete
Line 209: (
Line 209: ID = sub_info
Line 209: -
Line 209: >
Line 209: ID = complete
Line 209: )
Line 209: ;
Line 210: return
Line 210: INTCON = 0
Line 210: ;
Line 211: }
Line 214: ID = static
Line 214: void
Line 214: Unrecognized token: 95
Line 214: Unrecognized token: 95
Line 214: ID = call_usermodehelper
Line 214: (
Line 214: void
Line 214: *
Line 214: ID = data
Line 214: )
Line 215: {
Line 216: ID = struct
Line 216: ID = subprocess_info
Line 216: *
Line 216: ID = sub_info
Line 216: =
Line 216: ID = data
Line 216: ;
Line 217: ID = pid_t
Line 217: ID = pid
Line 217: ;
Line 222: if
Line 222: (
Line 222: ID = sub_info
Line 222: -
Line 222: >
Line 222: ID = wait
Line 222: )
Line 223: ID = pid
Line 223: =
Line 223: ID = kernel_thread
Line 223: (
Line 223: ID = wait_for_helper
Line 223: ,
Line 223: ID = sub_info
Line 223: ,
Line 224: ID = CLONE_FS
Line 224: Unrecognized token: 124
Line 224: ID = CLONE_FILES
Line 224: Unrecognized token: 124
Line 224: ID = SIGCHLD
Line 224: )
Line 224: ;
Line 225: else
Line 226: ID = pid
Line 226: =
Line 226: ID = kernel_thread
Line 226: (
Line 226: Unrecognized token: 95
Line 226: Unrecognized token: 95
Line 226: Unrecognized token: 95
Line 226: Unrecognized token: 95
Line 226: ID = call_usermodehelper
Line 226: ,
Line 226: ID = sub_info
Line 226: ,
Line 227: ID = CLONE_VFORK
Line 227: Unrecognized token: 124
Line 227: ID = SIGCHLD
Line 227: )
Line 227: ;
Line 229: if
Line 229: (
Line 229: ID = pid
Line 229: <
Line 229: INTCON = 0
Line 229: )
Line 229: {
Line 230: ID = sub_info
Line 230: -
Line 230: >
Line 230: ID = retval
Line 230: =
Line 230: ID = pid
Line 230: ;
Line 231: ID = complete
Line 231: (
Line 231: ID = sub_info
Line 231: -
Line 231: >
Line 231: ID = complete
Line 231: )
Line 231: ;
Line 232: }
Line 232: else
Line 232: if
Line 232: (
Line 232: !
Line 232: ID = sub_info
Line 232: -
Line 232: >
Line 232: ID = wait
Line 232: )
Line 233: ID = complete
Line 233: (
Line 233: ID = sub_info
Line 233: -
Line 233: >
Line 233: ID = complete
Line 233: )
Line 233: ;
Line 234: }
Line 250: int
Line 250: ID = call_usermodehelper
Line 250: (
Line 250: char
Line 250: *
Line 250: ID = path
Line 250: ,
Line 250: char
Line 250: *
Line 250: *
Line 250: ID = argv
Line 250: ,
Line 250: char
Line 250: *
Line 250: *
Line 250: ID = envp
Line 250: ,
Line 250: int
Line 250: ID = wait
Line 250: )
Line 251: {
Line 252: ID = DECLARE_COMPLETION
Line 252: (
Line 252: ID = done
Line 252: )
Line 252: ;
Line 253: ID = struct
Line 253: ID = subprocess_info
Line 253: ID = sub_info
Line 253: =
Line 253: {
Line 254: Unrecognized token: 46
Line 254: ID = complete
Line 254: =
Line 254: Unrecognized token: 38
Line 254: ID = done
Line 254: ,
Line 255: Unrecognized token: 46
Line 255: ID = path
Line 255: =
Line 255: ID = path
Line 255: ,
Line 256: Unrecognized token: 46
Line 256: ID = argv
Line 256: =
Line 256: ID = argv
Line 256: ,
Line 257: Unrecognized token: 46
Line 257: ID = envp
Line 257: =
Line 257: ID = envp
Line 257: ,
Line 258: Unrecognized token: 46
Line 258: ID = wait
Line 258: =
Line 258: ID = wait
Line 258: ,
Line 259: Unrecognized token: 46
Line 259: ID = retval
Line 259: =
Line 259: INTCON = 0
Line 259: ,
Line 260: }
Line 260: ;
Line 261: ID = DECLARE_WORK
Line 261: (
Line 261: ID = work
Line 261: ,
Line 261: Unrecognized token: 95
Line 261: Unrecognized token: 95
Line 261: ID = call_usermodehelper
Line 261: ,
Line 261: Unrecognized token: 38
Line 261: ID = sub_info
Line 261: )
Line 261: ;
Line 263: if
Line 263: (
Line 263: !
Line 263: ID = khelper_wq
Line 263: )
Line 264: return
Line 264: -
Line 264: ID = EBUSY
Line 264: ;
Line 266: if
Line 266: (
Line 266: ID = path
Line 266: [
Line 266: INTCON = 0
Line 266: ]
Line 266: ==
Line 266: CHARCON = '\0'
Line 266: )
Line 267: return
Line 267: INTCON = 0
Line 267: ;
Line 269: ID = queue_work
Line 269: (
Line 269: ID = khelper_wq
Line 269: ,
Line 269: Unrecognized token: 38
Line 269: ID = work
Line 269: )
Line 269: ;
Line 270: ID = wait_for_completion
Line 270: (
Line 270: Unrecognized token: 38
Line 270: ID = done
Line 270: )
Line 270: ;
Line 271: return
Line 271: ID = sub_info
Line 271: Unrecognized token: 46
Line 271: ID = retval
Line 271: ;
Line 272: }
Line 273: ID = EXPORT_SYMBOL
Line 273: (
Line 273: ID = call_usermodehelper
Line 273: )
Line 273: ;
Line 275: ID = static
Line 275: Unrecognized token: 95
Line 275: Unrecognized token: 95
Line 275: ID = init
Line 275: int
Line 275: ID = usermodehelper_init
Line 275: (
Line 275: void
Line 275: )
Line 276: {
Line 277: ID = khelper_wq
Line 277: =
Line 277: ID = create_singlethread_workqueue
Line 277: (
Line 277: STRINGCON = "khelper"
Line 277: )
Line 277: ;
Line 278: ID = BUG_ON
Line 278: (
Line 278: !
Line 278: ID = khelper_wq
Line 278: )
Line 278: ;
Line 279: return
Line 279: INTCON = 0
Line 279: ;
Line 280: }
Line 281: ID = core_initcall
Line 281: (
Line 281: ID = usermodehelper_init
Line 281: )
Line 281: ;
Line 282: -EOF-
